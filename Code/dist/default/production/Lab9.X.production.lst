

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Mar 31 16:50:50 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00DA25                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _wrap
    75  00DA25  01                 	db	1
    76                           
    77                           ;initializer for _EWLT_Count
    78  00DA26  30                 	db	48
    79  00DA27  30                 	db	48
    80  00DA28  00                 	db	0
    81                           
    82                           ;initializer for _EW_Count
    83  00DA29  30                 	db	48
    84  00DA2A  30                 	db	48
    85  00DA2B  00                 	db	0
    86                           
    87                           ;initializer for _NSLT_Count
    88  00DA2C  30                 	db	48
    89  00DA2D  30                 	db	48
    90  00DA2E  00                 	db	0
    91                           
    92                           ;initializer for _NS_Count
    93  00DA2F  30                 	db	48
    94  00DA30  30                 	db	48
    95  00DA31  00                 	db	0
    96                           
    97                           ;initializer for _PED_EW_Count
    98  00DA32  30                 	db	48
    99  00DA33  30                 	db	48
   100  00DA34  00                 	db	0
   101                           
   102                           ;initializer for _PED_NS_Count
   103  00DA35  30                 	db	48
   104  00DA36  30                 	db	48
   105  00DA37  00                 	db	0
   106                           
   107                           ;initializer for _Act_Mode_Txt
   108  00DA38  44                 	db	68
   109  00DA39  00                 	db	0
   110                           
   111                           ;initializer for _FlashingR_Txt
   112  00DA3A  30                 	db	48
   113  00DA3B  00                 	db	0
   114                           
   115                           ;initializer for _FlashingS_Txt
   116  00DA3C  30                 	db	48
   117  00DA3D  00                 	db	0
   118                           
   119                           ;initializer for _SW_EWLT_Txt
   120  00DA3E  30                 	db	48
   121  00DA3F  00                 	db	0
   122                           
   123                           ;initializer for _SW_EWPED_Txt
   124  00DA40  30                 	db	48
   125  00DA41  00                 	db	0
   126                           
   127                           ;initializer for _SW_MODE_Txt
   128  00DA42  44                 	db	68
   129  00DA43  00                 	db	0
   130                           
   131                           ;initializer for _SW_NSLT_Txt
   132  00DA44  30                 	db	48
   133  00DA45  00                 	db	0
   134                           
   135                           ;initializer for _SW_NSPED_Txt
   136  00DA46  30                 	db	48
   137  00DA47  00                 	db	0
   138                           
   139                           	psect	mediumconst
   140  00FDBA                     __pmediumconst:
   141                           	opt stack 0
   142  00FDBA  00                 	db	0
   143  00FDBB                     _font:
   144                           	opt stack 0
   145  00FDBB  00                 	db	0
   146  00FDBC  00                 	db	0
   147  00FDBD  00                 	db	0
   148  00FDBE  00                 	db	0
   149  00FDBF  00                 	db	0
   150  00FDC0  00                 	db	0
   151  00FDC1  00                 	db	0
   152  00FDC2  5F                 	db	95
   153  00FDC3  00                 	db	0
   154  00FDC4  00                 	db	0
   155  00FDC5  00                 	db	0
   156  00FDC6  07                 	db	7
   157  00FDC7  00                 	db	0
   158  00FDC8  07                 	db	7
   159  00FDC9  00                 	db	0
   160  00FDCA  14                 	db	20
   161  00FDCB  7F                 	db	127
   162  00FDCC  14                 	db	20
   163  00FDCD  7F                 	db	127
   164  00FDCE  14                 	db	20
   165  00FDCF  24                 	db	36
   166  00FDD0  2A                 	db	42
   167  00FDD1  7F                 	db	127
   168  00FDD2  2A                 	db	42
   169  00FDD3  12                 	db	18
   170  00FDD4  23                 	db	35
   171  00FDD5  13                 	db	19
   172  00FDD6  08                 	db	8
   173  00FDD7  64                 	db	100
   174  00FDD8  62                 	db	98
   175  00FDD9  36                 	db	54
   176  00FDDA  49                 	db	73
   177  00FDDB  56                 	db	86
   178  00FDDC  20                 	db	32
   179  00FDDD  50                 	db	80
   180  00FDDE  00                 	db	0
   181  00FDDF  08                 	db	8
   182  00FDE0  07                 	db	7
   183  00FDE1  03                 	db	3
   184  00FDE2  00                 	db	0
   185  00FDE3  00                 	db	0
   186  00FDE4  1C                 	db	28
   187  00FDE5  22                 	db	34
   188  00FDE6  41                 	db	65
   189  00FDE7  00                 	db	0
   190  00FDE8  00                 	db	0
   191  00FDE9  41                 	db	65
   192  00FDEA  22                 	db	34
   193  00FDEB  1C                 	db	28
   194  00FDEC  00                 	db	0
   195  00FDED  2A                 	db	42
   196  00FDEE  1C                 	db	28
   197  00FDEF  7F                 	db	127
   198  00FDF0  1C                 	db	28
   199  00FDF1  2A                 	db	42
   200  00FDF2  08                 	db	8
   201  00FDF3  08                 	db	8
   202  00FDF4  3E                 	db	62
   203  00FDF5  08                 	db	8
   204  00FDF6  08                 	db	8
   205  00FDF7  00                 	db	0
   206  00FDF8  80                 	db	128
   207  00FDF9  70                 	db	112
   208  00FDFA  30                 	db	48
   209  00FDFB  00                 	db	0
   210  00FDFC  08                 	db	8
   211  00FDFD  08                 	db	8
   212  00FDFE  08                 	db	8
   213  00FDFF  08                 	db	8
   214  00FE00  08                 	db	8
   215  00FE01  00                 	db	0
   216  00FE02  00                 	db	0
   217  00FE03  60                 	db	96
   218  00FE04  60                 	db	96
   219  00FE05  00                 	db	0
   220  00FE06  20                 	db	32
   221  00FE07  10                 	db	16
   222  00FE08  08                 	db	8
   223  00FE09  04                 	db	4
   224  00FE0A  02                 	db	2
   225  00FE0B  3E                 	db	62
   226  00FE0C  51                 	db	81
   227  00FE0D  49                 	db	73
   228  00FE0E  45                 	db	69
   229  00FE0F  3E                 	db	62
   230  00FE10  00                 	db	0
   231  00FE11  42                 	db	66
   232  00FE12  7F                 	db	127
   233  00FE13  40                 	db	64
   234  00FE14  00                 	db	0
   235  00FE15  72                 	db	114
   236  00FE16  49                 	db	73
   237  00FE17  49                 	db	73
   238  00FE18  49                 	db	73
   239  00FE19  46                 	db	70
   240  00FE1A  21                 	db	33
   241  00FE1B  41                 	db	65
   242  00FE1C  49                 	db	73
   243  00FE1D  4D                 	db	77
   244  00FE1E  33                 	db	51
   245  00FE1F  18                 	db	24
   246  00FE20  14                 	db	20
   247  00FE21  12                 	db	18
   248  00FE22  7F                 	db	127
   249  00FE23  10                 	db	16
   250  00FE24  27                 	db	39
   251  00FE25  45                 	db	69
   252  00FE26  45                 	db	69
   253  00FE27  45                 	db	69
   254  00FE28  39                 	db	57
   255  00FE29  3C                 	db	60
   256  00FE2A  4A                 	db	74
   257  00FE2B  49                 	db	73
   258  00FE2C  49                 	db	73
   259  00FE2D  31                 	db	49
   260  00FE2E  41                 	db	65
   261  00FE2F  21                 	db	33
   262  00FE30  11                 	db	17
   263  00FE31  09                 	db	9
   264  00FE32  07                 	db	7
   265  00FE33  36                 	db	54
   266  00FE34  49                 	db	73
   267  00FE35  49                 	db	73
   268  00FE36  49                 	db	73
   269  00FE37  36                 	db	54
   270  00FE38  46                 	db	70
   271  00FE39  49                 	db	73
   272  00FE3A  49                 	db	73
   273  00FE3B  29                 	db	41
   274  00FE3C  1E                 	db	30
   275  00FE3D  00                 	db	0
   276  00FE3E  00                 	db	0
   277  00FE3F  14                 	db	20
   278  00FE40  00                 	db	0
   279  00FE41  00                 	db	0
   280  00FE42  00                 	db	0
   281  00FE43  40                 	db	64
   282  00FE44  34                 	db	52
   283  00FE45  00                 	db	0
   284  00FE46  00                 	db	0
   285  00FE47  00                 	db	0
   286  00FE48  08                 	db	8
   287  00FE49  14                 	db	20
   288  00FE4A  22                 	db	34
   289  00FE4B  41                 	db	65
   290  00FE4C  14                 	db	20
   291  00FE4D  14                 	db	20
   292  00FE4E  14                 	db	20
   293  00FE4F  14                 	db	20
   294  00FE50  14                 	db	20
   295  00FE51  00                 	db	0
   296  00FE52  41                 	db	65
   297  00FE53  22                 	db	34
   298  00FE54  14                 	db	20
   299  00FE55  08                 	db	8
   300  00FE56  02                 	db	2
   301  00FE57  01                 	db	1
   302  00FE58  59                 	db	89
   303  00FE59  09                 	db	9
   304  00FE5A  06                 	db	6
   305  00FE5B  3E                 	db	62
   306  00FE5C  41                 	db	65
   307  00FE5D  5D                 	db	93
   308  00FE5E  59                 	db	89
   309  00FE5F  4E                 	db	78
   310  00FE60  7C                 	db	124
   311  00FE61  12                 	db	18
   312  00FE62  11                 	db	17
   313  00FE63  12                 	db	18
   314  00FE64  7C                 	db	124
   315  00FE65  7F                 	db	127
   316  00FE66  49                 	db	73
   317  00FE67  49                 	db	73
   318  00FE68  49                 	db	73
   319  00FE69  36                 	db	54
   320  00FE6A  3E                 	db	62
   321  00FE6B  41                 	db	65
   322  00FE6C  41                 	db	65
   323  00FE6D  41                 	db	65
   324  00FE6E  22                 	db	34
   325  00FE6F  7F                 	db	127
   326  00FE70  41                 	db	65
   327  00FE71  41                 	db	65
   328  00FE72  41                 	db	65
   329  00FE73  3E                 	db	62
   330  00FE74  7F                 	db	127
   331  00FE75  49                 	db	73
   332  00FE76  49                 	db	73
   333  00FE77  49                 	db	73
   334  00FE78  41                 	db	65
   335  00FE79  7F                 	db	127
   336  00FE7A  09                 	db	9
   337  00FE7B  09                 	db	9
   338  00FE7C  09                 	db	9
   339  00FE7D  01                 	db	1
   340  00FE7E  3E                 	db	62
   341  00FE7F  41                 	db	65
   342  00FE80  41                 	db	65
   343  00FE81  51                 	db	81
   344  00FE82  73                 	db	115
   345  00FE83  7F                 	db	127
   346  00FE84  08                 	db	8
   347  00FE85  08                 	db	8
   348  00FE86  08                 	db	8
   349  00FE87  7F                 	db	127
   350  00FE88  00                 	db	0
   351  00FE89  41                 	db	65
   352  00FE8A  7F                 	db	127
   353  00FE8B  41                 	db	65
   354  00FE8C  00                 	db	0
   355  00FE8D  20                 	db	32
   356  00FE8E  40                 	db	64
   357  00FE8F  41                 	db	65
   358  00FE90  3F                 	db	63
   359  00FE91  01                 	db	1
   360  00FE92  7F                 	db	127
   361  00FE93  08                 	db	8
   362  00FE94  14                 	db	20
   363  00FE95  22                 	db	34
   364  00FE96  41                 	db	65
   365  00FE97  7F                 	db	127
   366  00FE98  40                 	db	64
   367  00FE99  40                 	db	64
   368  00FE9A  40                 	db	64
   369  00FE9B  40                 	db	64
   370  00FE9C  7F                 	db	127
   371  00FE9D  02                 	db	2
   372  00FE9E  1C                 	db	28
   373  00FE9F  02                 	db	2
   374  00FEA0  7F                 	db	127
   375  00FEA1  7F                 	db	127
   376  00FEA2  04                 	db	4
   377  00FEA3  08                 	db	8
   378  00FEA4  10                 	db	16
   379  00FEA5  7F                 	db	127
   380  00FEA6  3E                 	db	62
   381  00FEA7  41                 	db	65
   382  00FEA8  41                 	db	65
   383  00FEA9  41                 	db	65
   384  00FEAA  3E                 	db	62
   385  00FEAB  7F                 	db	127
   386  00FEAC  09                 	db	9
   387  00FEAD  09                 	db	9
   388  00FEAE  09                 	db	9
   389  00FEAF  06                 	db	6
   390  00FEB0  3E                 	db	62
   391  00FEB1  41                 	db	65
   392  00FEB2  51                 	db	81
   393  00FEB3  21                 	db	33
   394  00FEB4  5E                 	db	94
   395  00FEB5  7F                 	db	127
   396  00FEB6  09                 	db	9
   397  00FEB7  19                 	db	25
   398  00FEB8  29                 	db	41
   399  00FEB9  46                 	db	70
   400  00FEBA                     __end_of_font:
   401                           	opt stack 0
   402  00FEBA                     _font2:
   403                           	opt stack 0
   404  00FEBA  26                 	db	38
   405  00FEBB  49                 	db	73
   406  00FEBC  49                 	db	73
   407  00FEBD  49                 	db	73
   408  00FEBE  32                 	db	50
   409  00FEBF  03                 	db	3
   410  00FEC0  01                 	db	1
   411  00FEC1  7F                 	db	127
   412  00FEC2  01                 	db	1
   413  00FEC3  03                 	db	3
   414  00FEC4  3F                 	db	63
   415  00FEC5  40                 	db	64
   416  00FEC6  40                 	db	64
   417  00FEC7  40                 	db	64
   418  00FEC8  3F                 	db	63
   419  00FEC9  1F                 	db	31
   420  00FECA  20                 	db	32
   421  00FECB  40                 	db	64
   422  00FECC  20                 	db	32
   423  00FECD  1F                 	db	31
   424  00FECE  3F                 	db	63
   425  00FECF  40                 	db	64
   426  00FED0  38                 	db	56
   427  00FED1  40                 	db	64
   428  00FED2  3F                 	db	63
   429  00FED3  63                 	db	99
   430  00FED4  14                 	db	20
   431  00FED5  08                 	db	8
   432  00FED6  14                 	db	20
   433  00FED7  63                 	db	99
   434  00FED8  03                 	db	3
   435  00FED9  04                 	db	4
   436  00FEDA  78                 	db	120
   437  00FEDB  04                 	db	4
   438  00FEDC  03                 	db	3
   439  00FEDD  61                 	db	97
   440  00FEDE  59                 	db	89
   441  00FEDF  49                 	db	73
   442  00FEE0  4D                 	db	77
   443  00FEE1  43                 	db	67
   444  00FEE2  00                 	db	0
   445  00FEE3  7F                 	db	127
   446  00FEE4  41                 	db	65
   447  00FEE5  41                 	db	65
   448  00FEE6  41                 	db	65
   449  00FEE7  02                 	db	2
   450  00FEE8  04                 	db	4
   451  00FEE9  08                 	db	8
   452  00FEEA  10                 	db	16
   453  00FEEB  20                 	db	32
   454  00FEEC  00                 	db	0
   455  00FEED  41                 	db	65
   456  00FEEE  41                 	db	65
   457  00FEEF  41                 	db	65
   458  00FEF0  7F                 	db	127
   459  00FEF1  04                 	db	4
   460  00FEF2  02                 	db	2
   461  00FEF3  01                 	db	1
   462  00FEF4  02                 	db	2
   463  00FEF5  04                 	db	4
   464  00FEF6  40                 	db	64
   465  00FEF7  40                 	db	64
   466  00FEF8  40                 	db	64
   467  00FEF9  40                 	db	64
   468  00FEFA  40                 	db	64
   469  00FEFB  00                 	db	0
   470  00FEFC  03                 	db	3
   471  00FEFD  07                 	db	7
   472  00FEFE  08                 	db	8
   473  00FEFF  00                 	db	0
   474  00FF00  20                 	db	32
   475  00FF01  54                 	db	84
   476  00FF02  54                 	db	84
   477  00FF03  78                 	db	120
   478  00FF04  40                 	db	64
   479  00FF05  7F                 	db	127
   480  00FF06  28                 	db	40
   481  00FF07  44                 	db	68
   482  00FF08  44                 	db	68
   483  00FF09  38                 	db	56
   484  00FF0A  38                 	db	56
   485  00FF0B  44                 	db	68
   486  00FF0C  44                 	db	68
   487  00FF0D  44                 	db	68
   488  00FF0E  28                 	db	40
   489  00FF0F  38                 	db	56
   490  00FF10  44                 	db	68
   491  00FF11  44                 	db	68
   492  00FF12  28                 	db	40
   493  00FF13  7F                 	db	127
   494  00FF14  38                 	db	56
   495  00FF15  54                 	db	84
   496  00FF16  54                 	db	84
   497  00FF17  54                 	db	84
   498  00FF18  18                 	db	24
   499  00FF19  00                 	db	0
   500  00FF1A  08                 	db	8
   501  00FF1B  7E                 	db	126
   502  00FF1C  09                 	db	9
   503  00FF1D  02                 	db	2
   504  00FF1E  18                 	db	24
   505  00FF1F  A4                 	db	164
   506  00FF20  A4                 	db	164
   507  00FF21  9C                 	db	156
   508  00FF22  78                 	db	120
   509  00FF23  7F                 	db	127
   510  00FF24  08                 	db	8
   511  00FF25  04                 	db	4
   512  00FF26  04                 	db	4
   513  00FF27  78                 	db	120
   514  00FF28  00                 	db	0
   515  00FF29  44                 	db	68
   516  00FF2A  7D                 	db	125
   517  00FF2B  40                 	db	64
   518  00FF2C  00                 	db	0
   519  00FF2D  20                 	db	32
   520  00FF2E  40                 	db	64
   521  00FF2F  40                 	db	64
   522  00FF30  3D                 	db	61
   523  00FF31  00                 	db	0
   524  00FF32  7F                 	db	127
   525  00FF33  10                 	db	16
   526  00FF34  28                 	db	40
   527  00FF35  44                 	db	68
   528  00FF36  00                 	db	0
   529  00FF37  00                 	db	0
   530  00FF38  41                 	db	65
   531  00FF39  7F                 	db	127
   532  00FF3A  40                 	db	64
   533  00FF3B  00                 	db	0
   534  00FF3C  7C                 	db	124
   535  00FF3D  04                 	db	4
   536  00FF3E  78                 	db	120
   537  00FF3F  04                 	db	4
   538  00FF40  78                 	db	120
   539  00FF41  7C                 	db	124
   540  00FF42  08                 	db	8
   541  00FF43  04                 	db	4
   542  00FF44  04                 	db	4
   543  00FF45  78                 	db	120
   544  00FF46  38                 	db	56
   545  00FF47  44                 	db	68
   546  00FF48  44                 	db	68
   547  00FF49  44                 	db	68
   548  00FF4A  38                 	db	56
   549  00FF4B  FC                 	db	252
   550  00FF4C  18                 	db	24
   551  00FF4D  24                 	db	36
   552  00FF4E  24                 	db	36
   553  00FF4F  18                 	db	24
   554  00FF50  18                 	db	24
   555  00FF51  24                 	db	36
   556  00FF52  24                 	db	36
   557  00FF53  18                 	db	24
   558  00FF54  FC                 	db	252
   559  00FF55  7C                 	db	124
   560  00FF56  08                 	db	8
   561  00FF57  04                 	db	4
   562  00FF58  04                 	db	4
   563  00FF59  08                 	db	8
   564  00FF5A  48                 	db	72
   565  00FF5B  54                 	db	84
   566  00FF5C  54                 	db	84
   567  00FF5D  54                 	db	84
   568  00FF5E  24                 	db	36
   569  00FF5F  04                 	db	4
   570  00FF60  04                 	db	4
   571  00FF61  3F                 	db	63
   572  00FF62  44                 	db	68
   573  00FF63  24                 	db	36
   574  00FF64  3C                 	db	60
   575  00FF65  40                 	db	64
   576  00FF66  40                 	db	64
   577  00FF67  20                 	db	32
   578  00FF68  7C                 	db	124
   579  00FF69  1C                 	db	28
   580  00FF6A  20                 	db	32
   581  00FF6B  40                 	db	64
   582  00FF6C  20                 	db	32
   583  00FF6D  1C                 	db	28
   584  00FF6E  3C                 	db	60
   585  00FF6F  40                 	db	64
   586  00FF70  30                 	db	48
   587  00FF71  40                 	db	64
   588  00FF72  3C                 	db	60
   589  00FF73  44                 	db	68
   590  00FF74  28                 	db	40
   591  00FF75  10                 	db	16
   592  00FF76  28                 	db	40
   593  00FF77  44                 	db	68
   594  00FF78  4C                 	db	76
   595  00FF79  90                 	db	144
   596  00FF7A  90                 	db	144
   597  00FF7B  90                 	db	144
   598  00FF7C  7C                 	db	124
   599  00FF7D  44                 	db	68
   600  00FF7E  64                 	db	100
   601  00FF7F  54                 	db	84
   602  00FF80  4C                 	db	76
   603  00FF81  44                 	db	68
   604  00FF82  00                 	db	0
   605  00FF83  08                 	db	8
   606  00FF84  36                 	db	54
   607  00FF85  41                 	db	65
   608  00FF86  00                 	db	0
   609  00FF87  00                 	db	0
   610  00FF88  00                 	db	0
   611  00FF89  77                 	db	119
   612  00FF8A  00                 	db	0
   613  00FF8B  00                 	db	0
   614  00FF8C  00                 	db	0
   615  00FF8D  41                 	db	65
   616  00FF8E  36                 	db	54
   617  00FF8F  08                 	db	8
   618  00FF90  00                 	db	0
   619  00FF91  02                 	db	2
   620  00FF92  01                 	db	1
   621  00FF93  02                 	db	2
   622  00FF94  04                 	db	4
   623  00FF95  02                 	db	2
   624  00FF96                     __end_of_font2:
   625                           	opt stack 0
   626  0000                     _ADCON0	set	4034
   627  0000                     _ADCON0bits	set	4034
   628  0000                     _ADCON1	set	4033
   629  0000                     _ADCON2	set	4032
   630  0000                     _ADRESH	set	4036
   631  0000                     _ADRESL	set	4035
   632  0000                     _CCP2CON	set	4026
   633  0000                     _CCPR2L	set	4027
   634  0000                     _INTCONbits	set	4082
   635  0000                     _OSCCON	set	4051
   636  0000                     _PIE1bits	set	3997
   637  0000                     _PIR1bits	set	3998
   638  0000                     _PIR2bits	set	4001
   639  0000                     _PORTAbits	set	3968
   640  0000                     _PORTBbits	set	3969
   641  0000                     _PORTCbits	set	3970
   642  0000                     _PORTDbits	set	3971
   643  0000                     _PORTEbits	set	3972
   644  0000                     _PR2	set	4043
   645  0000                     _RCSTA	set	4011
   646  0000                     _RCSTAbits	set	4011
   647  0000                     _SPBRG	set	4015
   648  0000                     _SPBRGH	set	4016
   649  0000                     _SSPBUF	set	4041
   650  0000                     _SSPCON1	set	4038
   651  0000                     _SSPSTAT	set	4039
   652  0000                     _SSPSTATbits	set	4039
   653  0000                     _T0CON	set	4053
   654  0000                     _T0CONbits	set	4053
   655  0000                     _T2CON	set	4042
   656  0000                     _T3CON	set	4017
   657  0000                     _T3CONbits	set	4017
   658  0000                     _TMR0H	set	4055
   659  0000                     _TMR0L	set	4054
   660  0000                     _TRISA	set	3986
   661  0000                     _TRISB	set	3987
   662  0000                     _TRISC	set	3988
   663  0000                     _TRISCbits	set	3988
   664  0000                     _TRISD	set	3989
   665  0000                     _TRISE	set	3990
   666  0000                     _TXREG	set	4013
   667  0000                     _TXSTA	set	4012
   668  0000                     _TXSTAbits	set	4012
   669  0000                     _RBPU	set	32655
   670  0000                     _TRMT	set	32097
   671  00FF96                     STR_1:
   672  00FF96  45                 	db	69	;'E'
   673  00FF97  43                 	db	67	;'C'
   674  00FF98  45                 	db	69	;'E'
   675  00FF99  33                 	db	51	;'3'
   676  00FF9A  33                 	db	51	;'3'
   677  00FF9B  30                 	db	48	;'0'
   678  00FF9C  31                 	db	49	;'1'
   679  00FF9D  4C                 	db	76	;'L'
   680  00FF9E  20                 	db	32
   681  00FF9F  53                 	db	83	;'S'
   682  00FFA0  70                 	db	112	;'p'
   683  00FFA1  72                 	db	114	;'r'
   684  00FFA2  69                 	db	105	;'i'
   685  00FFA3  6E                 	db	110	;'n'
   686  00FFA4  67                 	db	103	;'g'
   687  00FFA5  20                 	db	32
   688  00FFA6  32                 	db	50	;'2'
   689  00FFA7  31                 	db	49	;'1'
   690  00FFA8  2D                 	db	45
   691  00FFA9  53                 	db	83	;'S'
   692  00FFAA  31                 	db	49	;'1'
   693  00FFAB  00                 	db	0
   694  00FFAC                     STR_12:
   695  00FFAC  45                 	db	69	;'E'
   696  00FFAD  57                 	db	87	;'W'
   697  00FFAE  50                 	db	80	;'P'
   698  00FFAF  20                 	db	32
   699  00FFB0  45                 	db	69	;'E'
   700  00FFB1  57                 	db	87	;'W'
   701  00FFB2  4C                 	db	76	;'L'
   702  00FFB3  54                 	db	84	;'T'
   703  00FFB4  20                 	db	32
   704  00FFB5  4E                 	db	78	;'N'
   705  00FFB6  53                 	db	83	;'S'
   706  00FFB7  50                 	db	80	;'P'
   707  00FFB8  20                 	db	32
   708  00FFB9  4E                 	db	78	;'N'
   709  00FFBA  53                 	db	83	;'S'
   710  00FFBB  4C                 	db	76	;'L'
   711  00FFBC  54                 	db	84	;'T'
   712  00FFBD  20                 	db	32
   713  00FFBE  4D                 	db	77	;'M'
   714  00FFBF  44                 	db	68	;'D'
   715  00FFC0  00                 	db	0
   716  00FFC1                     STR_8:
   717  00FFC1  4E                 	db	78	;'N'
   718  00FFC2  4F                 	db	79	;'O'
   719  00FFC3  52                 	db	82	;'R'
   720  00FFC4  54                 	db	84	;'T'
   721  00FFC5  48                 	db	72	;'H'
   722  00FFC6  2F                 	db	47
   723  00FFC7  53                 	db	83	;'S'
   724  00FFC8  4F                 	db	79	;'O'
   725  00FFC9  55                 	db	85	;'U'
   726  00FFCA  54                 	db	84	;'T'
   727  00FFCB  48                 	db	72	;'H'
   728  00FFCC  00                 	db	0
   729  00FFCD                     STR_6:
   730  00FFCD  45                 	db	69	;'E'
   731  00FFCE  41                 	db	65	;'A'
   732  00FFCF  53                 	db	83	;'S'
   733  00FFD0  54                 	db	84	;'T'
   734  00FFD1  2F                 	db	47
   735  00FFD2  57                 	db	87	;'W'
   736  00FFD3  45                 	db	69	;'E'
   737  00FFD4  53                 	db	83	;'S'
   738  00FFD5  54                 	db	84	;'T'
   739  00FFD6  00                 	db	0
   740  00FFD7                     STR_9:
   741  00FFD7  4E                 	db	78	;'N'
   742  00FFD8  2F                 	db	47
   743  00FFD9  53                 	db	83	;'S'
   744  00FFDA  20                 	db	32
   745  00FFDB  4C                 	db	76	;'L'
   746  00FFDC  54                 	db	84	;'T'
   747  00FFDD  00                 	db	0
   748  00FFDE                     STR_7:
   749  00FFDE  45                 	db	69	;'E'
   750  00FFDF  2F                 	db	47
   751  00FFE0  57                 	db	87	;'W'
   752  00FFE1  20                 	db	32
   753  00FFE2  4C                 	db	76	;'L'
   754  00FFE3  54                 	db	84	;'T'
   755  00FFE4  00                 	db	0
   756  00FFE5                     STR_2:
   757  00FFE5  4D                 	db	77	;'M'
   758  00FFE6  6F                 	db	111	;'o'
   759  00FFE7  64                 	db	100	;'d'
   760  00FFE8  65                 	db	101	;'e'
   761  00FFE9  3A                 	db	58	;':'
   762  00FFEA  00                 	db	0
   763  00FFEB                     STR_3:
   764  00FFEB  46                 	db	70	;'F'
   765  00FFEC  52                 	db	82	;'R'
   766  00FFED  3A                 	db	58	;':'
   767  00FFEE  00                 	db	0
   768  00FFEF                     STR_4:
   769  00FFEF  46                 	db	70	;'F'
   770  00FFF0  53                 	db	83	;'S'
   771  00FFF1  3A                 	db	58	;':'
   772  00FFF2  00                 	db	0
   773  00FFF3                     STR_11:
   774  00FFF3  50                 	db	80	;'P'
   775  00FFF4  4E                 	db	78	;'N'
   776  00FFF5  53                 	db	83	;'S'
   777  00FFF6  00                 	db	0
   778  00FFF7                     STR_10:
   779  00FFF7  50                 	db	80	;'P'
   780  00FFF8  45                 	db	69	;'E'
   781  00FFF9  57                 	db	87	;'W'
   782  00FFFA  00                 	db	0
   783  00FFFB                     STR_14:
   784  00FFFB  20                 	db	32
   785  00FFFC  00                 	db	0
   786  00FFFD                     STR_5:
   787  00FFFD  2A                 	db	42
   788  00FFFE  00                 	db	0
   789  0000                     
   790                           ; #config settings
   791  00FFFF  00                 	db	0	; dummy byte at the end
   792  0000                     
   793                           	psect	cinit
   794  00DC3A                     __pcinit:
   795                           	opt stack 0
   796  00DC3A                     start_initialization:
   797                           	opt stack 0
   798  00DC3A                     __initialization:
   799                           	opt stack 0
   800                           
   801                           ; Clear objects allocated to BANK0 (31 bytes)
   802  00DC3A  EE00  F080         	lfsr	0,__pbssBANK0
   803  00DC3E  0E1F               	movlw	31
   804  00DC40                     clear_0:
   805  00DC40  6AEE               	clrf	postinc0,c
   806  00DC42  06E8               	decf	wreg,f,c
   807  00DC44  E1FD               	bnz	clear_0
   808                           
   809                           ; Clear objects allocated to COMRAM (21 bytes)
   810  00DC46  EE00  F064         	lfsr	0,__pbssCOMRAM
   811  00DC4A  0E15               	movlw	21
   812  00DC4C                     clear_1:
   813  00DC4C  6AEE               	clrf	postinc0,c
   814  00DC4E  06E8               	decf	wreg,f,c
   815  00DC50  E1FD               	bnz	clear_1
   816                           
   817                           ; Initialize objects allocated to COMRAM (35 bytes)
   818                           ; load TBLPTR registers with __pidataCOMRAM
   819  00DC52  0E25               	movlw	low __pidataCOMRAM
   820  00DC54  6EF6               	movwf	tblptrl,c
   821  00DC56  0EDA               	movlw	high __pidataCOMRAM
   822  00DC58  6EF7               	movwf	tblptrh,c
   823  00DC5A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   824  00DC5C  6EF8               	movwf	tblptru,c
   825  00DC5E  EE00  F041         	lfsr	0,__pdataCOMRAM
   826  00DC62  EE10 F023          	lfsr	1,35
   827  00DC66                     copy_data0:
   828  00DC66  0009               	tblrd		*+
   829  00DC68  CFF5 FFEE          	movff	tablat,postinc0
   830  00DC6C  50E5               	movf	postdec1,w,c
   831  00DC6E  50E1               	movf	fsr1l,w,c
   832  00DC70  E1FA               	bnz	copy_data0
   833  00DC72                     end_of_initialization:
   834                           	opt stack 0
   835  00DC72                     __end_of__initialization:
   836                           	opt stack 0
   837  00DC72  0E00               	movlw	low (__Lmediumconst shr (0+16))
   838  00DC74  6EF8               	movwf	tblptru,c
   839  00DC76  0100               	movlb	0
   840  00DC78  EF6F  F071         	goto	_main	;jump to C main() function
   841                           tblptru	equ	0xFF8
   842                           tblptrh	equ	0xFF7
   843                           tblptrl	equ	0xFF6
   844                           tablat	equ	0xFF5
   845                           postinc0	equ	0xFEE
   846                           wreg	equ	0xFE8
   847                           postdec1	equ	0xFE5
   848                           fsr1l	equ	0xFE1
   849                           
   850                           	psect	bssCOMRAM
   851  000064                     __pbssCOMRAM:
   852                           	opt stack 0
   853  000064                     _volt:
   854                           	opt stack 0
   855  000064                     	ds	3
   856  000067                     _MODE:
   857                           	opt stack 0
   858  000067                     	ds	2
   859  000069                     _nbr:
   860                           	opt stack 0
   861  000069                     	ds	2
   862  00006B                     _txt:
   863                           	opt stack 0
   864  00006B                     	ds	2
   865  00006D                     _Count:
   866                           	opt stack 0
   867  00006D                     	ds	1
   868  00006E                     _PED_Count:
   869                           	opt stack 0
   870  00006E                     	ds	1
   871  00006F                     _SW_EWLT:
   872                           	opt stack 0
   873  00006F                     	ds	1
   874  000070                     _SW_EWPED:
   875                           	opt stack 0
   876  000070                     	ds	1
   877  000071                     _SW_MODE:
   878                           	opt stack 0
   879  000071                     	ds	1
   880  000072                     _SW_NSLT:
   881                           	opt stack 0
   882  000072                     	ds	1
   883  000073                     _SW_NSPED:
   884                           	opt stack 0
   885  000073                     	ds	1
   886  000074                     __tft_type:
   887                           	opt stack 0
   888  000074                     	ds	1
   889  000075                     _colstart:
   890                           	opt stack 0
   891  000075                     	ds	1
   892  000076                     _dir:
   893                           	opt stack 0
   894  000076                     	ds	1
   895  000077                     _direction:
   896                           	opt stack 0
   897  000077                     	ds	1
   898  000078                     _rowstart:
   899                           	opt stack 0
   900  000078                     	ds	1
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           fsr1l	equ	0xFE1
   909                           
   910                           	psect	dataCOMRAM
   911  000041                     __pdataCOMRAM:
   912                           	opt stack 0
   913  000041                     _wrap:
   914                           	opt stack 0
   915  000041                     	ds	1
   916  000042                     _EWLT_Count:
   917                           	opt stack 0
   918  000042                     	ds	3
   919  000045                     _EW_Count:
   920                           	opt stack 0
   921  000045                     	ds	3
   922  000048                     _NSLT_Count:
   923                           	opt stack 0
   924  000048                     	ds	3
   925  00004B                     _NS_Count:
   926                           	opt stack 0
   927  00004B                     	ds	3
   928  00004E                     _PED_EW_Count:
   929                           	opt stack 0
   930  00004E                     	ds	3
   931  000051                     _PED_NS_Count:
   932                           	opt stack 0
   933  000051                     	ds	3
   934  000054                     _Act_Mode_Txt:
   935                           	opt stack 0
   936  000054                     	ds	2
   937  000056                     _FlashingR_Txt:
   938                           	opt stack 0
   939  000056                     	ds	2
   940  000058                     _FlashingS_Txt:
   941                           	opt stack 0
   942  000058                     	ds	2
   943  00005A                     _SW_EWLT_Txt:
   944                           	opt stack 0
   945  00005A                     	ds	2
   946  00005C                     _SW_EWPED_Txt:
   947                           	opt stack 0
   948  00005C                     	ds	2
   949  00005E                     _SW_MODE_Txt:
   950                           	opt stack 0
   951  00005E                     	ds	2
   952  000060                     _SW_NSLT_Txt:
   953                           	opt stack 0
   954  000060                     	ds	2
   955  000062                     _SW_NSPED_Txt:
   956                           	opt stack 0
   957  000062                     	ds	2
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1l	equ	0xFE1
   966                           
   967                           	psect	bssBANK0
   968  000080                     __pbssBANK0:
   969                           	opt stack 0
   970  000080                     _buffer:
   971                           	opt stack 0
   972  000080                     	ds	31
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1l	equ	0xFE1
   981                           
   982                           	psect	cstackCOMRAM
   983  000001                     __pcstackCOMRAM:
   984                           	opt stack 0
   985  000001                     ?_strlen:
   986                           	opt stack 0
   987  000001                     ?_get_full_ADC:
   988                           	opt stack 0
   989  000001                     ?___wmul:
   990                           	opt stack 0
   991  000001                     ?___awdiv:
   992                           	opt stack 0
   993  000001                     ?___awmod:
   994                           	opt stack 0
   995  000001                     ?___ftpack:
   996                           	opt stack 0
   997  000001                     spiwrite@x:
   998                           	opt stack 0
   999  000001                     OpenUSART@spbrg:
  1000                           	opt stack 0
  1001  000001                     ___wmul@multiplier:
  1002                           	opt stack 0
  1003  000001                     ___awdiv@dividend:
  1004                           	opt stack 0
  1005  000001                     ___awmod@dividend:
  1006                           	opt stack 0
  1007  000001                     strcpy@to:
  1008                           	opt stack 0
  1009  000001                     strlen@s:
  1010                           	opt stack 0
  1011  000001                     ___ftpack@arg:
  1012                           	opt stack 0
  1013  000001                     ___ftge@ff1:
  1014                           	opt stack 0
  1015                           
  1016                           ; 3 bytes @ 0x0
  1017  000001                     	ds	1
  1018  000002                     spiwrite@spidata:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x1
  1022  000002                     	ds	1
  1023  000003                     ??_strlen:
  1024  000003                     ??_get_full_ADC:
  1025  000003                     write_command@cmd_:
  1026                           	opt stack 0
  1027  000003                     write_data@data_:
  1028                           	opt stack 0
  1029  000003                     OpenUSART@config:
  1030                           	opt stack 0
  1031  000003                     ___wmul@multiplicand:
  1032                           	opt stack 0
  1033  000003                     ___awdiv@divisor:
  1034                           	opt stack 0
  1035  000003                     ___awmod@divisor:
  1036                           	opt stack 0
  1037  000003                     strcpy@from:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x2
  1041  000003                     	ds	1
  1042  000004                     setAddrWindow@y0:
  1043                           	opt stack 0
  1044  000004                     ___ftpack@exp:
  1045                           	opt stack 0
  1046  000004                     ___ftge@ff2:
  1047                           	opt stack 0
  1048                           
  1049                           ; 3 bytes @ 0x3
  1050  000004                     	ds	1
  1051  000005                     setAddrWindow@x1:
  1052                           	opt stack 0
  1053  000005                     ___awdiv@counter:
  1054                           	opt stack 0
  1055  000005                     ___awmod@counter:
  1056                           	opt stack 0
  1057  000005                     ___ftpack@sign:
  1058                           	opt stack 0
  1059  000005                     get_full_ADC@result:
  1060                           	opt stack 0
  1061  000005                     ___wmul@product:
  1062                           	opt stack 0
  1063  000005                     strcpy@cp:
  1064                           	opt stack 0
  1065  000005                     strlen@cp:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x4
  1069  000005                     	ds	1
  1070  000006                     ??___ftpack:
  1071  000006                     setAddrWindow@y1:
  1072                           	opt stack 0
  1073  000006                     ___awdiv@sign:
  1074                           	opt stack 0
  1075  000006                     ___awmod@sign:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x5
  1079  000006                     	ds	1
  1080  000007                     ??___ftge:
  1081  000007                     setAddrWindow@x0:
  1082                           	opt stack 0
  1083  000007                     delay_ms@ms:
  1084                           	opt stack 0
  1085  000007                     ___awdiv@quotient:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x6
  1089  000007                     	ds	1
  1090  000008                     drawPixel@y:
  1091                           	opt stack 0
  1092  000008                     drawFastVLine@y:
  1093                           	opt stack 0
  1094  000008                     fillRectangle@y:
  1095                           	opt stack 0
  1096  000008                     drawFastHLine@y:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x7
  1100  000008                     	ds	1
  1101  000009                     ??_delay_ms:
  1102  000009                     ?___awtoft:
  1103                           	opt stack 0
  1104  000009                     drawFastVLine@h:
  1105                           	opt stack 0
  1106  000009                     fillRectangle@w:
  1107                           	opt stack 0
  1108  000009                     drawFastHLine@w:
  1109                           	opt stack 0
  1110  000009                     drawPixel@color:
  1111                           	opt stack 0
  1112  000009                     ___awtoft@c:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x8
  1116  000009                     	ds	1
  1117  00000A                     fillRectangle@h:
  1118                           	opt stack 0
  1119  00000A                     drawFastVLine@color:
  1120                           	opt stack 0
  1121  00000A                     drawFastHLine@color:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x9
  1125  00000A                     	ds	1
  1126  00000B                     drawPixel@x:
  1127                           	opt stack 0
  1128  00000B                     delay_ms@count:
  1129                           	opt stack 0
  1130  00000B                     fillRectangle@color:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0xA
  1134  00000B                     	ds	1
  1135  00000C                     ??_drawFastVLine:
  1136  00000C                     ??_drawFastHLine:
  1137  00000C                     ___awtoft@sign:
  1138                           	opt stack 0
  1139  00000C                     drawCircle@x0:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0xB
  1143  00000C                     	ds	1
  1144  00000D                     ??_fillRectangle:
  1145  00000D                     ?___ftdiv:
  1146                           	opt stack 0
  1147  00000D                     ___ftdiv@f1:
  1148                           	opt stack 0
  1149                           
  1150                           ; 3 bytes @ 0xC
  1151  00000D                     	ds	1
  1152  00000E                     drawCircle@y0:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0xD
  1156  00000E                     	ds	2
  1157  000010                     drawFastVLine@hi:
  1158                           	opt stack 0
  1159  000010                     drawFastHLine@hi:
  1160                           	opt stack 0
  1161  000010                     drawCircle@r:
  1162                           	opt stack 0
  1163  000010                     ___ftdiv@f2:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0xF
  1167  000010                     	ds	1
  1168  000011                     drawFastVLine@lo:
  1169                           	opt stack 0
  1170  000011                     fillRectangle@hi:
  1171                           	opt stack 0
  1172  000011                     drawFastHLine@lo:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x10
  1176  000011                     	ds	1
  1177  000012                     drawFastVLine@x:
  1178                           	opt stack 0
  1179  000012                     fillRectangle@lo:
  1180                           	opt stack 0
  1181  000012                     drawFastHLine@x:
  1182                           	opt stack 0
  1183  000012                     drawCircle@color:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x11
  1187  000012                     	ds	1
  1188  000013                     ??___ftdiv:
  1189  000013                     fillRect@y:
  1190                           	opt stack 0
  1191  000013                     fillRectangle@x:
  1192                           	opt stack 0
  1193  000013                     fillCircleHelper@x0:
  1194                           	opt stack 0
  1195  000013                     drawRect@x:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x12
  1199  000013                     	ds	1
  1200  000014                     ??_drawCircle:
  1201  000014                     fillRect@w:
  1202                           	opt stack 0
  1203  000014                     fillScreen@color:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x13
  1207  000014                     	ds	1
  1208  000015                     fillRect@h:
  1209                           	opt stack 0
  1210  000015                     fillCircleHelper@y0:
  1211                           	opt stack 0
  1212  000015                     drawRect@y:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x14
  1216  000015                     	ds	1
  1217  000016                     ___ftdiv@cntr:
  1218                           	opt stack 0
  1219  000016                     fillRect@color:
  1220                           	opt stack 0
  1221  000016                     drawCircle@ddF_x:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x15
  1225  000016                     	ds	1
  1226  000017                     fillCircleHelper@r:
  1227                           	opt stack 0
  1228  000017                     drawRect@w:
  1229                           	opt stack 0
  1230  000017                     ___ftdiv@f3:
  1231                           	opt stack 0
  1232                           
  1233                           ; 3 bytes @ 0x16
  1234  000017                     	ds	1
  1235  000018                     ??_fillRect:
  1236  000018                     drawCircle@ddF_y:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x17
  1240  000018                     	ds	1
  1241  000019                     fillCircleHelper@cornername:
  1242                           	opt stack 0
  1243  000019                     drawRect@h:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x18
  1247  000019                     	ds	1
  1248  00001A                     ___ftdiv@exp:
  1249                           	opt stack 0
  1250  00001A                     drawCircle@f:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x19
  1254  00001A                     	ds	1
  1255  00001B                     fillRect@x:
  1256                           	opt stack 0
  1257  00001B                     ___ftdiv@sign:
  1258                           	opt stack 0
  1259  00001B                     fillCircleHelper@delta:
  1260                           	opt stack 0
  1261  00001B                     drawRect@color:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x1A
  1265  00001B                     	ds	1
  1266  00001C                     fillRect@i:
  1267                           	opt stack 0
  1268  00001C                     drawCircle@x:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x1B
  1272  00001C                     	ds	1
  1273  00001D                     ??_drawRect:
  1274  00001D                     fillCircleHelper@color:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x1C
  1278  00001D                     	ds	1
  1279  00001E                     drawChar@y:
  1280                           	opt stack 0
  1281  00001E                     drawCircle@y:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x1D
  1285  00001E                     	ds	1
  1286  00001F                     ??_fillCircleHelper:
  1287  00001F                     drawChar@c:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x1E
  1291  00001F                     	ds	1
  1292  000020                     drawChar@color:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x1F
  1296  000020                     	ds	1
  1297  000021                     fillCircleHelper@ddF_x:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x20
  1301  000021                     	ds	1
  1302  000022                     drawChar@bg:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x21
  1306  000022                     	ds	1
  1307  000023                     fillCircleHelper@ddF_y:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x22
  1311  000023                     	ds	1
  1312  000024                     drawChar@size:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x23
  1316  000024                     	ds	1
  1317  000025                     drawChar@line:
  1318                           	opt stack 0
  1319  000025                     fillCircleHelper@f:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x24
  1323  000025                     	ds	1
  1324  000026                     drawChar@x:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x25
  1328  000026                     	ds	1
  1329  000027                     drawChar@j:
  1330                           	opt stack 0
  1331  000027                     fillCircleHelper@x:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x26
  1335  000027                     	ds	1
  1336  000028                     drawChar@i:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0x27
  1340  000028                     	ds	1
  1341  000029                     drawtext@y:
  1342                           	opt stack 0
  1343  000029                     fillCircleHelper@y:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x28
  1347  000029                     	ds	1
  1348  00002A                     drawtext@_text:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x29
  1352  00002A                     	ds	1
  1353  00002B                     fillCircle@x0:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x2A
  1357  00002B                     	ds	1
  1358  00002C                     drawtext@color:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x2B
  1362  00002C                     	ds	1
  1363  00002D                     fillCircle@y0:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x2C
  1367  00002D                     	ds	1
  1368  00002E                     drawtext@bg:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x2D
  1372  00002E                     	ds	1
  1373  00002F                     fillCircle@r:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x2E
  1377  00002F                     	ds	1
  1378  000030                     drawtext@size:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x2F
  1382  000030                     	ds	1
  1383  000031                     ??_drawtext:
  1384  000031                     fillCircle@color:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x30
  1388  000031                     	ds	2
  1389  000033                     update_LCD_color@color:
  1390                           	opt stack 0
  1391  000033                     drawtext@textsize:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x32
  1395  000033                     	ds	1
  1396  000034                     update_LCD_color@direction:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x33
  1400  000034                     	ds	1
  1401  000035                     drawtext@x:
  1402                           	opt stack 0
  1403  000035                     update_LCD_color@Circle_Y:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x34
  1407  000035                     	ds	1
  1408  000036                     Set_NS@color:
  1409                           	opt stack 0
  1410  000036                     Set_NSLT@color:
  1411                           	opt stack 0
  1412  000036                     Set_EW@color:
  1413                           	opt stack 0
  1414  000036                     Set_EWLT@color:
  1415                           	opt stack 0
  1416  000036                     drawtext@i:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x35
  1420  000036                     	ds	2
  1421  000038                     drawtext@cursor_y:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x37
  1425  000038                     	ds	1
  1426  000039                     drawtext@cursor_x:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x38
  1430  000039                     	ds	1
  1431  00003A                     update_LCD_count@count:
  1432                           	opt stack 0
  1433  00003A                     update_LCD_PED_Count@count:
  1434                           	opt stack 0
  1435  00003A                     update_LCD_misc@nStep:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x39
  1439  00003A                     	ds	1
  1440  00003B                     update_LCD_count@direction:
  1441                           	opt stack 0
  1442  00003B                     update_LCD_PED_Count@direction:
  1443                           	opt stack 0
  1444                           
  1445                           ; 1 bytes @ 0x3A
  1446  00003B                     	ds	1
  1447  00003C                     PED_Control@Num_Sec:
  1448                           	opt stack 0
  1449  00003C                     update_LCD_misc@ch:
  1450                           	opt stack 0
  1451                           
  1452                           ; 1 bytes @ 0x3B
  1453  00003C                     	ds	1
  1454  00003D                     PED_Control@direction:
  1455                           	opt stack 0
  1456  00003D                     Wait_N_Seconds@seconds:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x3C
  1460  00003D                     	ds	1
  1461  00003E                     PED_Control@i:
  1462                           	opt stack 0
  1463  00003E                     Wait_N_Seconds@I:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x3D
  1467  00003E                     	ds	1
  1468  00003F                     main@nStep:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x3E
  1472  00003F                     	ds	2
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postdec1	equ	0xFE5
  1480                           fsr1l	equ	0xFE1
  1481                           
  1482 ;;
  1483 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1484 ;;
  1485 ;; *************** function _main *****************
  1486 ;; Defined at:
  1487 ;;		line 265 in file "Lab9.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;		None
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  nStep           2   62[COMRAM] int 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;		None               void
  1494 ;; Registers used:
  1495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;Total ram usage:        2 bytes
  1506 ;; Hardware stack levels required when called:   11
  1507 ;; This function calls:
  1508 ;;		_Day_Mode
  1509 ;;		_Init_ADC
  1510 ;;		_Initialize_Screen
  1511 ;;		_Night_Mode
  1512 ;;		___awtoft
  1513 ;;		___ftdiv
  1514 ;;		___ftge
  1515 ;;		___wmul
  1516 ;;		_get_full_ADC
  1517 ;;		_init_IO
  1518 ;;		_init_UART
  1519 ;; This function is called by:
  1520 ;;		Startup code after reset
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text0
  1525  00E2DE                     __ptext0:
  1526                           	opt stack 0
  1527  00E2DE                     _main:
  1528                           	opt stack 20
  1529                           
  1530                           ;Lab9.c: 267: init_IO();
  1531                           
  1532                           ;incstack = 0
  1533  00E2DE  ECEC  F06C         	call	_init_IO	;wreg free
  1534                           
  1535                           ;Lab9.c: 268: Init_ADC();
  1536  00E2E2  ECA6  F06C         	call	_Init_ADC	;wreg free
  1537                           
  1538                           ;Lab9.c: 269: init_UART();
  1539  00E2E6  ECD7  F06C         	call	_init_UART	;wreg free
  1540                           
  1541                           ;Lab9.c: 270: OSCCON = 0x70;
  1542  00E2EA  0E70               	movlw	112
  1543  00E2EC  6ED3               	movwf	4051,c	;volatile
  1544                           
  1545                           ;Lab9.c: 271: RBPU = 0;
  1546  00E2EE  9EF1               	bcf	intcon2,7,c	;volatile
  1547                           
  1548                           ;Lab9.c: 273: Initialize_Screen();
  1549  00E2F0  EC4E  F07B         	call	_Initialize_Screen	;wreg free
  1550                           
  1551                           ;Lab9.c: 276: int nStep = get_full_ADC();
  1552  00E2F4  EC24  F06D         	call	_get_full_ADC	;wreg free
  1553  00E2F8  C001  F03F         	movff	?_get_full_ADC,main@nStep
  1554  00E2FC  C002  F040         	movff	?_get_full_ADC+1,main@nStep+1
  1555                           
  1556                           ;Lab9.c: 277: volt = nStep * 5 /1024.0;
  1557  00E300  C03F  F001         	movff	main@nStep,___wmul@multiplier
  1558  00E304  C040  F002         	movff	main@nStep+1,___wmul@multiplier+1
  1559  00E308  0E00               	movlw	0
  1560  00E30A  6E04               	movwf	___wmul@multiplicand+1,c
  1561  00E30C  0E05               	movlw	5
  1562  00E30E  6E03               	movwf	___wmul@multiplicand,c
  1563  00E310  EC37  F06D         	call	___wmul	;wreg free
  1564  00E314  C001  F009         	movff	?___wmul,___awtoft@c
  1565  00E318  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  1566  00E31C  ECC1  F06D         	call	___awtoft	;wreg free
  1567  00E320  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  1568  00E324  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  1569  00E328  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  1570  00E32C  0E00               	movlw	0
  1571  00E32E  6E10               	movwf	___ftdiv@f2,c
  1572  00E330  0E80               	movlw	128
  1573  00E332  6E11               	movwf	___ftdiv@f2+1,c
  1574  00E334  0E44               	movlw	68
  1575  00E336  6E12               	movwf	___ftdiv@f2+2,c
  1576  00E338  ECC9  F073         	call	___ftdiv	;wreg free
  1577  00E33C  C00D  F064         	movff	?___ftdiv,_volt
  1578  00E340  C00E  F065         	movff	?___ftdiv+1,_volt+1
  1579  00E344  C00F  F066         	movff	?___ftdiv+2,_volt+2
  1580                           
  1581                           ;Lab9.c: 278: SW_MODE = volt < 3.5 ? 1:0;
  1582  00E348  C064  F001         	movff	_volt,___ftge@ff1
  1583  00E34C  C065  F002         	movff	_volt+1,___ftge@ff1+1
  1584  00E350  C066  F003         	movff	_volt+2,___ftge@ff1+2
  1585  00E354  0E00               	movlw	0
  1586  00E356  6E04               	movwf	___ftge@ff2,c
  1587  00E358  0E60               	movlw	96
  1588  00E35A  6E05               	movwf	___ftge@ff2+1,c
  1589  00E35C  0E40               	movlw	64
  1590  00E35E  6E06               	movwf	___ftge@ff2+2,c
  1591  00E360  EC24  F071         	call	___ftge	;wreg free
  1592  00E364  B0D8               	btfsc	status,0,c
  1593  00E366  D002               	goto	u2540
  1594  00E368  0E01               	movlw	1
  1595  00E36A  D001               	goto	u2550
  1596  00E36C                     u2540:
  1597  00E36C  0E00               	movlw	0
  1598  00E36E                     u2550:
  1599  00E36E  6E71               	movwf	_SW_MODE,c
  1600  00E370  D000               	goto	l3979
  1601  00E372                     l3979:
  1602                           
  1603                           ;Lab9.c: 281: {
  1604                           ;Lab9.c: 282: if (SW_MODE)
  1605  00E372  5071               	movf	_SW_MODE,w,c
  1606  00E374  B4D8               	btfsc	status,2,c
  1607  00E376  D003               	goto	l3983
  1608                           
  1609                           ;Lab9.c: 283: {
  1610                           ;Lab9.c: 284: Day_Mode();
  1611  00E378  ECD7  F075         	call	_Day_Mode	;wreg free
  1612                           
  1613                           ;Lab9.c: 285: }
  1614  00E37C  D7FA               	goto	l3979
  1615  00E37E                     l3983:
  1616                           
  1617                           ;Lab9.c: 286: else
  1618                           ;Lab9.c: 287: {
  1619                           ;Lab9.c: 288: Night_Mode();
  1620  00E37E  EC89  F072         	call	_Night_Mode	;wreg free
  1621  00E382  D7F7               	goto	l3979
  1622  00E384  EF00  F000         	goto	start
  1623  00E388                     __end_of_main:
  1624                           	opt stack 0
  1625                           tblptru	equ	0xFF8
  1626                           tblptrh	equ	0xFF7
  1627                           tblptrl	equ	0xFF6
  1628                           tablat	equ	0xFF5
  1629                           intcon2	equ	0xFF1
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _init_UART *****************
  1637 ;; Defined at:
  1638 ;;		line 251 in file "Lab9.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;		None               void
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;Total ram usage:        0 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    1
  1659 ;; This function calls:
  1660 ;;		_OpenUSART
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text1
  1667  00D9AE                     __ptext1:
  1668                           	opt stack 0
  1669  00D9AE                     _init_UART:
  1670                           	opt stack 29
  1671                           
  1672                           ;Lab9.c: 253: OpenUSART (0b01111111 & 0b10111111 &
  1673                           ;Lab9.c: 254: 0b11111110 & 0b11111101 & 0b11111111 &
  1674                           ;Lab9.c: 255: 0b11111111, 25);
  1675                           
  1676                           ;incstack = 0
  1677  00D9AE  0E00               	movlw	0
  1678  00D9B0  6E02               	movwf	OpenUSART@spbrg+1,c
  1679  00D9B2  0E19               	movlw	25
  1680  00D9B4  6E01               	movwf	OpenUSART@spbrg,c
  1681  00D9B6  0E3C               	movlw	60
  1682  00D9B8  EC97  F06F         	call	_OpenUSART
  1683                           
  1684                           ;Lab9.c: 256: OSCCON = 0x60;
  1685  00D9BC  0E60               	movlw	96
  1686  00D9BE  6ED3               	movwf	4051,c	;volatile
  1687  00D9C0  0012               	return		;funcret
  1688  00D9C2                     __end_of_init_UART:
  1689                           	opt stack 0
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           intcon2	equ	0xFF1
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           status	equ	0xFD8
  1700                           
  1701 ;; *************** function _OpenUSART *****************
  1702 ;; Defined at:
  1703 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  config          1    wreg     unsigned char 
  1706 ;;  spbrg           2    0[COMRAM] unsigned int 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  config          1    2[COMRAM] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;		None               void
  1711 ;; Registers used:
  1712 ;;		wreg, status,2
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;Total ram usage:        3 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; This function calls:
  1725 ;;		Nothing
  1726 ;; This function is called by:
  1727 ;;		_init_UART
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text2
  1732  00DF2E                     __ptext2:
  1733                           	opt stack 0
  1734  00DF2E                     _OpenUSART:
  1735                           	opt stack 29
  1736                           
  1737                           ;incstack = 0
  1738                           ;OpenUSART@config stored from wreg
  1739  00DF2E  6E03               	movwf	OpenUSART@config,c
  1740  00DF30  0E00               	movlw	0
  1741  00DF32  6EAC               	movwf	4012,c	;volatile
  1742  00DF34  0E00               	movlw	0
  1743  00DF36  6EAB               	movwf	4011,c	;volatile
  1744  00DF38  A003               	btfss	OpenUSART@config,0,c
  1745  00DF3A  D002               	goto	l3369
  1746  00DF3C  88AC               	bsf	4012,4,c	;volatile
  1747  00DF3E  D000               	goto	l3369
  1748  00DF40                     l3369:
  1749  00DF40  A203               	btfss	OpenUSART@config,1,c
  1750  00DF42  D003               	goto	l3373
  1751  00DF44  8CAC               	bsf	4012,6,c	;volatile
  1752  00DF46  8CAB               	bsf	4011,6,c	;volatile
  1753  00DF48  D000               	goto	l3373
  1754  00DF4A                     l3373:
  1755  00DF4A  A403               	btfss	OpenUSART@config,2,c
  1756  00DF4C  D002               	goto	l3377
  1757  00DF4E  8EAC               	bsf	4012,7,c	;volatile
  1758  00DF50  D000               	goto	l3377
  1759  00DF52                     l3377:
  1760  00DF52  A603               	btfss	OpenUSART@config,3,c
  1761  00DF54  D002               	goto	l522
  1762  00DF56  88AB               	bsf	4011,4,c	;volatile
  1763  00DF58  D002               	goto	l3381
  1764  00DF5A                     l522:
  1765  00DF5A  8AAB               	bsf	4011,5,c	;volatile
  1766  00DF5C  D000               	goto	l3381
  1767  00DF5E                     l3381:
  1768  00DF5E  B803               	btfsc	OpenUSART@config,4,c
  1769  00DF60  84AC               	bsf	4012,2,c	;volatile
  1770  00DF62  989E               	bcf	3998,4,c	;volatile
  1771  00DF64  AA03               	btfss	OpenUSART@config,5,c
  1772  00DF66  D002               	goto	l3389
  1773  00DF68  86AB               	bsf	4011,3,c	;volatile
  1774  00DF6A  D000               	goto	l3389
  1775  00DF6C                     l3389:
  1776  00DF6C  AC03               	btfss	OpenUSART@config,6,c
  1777  00DF6E  D002               	goto	l526
  1778  00DF70  8A9D               	bsf	3997,5,c	;volatile
  1779  00DF72  D001               	goto	l527
  1780  00DF74                     l526:
  1781  00DF74  9A9D               	bcf	3997,5,c	;volatile
  1782  00DF76                     l527:
  1783  00DF76  9A9E               	bcf	3998,5,c	;volatile
  1784  00DF78  AE03               	btfss	OpenUSART@config,7,c
  1785  00DF7A  D002               	goto	l528
  1786  00DF7C  889D               	bsf	3997,4,c	;volatile
  1787  00DF7E  D001               	goto	l529
  1788  00DF80                     l528:
  1789  00DF80  989D               	bcf	3997,4,c	;volatile
  1790  00DF82                     l529:
  1791  00DF82  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1792  00DF86  5002               	movf	OpenUSART@spbrg+1,w,c
  1793  00DF88  6EB0               	movwf	4016,c	;volatile
  1794  00DF8A  8AAC               	bsf	4012,5,c	;volatile
  1795  00DF8C  8EAB               	bsf	4011,7,c	;volatile
  1796  00DF8E  9C94               	bcf	3988,6,c	;volatile
  1797  00DF90  8E94               	bsf	3988,7,c	;volatile
  1798  00DF92  B8AC               	btfsc	4012,4,c	;volatile
  1799  00DF94  BEAC               	btfsc	4012,7,c	;volatile
  1800  00DF96  D002               	goto	l531
  1801  00DF98  8C94               	bsf	3988,6,c	;volatile
  1802  00DF9A  D000               	goto	l531
  1803  00DF9C                     l531:
  1804  00DF9C  0012               	return		;funcret
  1805  00DF9E                     __end_of_OpenUSART:
  1806                           	opt stack 0
  1807                           tblptru	equ	0xFF8
  1808                           tblptrh	equ	0xFF7
  1809                           tblptrl	equ	0xFF6
  1810                           tablat	equ	0xFF5
  1811                           intcon2	equ	0xFF1
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1l	equ	0xFE1
  1816                           status	equ	0xFD8
  1817                           
  1818 ;; *************** function _init_IO *****************
  1819 ;; Defined at:
  1820 ;;		line 294 in file "Lab9.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;		None               void
  1827 ;; Registers used:
  1828 ;;		wreg, status,2
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;Total ram usage:        0 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_main
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text3
  1848  00D9D8                     __ptext3:
  1849                           	opt stack 0
  1850  00D9D8                     _init_IO:
  1851                           	opt stack 30
  1852                           
  1853                           ;Lab9.c: 295: TRISA = 0x21;
  1854                           
  1855                           ;incstack = 0
  1856  00D9D8  0E21               	movlw	33
  1857  00D9DA  6E92               	movwf	3986,c	;volatile
  1858                           
  1859                           ;Lab9.c: 296: TRISB = 0x07;
  1860  00D9DC  0E07               	movlw	7
  1861  00D9DE  6E93               	movwf	3987,c	;volatile
  1862                           
  1863                           ;Lab9.c: 297: TRISC = 0x07;
  1864  00D9E0  0E07               	movlw	7
  1865  00D9E2  6E94               	movwf	3988,c	;volatile
  1866                           
  1867                           ;Lab9.c: 298: TRISD = 0x00;
  1868  00D9E4  0E00               	movlw	0
  1869  00D9E6  6E95               	movwf	3989,c	;volatile
  1870                           
  1871                           ;Lab9.c: 299: TRISE = 0x00;
  1872  00D9E8  0E00               	movlw	0
  1873  00D9EA  6E96               	movwf	3990,c	;volatile
  1874  00D9EC  0012               	return		;funcret
  1875  00D9EE                     __end_of_init_IO:
  1876                           	opt stack 0
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           tblptrl	equ	0xFF6
  1880                           tablat	equ	0xFF5
  1881                           intcon2	equ	0xFF1
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           postdec1	equ	0xFE5
  1885                           fsr1l	equ	0xFE1
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _Night_Mode *****************
  1889 ;; Defined at:
  1890 ;;		line 481 in file "Lab9.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;		None
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;		None               void
  1897 ;; Registers used:
  1898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;Total ram usage:        0 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:   10
  1911 ;; This function calls:
  1912 ;;		_Set_EW
  1913 ;;		_Set_EWLT
  1914 ;;		_Set_NS
  1915 ;;		_Set_NSLT
  1916 ;;		_Wait_N_Seconds
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text4
  1923  00E512                     __ptext4:
  1924                           	opt stack 0
  1925  00E512                     _Night_Mode:
  1926                           	opt stack 20
  1927                           
  1928                           ;Lab9.c: 483: MODE = 0;
  1929                           
  1930                           ;incstack = 0
  1931  00E512  0E00               	movlw	0
  1932  00E514  6E68               	movwf	_MODE+1,c
  1933  00E516  0E00               	movlw	0
  1934  00E518  6E67               	movwf	_MODE,c
  1935                           
  1936                           ;Lab9.c: 484: PORTEbits.RE2 = 0;
  1937  00E51A  9484               	bcf	3972,2,c	;volatile
  1938                           
  1939                           ;Lab9.c: 485: Act_Mode_Txt[0] = 'N';
  1940  00E51C  0E4E               	movlw	78
  1941  00E51E  6E54               	movwf	_Act_Mode_Txt,c
  1942                           
  1943                           ;Lab9.c: 487: Set_NSLT(1);
  1944  00E520  0E01               	movlw	1
  1945  00E522  ECA4  F06E         	call	_Set_NSLT
  1946                           
  1947                           ;Lab9.c: 488: Set_EW(1);
  1948  00E526  0E01               	movlw	1
  1949  00E528  EC3E  F06E         	call	_Set_EW
  1950                           
  1951                           ;Lab9.c: 489: Set_EWLT(1);
  1952  00E52C  0E01               	movlw	1
  1953  00E52E  EC60  F06E         	call	_Set_EWLT
  1954                           
  1955                           ;Lab9.c: 490: Set_NS(2);
  1956  00E532  0E02               	movlw	2
  1957  00E534  EC82  F06E         	call	_Set_NS
  1958                           
  1959                           ;Lab9.c: 491: Wait_N_Seconds(8);
  1960  00E538  0E08               	movlw	8
  1961  00E53A  EC60  F06D         	call	_Wait_N_Seconds
  1962                           
  1963                           ;Lab9.c: 492: Set_NS(3);
  1964  00E53E  0E03               	movlw	3
  1965  00E540  EC82  F06E         	call	_Set_NS
  1966                           
  1967                           ;Lab9.c: 493: Wait_N_Seconds(3);
  1968  00E544  0E03               	movlw	3
  1969  00E546  EC60  F06D         	call	_Wait_N_Seconds
  1970                           
  1971                           ;Lab9.c: 494: Set_NS(1);
  1972  00E54A  0E01               	movlw	1
  1973  00E54C  EC82  F06E         	call	_Set_NS
  1974                           
  1975                           ;Lab9.c: 496: if(PORTCbits.RC2 == 1)
  1976  00E550  A482               	btfss	3970,2,c	;volatile
  1977  00E552  D01F               	goto	l3711
  1978                           
  1979                           ;Lab9.c: 497: {
  1980                           ;Lab9.c: 498: Set_EWLT(2);
  1981  00E554  0E02               	movlw	2
  1982  00E556  EC60  F06E         	call	_Set_EWLT
  1983                           
  1984                           ;Lab9.c: 499: Wait_N_Seconds(6);
  1985  00E55A  0E06               	movlw	6
  1986  00E55C  EC60  F06D         	call	_Wait_N_Seconds
  1987                           
  1988                           ;Lab9.c: 500: Set_EWLT(3);
  1989  00E560  0E03               	movlw	3
  1990  00E562  EC60  F06E         	call	_Set_EWLT
  1991                           
  1992                           ;Lab9.c: 501: Wait_N_Seconds(3);
  1993  00E566  0E03               	movlw	3
  1994  00E568  EC60  F06D         	call	_Wait_N_Seconds
  1995                           
  1996                           ;Lab9.c: 502: Set_EWLT(1);
  1997  00E56C  0E01               	movlw	1
  1998  00E56E  EC60  F06E         	call	_Set_EWLT
  1999                           
  2000                           ;Lab9.c: 503: Set_EW(2);
  2001  00E572  0E02               	movlw	2
  2002  00E574  EC3E  F06E         	call	_Set_EW
  2003                           
  2004                           ;Lab9.c: 504: Wait_N_Seconds(8);
  2005  00E578  0E08               	movlw	8
  2006  00E57A  EC60  F06D         	call	_Wait_N_Seconds
  2007                           
  2008                           ;Lab9.c: 505: Set_EW(3);
  2009  00E57E  0E03               	movlw	3
  2010  00E580  EC3E  F06E         	call	_Set_EW
  2011                           
  2012                           ;Lab9.c: 506: Wait_N_Seconds(3);
  2013  00E584  0E03               	movlw	3
  2014  00E586  EC60  F06D         	call	_Wait_N_Seconds
  2015                           
  2016                           ;Lab9.c: 507: Set_EW(1);
  2017  00E58A  0E01               	movlw	1
  2018  00E58C  EC3E  F06E         	call	_Set_EW
  2019                           
  2020                           ;Lab9.c: 508: }
  2021  00E590  D010               	goto	l3719
  2022  00E592                     l3711:
  2023                           
  2024                           ;Lab9.c: 509: else
  2025                           ;Lab9.c: 510: {
  2026                           ;Lab9.c: 511: Set_EW(2);
  2027  00E592  0E02               	movlw	2
  2028  00E594  EC3E  F06E         	call	_Set_EW
  2029                           
  2030                           ;Lab9.c: 512: Wait_N_Seconds(8);
  2031  00E598  0E08               	movlw	8
  2032  00E59A  EC60  F06D         	call	_Wait_N_Seconds
  2033                           
  2034                           ;Lab9.c: 513: Set_EW(3);
  2035  00E59E  0E03               	movlw	3
  2036  00E5A0  EC3E  F06E         	call	_Set_EW
  2037                           
  2038                           ;Lab9.c: 514: Wait_N_Seconds(3);
  2039  00E5A4  0E03               	movlw	3
  2040  00E5A6  EC60  F06D         	call	_Wait_N_Seconds
  2041                           
  2042                           ;Lab9.c: 515: Set_EW(1);
  2043  00E5AA  0E01               	movlw	1
  2044  00E5AC  EC3E  F06E         	call	_Set_EW
  2045  00E5B0  D000               	goto	l3719
  2046  00E5B2                     l3719:
  2047                           
  2048                           ;Lab9.c: 516: }
  2049                           ;Lab9.c: 518: if(PORTCbits.RC1 == 1)
  2050  00E5B2  A282               	btfss	3970,1,c	;volatile
  2051  00E5B4  D010               	goto	l442
  2052                           
  2053                           ;Lab9.c: 519: {
  2054                           ;Lab9.c: 520: Set_NSLT(2);
  2055  00E5B6  0E02               	movlw	2
  2056  00E5B8  ECA4  F06E         	call	_Set_NSLT
  2057                           
  2058                           ;Lab9.c: 521: Wait_N_Seconds(6);
  2059  00E5BC  0E06               	movlw	6
  2060  00E5BE  EC60  F06D         	call	_Wait_N_Seconds
  2061                           
  2062                           ;Lab9.c: 522: Set_NSLT(3);
  2063  00E5C2  0E03               	movlw	3
  2064  00E5C4  ECA4  F06E         	call	_Set_NSLT
  2065                           
  2066                           ;Lab9.c: 523: Wait_N_Seconds(3);
  2067  00E5C8  0E03               	movlw	3
  2068  00E5CA  EC60  F06D         	call	_Wait_N_Seconds
  2069                           
  2070                           ;Lab9.c: 524: Set_NSLT(1);
  2071  00E5CE  0E01               	movlw	1
  2072  00E5D0  ECA4  F06E         	call	_Set_NSLT
  2073  00E5D4  D000               	goto	l442
  2074  00E5D6                     l442:
  2075  00E5D6  0012               	return		;funcret
  2076  00E5D8                     __end_of_Night_Mode:
  2077                           	opt stack 0
  2078                           tblptru	equ	0xFF8
  2079                           tblptrh	equ	0xFF7
  2080                           tblptrl	equ	0xFF6
  2081                           tablat	equ	0xFF5
  2082                           intcon2	equ	0xFF1
  2083                           postinc0	equ	0xFEE
  2084                           wreg	equ	0xFE8
  2085                           postdec1	equ	0xFE5
  2086                           fsr1l	equ	0xFE1
  2087                           status	equ	0xFD8
  2088                           
  2089 ;; *************** function _Initialize_Screen *****************
  2090 ;; Defined at:
  2091 ;;		line 163 in file "Lab9.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;		None
  2096 ;; Return value:  Size  Location     Type
  2097 ;;		None               void
  2098 ;; Registers used:
  2099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;Total ram usage:        0 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    7
  2112 ;; This function calls:
  2113 ;;		_LCD_Reset
  2114 ;;		_TFT_GreenTab_Initialize
  2115 ;;		_drawCircle
  2116 ;;		_drawRect
  2117 ;;		_drawtext
  2118 ;;		_fillCircle
  2119 ;;		_fillScreen
  2120 ;;		_strcpy
  2121 ;; This function is called by:
  2122 ;;		_main
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text5
  2127  00F69C                     __ptext5:
  2128                           	opt stack 0
  2129  00F69C                     _Initialize_Screen:
  2130                           	opt stack 23
  2131                           
  2132                           ;Lab9.c: 165: LCD_Reset();
  2133                           
  2134                           ;incstack = 0
  2135  00F69C  ECC4  F06C         	call	_LCD_Reset	;wreg free
  2136                           
  2137                           ;Lab9.c: 166: TFT_GreenTab_Initialize();
  2138  00F6A0  EC4B  F06D         	call	_TFT_GreenTab_Initialize	;wreg free
  2139                           
  2140                           ;Lab9.c: 167: fillScreen(0x0000);
  2141  00F6A4  0E00               	movlw	0
  2142  00F6A6  6E15               	movwf	fillScreen@color+1,c
  2143  00F6A8  0E00               	movlw	0
  2144  00F6AA  6E14               	movwf	fillScreen@color,c
  2145  00F6AC  EC04  F06D         	call	_fillScreen	;wreg free
  2146                           
  2147                           ;Lab9.c: 170: txt = buffer;
  2148  00F6B0  0E80               	movlw	low _buffer
  2149  00F6B2  6E6B               	movwf	_txt,c
  2150  00F6B4  0E00               	movlw	high _buffer
  2151  00F6B6  6E6C               	movwf	_txt+1,c
  2152                           
  2153                           ;Lab9.c: 171: strcpy(txt, "ECE3301L Spring 21-S1");
  2154  00F6B8  C06B  F001         	movff	_txt,strcpy@to
  2155  00F6BC  C06C  F002         	movff	_txt+1,strcpy@to+1
  2156  00F6C0  0E96               	movlw	low STR_1
  2157  00F6C2  6E03               	movwf	strcpy@from,c
  2158  00F6C4  0EFF               	movlw	high STR_1
  2159  00F6C6  6E04               	movwf	strcpy@from+1,c
  2160  00F6C8  ECA8  F06D         	call	_strcpy	;wreg free
  2161                           
  2162                           ;Lab9.c: 172: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2163  00F6CC  0E02               	movlw	2
  2164  00F6CE  6E29               	movwf	drawtext@y,c
  2165  00F6D0  C06B  F02A         	movff	_txt,drawtext@_text
  2166  00F6D4  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2167  00F6D8  0EFF               	movlw	255
  2168  00F6DA  6E2D               	movwf	drawtext@color+1,c
  2169  00F6DC  682C               	setf	drawtext@color,c
  2170  00F6DE  0E00               	movlw	0
  2171  00F6E0  6E2F               	movwf	drawtext@bg+1,c
  2172  00F6E2  0E00               	movlw	0
  2173  00F6E4  6E2E               	movwf	drawtext@bg,c
  2174  00F6E6  0E01               	movlw	1
  2175  00F6E8  6E30               	movwf	drawtext@size,c
  2176  00F6EA  0E02               	movlw	2
  2177  00F6EC  EC5A  F073         	call	_drawtext
  2178                           
  2179                           ;Lab9.c: 175: strcpy(txt, "Mode:");
  2180  00F6F0  C06B  F001         	movff	_txt,strcpy@to
  2181  00F6F4  C06C  F002         	movff	_txt+1,strcpy@to+1
  2182  00F6F8  0EE5               	movlw	low STR_2
  2183  00F6FA  6E03               	movwf	strcpy@from,c
  2184  00F6FC  0EFF               	movlw	high STR_2
  2185  00F6FE  6E04               	movwf	strcpy@from+1,c
  2186  00F700  ECA8  F06D         	call	_strcpy	;wreg free
  2187                           
  2188                           ;Lab9.c: 176: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2189  00F704  0E0A               	movlw	10
  2190  00F706  6E29               	movwf	drawtext@y,c
  2191  00F708  C06B  F02A         	movff	_txt,drawtext@_text
  2192  00F70C  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2193  00F710  0EFF               	movlw	255
  2194  00F712  6E2D               	movwf	drawtext@color+1,c
  2195  00F714  682C               	setf	drawtext@color,c
  2196  00F716  0E00               	movlw	0
  2197  00F718  6E2F               	movwf	drawtext@bg+1,c
  2198  00F71A  0E00               	movlw	0
  2199  00F71C  6E2E               	movwf	drawtext@bg,c
  2200  00F71E  0E01               	movlw	1
  2201  00F720  6E30               	movwf	drawtext@size,c
  2202  00F722  0E02               	movlw	2
  2203  00F724  EC5A  F073         	call	_drawtext
  2204                           
  2205                           ;Lab9.c: 177: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2206  00F728  0E0A               	movlw	10
  2207  00F72A  6E29               	movwf	drawtext@y,c
  2208  00F72C  0E54               	movlw	low _Act_Mode_Txt
  2209  00F72E  6E2A               	movwf	drawtext@_text,c
  2210  00F730  0E00               	movlw	high _Act_Mode_Txt
  2211  00F732  6E2B               	movwf	drawtext@_text+1,c
  2212  00F734  0EFF               	movlw	255
  2213  00F736  6E2D               	movwf	drawtext@color+1,c
  2214  00F738  682C               	setf	drawtext@color,c
  2215  00F73A  0E00               	movlw	0
  2216  00F73C  6E2F               	movwf	drawtext@bg+1,c
  2217  00F73E  0E00               	movlw	0
  2218  00F740  6E2E               	movwf	drawtext@bg,c
  2219  00F742  0E01               	movlw	1
  2220  00F744  6E30               	movwf	drawtext@size,c
  2221  00F746  0E23               	movlw	35
  2222  00F748  EC5A  F073         	call	_drawtext
  2223                           
  2224                           ;Lab9.c: 180: strcpy(txt, "FR:");
  2225  00F74C  C06B  F001         	movff	_txt,strcpy@to
  2226  00F750  C06C  F002         	movff	_txt+1,strcpy@to+1
  2227  00F754  0EEB               	movlw	low STR_3
  2228  00F756  6E03               	movwf	strcpy@from,c
  2229  00F758  0EFF               	movlw	high STR_3
  2230  00F75A  6E04               	movwf	strcpy@from+1,c
  2231  00F75C  ECA8  F06D         	call	_strcpy	;wreg free
  2232                           
  2233                           ;Lab9.c: 181: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2234  00F760  0E0A               	movlw	10
  2235  00F762  6E29               	movwf	drawtext@y,c
  2236  00F764  C06B  F02A         	movff	_txt,drawtext@_text
  2237  00F768  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2238  00F76C  0EFF               	movlw	255
  2239  00F76E  6E2D               	movwf	drawtext@color+1,c
  2240  00F770  682C               	setf	drawtext@color,c
  2241  00F772  0E00               	movlw	0
  2242  00F774  6E2F               	movwf	drawtext@bg+1,c
  2243  00F776  0E00               	movlw	0
  2244  00F778  6E2E               	movwf	drawtext@bg,c
  2245  00F77A  0E01               	movlw	1
  2246  00F77C  6E30               	movwf	drawtext@size,c
  2247  00F77E  0E32               	movlw	50
  2248  00F780  EC5A  F073         	call	_drawtext
  2249                           
  2250                           ;Lab9.c: 182: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2251  00F784  0E0A               	movlw	10
  2252  00F786  6E29               	movwf	drawtext@y,c
  2253  00F788  0E56               	movlw	low _FlashingR_Txt
  2254  00F78A  6E2A               	movwf	drawtext@_text,c
  2255  00F78C  0E00               	movlw	high _FlashingR_Txt
  2256  00F78E  6E2B               	movwf	drawtext@_text+1,c
  2257  00F790  0EFF               	movlw	255
  2258  00F792  6E2D               	movwf	drawtext@color+1,c
  2259  00F794  682C               	setf	drawtext@color,c
  2260  00F796  0E00               	movlw	0
  2261  00F798  6E2F               	movwf	drawtext@bg+1,c
  2262  00F79A  0E00               	movlw	0
  2263  00F79C  6E2E               	movwf	drawtext@bg,c
  2264  00F79E  0E01               	movlw	1
  2265  00F7A0  6E30               	movwf	drawtext@size,c
  2266  00F7A2  0E46               	movlw	70
  2267  00F7A4  EC5A  F073         	call	_drawtext
  2268                           
  2269                           ;Lab9.c: 185: strcpy(txt, "FS:");
  2270  00F7A8  C06B  F001         	movff	_txt,strcpy@to
  2271  00F7AC  C06C  F002         	movff	_txt+1,strcpy@to+1
  2272  00F7B0  0EEF               	movlw	low STR_4
  2273  00F7B2  6E03               	movwf	strcpy@from,c
  2274  00F7B4  0EFF               	movlw	high STR_4
  2275  00F7B6  6E04               	movwf	strcpy@from+1,c
  2276  00F7B8  ECA8  F06D         	call	_strcpy	;wreg free
  2277                           
  2278                           ;Lab9.c: 186: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2279  00F7BC  0E0A               	movlw	10
  2280  00F7BE  6E29               	movwf	drawtext@y,c
  2281  00F7C0  C06B  F02A         	movff	_txt,drawtext@_text
  2282  00F7C4  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2283  00F7C8  0EFF               	movlw	255
  2284  00F7CA  6E2D               	movwf	drawtext@color+1,c
  2285  00F7CC  682C               	setf	drawtext@color,c
  2286  00F7CE  0E00               	movlw	0
  2287  00F7D0  6E2F               	movwf	drawtext@bg+1,c
  2288  00F7D2  0E00               	movlw	0
  2289  00F7D4  6E2E               	movwf	drawtext@bg,c
  2290  00F7D6  0E01               	movlw	1
  2291  00F7D8  6E30               	movwf	drawtext@size,c
  2292  00F7DA  0E50               	movlw	80
  2293  00F7DC  EC5A  F073         	call	_drawtext
  2294                           
  2295                           ;Lab9.c: 187: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2296  00F7E0  0E0A               	movlw	10
  2297  00F7E2  6E29               	movwf	drawtext@y,c
  2298  00F7E4  0E58               	movlw	low _FlashingS_Txt
  2299  00F7E6  6E2A               	movwf	drawtext@_text,c
  2300  00F7E8  0E00               	movlw	high _FlashingS_Txt
  2301  00F7EA  6E2B               	movwf	drawtext@_text+1,c
  2302  00F7EC  0EFF               	movlw	255
  2303  00F7EE  6E2D               	movwf	drawtext@color+1,c
  2304  00F7F0  682C               	setf	drawtext@color,c
  2305  00F7F2  0E00               	movlw	0
  2306  00F7F4  6E2F               	movwf	drawtext@bg+1,c
  2307  00F7F6  0E00               	movlw	0
  2308  00F7F8  6E2E               	movwf	drawtext@bg,c
  2309  00F7FA  0E01               	movlw	1
  2310  00F7FC  6E30               	movwf	drawtext@size,c
  2311  00F7FE  0E64               	movlw	100
  2312  00F800  EC5A  F073         	call	_drawtext
  2313                           
  2314                           ;Lab9.c: 190: strcpy(txt, "*");
  2315  00F804  C06B  F001         	movff	_txt,strcpy@to
  2316  00F808  C06C  F002         	movff	_txt+1,strcpy@to+1
  2317  00F80C  0EFD               	movlw	low STR_5
  2318  00F80E  6E03               	movwf	strcpy@from,c
  2319  00F810  0EFF               	movlw	high STR_5
  2320  00F812  6E04               	movwf	strcpy@from+1,c
  2321  00F814  ECA8  F06D         	call	_strcpy	;wreg free
  2322                           
  2323                           ;Lab9.c: 191: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2324  00F818  0E0A               	movlw	10
  2325  00F81A  6E29               	movwf	drawtext@y,c
  2326  00F81C  C06B  F02A         	movff	_txt,drawtext@_text
  2327  00F820  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2328  00F824  0EFF               	movlw	255
  2329  00F826  6E2D               	movwf	drawtext@color+1,c
  2330  00F828  682C               	setf	drawtext@color,c
  2331  00F82A  0E00               	movlw	0
  2332  00F82C  6E2F               	movwf	drawtext@bg+1,c
  2333  00F82E  0E00               	movlw	0
  2334  00F830  6E2E               	movwf	drawtext@bg,c
  2335  00F832  0E01               	movlw	1
  2336  00F834  6E30               	movwf	drawtext@size,c
  2337  00F836  0E78               	movlw	120
  2338  00F838  EC5A  F073         	call	_drawtext
  2339                           
  2340                           ;Lab9.c: 194: strcpy(txt, "EAST/WEST");
  2341  00F83C  C06B  F001         	movff	_txt,strcpy@to
  2342  00F840  C06C  F002         	movff	_txt+1,strcpy@to+1
  2343  00F844  0ECD               	movlw	low STR_6
  2344  00F846  6E03               	movwf	strcpy@from,c
  2345  00F848  0EFF               	movlw	high STR_6
  2346  00F84A  6E04               	movwf	strcpy@from+1,c
  2347  00F84C  ECA8  F06D         	call	_strcpy	;wreg free
  2348                           
  2349                           ;Lab9.c: 195: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2350  00F850  0E14               	movlw	20
  2351  00F852  6E29               	movwf	drawtext@y,c
  2352  00F854  C06B  F02A         	movff	_txt,drawtext@_text
  2353  00F858  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2354  00F85C  0E07               	movlw	7
  2355  00F85E  6E2D               	movwf	drawtext@color+1,c
  2356  00F860  682C               	setf	drawtext@color,c
  2357  00F862  0E00               	movlw	0
  2358  00F864  6E2F               	movwf	drawtext@bg+1,c
  2359  00F866  0E00               	movlw	0
  2360  00F868  6E2E               	movwf	drawtext@bg,c
  2361  00F86A  0E01               	movlw	1
  2362  00F86C  6E30               	movwf	drawtext@size,c
  2363  00F86E  0E1E               	movlw	30
  2364  00F870  EC5A  F073         	call	_drawtext
  2365                           
  2366                           ;Lab9.c: 196: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2367  00F874  0E00               	movlw	0
  2368  00F876  6E14               	movwf	drawRect@x+1,c
  2369  00F878  0E1E               	movlw	30
  2370  00F87A  6E13               	movwf	drawRect@x,c
  2371  00F87C  0E00               	movlw	0
  2372  00F87E  6E16               	movwf	drawRect@y+1,c
  2373  00F880  0E1B               	movlw	27
  2374  00F882  6E15               	movwf	drawRect@y,c
  2375  00F884  0E00               	movlw	0
  2376  00F886  6E18               	movwf	drawRect@w+1,c
  2377  00F888  0E3C               	movlw	60
  2378  00F88A  6E17               	movwf	drawRect@w,c
  2379  00F88C  0E00               	movlw	0
  2380  00F88E  6E1A               	movwf	drawRect@h+1,c
  2381  00F890  0E12               	movlw	18
  2382  00F892  6E19               	movwf	drawRect@h,c
  2383  00F894  0E07               	movlw	7
  2384  00F896  6E1C               	movwf	drawRect@color+1,c
  2385  00F898  681B               	setf	drawRect@color,c
  2386  00F89A  EC64  F06F         	call	_drawRect	;wreg free
  2387                           
  2388                           ;Lab9.c: 197: fillCircle(40, 20 + 15, 7, 0xF800);
  2389  00F89E  0E00               	movlw	0
  2390  00F8A0  6E2C               	movwf	fillCircle@x0+1,c
  2391  00F8A2  0E28               	movlw	40
  2392  00F8A4  6E2B               	movwf	fillCircle@x0,c
  2393  00F8A6  0E00               	movlw	0
  2394  00F8A8  6E2E               	movwf	fillCircle@y0+1,c
  2395  00F8AA  0E23               	movlw	35
  2396  00F8AC  6E2D               	movwf	fillCircle@y0,c
  2397  00F8AE  0E00               	movlw	0
  2398  00F8B0  6E30               	movwf	fillCircle@r+1,c
  2399  00F8B2  0E07               	movlw	7
  2400  00F8B4  6E2F               	movwf	fillCircle@r,c
  2401  00F8B6  0EF8               	movlw	248
  2402  00F8B8  6E32               	movwf	fillCircle@color+1,c
  2403  00F8BA  0E00               	movlw	0
  2404  00F8BC  6E31               	movwf	fillCircle@color,c
  2405  00F8BE  EC12  F06F         	call	_fillCircle	;wreg free
  2406                           
  2407                           ;Lab9.c: 198: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2408  00F8C2  0E00               	movlw	0
  2409  00F8C4  6E0D               	movwf	drawCircle@x0+1,c
  2410  00F8C6  0E3C               	movlw	60
  2411  00F8C8  6E0C               	movwf	drawCircle@x0,c
  2412  00F8CA  0E00               	movlw	0
  2413  00F8CC  6E0F               	movwf	drawCircle@y0+1,c
  2414  00F8CE  0E23               	movlw	35
  2415  00F8D0  6E0E               	movwf	drawCircle@y0,c
  2416  00F8D2  0E00               	movlw	0
  2417  00F8D4  6E11               	movwf	drawCircle@r+1,c
  2418  00F8D6  0E07               	movlw	7
  2419  00F8D8  6E10               	movwf	drawCircle@r,c
  2420  00F8DA  0EFF               	movlw	255
  2421  00F8DC  6E13               	movwf	drawCircle@color+1,c
  2422  00F8DE  0EE0               	movlw	224
  2423  00F8E0  6E12               	movwf	drawCircle@color,c
  2424  00F8E2  ECE1  F077         	call	_drawCircle	;wreg free
  2425                           
  2426                           ;Lab9.c: 199: drawCircle(80, 20 + 15, 7, 0x07E0);
  2427  00F8E6  0E00               	movlw	0
  2428  00F8E8  6E0D               	movwf	drawCircle@x0+1,c
  2429  00F8EA  0E50               	movlw	80
  2430  00F8EC  6E0C               	movwf	drawCircle@x0,c
  2431  00F8EE  0E00               	movlw	0
  2432  00F8F0  6E0F               	movwf	drawCircle@y0+1,c
  2433  00F8F2  0E23               	movlw	35
  2434  00F8F4  6E0E               	movwf	drawCircle@y0,c
  2435  00F8F6  0E00               	movlw	0
  2436  00F8F8  6E11               	movwf	drawCircle@r+1,c
  2437  00F8FA  0E07               	movlw	7
  2438  00F8FC  6E10               	movwf	drawCircle@r,c
  2439  00F8FE  0E07               	movlw	7
  2440  00F900  6E13               	movwf	drawCircle@color+1,c
  2441  00F902  0EE0               	movlw	224
  2442  00F904  6E12               	movwf	drawCircle@color,c
  2443  00F906  ECE1  F077         	call	_drawCircle	;wreg free
  2444                           
  2445                           ;Lab9.c: 200: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2446  00F90A  0E1E               	movlw	30
  2447  00F90C  6E29               	movwf	drawtext@y,c
  2448  00F90E  0E45               	movlw	low _EW_Count
  2449  00F910  6E2A               	movwf	drawtext@_text,c
  2450  00F912  0E00               	movlw	high _EW_Count
  2451  00F914  6E2B               	movwf	drawtext@_text+1,c
  2452  00F916  0E07               	movlw	7
  2453  00F918  6E2D               	movwf	drawtext@color+1,c
  2454  00F91A  682C               	setf	drawtext@color,c
  2455  00F91C  0E00               	movlw	0
  2456  00F91E  6E2F               	movwf	drawtext@bg+1,c
  2457  00F920  0E00               	movlw	0
  2458  00F922  6E2E               	movwf	drawtext@bg,c
  2459  00F924  0E02               	movlw	2
  2460  00F926  6E30               	movwf	drawtext@size,c
  2461  00F928  0E64               	movlw	100
  2462  00F92A  EC5A  F073         	call	_drawtext
  2463                           
  2464                           ;Lab9.c: 203: strcpy(txt, "E/W LT");
  2465  00F92E  C06B  F001         	movff	_txt,strcpy@to
  2466  00F932  C06C  F002         	movff	_txt+1,strcpy@to+1
  2467  00F936  0EDE               	movlw	low STR_7
  2468  00F938  6E03               	movwf	strcpy@from,c
  2469  00F93A  0EFF               	movlw	high STR_7
  2470  00F93C  6E04               	movwf	strcpy@from+1,c
  2471  00F93E  ECA8  F06D         	call	_strcpy	;wreg free
  2472                           
  2473                           ;Lab9.c: 204: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2474  00F942  0E32               	movlw	50
  2475  00F944  6E29               	movwf	drawtext@y,c
  2476  00F946  C06B  F02A         	movff	_txt,drawtext@_text
  2477  00F94A  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2478  00F94E  0EFF               	movlw	255
  2479  00F950  6E2D               	movwf	drawtext@color+1,c
  2480  00F952  682C               	setf	drawtext@color,c
  2481  00F954  0E00               	movlw	0
  2482  00F956  6E2F               	movwf	drawtext@bg+1,c
  2483  00F958  0E00               	movlw	0
  2484  00F95A  6E2E               	movwf	drawtext@bg,c
  2485  00F95C  0E01               	movlw	1
  2486  00F95E  6E30               	movwf	drawtext@size,c
  2487  00F960  0E1E               	movlw	30
  2488  00F962  EC5A  F073         	call	_drawtext
  2489                           
  2490                           ;Lab9.c: 205: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2491  00F966  0E00               	movlw	0
  2492  00F968  6E14               	movwf	drawRect@x+1,c
  2493  00F96A  0E1E               	movlw	30
  2494  00F96C  6E13               	movwf	drawRect@x,c
  2495  00F96E  0E00               	movlw	0
  2496  00F970  6E16               	movwf	drawRect@y+1,c
  2497  00F972  0E39               	movlw	57
  2498  00F974  6E15               	movwf	drawRect@y,c
  2499  00F976  0E00               	movlw	0
  2500  00F978  6E18               	movwf	drawRect@w+1,c
  2501  00F97A  0E3C               	movlw	60
  2502  00F97C  6E17               	movwf	drawRect@w,c
  2503  00F97E  0E00               	movlw	0
  2504  00F980  6E1A               	movwf	drawRect@h+1,c
  2505  00F982  0E12               	movlw	18
  2506  00F984  6E19               	movwf	drawRect@h,c
  2507  00F986  0EFF               	movlw	255
  2508  00F988  6E1C               	movwf	drawRect@color+1,c
  2509  00F98A  681B               	setf	drawRect@color,c
  2510  00F98C  EC64  F06F         	call	_drawRect	;wreg free
  2511                           
  2512                           ;Lab9.c: 206: fillCircle(40, 50 + 15, 7, 0xF800);
  2513  00F990  0E00               	movlw	0
  2514  00F992  6E2C               	movwf	fillCircle@x0+1,c
  2515  00F994  0E28               	movlw	40
  2516  00F996  6E2B               	movwf	fillCircle@x0,c
  2517  00F998  0E00               	movlw	0
  2518  00F99A  6E2E               	movwf	fillCircle@y0+1,c
  2519  00F99C  0E41               	movlw	65
  2520  00F99E  6E2D               	movwf	fillCircle@y0,c
  2521  00F9A0  0E00               	movlw	0
  2522  00F9A2  6E30               	movwf	fillCircle@r+1,c
  2523  00F9A4  0E07               	movlw	7
  2524  00F9A6  6E2F               	movwf	fillCircle@r,c
  2525  00F9A8  0EF8               	movlw	248
  2526  00F9AA  6E32               	movwf	fillCircle@color+1,c
  2527  00F9AC  0E00               	movlw	0
  2528  00F9AE  6E31               	movwf	fillCircle@color,c
  2529  00F9B0  EC12  F06F         	call	_fillCircle	;wreg free
  2530                           
  2531                           ;Lab9.c: 207: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2532  00F9B4  0E00               	movlw	0
  2533  00F9B6  6E0D               	movwf	drawCircle@x0+1,c
  2534  00F9B8  0E3C               	movlw	60
  2535  00F9BA  6E0C               	movwf	drawCircle@x0,c
  2536  00F9BC  0E00               	movlw	0
  2537  00F9BE  6E0F               	movwf	drawCircle@y0+1,c
  2538  00F9C0  0E41               	movlw	65
  2539  00F9C2  6E0E               	movwf	drawCircle@y0,c
  2540  00F9C4  0E00               	movlw	0
  2541  00F9C6  6E11               	movwf	drawCircle@r+1,c
  2542  00F9C8  0E07               	movlw	7
  2543  00F9CA  6E10               	movwf	drawCircle@r,c
  2544  00F9CC  0EFF               	movlw	255
  2545  00F9CE  6E13               	movwf	drawCircle@color+1,c
  2546  00F9D0  0EE0               	movlw	224
  2547  00F9D2  6E12               	movwf	drawCircle@color,c
  2548  00F9D4  ECE1  F077         	call	_drawCircle	;wreg free
  2549                           
  2550                           ;Lab9.c: 208: drawCircle(80, 50 + 15, 7, 0x07E0);
  2551  00F9D8  0E00               	movlw	0
  2552  00F9DA  6E0D               	movwf	drawCircle@x0+1,c
  2553  00F9DC  0E50               	movlw	80
  2554  00F9DE  6E0C               	movwf	drawCircle@x0,c
  2555  00F9E0  0E00               	movlw	0
  2556  00F9E2  6E0F               	movwf	drawCircle@y0+1,c
  2557  00F9E4  0E41               	movlw	65
  2558  00F9E6  6E0E               	movwf	drawCircle@y0,c
  2559  00F9E8  0E00               	movlw	0
  2560  00F9EA  6E11               	movwf	drawCircle@r+1,c
  2561  00F9EC  0E07               	movlw	7
  2562  00F9EE  6E10               	movwf	drawCircle@r,c
  2563  00F9F0  0E07               	movlw	7
  2564  00F9F2  6E13               	movwf	drawCircle@color+1,c
  2565  00F9F4  0EE0               	movlw	224
  2566  00F9F6  6E12               	movwf	drawCircle@color,c
  2567  00F9F8  ECE1  F077         	call	_drawCircle	;wreg free
  2568                           
  2569                           ;Lab9.c: 209: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2570  00F9FC  0E3C               	movlw	60
  2571  00F9FE  6E29               	movwf	drawtext@y,c
  2572  00FA00  0E42               	movlw	low _EWLT_Count
  2573  00FA02  6E2A               	movwf	drawtext@_text,c
  2574  00FA04  0E00               	movlw	high _EWLT_Count
  2575  00FA06  6E2B               	movwf	drawtext@_text+1,c
  2576  00FA08  0EFF               	movlw	255
  2577  00FA0A  6E2D               	movwf	drawtext@color+1,c
  2578  00FA0C  682C               	setf	drawtext@color,c
  2579  00FA0E  0E00               	movlw	0
  2580  00FA10  6E2F               	movwf	drawtext@bg+1,c
  2581  00FA12  0E00               	movlw	0
  2582  00FA14  6E2E               	movwf	drawtext@bg,c
  2583  00FA16  0E02               	movlw	2
  2584  00FA18  6E30               	movwf	drawtext@size,c
  2585  00FA1A  0E64               	movlw	100
  2586  00FA1C  EC5A  F073         	call	_drawtext
  2587                           
  2588                           ;Lab9.c: 212: strcpy(txt, "NORTH/SOUTH");
  2589  00FA20  C06B  F001         	movff	_txt,strcpy@to
  2590  00FA24  C06C  F002         	movff	_txt+1,strcpy@to+1
  2591  00FA28  0EC1               	movlw	low STR_8
  2592  00FA2A  6E03               	movwf	strcpy@from,c
  2593  00FA2C  0EFF               	movlw	high STR_8
  2594  00FA2E  6E04               	movwf	strcpy@from+1,c
  2595  00FA30  ECA8  F06D         	call	_strcpy	;wreg free
  2596                           
  2597                           ;Lab9.c: 213: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2598  00FA34  0E50               	movlw	80
  2599  00FA36  6E29               	movwf	drawtext@y,c
  2600  00FA38  C06B  F02A         	movff	_txt,drawtext@_text
  2601  00FA3C  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2602  00FA40  0E00               	movlw	0
  2603  00FA42  6E2D               	movwf	drawtext@color+1,c
  2604  00FA44  0E1F               	movlw	31
  2605  00FA46  6E2C               	movwf	drawtext@color,c
  2606  00FA48  0E00               	movlw	0
  2607  00FA4A  6E2F               	movwf	drawtext@bg+1,c
  2608  00FA4C  0E00               	movlw	0
  2609  00FA4E  6E2E               	movwf	drawtext@bg,c
  2610  00FA50  0E01               	movlw	1
  2611  00FA52  6E30               	movwf	drawtext@size,c
  2612  00FA54  0E1E               	movlw	30
  2613  00FA56  EC5A  F073         	call	_drawtext
  2614                           
  2615                           ;Lab9.c: 214: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2616  00FA5A  0E00               	movlw	0
  2617  00FA5C  6E14               	movwf	drawRect@x+1,c
  2618  00FA5E  0E1E               	movlw	30
  2619  00FA60  6E13               	movwf	drawRect@x,c
  2620  00FA62  0E00               	movlw	0
  2621  00FA64  6E16               	movwf	drawRect@y+1,c
  2622  00FA66  0E57               	movlw	87
  2623  00FA68  6E15               	movwf	drawRect@y,c
  2624  00FA6A  0E00               	movlw	0
  2625  00FA6C  6E18               	movwf	drawRect@w+1,c
  2626  00FA6E  0E3C               	movlw	60
  2627  00FA70  6E17               	movwf	drawRect@w,c
  2628  00FA72  0E00               	movlw	0
  2629  00FA74  6E1A               	movwf	drawRect@h+1,c
  2630  00FA76  0E12               	movlw	18
  2631  00FA78  6E19               	movwf	drawRect@h,c
  2632  00FA7A  0E00               	movlw	0
  2633  00FA7C  6E1C               	movwf	drawRect@color+1,c
  2634  00FA7E  0E1F               	movlw	31
  2635  00FA80  6E1B               	movwf	drawRect@color,c
  2636  00FA82  EC64  F06F         	call	_drawRect	;wreg free
  2637                           
  2638                           ;Lab9.c: 215: drawCircle(40, 80 + 15 , 7, 0xF800);
  2639  00FA86  0E00               	movlw	0
  2640  00FA88  6E0D               	movwf	drawCircle@x0+1,c
  2641  00FA8A  0E28               	movlw	40
  2642  00FA8C  6E0C               	movwf	drawCircle@x0,c
  2643  00FA8E  0E00               	movlw	0
  2644  00FA90  6E0F               	movwf	drawCircle@y0+1,c
  2645  00FA92  0E5F               	movlw	95
  2646  00FA94  6E0E               	movwf	drawCircle@y0,c
  2647  00FA96  0E00               	movlw	0
  2648  00FA98  6E11               	movwf	drawCircle@r+1,c
  2649  00FA9A  0E07               	movlw	7
  2650  00FA9C  6E10               	movwf	drawCircle@r,c
  2651  00FA9E  0EF8               	movlw	248
  2652  00FAA0  6E13               	movwf	drawCircle@color+1,c
  2653  00FAA2  0E00               	movlw	0
  2654  00FAA4  6E12               	movwf	drawCircle@color,c
  2655  00FAA6  ECE1  F077         	call	_drawCircle	;wreg free
  2656                           
  2657                           ;Lab9.c: 216: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2658  00FAAA  0E00               	movlw	0
  2659  00FAAC  6E0D               	movwf	drawCircle@x0+1,c
  2660  00FAAE  0E3C               	movlw	60
  2661  00FAB0  6E0C               	movwf	drawCircle@x0,c
  2662  00FAB2  0E00               	movlw	0
  2663  00FAB4  6E0F               	movwf	drawCircle@y0+1,c
  2664  00FAB6  0E5F               	movlw	95
  2665  00FAB8  6E0E               	movwf	drawCircle@y0,c
  2666  00FABA  0E00               	movlw	0
  2667  00FABC  6E11               	movwf	drawCircle@r+1,c
  2668  00FABE  0E07               	movlw	7
  2669  00FAC0  6E10               	movwf	drawCircle@r,c
  2670  00FAC2  0EFF               	movlw	255
  2671  00FAC4  6E13               	movwf	drawCircle@color+1,c
  2672  00FAC6  0EE0               	movlw	224
  2673  00FAC8  6E12               	movwf	drawCircle@color,c
  2674  00FACA  ECE1  F077         	call	_drawCircle	;wreg free
  2675                           
  2676                           ;Lab9.c: 217: fillCircle(80, 80 + 15 , 7, 0x07E0);
  2677  00FACE  0E00               	movlw	0
  2678  00FAD0  6E2C               	movwf	fillCircle@x0+1,c
  2679  00FAD2  0E50               	movlw	80
  2680  00FAD4  6E2B               	movwf	fillCircle@x0,c
  2681  00FAD6  0E00               	movlw	0
  2682  00FAD8  6E2E               	movwf	fillCircle@y0+1,c
  2683  00FADA  0E5F               	movlw	95
  2684  00FADC  6E2D               	movwf	fillCircle@y0,c
  2685  00FADE  0E00               	movlw	0
  2686  00FAE0  6E30               	movwf	fillCircle@r+1,c
  2687  00FAE2  0E07               	movlw	7
  2688  00FAE4  6E2F               	movwf	fillCircle@r,c
  2689  00FAE6  0E07               	movlw	7
  2690  00FAE8  6E32               	movwf	fillCircle@color+1,c
  2691  00FAEA  0EE0               	movlw	224
  2692  00FAEC  6E31               	movwf	fillCircle@color,c
  2693  00FAEE  EC12  F06F         	call	_fillCircle	;wreg free
  2694                           
  2695                           ;Lab9.c: 218: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2696  00FAF2  0E5A               	movlw	90
  2697  00FAF4  6E29               	movwf	drawtext@y,c
  2698  00FAF6  0E4B               	movlw	low _NS_Count
  2699  00FAF8  6E2A               	movwf	drawtext@_text,c
  2700  00FAFA  0E00               	movlw	high _NS_Count
  2701  00FAFC  6E2B               	movwf	drawtext@_text+1,c
  2702  00FAFE  0E00               	movlw	0
  2703  00FB00  6E2D               	movwf	drawtext@color+1,c
  2704  00FB02  0E1F               	movlw	31
  2705  00FB04  6E2C               	movwf	drawtext@color,c
  2706  00FB06  0E00               	movlw	0
  2707  00FB08  6E2F               	movwf	drawtext@bg+1,c
  2708  00FB0A  0E00               	movlw	0
  2709  00FB0C  6E2E               	movwf	drawtext@bg,c
  2710  00FB0E  0E02               	movlw	2
  2711  00FB10  6E30               	movwf	drawtext@size,c
  2712  00FB12  0E64               	movlw	100
  2713  00FB14  EC5A  F073         	call	_drawtext
  2714                           
  2715                           ;Lab9.c: 221: strcpy(txt, "N/S LT");
  2716  00FB18  C06B  F001         	movff	_txt,strcpy@to
  2717  00FB1C  C06C  F002         	movff	_txt+1,strcpy@to+1
  2718  00FB20  0ED7               	movlw	low STR_9
  2719  00FB22  6E03               	movwf	strcpy@from,c
  2720  00FB24  0EFF               	movlw	high STR_9
  2721  00FB26  6E04               	movwf	strcpy@from+1,c
  2722  00FB28  ECA8  F06D         	call	_strcpy	;wreg free
  2723                           
  2724                           ;Lab9.c: 222: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2725  00FB2C  0E6E               	movlw	110
  2726  00FB2E  6E29               	movwf	drawtext@y,c
  2727  00FB30  C06B  F02A         	movff	_txt,drawtext@_text
  2728  00FB34  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2729  00FB38  0EF8               	movlw	248
  2730  00FB3A  6E2D               	movwf	drawtext@color+1,c
  2731  00FB3C  0E1F               	movlw	31
  2732  00FB3E  6E2C               	movwf	drawtext@color,c
  2733  00FB40  0E00               	movlw	0
  2734  00FB42  6E2F               	movwf	drawtext@bg+1,c
  2735  00FB44  0E00               	movlw	0
  2736  00FB46  6E2E               	movwf	drawtext@bg,c
  2737  00FB48  0E01               	movlw	1
  2738  00FB4A  6E30               	movwf	drawtext@size,c
  2739  00FB4C  0E1E               	movlw	30
  2740  00FB4E  EC5A  F073         	call	_drawtext
  2741                           
  2742                           ;Lab9.c: 223: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2743  00FB52  0E00               	movlw	0
  2744  00FB54  6E14               	movwf	drawRect@x+1,c
  2745  00FB56  0E1E               	movlw	30
  2746  00FB58  6E13               	movwf	drawRect@x,c
  2747  00FB5A  0E00               	movlw	0
  2748  00FB5C  6E16               	movwf	drawRect@y+1,c
  2749  00FB5E  0E75               	movlw	117
  2750  00FB60  6E15               	movwf	drawRect@y,c
  2751  00FB62  0E00               	movlw	0
  2752  00FB64  6E18               	movwf	drawRect@w+1,c
  2753  00FB66  0E3C               	movlw	60
  2754  00FB68  6E17               	movwf	drawRect@w,c
  2755  00FB6A  0E00               	movlw	0
  2756  00FB6C  6E1A               	movwf	drawRect@h+1,c
  2757  00FB6E  0E12               	movlw	18
  2758  00FB70  6E19               	movwf	drawRect@h,c
  2759  00FB72  0EF8               	movlw	248
  2760  00FB74  6E1C               	movwf	drawRect@color+1,c
  2761  00FB76  0E1F               	movlw	31
  2762  00FB78  6E1B               	movwf	drawRect@color,c
  2763  00FB7A  EC64  F06F         	call	_drawRect	;wreg free
  2764                           
  2765                           ;Lab9.c: 224: fillCircle(40, 110 + 15, 7, 0xF800);
  2766  00FB7E  0E00               	movlw	0
  2767  00FB80  6E2C               	movwf	fillCircle@x0+1,c
  2768  00FB82  0E28               	movlw	40
  2769  00FB84  6E2B               	movwf	fillCircle@x0,c
  2770  00FB86  0E00               	movlw	0
  2771  00FB88  6E2E               	movwf	fillCircle@y0+1,c
  2772  00FB8A  0E7D               	movlw	125
  2773  00FB8C  6E2D               	movwf	fillCircle@y0,c
  2774  00FB8E  0E00               	movlw	0
  2775  00FB90  6E30               	movwf	fillCircle@r+1,c
  2776  00FB92  0E07               	movlw	7
  2777  00FB94  6E2F               	movwf	fillCircle@r,c
  2778  00FB96  0EF8               	movlw	248
  2779  00FB98  6E32               	movwf	fillCircle@color+1,c
  2780  00FB9A  0E00               	movlw	0
  2781  00FB9C  6E31               	movwf	fillCircle@color,c
  2782  00FB9E  EC12  F06F         	call	_fillCircle	;wreg free
  2783                           
  2784                           ;Lab9.c: 225: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2785  00FBA2  0E00               	movlw	0
  2786  00FBA4  6E0D               	movwf	drawCircle@x0+1,c
  2787  00FBA6  0E3C               	movlw	60
  2788  00FBA8  6E0C               	movwf	drawCircle@x0,c
  2789  00FBAA  0E00               	movlw	0
  2790  00FBAC  6E0F               	movwf	drawCircle@y0+1,c
  2791  00FBAE  0E7D               	movlw	125
  2792  00FBB0  6E0E               	movwf	drawCircle@y0,c
  2793  00FBB2  0E00               	movlw	0
  2794  00FBB4  6E11               	movwf	drawCircle@r+1,c
  2795  00FBB6  0E07               	movlw	7
  2796  00FBB8  6E10               	movwf	drawCircle@r,c
  2797  00FBBA  0EFF               	movlw	255
  2798  00FBBC  6E13               	movwf	drawCircle@color+1,c
  2799  00FBBE  0EE0               	movlw	224
  2800  00FBC0  6E12               	movwf	drawCircle@color,c
  2801  00FBC2  ECE1  F077         	call	_drawCircle	;wreg free
  2802                           
  2803                           ;Lab9.c: 226: drawCircle(80, 110 + 15, 7, 0x07E0);
  2804  00FBC6  0E00               	movlw	0
  2805  00FBC8  6E0D               	movwf	drawCircle@x0+1,c
  2806  00FBCA  0E50               	movlw	80
  2807  00FBCC  6E0C               	movwf	drawCircle@x0,c
  2808  00FBCE  0E00               	movlw	0
  2809  00FBD0  6E0F               	movwf	drawCircle@y0+1,c
  2810  00FBD2  0E7D               	movlw	125
  2811  00FBD4  6E0E               	movwf	drawCircle@y0,c
  2812  00FBD6  0E00               	movlw	0
  2813  00FBD8  6E11               	movwf	drawCircle@r+1,c
  2814  00FBDA  0E07               	movlw	7
  2815  00FBDC  6E10               	movwf	drawCircle@r,c
  2816  00FBDE  0E07               	movlw	7
  2817  00FBE0  6E13               	movwf	drawCircle@color+1,c
  2818  00FBE2  0EE0               	movlw	224
  2819  00FBE4  6E12               	movwf	drawCircle@color,c
  2820  00FBE6  ECE1  F077         	call	_drawCircle	;wreg free
  2821                           
  2822                           ;Lab9.c: 227: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2823  00FBEA  0E78               	movlw	120
  2824  00FBEC  6E29               	movwf	drawtext@y,c
  2825  00FBEE  0E48               	movlw	low _NSLT_Count
  2826  00FBF0  6E2A               	movwf	drawtext@_text,c
  2827  00FBF2  0E00               	movlw	high _NSLT_Count
  2828  00FBF4  6E2B               	movwf	drawtext@_text+1,c
  2829  00FBF6  0EF8               	movlw	248
  2830  00FBF8  6E2D               	movwf	drawtext@color+1,c
  2831  00FBFA  0E1F               	movlw	31
  2832  00FBFC  6E2C               	movwf	drawtext@color,c
  2833  00FBFE  0E00               	movlw	0
  2834  00FC00  6E2F               	movwf	drawtext@bg+1,c
  2835  00FC02  0E00               	movlw	0
  2836  00FC04  6E2E               	movwf	drawtext@bg,c
  2837  00FC06  0E02               	movlw	2
  2838  00FC08  6E30               	movwf	drawtext@size,c
  2839  00FC0A  0E64               	movlw	100
  2840  00FC0C  EC5A  F073         	call	_drawtext
  2841                           
  2842                           ;Lab9.c: 231: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2843  00FC10  0E1E               	movlw	30
  2844  00FC12  6E29               	movwf	drawtext@y,c
  2845  00FC14  0E4E               	movlw	low _PED_EW_Count
  2846  00FC16  6E2A               	movwf	drawtext@_text,c
  2847  00FC18  0E00               	movlw	high _PED_EW_Count
  2848  00FC1A  6E2B               	movwf	drawtext@_text+1,c
  2849  00FC1C  0E07               	movlw	7
  2850  00FC1E  6E2D               	movwf	drawtext@color+1,c
  2851  00FC20  682C               	setf	drawtext@color,c
  2852  00FC22  0E00               	movlw	0
  2853  00FC24  6E2F               	movwf	drawtext@bg+1,c
  2854  00FC26  0E00               	movlw	0
  2855  00FC28  6E2E               	movwf	drawtext@bg,c
  2856  00FC2A  0E02               	movlw	2
  2857  00FC2C  6E30               	movwf	drawtext@size,c
  2858  00FC2E  0E02               	movlw	2
  2859  00FC30  EC5A  F073         	call	_drawtext
  2860                           
  2861                           ;Lab9.c: 232: strcpy(txt, "PEW");
  2862  00FC34  C06B  F001         	movff	_txt,strcpy@to
  2863  00FC38  C06C  F002         	movff	_txt+1,strcpy@to+1
  2864  00FC3C  0EF7               	movlw	low STR_10
  2865  00FC3E  6E03               	movwf	strcpy@from,c
  2866  00FC40  0EFF               	movlw	high STR_10
  2867  00FC42  6E04               	movwf	strcpy@from+1,c
  2868  00FC44  ECA8  F06D         	call	_strcpy	;wreg free
  2869                           
  2870                           ;Lab9.c: 233: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2871  00FC48  0E14               	movlw	20
  2872  00FC4A  6E29               	movwf	drawtext@y,c
  2873  00FC4C  C06B  F02A         	movff	_txt,drawtext@_text
  2874  00FC50  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2875  00FC54  0E07               	movlw	7
  2876  00FC56  6E2D               	movwf	drawtext@color+1,c
  2877  00FC58  682C               	setf	drawtext@color,c
  2878  00FC5A  0E00               	movlw	0
  2879  00FC5C  6E2F               	movwf	drawtext@bg+1,c
  2880  00FC5E  0E00               	movlw	0
  2881  00FC60  6E2E               	movwf	drawtext@bg,c
  2882  00FC62  0E01               	movlw	1
  2883  00FC64  6E30               	movwf	drawtext@size,c
  2884  00FC66  0E03               	movlw	3
  2885  00FC68  EC5A  F073         	call	_drawtext
  2886                           
  2887                           ;Lab9.c: 236: strcpy(txt, "PNS");
  2888  00FC6C  C06B  F001         	movff	_txt,strcpy@to
  2889  00FC70  C06C  F002         	movff	_txt+1,strcpy@to+1
  2890  00FC74  0EF3               	movlw	low STR_11
  2891  00FC76  6E03               	movwf	strcpy@from,c
  2892  00FC78  0EFF               	movlw	high STR_11
  2893  00FC7A  6E04               	movwf	strcpy@from+1,c
  2894  00FC7C  ECA8  F06D         	call	_strcpy	;wreg free
  2895                           
  2896                           ;Lab9.c: 237: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  2897  00FC80  0E50               	movlw	80
  2898  00FC82  6E29               	movwf	drawtext@y,c
  2899  00FC84  C06B  F02A         	movff	_txt,drawtext@_text
  2900  00FC88  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2901  00FC8C  0E00               	movlw	0
  2902  00FC8E  6E2D               	movwf	drawtext@color+1,c
  2903  00FC90  0E1F               	movlw	31
  2904  00FC92  6E2C               	movwf	drawtext@color,c
  2905  00FC94  0E00               	movlw	0
  2906  00FC96  6E2F               	movwf	drawtext@bg+1,c
  2907  00FC98  0E00               	movlw	0
  2908  00FC9A  6E2E               	movwf	drawtext@bg,c
  2909  00FC9C  0E01               	movlw	1
  2910  00FC9E  6E30               	movwf	drawtext@size,c
  2911  00FCA0  0E03               	movlw	3
  2912  00FCA2  EC5A  F073         	call	_drawtext
  2913                           
  2914                           ;Lab9.c: 238: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  2915  00FCA6  0E5A               	movlw	90
  2916  00FCA8  6E29               	movwf	drawtext@y,c
  2917  00FCAA  0E51               	movlw	low _PED_NS_Count
  2918  00FCAC  6E2A               	movwf	drawtext@_text,c
  2919  00FCAE  0E00               	movlw	high _PED_NS_Count
  2920  00FCB0  6E2B               	movwf	drawtext@_text+1,c
  2921  00FCB2  0E00               	movlw	0
  2922  00FCB4  6E2D               	movwf	drawtext@color+1,c
  2923  00FCB6  0E1F               	movlw	31
  2924  00FCB8  6E2C               	movwf	drawtext@color,c
  2925  00FCBA  0E00               	movlw	0
  2926  00FCBC  6E2F               	movwf	drawtext@bg+1,c
  2927  00FCBE  0E00               	movlw	0
  2928  00FCC0  6E2E               	movwf	drawtext@bg,c
  2929  00FCC2  0E02               	movlw	2
  2930  00FCC4  6E30               	movwf	drawtext@size,c
  2931  00FCC6  0E02               	movlw	2
  2932  00FCC8  EC5A  F073         	call	_drawtext
  2933                           
  2934                           ;Lab9.c: 241: strcpy(txt, "EWP EWLT NSP NSLT MD");
  2935  00FCCC  C06B  F001         	movff	_txt,strcpy@to
  2936  00FCD0  C06C  F002         	movff	_txt+1,strcpy@to+1
  2937  00FCD4  0EAC               	movlw	low STR_12
  2938  00FCD6  6E03               	movwf	strcpy@from,c
  2939  00FCD8  0EFF               	movlw	high STR_12
  2940  00FCDA  6E04               	movwf	strcpy@from+1,c
  2941  00FCDC  ECA8  F06D         	call	_strcpy	;wreg free
  2942                           
  2943                           ;Lab9.c: 242: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2944  00FCE0  0E8C               	movlw	140
  2945  00FCE2  6E29               	movwf	drawtext@y,c
  2946  00FCE4  C06B  F02A         	movff	_txt,drawtext@_text
  2947  00FCE8  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2948  00FCEC  0EFF               	movlw	255
  2949  00FCEE  6E2D               	movwf	drawtext@color+1,c
  2950  00FCF0  682C               	setf	drawtext@color,c
  2951  00FCF2  0E00               	movlw	0
  2952  00FCF4  6E2F               	movwf	drawtext@bg+1,c
  2953  00FCF6  0E00               	movlw	0
  2954  00FCF8  6E2E               	movwf	drawtext@bg,c
  2955  00FCFA  0E01               	movlw	1
  2956  00FCFC  6E30               	movwf	drawtext@size,c
  2957  00FCFE  0E01               	movlw	1
  2958  00FD00  EC5A  F073         	call	_drawtext
  2959                           
  2960                           ;Lab9.c: 243: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2961  00FD04  0E95               	movlw	149
  2962  00FD06  6E29               	movwf	drawtext@y,c
  2963  00FD08  0E5C               	movlw	low _SW_EWPED_Txt
  2964  00FD0A  6E2A               	movwf	drawtext@_text,c
  2965  00FD0C  0E00               	movlw	high _SW_EWPED_Txt
  2966  00FD0E  6E2B               	movwf	drawtext@_text+1,c
  2967  00FD10  0EFF               	movlw	255
  2968  00FD12  6E2D               	movwf	drawtext@color+1,c
  2969  00FD14  682C               	setf	drawtext@color,c
  2970  00FD16  0E00               	movlw	0
  2971  00FD18  6E2F               	movwf	drawtext@bg+1,c
  2972  00FD1A  0E00               	movlw	0
  2973  00FD1C  6E2E               	movwf	drawtext@bg,c
  2974  00FD1E  0E01               	movlw	1
  2975  00FD20  6E30               	movwf	drawtext@size,c
  2976  00FD22  0E06               	movlw	6
  2977  00FD24  EC5A  F073         	call	_drawtext
  2978                           
  2979                           ;Lab9.c: 244: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2980  00FD28  0E95               	movlw	149
  2981  00FD2A  6E29               	movwf	drawtext@y,c
  2982  00FD2C  0E5A               	movlw	low _SW_EWLT_Txt
  2983  00FD2E  6E2A               	movwf	drawtext@_text,c
  2984  00FD30  0E00               	movlw	high _SW_EWLT_Txt
  2985  00FD32  6E2B               	movwf	drawtext@_text+1,c
  2986  00FD34  0EFF               	movlw	255
  2987  00FD36  6E2D               	movwf	drawtext@color+1,c
  2988  00FD38  682C               	setf	drawtext@color,c
  2989  00FD3A  0E00               	movlw	0
  2990  00FD3C  6E2F               	movwf	drawtext@bg+1,c
  2991  00FD3E  0E00               	movlw	0
  2992  00FD40  6E2E               	movwf	drawtext@bg,c
  2993  00FD42  0E01               	movlw	1
  2994  00FD44  6E30               	movwf	drawtext@size,c
  2995  00FD46  0E20               	movlw	32
  2996  00FD48  EC5A  F073         	call	_drawtext
  2997                           
  2998                           ;Lab9.c: 245: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2999  00FD4C  0E95               	movlw	149
  3000  00FD4E  6E29               	movwf	drawtext@y,c
  3001  00FD50  0E62               	movlw	low _SW_NSPED_Txt
  3002  00FD52  6E2A               	movwf	drawtext@_text,c
  3003  00FD54  0E00               	movlw	high _SW_NSPED_Txt
  3004  00FD56  6E2B               	movwf	drawtext@_text+1,c
  3005  00FD58  0EFF               	movlw	255
  3006  00FD5A  6E2D               	movwf	drawtext@color+1,c
  3007  00FD5C  682C               	setf	drawtext@color,c
  3008  00FD5E  0E00               	movlw	0
  3009  00FD60  6E2F               	movwf	drawtext@bg+1,c
  3010  00FD62  0E00               	movlw	0
  3011  00FD64  6E2E               	movwf	drawtext@bg,c
  3012  00FD66  0E01               	movlw	1
  3013  00FD68  6E30               	movwf	drawtext@size,c
  3014  00FD6A  0E3A               	movlw	58
  3015  00FD6C  EC5A  F073         	call	_drawtext
  3016                           
  3017                           ;Lab9.c: 246: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3018  00FD70  0E95               	movlw	149
  3019  00FD72  6E29               	movwf	drawtext@y,c
  3020  00FD74  0E60               	movlw	low _SW_NSLT_Txt
  3021  00FD76  6E2A               	movwf	drawtext@_text,c
  3022  00FD78  0E00               	movlw	high _SW_NSLT_Txt
  3023  00FD7A  6E2B               	movwf	drawtext@_text+1,c
  3024  00FD7C  0EFF               	movlw	255
  3025  00FD7E  6E2D               	movwf	drawtext@color+1,c
  3026  00FD80  682C               	setf	drawtext@color,c
  3027  00FD82  0E00               	movlw	0
  3028  00FD84  6E2F               	movwf	drawtext@bg+1,c
  3029  00FD86  0E00               	movlw	0
  3030  00FD88  6E2E               	movwf	drawtext@bg,c
  3031  00FD8A  0E01               	movlw	1
  3032  00FD8C  6E30               	movwf	drawtext@size,c
  3033  00FD8E  0E57               	movlw	87
  3034  00FD90  EC5A  F073         	call	_drawtext
  3035                           
  3036                           ;Lab9.c: 248: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3037  00FD94  0E95               	movlw	149
  3038  00FD96  6E29               	movwf	drawtext@y,c
  3039  00FD98  0E5E               	movlw	low _SW_MODE_Txt
  3040  00FD9A  6E2A               	movwf	drawtext@_text,c
  3041  00FD9C  0E00               	movlw	high _SW_MODE_Txt
  3042  00FD9E  6E2B               	movwf	drawtext@_text+1,c
  3043  00FDA0  0EFF               	movlw	255
  3044  00FDA2  6E2D               	movwf	drawtext@color+1,c
  3045  00FDA4  682C               	setf	drawtext@color,c
  3046  00FDA6  0E00               	movlw	0
  3047  00FDA8  6E2F               	movwf	drawtext@bg+1,c
  3048  00FDAA  0E00               	movlw	0
  3049  00FDAC  6E2E               	movwf	drawtext@bg,c
  3050  00FDAE  0E01               	movlw	1
  3051  00FDB0  6E30               	movwf	drawtext@size,c
  3052  00FDB2  0E70               	movlw	112
  3053  00FDB4  EC5A  F073         	call	_drawtext
  3054  00FDB8  0012               	return		;funcret
  3055  00FDBA                     __end_of_Initialize_Screen:
  3056                           	opt stack 0
  3057                           tblptru	equ	0xFF8
  3058                           tblptrh	equ	0xFF7
  3059                           tblptrl	equ	0xFF6
  3060                           tablat	equ	0xFF5
  3061                           intcon2	equ	0xFF1
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           postdec1	equ	0xFE5
  3065                           fsr1l	equ	0xFE1
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _fillScreen *****************
  3069 ;; Defined at:
  3070 ;;		line 652 in file "ST7735_TFT.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  color           2   19[COMRAM] unsigned int 
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;		None               void
  3077 ;; Registers used:
  3078 ;;		wreg, status,2, status,0, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3084 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;Total ram usage:        2 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    4
  3091 ;; This function calls:
  3092 ;;		_fillRectangle
  3093 ;; This function is called by:
  3094 ;;		_Initialize_Screen
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text6
  3099  00DA08                     __ptext6:
  3100                           	opt stack 0
  3101  00DA08                     _fillScreen:
  3102                           	opt stack 25
  3103                           
  3104                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3105                           
  3106                           ;incstack = 0
  3107  00DA08  0E00               	movlw	0
  3108  00DA0A  6E08               	movwf	fillRectangle@y,c
  3109  00DA0C  0E80               	movlw	128
  3110  00DA0E  6E09               	movwf	fillRectangle@w,c
  3111  00DA10  0EA0               	movlw	160
  3112  00DA12  6E0A               	movwf	fillRectangle@h,c
  3113  00DA14  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3114  00DA18  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3115  00DA1C  0E00               	movlw	0
  3116  00DA1E  ECEC  F072         	call	_fillRectangle
  3117  00DA22  0012               	return		;funcret
  3118  00DA24                     __end_of_fillScreen:
  3119                           	opt stack 0
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           intcon2	equ	0xFF1
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           postdec1	equ	0xFE5
  3128                           fsr1l	equ	0xFE1
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function _fillRectangle *****************
  3132 ;; Defined at:
  3133 ;;		line 536 in file "ST7735_TFT.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  x               1    wreg     unsigned char 
  3136 ;;  y               1    7[COMRAM] unsigned char 
  3137 ;;  w               1    8[COMRAM] unsigned char 
  3138 ;;  h               1    9[COMRAM] unsigned char 
  3139 ;;  color           2   10[COMRAM] unsigned int 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  x               1   18[COMRAM] unsigned char 
  3142 ;;  lo              1   17[COMRAM] unsigned char 
  3143 ;;  hi              1   16[COMRAM] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;		None               void
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3153 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;Total ram usage:       12 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    3
  3160 ;; This function calls:
  3161 ;;		_setAddrWindow
  3162 ;;		_spiwrite
  3163 ;; This function is called by:
  3164 ;;		_fillScreen
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text7
  3169  00E5D8                     __ptext7:
  3170                           	opt stack 0
  3171  00E5D8                     _fillRectangle:
  3172                           	opt stack 25
  3173                           
  3174                           ;incstack = 0
  3175                           ;fillRectangle@x stored from wreg
  3176  00E5D8  6E13               	movwf	fillRectangle@x,c
  3177                           
  3178                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3179                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3180  00E5DA  0E80               	movlw	128
  3181  00E5DC  6013               	cpfslt	fillRectangle@x,c
  3182  00E5DE  D069               	goto	l228
  3183  00E5E0  0E9F               	movlw	159
  3184  00E5E2  6408               	cpfsgt	fillRectangle@y,c
  3185  00E5E4  D001               	goto	l3209
  3186                           
  3187                           ;ST7735_TFT.c: 540: return;
  3188  00E5E6  D065               	goto	l228
  3189  00E5E8                     l3209:
  3190                           
  3191                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3192  00E5E8  0EFF               	movlw	255
  3193  00E5EA  6E0D               	movwf	??_fillRectangle& (0+255),c
  3194  00E5EC  0EFF               	movlw	255
  3195  00E5EE  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3196  00E5F0  5009               	movf	fillRectangle@w,w,c
  3197  00E5F2  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3198  00E5F6  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3199  00E5F8  260F               	addwf	??_fillRectangle+2,f,c
  3200  00E5FA  0E00               	movlw	0
  3201  00E5FC  2210               	addwfc	??_fillRectangle+3,f,c
  3202  00E5FE  500D               	movf	??_fillRectangle,w,c
  3203  00E600  260F               	addwf	??_fillRectangle+2,f,c
  3204  00E602  500E               	movf	??_fillRectangle+1,w,c
  3205  00E604  2210               	addwfc	??_fillRectangle+3,f,c
  3206  00E606  BE10               	btfsc	??_fillRectangle+3,7,c
  3207  00E608  D00A               	goto	l229
  3208  00E60A  5010               	movf	??_fillRectangle+3,w,c
  3209  00E60C  E104               	bnz	u2060
  3210  00E60E  0E80               	movlw	128
  3211  00E610  5C0F               	subwf	??_fillRectangle+2,w,c
  3212  00E612  A0D8               	btfss	status,0,c
  3213  00E614  D004               	goto	l229
  3214  00E616                     u2060:
  3215                           
  3216                           ;ST7735_TFT.c: 542: w = 128 - x;
  3217  00E616  5013               	movf	fillRectangle@x,w,c
  3218  00E618  0800               	sublw	0
  3219  00E61A  0F80               	addlw	128
  3220  00E61C  6E09               	movwf	fillRectangle@w,c
  3221  00E61E                     l229:
  3222                           
  3223                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3224  00E61E  0EFF               	movlw	255
  3225  00E620  6E0D               	movwf	??_fillRectangle& (0+255),c
  3226  00E622  0EFF               	movlw	255
  3227  00E624  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3228  00E626  500A               	movf	fillRectangle@h,w,c
  3229  00E628  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3230  00E62C  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3231  00E62E  260F               	addwf	??_fillRectangle+2,f,c
  3232  00E630  0E00               	movlw	0
  3233  00E632  2210               	addwfc	??_fillRectangle+3,f,c
  3234  00E634  500D               	movf	??_fillRectangle,w,c
  3235  00E636  260F               	addwf	??_fillRectangle+2,f,c
  3236  00E638  500E               	movf	??_fillRectangle+1,w,c
  3237  00E63A  2210               	addwfc	??_fillRectangle+3,f,c
  3238  00E63C  BE10               	btfsc	??_fillRectangle+3,7,c
  3239  00E63E  D00B               	goto	l3215
  3240  00E640  5010               	movf	??_fillRectangle+3,w,c
  3241  00E642  E104               	bnz	u2070
  3242  00E644  0EA0               	movlw	160
  3243  00E646  5C0F               	subwf	??_fillRectangle+2,w,c
  3244  00E648  A0D8               	btfss	status,0,c
  3245  00E64A  D005               	goto	l3215
  3246  00E64C                     u2070:
  3247                           
  3248                           ;ST7735_TFT.c: 544: h = 160 - y;
  3249  00E64C  5008               	movf	fillRectangle@y,w,c
  3250  00E64E  0800               	sublw	0
  3251  00E650  0FA0               	addlw	160
  3252  00E652  6E0A               	movwf	fillRectangle@h,c
  3253  00E654  D000               	goto	l3215
  3254  00E656                     l3215:
  3255                           
  3256                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3257  00E656  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3258  00E65A  5013               	movf	fillRectangle@x,w,c
  3259  00E65C  2409               	addwf	fillRectangle@w,w,c
  3260  00E65E  6E0D               	movwf	??_fillRectangle& (0+255),c
  3261  00E660  040D               	decf	??_fillRectangle,w,c
  3262  00E662  6E05               	movwf	setAddrWindow@x1,c
  3263  00E664  5008               	movf	fillRectangle@y,w,c
  3264  00E666  240A               	addwf	fillRectangle@h,w,c
  3265  00E668  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3266  00E66A  040E               	decf	??_fillRectangle+1,w,c
  3267  00E66C  6E06               	movwf	setAddrWindow@y1,c
  3268  00E66E  5013               	movf	fillRectangle@x,w,c
  3269  00E670  ECEB  F06E         	call	_setAddrWindow
  3270                           
  3271                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3272  00E674  500C               	movf	fillRectangle@color+1,w,c
  3273  00E676  6E11               	movwf	fillRectangle@hi,c
  3274  00E678  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3275                           
  3276                           ;ST7735_TFT.c: 547: PORTDbits.RD0 = 1;
  3277  00E67C  8083               	bsf	3971,0,c	;volatile
  3278                           
  3279                           ;ST7735_TFT.c: 548: PORTDbits.RD1 = 0;
  3280  00E67E  9283               	bcf	3971,1,c	;volatile
  3281                           
  3282                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3283  00E680  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3284  00E684                     l3227:
  3285  00E684  5008               	movf	fillRectangle@y,w,c
  3286  00E686  B4D8               	btfsc	status,2,c
  3287  00E688  D013               	goto	l232
  3288  00E68A  D001               	goto	l231
  3289  00E68C  D011               	goto	l232
  3290  00E68E                     l231:
  3291                           
  3292                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3293  00E68E  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3294  00E692                     l3231:
  3295  00E692  5013               	movf	fillRectangle@x,w,c
  3296  00E694  B4D8               	btfsc	status,2,c
  3297  00E696  D00A               	goto	l3241
  3298  00E698  D001               	goto	l3235
  3299  00E69A  D008               	goto	l3241
  3300  00E69C                     l3235:
  3301                           
  3302                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3303  00E69C  5011               	movf	fillRectangle@hi,w,c
  3304  00E69E  ECCD  F06C         	call	_spiwrite
  3305                           
  3306                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3307  00E6A2  5012               	movf	fillRectangle@lo,w,c
  3308  00E6A4  ECCD  F06C         	call	_spiwrite
  3309  00E6A8  0613               	decf	fillRectangle@x,f,c
  3310  00E6AA  D7F3               	goto	l3231
  3311  00E6AC                     l3241:
  3312  00E6AC  0608               	decf	fillRectangle@y,f,c
  3313  00E6AE  D7EA               	goto	l3227
  3314  00E6B0                     l232:
  3315                           
  3316                           ;ST7735_TFT.c: 554: }
  3317                           ;ST7735_TFT.c: 555: }
  3318                           ;ST7735_TFT.c: 556: PORTDbits.RD1 = 1;
  3319  00E6B0  8283               	bsf	3971,1,c	;volatile
  3320  00E6B2                     l228:
  3321  00E6B2  0012               	return		;funcret
  3322  00E6B4                     __end_of_fillRectangle:
  3323                           	opt stack 0
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           intcon2	equ	0xFF1
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           fsr1l	equ	0xFE1
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _drawRect *****************
  3336 ;; Defined at:
  3337 ;;		line 718 in file "ST7735_TFT.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  x               2   18[COMRAM] unsigned int 
  3340 ;;  y               2   20[COMRAM] unsigned int 
  3341 ;;  w               2   22[COMRAM] unsigned int 
  3342 ;;  h               2   24[COMRAM] unsigned int 
  3343 ;;  color           2   26[COMRAM] unsigned int 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;		None               void
  3348 ;; Registers used:
  3349 ;;		wreg, status,2, status,0, cstack
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3355 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;Total ram usage:       11 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    4
  3362 ;; This function calls:
  3363 ;;		_drawFastHLine
  3364 ;;		_drawFastVLine
  3365 ;; This function is called by:
  3366 ;;		_Initialize_Screen
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text8
  3371  00DEC8                     __ptext8:
  3372                           	opt stack 0
  3373  00DEC8                     _drawRect:
  3374                           	opt stack 25
  3375                           
  3376                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3377                           
  3378                           ;incstack = 0
  3379  00DEC8  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3380  00DECC  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3381  00DED0  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3382  00DED4  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3383  00DED8  5013               	movf	drawRect@x,w,c
  3384  00DEDA  EC95  F070         	call	_drawFastHLine
  3385                           
  3386                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3387  00DEDE  5015               	movf	drawRect@y,w,c
  3388  00DEE0  2419               	addwf	drawRect@h,w,c
  3389  00DEE2  6E1D               	movwf	??_drawRect& (0+255),c
  3390  00DEE4  041D               	decf	??_drawRect,w,c
  3391  00DEE6  6E08               	movwf	drawFastHLine@y,c
  3392  00DEE8  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3393  00DEEC  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3394  00DEF0  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3395  00DEF4  5013               	movf	drawRect@x,w,c
  3396  00DEF6  EC95  F070         	call	_drawFastHLine
  3397                           
  3398                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3399  00DEFA  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3400  00DEFE  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3401  00DF02  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3402  00DF06  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3403  00DF0A  5013               	movf	drawRect@x,w,c
  3404  00DF0C  EC51  F070         	call	_drawFastVLine
  3405                           
  3406                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3407  00DF10  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3408  00DF14  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3409  00DF18  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3410  00DF1C  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3411  00DF20  5013               	movf	drawRect@x,w,c
  3412  00DF22  2417               	addwf	drawRect@w,w,c
  3413  00DF24  6E1D               	movwf	??_drawRect& (0+255),c
  3414  00DF26  041D               	decf	??_drawRect,w,c
  3415  00DF28  EC51  F070         	call	_drawFastVLine
  3416  00DF2C  0012               	return		;funcret
  3417  00DF2E                     __end_of_drawRect:
  3418                           	opt stack 0
  3419                           tblptru	equ	0xFF8
  3420                           tblptrh	equ	0xFF7
  3421                           tblptrl	equ	0xFF6
  3422                           tablat	equ	0xFF5
  3423                           intcon2	equ	0xFF1
  3424                           postinc0	equ	0xFEE
  3425                           wreg	equ	0xFE8
  3426                           postdec1	equ	0xFE5
  3427                           fsr1l	equ	0xFE1
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _drawFastHLine *****************
  3431 ;; Defined at:
  3432 ;;		line 657 in file "ST7735_TFT.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  x               1    wreg     unsigned char 
  3435 ;;  y               1    7[COMRAM] unsigned char 
  3436 ;;  w               1    8[COMRAM] unsigned char 
  3437 ;;  color           2    9[COMRAM] unsigned int 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  x               1   17[COMRAM] unsigned char 
  3440 ;;  lo              1   16[COMRAM] unsigned char 
  3441 ;;  hi              1   15[COMRAM] unsigned char 
  3442 ;; Return value:  Size  Location     Type
  3443 ;;		None               void
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0, cstack
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3451 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;Total ram usage:       11 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    3
  3458 ;; This function calls:
  3459 ;;		_setAddrWindow
  3460 ;;		_spiwrite
  3461 ;; This function is called by:
  3462 ;;		_drawRect
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text9
  3467  00E12A                     __ptext9:
  3468                           	opt stack 0
  3469  00E12A                     _drawFastHLine:
  3470                           	opt stack 25
  3471                           
  3472                           ;incstack = 0
  3473                           ;drawFastHLine@x stored from wreg
  3474  00E12A  6E12               	movwf	drawFastHLine@x,c
  3475                           
  3476                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3477                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3478  00E12C  0E80               	movlw	128
  3479  00E12E  6012               	cpfslt	drawFastHLine@x,c
  3480  00E130  D03F               	goto	l273
  3481  00E132  0E9F               	movlw	159
  3482  00E134  6408               	cpfsgt	drawFastHLine@y,c
  3483  00E136  D001               	goto	l3249
  3484                           
  3485                           ;ST7735_TFT.c: 661: return;
  3486  00E138  D03B               	goto	l273
  3487  00E13A                     l3249:
  3488                           
  3489                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3490  00E13A  0EFF               	movlw	255
  3491  00E13C  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3492  00E13E  0EFF               	movlw	255
  3493  00E140  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3494  00E142  5009               	movf	drawFastHLine@w,w,c
  3495  00E144  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3496  00E148  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3497  00E14A  260E               	addwf	??_drawFastHLine+2,f,c
  3498  00E14C  0E00               	movlw	0
  3499  00E14E  220F               	addwfc	??_drawFastHLine+3,f,c
  3500  00E150  500C               	movf	??_drawFastHLine,w,c
  3501  00E152  260E               	addwf	??_drawFastHLine+2,f,c
  3502  00E154  500D               	movf	??_drawFastHLine+1,w,c
  3503  00E156  220F               	addwfc	??_drawFastHLine+3,f,c
  3504  00E158  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3505  00E15A  D00B               	goto	l3253
  3506  00E15C  500F               	movf	??_drawFastHLine+3,w,c
  3507  00E15E  E104               	bnz	u2140
  3508  00E160  0E80               	movlw	128
  3509  00E162  5C0E               	subwf	??_drawFastHLine+2,w,c
  3510  00E164  A0D8               	btfss	status,0,c
  3511  00E166  D005               	goto	l3253
  3512  00E168                     u2140:
  3513                           
  3514                           ;ST7735_TFT.c: 663: w = 128 - x;
  3515  00E168  5012               	movf	drawFastHLine@x,w,c
  3516  00E16A  0800               	sublw	0
  3517  00E16C  0F80               	addlw	128
  3518  00E16E  6E09               	movwf	drawFastHLine@w,c
  3519  00E170  D000               	goto	l3253
  3520  00E172                     l3253:
  3521                           
  3522                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3523  00E172  500B               	movf	drawFastHLine@color+1,w,c
  3524  00E174  6E10               	movwf	drawFastHLine@hi,c
  3525  00E176  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3526                           
  3527                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3528  00E17A  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3529  00E17E  5012               	movf	drawFastHLine@x,w,c
  3530  00E180  2409               	addwf	drawFastHLine@w,w,c
  3531  00E182  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3532  00E184  040C               	decf	??_drawFastHLine,w,c
  3533  00E186  6E05               	movwf	setAddrWindow@x1,c
  3534  00E188  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3535  00E18C  5012               	movf	drawFastHLine@x,w,c
  3536  00E18E  ECEB  F06E         	call	_setAddrWindow
  3537                           
  3538                           ;ST7735_TFT.c: 666: PORTDbits.RD0 = 1;
  3539  00E192  8083               	bsf	3971,0,c	;volatile
  3540                           
  3541                           ;ST7735_TFT.c: 667: PORTDbits.RD1 = 0;
  3542  00E194  9283               	bcf	3971,1,c	;volatile
  3543                           
  3544                           ;ST7735_TFT.c: 669: while (w--) {
  3545  00E196  D007               	goto	l3265
  3546  00E198                     l3263:
  3547                           
  3548                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3549  00E198  5010               	movf	drawFastHLine@hi,w,c
  3550  00E19A  ECCD  F06C         	call	_spiwrite
  3551                           
  3552                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3553  00E19E  5011               	movf	drawFastHLine@lo,w,c
  3554  00E1A0  ECCD  F06C         	call	_spiwrite
  3555  00E1A4  D000               	goto	l3265
  3556  00E1A6                     l3265:
  3557  00E1A6  0609               	decf	drawFastHLine@w,f,c
  3558  00E1A8  2809               	incf	drawFastHLine@w,w,c
  3559  00E1AA  A4D8               	btfss	status,2,c
  3560  00E1AC  D7F5               	goto	l3263
  3561                           
  3562                           ;ST7735_TFT.c: 672: }
  3563                           ;ST7735_TFT.c: 673: PORTDbits.RD1 = 1;
  3564  00E1AE  8283               	bsf	3971,1,c	;volatile
  3565  00E1B0                     l273:
  3566  00E1B0  0012               	return		;funcret
  3567  00E1B2                     __end_of_drawFastHLine:
  3568                           	opt stack 0
  3569                           tblptru	equ	0xFF8
  3570                           tblptrh	equ	0xFF7
  3571                           tblptrl	equ	0xFF6
  3572                           tablat	equ	0xFF5
  3573                           intcon2	equ	0xFF1
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1l	equ	0xFE1
  3578                           status	equ	0xFD8
  3579                           
  3580 ;; *************** function _TFT_GreenTab_Initialize *****************
  3581 ;; Defined at:
  3582 ;;		line 677 in file "ST7735_TFT.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;		None
  3587 ;; Return value:  Size  Location     Type
  3588 ;;		None               void
  3589 ;; Registers used:
  3590 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;Total ram usage:        0 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    3
  3603 ;; This function calls:
  3604 ;;		_Rcmd1
  3605 ;;		_Rcmd2red
  3606 ;;		_Rcmd3
  3607 ;;		_write_command
  3608 ;;		_write_data
  3609 ;; This function is called by:
  3610 ;;		_Initialize_Screen
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text10
  3615  00DA96                     __ptext10:
  3616                           	opt stack 0
  3617  00DA96                     _TFT_GreenTab_Initialize:
  3618                           	opt stack 26
  3619                           
  3620                           ;ST7735_TFT.c: 679: PORTDbits.RD1 = 1;
  3621                           
  3622                           ;incstack = 0
  3623  00DA96  8283               	bsf	3971,1,c	;volatile
  3624                           
  3625                           ;ST7735_TFT.c: 680: PORTDbits.RD0 = 0;
  3626  00DA98  9083               	bcf	3971,0,c	;volatile
  3627                           
  3628                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3629  00DA9A  0E80               	movlw	128
  3630  00DA9C  6EC7               	movwf	4039,c	;volatile
  3631                           
  3632                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3633  00DA9E  0E30               	movlw	48
  3634  00DAA0  6EC6               	movwf	4038,c	;volatile
  3635                           
  3636                           ;ST7735_TFT.c: 686: Rcmd1();
  3637  00DAA2  ECB3  F074         	call	_Rcmd1	;wreg free
  3638                           
  3639                           ;ST7735_TFT.c: 687: Rcmd2red();
  3640  00DAA6  ECFE  F06D         	call	_Rcmd2red	;wreg free
  3641                           
  3642                           ;ST7735_TFT.c: 688: Rcmd3();
  3643  00DAAA  EC3A  F074         	call	_Rcmd3	;wreg free
  3644                           
  3645                           ;ST7735_TFT.c: 689: write_command(0x36);
  3646  00DAAE  0E36               	movlw	54
  3647  00DAB0  ECAB  F06C         	call	_write_command
  3648                           
  3649                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3650  00DAB4  0EC0               	movlw	192
  3651  00DAB6  ECB3  F06C         	call	_write_data
  3652                           
  3653                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3654  00DABA  0E01               	movlw	1
  3655  00DABC  6E74               	movwf	__tft_type,c
  3656  00DABE  0012               	return		;funcret
  3657  00DAC0                     __end_of_TFT_GreenTab_Initialize:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           intcon2	equ	0xFF1
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           postdec1	equ	0xFE5
  3667                           fsr1l	equ	0xFE1
  3668                           status	equ	0xFD8
  3669                           
  3670 ;; *************** function _Rcmd3 *****************
  3671 ;; Defined at:
  3672 ;;		line 371 in file "ST7735_TFT.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;		None
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;		None
  3677 ;; Return value:  Size  Location     Type
  3678 ;;		None               void
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;Total ram usage:        0 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    2
  3693 ;; This function calls:
  3694 ;;		_delay_ms
  3695 ;;		_write_command
  3696 ;;		_write_data
  3697 ;; This function is called by:
  3698 ;;		_TFT_GreenTab_Initialize
  3699 ;;		_TFT_BlackTab_Initialize
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text11
  3704  00E874                     __ptext11:
  3705                           	opt stack 0
  3706  00E874                     _Rcmd3:
  3707                           	opt stack 26
  3708                           
  3709                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3710                           
  3711                           ;incstack = 0
  3712  00E874  0EE0               	movlw	224
  3713  00E876  ECAB  F06C         	call	_write_command
  3714                           
  3715                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3716  00E87A  0E02               	movlw	2
  3717  00E87C  ECB3  F06C         	call	_write_data
  3718  00E880  0E1C               	movlw	28
  3719  00E882  ECB3  F06C         	call	_write_data
  3720  00E886  0E07               	movlw	7
  3721  00E888  ECB3  F06C         	call	_write_data
  3722  00E88C  0E12               	movlw	18
  3723  00E88E  ECB3  F06C         	call	_write_data
  3724                           
  3725                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3726  00E892  0E37               	movlw	55
  3727  00E894  ECB3  F06C         	call	_write_data
  3728  00E898  0E32               	movlw	50
  3729  00E89A  ECB3  F06C         	call	_write_data
  3730  00E89E  0E29               	movlw	41
  3731  00E8A0  ECB3  F06C         	call	_write_data
  3732  00E8A4  0E2D               	movlw	45
  3733  00E8A6  ECB3  F06C         	call	_write_data
  3734                           
  3735                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3736  00E8AA  0E29               	movlw	41
  3737  00E8AC  ECB3  F06C         	call	_write_data
  3738  00E8B0  0E25               	movlw	37
  3739  00E8B2  ECB3  F06C         	call	_write_data
  3740  00E8B6  0E2B               	movlw	43
  3741  00E8B8  ECB3  F06C         	call	_write_data
  3742  00E8BC  0E39               	movlw	57
  3743  00E8BE  ECB3  F06C         	call	_write_data
  3744                           
  3745                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3746  00E8C2  0E00               	movlw	0
  3747  00E8C4  ECB3  F06C         	call	_write_data
  3748  00E8C8  0E01               	movlw	1
  3749  00E8CA  ECB3  F06C         	call	_write_data
  3750  00E8CE  0E03               	movlw	3
  3751  00E8D0  ECB3  F06C         	call	_write_data
  3752  00E8D4  0E10               	movlw	16
  3753  00E8D6  ECB3  F06C         	call	_write_data
  3754                           
  3755                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3756  00E8DA  0EE1               	movlw	225
  3757  00E8DC  ECAB  F06C         	call	_write_command
  3758                           
  3759                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3760  00E8E0  0E03               	movlw	3
  3761  00E8E2  ECB3  F06C         	call	_write_data
  3762  00E8E6  0E1D               	movlw	29
  3763  00E8E8  ECB3  F06C         	call	_write_data
  3764  00E8EC  0E07               	movlw	7
  3765  00E8EE  ECB3  F06C         	call	_write_data
  3766  00E8F2  0E06               	movlw	6
  3767  00E8F4  ECB3  F06C         	call	_write_data
  3768                           
  3769                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3770  00E8F8  0E2E               	movlw	46
  3771  00E8FA  ECB3  F06C         	call	_write_data
  3772  00E8FE  0E2C               	movlw	44
  3773  00E900  ECB3  F06C         	call	_write_data
  3774  00E904  0E29               	movlw	41
  3775  00E906  ECB3  F06C         	call	_write_data
  3776  00E90A  0E2D               	movlw	45
  3777  00E90C  ECB3  F06C         	call	_write_data
  3778                           
  3779                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3780  00E910  0E2E               	movlw	46
  3781  00E912  ECB3  F06C         	call	_write_data
  3782  00E916  0E2E               	movlw	46
  3783  00E918  ECB3  F06C         	call	_write_data
  3784  00E91C  0E37               	movlw	55
  3785  00E91E  ECB3  F06C         	call	_write_data
  3786  00E922  0E3F               	movlw	63
  3787  00E924  ECB3  F06C         	call	_write_data
  3788                           
  3789                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3790  00E928  0E00               	movlw	0
  3791  00E92A  ECB3  F06C         	call	_write_data
  3792  00E92E  0E00               	movlw	0
  3793  00E930  ECB3  F06C         	call	_write_data
  3794  00E934  0E02               	movlw	2
  3795  00E936  ECB3  F06C         	call	_write_data
  3796  00E93A  0E10               	movlw	16
  3797  00E93C  ECB3  F06C         	call	_write_data
  3798                           
  3799                           ;ST7735_TFT.c: 383: write_command(0x13);
  3800  00E940  0E13               	movlw	19
  3801  00E942  ECAB  F06C         	call	_write_command
  3802                           
  3803                           ;ST7735_TFT.c: 384: delay_ms(10);
  3804  00E946  0E00               	movlw	0
  3805  00E948  6E08               	movwf	delay_ms@ms+1,c
  3806  00E94A  0E0A               	movlw	10
  3807  00E94C  6E07               	movwf	delay_ms@ms,c
  3808  00E94E  EC3B  F06F         	call	_delay_ms	;wreg free
  3809                           
  3810                           ;ST7735_TFT.c: 385: write_command(0x29);
  3811  00E952  0E29               	movlw	41
  3812  00E954  ECAB  F06C         	call	_write_command
  3813                           
  3814                           ;ST7735_TFT.c: 386: delay_ms(100);
  3815  00E958  0E00               	movlw	0
  3816  00E95A  6E08               	movwf	delay_ms@ms+1,c
  3817  00E95C  0E64               	movlw	100
  3818  00E95E  6E07               	movwf	delay_ms@ms,c
  3819  00E960  EC3B  F06F         	call	_delay_ms	;wreg free
  3820  00E964  0012               	return		;funcret
  3821  00E966                     __end_of_Rcmd3:
  3822                           	opt stack 0
  3823                           tblptru	equ	0xFF8
  3824                           tblptrh	equ	0xFF7
  3825                           tblptrl	equ	0xFF6
  3826                           tablat	equ	0xFF5
  3827                           intcon2	equ	0xFF1
  3828                           postinc0	equ	0xFEE
  3829                           wreg	equ	0xFE8
  3830                           postdec1	equ	0xFE5
  3831                           fsr1l	equ	0xFE1
  3832                           status	equ	0xFD8
  3833                           
  3834 ;; *************** function _Rcmd2red *****************
  3835 ;; Defined at:
  3836 ;;		line 361 in file "ST7735_TFT.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;		None
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;		None
  3841 ;; Return value:  Size  Location     Type
  3842 ;;		None               void
  3843 ;; Registers used:
  3844 ;;		wreg, status,2, cstack
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;Total ram usage:        0 bytes
  3855 ;; Hardware stack levels used:    1
  3856 ;; Hardware stack levels required when called:    2
  3857 ;; This function calls:
  3858 ;;		_write_command
  3859 ;;		_write_data
  3860 ;; This function is called by:
  3861 ;;		_TFT_GreenTab_Initialize
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text12
  3866  00DBFC                     __ptext12:
  3867                           	opt stack 0
  3868  00DBFC                     _Rcmd2red:
  3869                           	opt stack 26
  3870                           
  3871                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3872                           
  3873                           ;incstack = 0
  3874  00DBFC  0E2A               	movlw	42
  3875  00DBFE  ECAB  F06C         	call	_write_command
  3876                           
  3877                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3878  00DC02  0E00               	movlw	0
  3879  00DC04  ECB3  F06C         	call	_write_data
  3880  00DC08  0E00               	movlw	0
  3881  00DC0A  ECB3  F06C         	call	_write_data
  3882                           
  3883                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3884  00DC0E  0E00               	movlw	0
  3885  00DC10  ECB3  F06C         	call	_write_data
  3886  00DC14  0E7F               	movlw	127
  3887  00DC16  ECB3  F06C         	call	_write_data
  3888                           
  3889                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3890  00DC1A  0E2B               	movlw	43
  3891  00DC1C  ECAB  F06C         	call	_write_command
  3892                           
  3893                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3894  00DC20  0E00               	movlw	0
  3895  00DC22  ECB3  F06C         	call	_write_data
  3896  00DC26  0E00               	movlw	0
  3897  00DC28  ECB3  F06C         	call	_write_data
  3898                           
  3899                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3900  00DC2C  0E00               	movlw	0
  3901  00DC2E  ECB3  F06C         	call	_write_data
  3902  00DC32  0E9F               	movlw	159
  3903  00DC34  ECB3  F06C         	call	_write_data
  3904  00DC38  0012               	return		;funcret
  3905  00DC3A                     __end_of_Rcmd2red:
  3906                           	opt stack 0
  3907                           tblptru	equ	0xFF8
  3908                           tblptrh	equ	0xFF7
  3909                           tblptrl	equ	0xFF6
  3910                           tablat	equ	0xFF5
  3911                           intcon2	equ	0xFF1
  3912                           postinc0	equ	0xFEE
  3913                           wreg	equ	0xFE8
  3914                           postdec1	equ	0xFE5
  3915                           fsr1l	equ	0xFE1
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _Rcmd1 *****************
  3919 ;; Defined at:
  3920 ;;		line 314 in file "ST7735_TFT.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;		None               void
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;Total ram usage:        0 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    2
  3941 ;; This function calls:
  3942 ;;		_delay_ms
  3943 ;;		_write_command
  3944 ;;		_write_data
  3945 ;; This function is called by:
  3946 ;;		_TFT_GreenTab_Initialize
  3947 ;;		_TFT_BlackTab_Initialize
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text13
  3952  00E966                     __ptext13:
  3953                           	opt stack 0
  3954  00E966                     _Rcmd1:
  3955                           	opt stack 26
  3956                           
  3957                           ;ST7735_TFT.c: 316: write_command(0x01);
  3958                           
  3959                           ;incstack = 0
  3960  00E966  0E01               	movlw	1
  3961  00E968  ECAB  F06C         	call	_write_command
  3962                           
  3963                           ;ST7735_TFT.c: 317: delay_ms(150);
  3964  00E96C  0E00               	movlw	0
  3965  00E96E  6E08               	movwf	delay_ms@ms+1,c
  3966  00E970  0E96               	movlw	150
  3967  00E972  6E07               	movwf	delay_ms@ms,c
  3968  00E974  EC3B  F06F         	call	_delay_ms	;wreg free
  3969                           
  3970                           ;ST7735_TFT.c: 318: write_command(0x11);
  3971  00E978  0E11               	movlw	17
  3972  00E97A  ECAB  F06C         	call	_write_command
  3973                           
  3974                           ;ST7735_TFT.c: 319: delay_ms(500);
  3975  00E97E  0E01               	movlw	1
  3976  00E980  6E08               	movwf	delay_ms@ms+1,c
  3977  00E982  0EF4               	movlw	244
  3978  00E984  6E07               	movwf	delay_ms@ms,c
  3979  00E986  EC3B  F06F         	call	_delay_ms	;wreg free
  3980                           
  3981                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3982  00E98A  0EB1               	movlw	177
  3983  00E98C  ECAB  F06C         	call	_write_command
  3984                           
  3985                           ;ST7735_TFT.c: 321: write_data(0x01);
  3986  00E990  0E01               	movlw	1
  3987  00E992  ECB3  F06C         	call	_write_data
  3988                           
  3989                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3990  00E996  0E2C               	movlw	44
  3991  00E998  ECB3  F06C         	call	_write_data
  3992                           
  3993                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3994  00E99C  0E2D               	movlw	45
  3995  00E99E  ECB3  F06C         	call	_write_data
  3996                           
  3997                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3998  00E9A2  0EB2               	movlw	178
  3999  00E9A4  ECAB  F06C         	call	_write_command
  4000                           
  4001                           ;ST7735_TFT.c: 325: write_data(0x01);
  4002  00E9A8  0E01               	movlw	1
  4003  00E9AA  ECB3  F06C         	call	_write_data
  4004                           
  4005                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4006  00E9AE  0E2C               	movlw	44
  4007  00E9B0  ECB3  F06C         	call	_write_data
  4008                           
  4009                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4010  00E9B4  0E2D               	movlw	45
  4011  00E9B6  ECB3  F06C         	call	_write_data
  4012                           
  4013                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4014  00E9BA  0EB3               	movlw	179
  4015  00E9BC  ECAB  F06C         	call	_write_command
  4016                           
  4017                           ;ST7735_TFT.c: 329: write_data(0x01);
  4018  00E9C0  0E01               	movlw	1
  4019  00E9C2  ECB3  F06C         	call	_write_data
  4020                           
  4021                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4022  00E9C6  0E2C               	movlw	44
  4023  00E9C8  ECB3  F06C         	call	_write_data
  4024                           
  4025                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4026  00E9CC  0E2D               	movlw	45
  4027  00E9CE  ECB3  F06C         	call	_write_data
  4028                           
  4029                           ;ST7735_TFT.c: 332: write_data(0x01);
  4030  00E9D2  0E01               	movlw	1
  4031  00E9D4  ECB3  F06C         	call	_write_data
  4032                           
  4033                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4034  00E9D8  0E2C               	movlw	44
  4035  00E9DA  ECB3  F06C         	call	_write_data
  4036                           
  4037                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4038  00E9DE  0E2D               	movlw	45
  4039  00E9E0  ECB3  F06C         	call	_write_data
  4040                           
  4041                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4042  00E9E4  0EB4               	movlw	180
  4043  00E9E6  ECAB  F06C         	call	_write_command
  4044                           
  4045                           ;ST7735_TFT.c: 336: write_data(0x07);
  4046  00E9EA  0E07               	movlw	7
  4047  00E9EC  ECB3  F06C         	call	_write_data
  4048                           
  4049                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4050  00E9F0  0EC0               	movlw	192
  4051  00E9F2  ECAB  F06C         	call	_write_command
  4052                           
  4053                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4054  00E9F6  0EA2               	movlw	162
  4055  00E9F8  ECB3  F06C         	call	_write_data
  4056                           
  4057                           ;ST7735_TFT.c: 339: write_data(0x02);
  4058  00E9FC  0E02               	movlw	2
  4059  00E9FE  ECB3  F06C         	call	_write_data
  4060                           
  4061                           ;ST7735_TFT.c: 340: write_data(0x84);
  4062  00EA02  0E84               	movlw	132
  4063  00EA04  ECB3  F06C         	call	_write_data
  4064                           
  4065                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4066  00EA08  0EC1               	movlw	193
  4067  00EA0A  ECAB  F06C         	call	_write_command
  4068                           
  4069                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4070  00EA0E  0EC5               	movlw	197
  4071  00EA10  ECB3  F06C         	call	_write_data
  4072                           
  4073                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4074  00EA14  0EC2               	movlw	194
  4075  00EA16  ECAB  F06C         	call	_write_command
  4076                           
  4077                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4078  00EA1A  0E0A               	movlw	10
  4079  00EA1C  ECB3  F06C         	call	_write_data
  4080                           
  4081                           ;ST7735_TFT.c: 345: write_data(0x00);
  4082  00EA20  0E00               	movlw	0
  4083  00EA22  ECB3  F06C         	call	_write_data
  4084                           
  4085                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4086  00EA26  0EC3               	movlw	195
  4087  00EA28  ECAB  F06C         	call	_write_command
  4088                           
  4089                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4090  00EA2C  0E8A               	movlw	138
  4091  00EA2E  ECB3  F06C         	call	_write_data
  4092                           
  4093                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4094  00EA32  0E2A               	movlw	42
  4095  00EA34  ECB3  F06C         	call	_write_data
  4096                           
  4097                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4098  00EA38  0EC4               	movlw	196
  4099  00EA3A  ECAB  F06C         	call	_write_command
  4100                           
  4101                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4102  00EA3E  0E8A               	movlw	138
  4103  00EA40  ECB3  F06C         	call	_write_data
  4104                           
  4105                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4106  00EA44  0EEE               	movlw	238
  4107  00EA46  ECB3  F06C         	call	_write_data
  4108                           
  4109                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4110  00EA4A  0EC5               	movlw	197
  4111  00EA4C  ECAB  F06C         	call	_write_command
  4112                           
  4113                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4114  00EA50  0E0E               	movlw	14
  4115  00EA52  ECB3  F06C         	call	_write_data
  4116                           
  4117                           ;ST7735_TFT.c: 354: write_command(0x20);
  4118  00EA56  0E20               	movlw	32
  4119  00EA58  ECAB  F06C         	call	_write_command
  4120                           
  4121                           ;ST7735_TFT.c: 355: write_command(0x36);
  4122  00EA5C  0E36               	movlw	54
  4123  00EA5E  ECAB  F06C         	call	_write_command
  4124                           
  4125                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4126  00EA62  0EC8               	movlw	200
  4127  00EA64  ECB3  F06C         	call	_write_data
  4128                           
  4129                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4130  00EA68  0E3A               	movlw	58
  4131  00EA6A  ECAB  F06C         	call	_write_command
  4132                           
  4133                           ;ST7735_TFT.c: 358: write_data(0x05);
  4134  00EA6E  0E05               	movlw	5
  4135  00EA70  ECB3  F06C         	call	_write_data
  4136  00EA74  0012               	return		;funcret
  4137  00EA76                     __end_of_Rcmd1:
  4138                           	opt stack 0
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           intcon2	equ	0xFF1
  4144                           postinc0	equ	0xFEE
  4145                           wreg	equ	0xFE8
  4146                           postdec1	equ	0xFE5
  4147                           fsr1l	equ	0xFE1
  4148                           status	equ	0xFD8
  4149                           
  4150 ;; *************** function _LCD_Reset *****************
  4151 ;; Defined at:
  4152 ;;		line 250 in file "ST7735_TFT.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;		None
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;		None               void
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;Total ram usage:        0 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    2
  4173 ;; This function calls:
  4174 ;;		_delay_ms
  4175 ;; This function is called by:
  4176 ;;		_Initialize_Screen
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text14
  4181  00D988                     __ptext14:
  4182                           	opt stack 0
  4183  00D988                     _LCD_Reset:
  4184                           	opt stack 27
  4185                           
  4186                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  4187                           
  4188                           ;incstack = 0
  4189  00D988  9483               	bcf	3971,2,c	;volatile
  4190                           
  4191                           ;ST7735_TFT.c: 253: delay_ms(100);
  4192  00D98A  0E00               	movlw	0
  4193  00D98C  6E08               	movwf	delay_ms@ms+1,c
  4194  00D98E  0E64               	movlw	100
  4195  00D990  6E07               	movwf	delay_ms@ms,c
  4196  00D992  EC3B  F06F         	call	_delay_ms	;wreg free
  4197                           
  4198                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4199  00D996  8483               	bsf	3971,2,c	;volatile
  4200  00D998  0012               	return		;funcret
  4201  00D99A                     __end_of_LCD_Reset:
  4202                           	opt stack 0
  4203                           tblptru	equ	0xFF8
  4204                           tblptrh	equ	0xFF7
  4205                           tblptrl	equ	0xFF6
  4206                           tablat	equ	0xFF5
  4207                           intcon2	equ	0xFF1
  4208                           postinc0	equ	0xFEE
  4209                           wreg	equ	0xFE8
  4210                           postdec1	equ	0xFE5
  4211                           fsr1l	equ	0xFE1
  4212                           status	equ	0xFD8
  4213                           
  4214 ;; *************** function _delay_ms *****************
  4215 ;; Defined at:
  4216 ;;		line 97 in file "ST7735_TFT.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  ms              2    6[COMRAM] int 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  count           2   10[COMRAM] int 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;		None               void
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4230 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;Total ram usage:        6 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    1
  4237 ;; This function calls:
  4238 ;;		___wmul
  4239 ;; This function is called by:
  4240 ;;		_LCD_Reset
  4241 ;;		_Rcmd1
  4242 ;;		_Rcmd3
  4243 ;;		_Bcmd
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text15
  4248  00DE76                     __ptext15:
  4249                           	opt stack 0
  4250  00DE76                     _delay_ms:
  4251                           	opt stack 26
  4252                           
  4253                           ;ST7735_TFT.c: 103: int count;
  4254                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4255                           
  4256                           ;incstack = 0
  4257  00DE76  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  4258  00DE7A  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4259  00DE7E  0E00               	movlw	0
  4260  00DE80  6E04               	movwf	___wmul@multiplicand+1,c
  4261  00DE82  0EFA               	movlw	250
  4262  00DE84  6E03               	movwf	___wmul@multiplicand,c
  4263  00DE86  EC37  F06D         	call	___wmul	;wreg free
  4264  00DE8A  C001  F00B         	movff	?___wmul,delay_ms@count
  4265  00DE8E  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  4266                           
  4267                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4268  00DE92  C00B  F009         	movff	delay_ms@count,??_delay_ms
  4269  00DE96  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  4270  00DE9A  1E09               	comf	??_delay_ms,f,c
  4271  00DE9C  1E0A               	comf	??_delay_ms+1,f,c
  4272  00DE9E  4A09               	infsnz	??_delay_ms,f,c
  4273  00DEA0  2A0A               	incf	??_delay_ms+1,f,c
  4274  00DEA2  0EFF               	movlw	255
  4275  00DEA4  2409               	addwf	??_delay_ms,w,c
  4276  00DEA6  6E0B               	movwf	delay_ms@count,c
  4277  00DEA8  0EFF               	movlw	255
  4278  00DEAA  200A               	addwfc	??_delay_ms+1,w,c
  4279  00DEAC  6E0C               	movwf	delay_ms@count+1,c
  4280                           
  4281                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4282  00DEAE  0EB8               	movlw	184
  4283  00DEB0  6EB1               	movwf	4017,c	;volatile
  4284                           
  4285                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4286  00DEB2  C00B  FFD6         	movff	delay_ms@count,4054	;volatile
  4287                           
  4288                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4289  00DEB6  500C               	movf	delay_ms@count+1,w,c
  4290  00DEB8  6ED7               	movwf	4055,c	;volatile
  4291                           
  4292                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4293  00DEBA  92A1               	bcf	4001,1,c	;volatile
  4294                           
  4295                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4296  00DEBC  80B1               	bsf	4017,0,c	;volatile
  4297                           
  4298                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4299  00DEBE  D000               	goto	l115
  4300  00DEC0                     l115:
  4301  00DEC0  A2A1               	btfss	4001,1,c	;volatile
  4302  00DEC2  D7FE               	goto	l115
  4303                           
  4304                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4305  00DEC4  90B1               	bcf	4017,0,c	;volatile
  4306  00DEC6  0012               	return		;funcret
  4307  00DEC8                     __end_of_delay_ms:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           intcon2	equ	0xFF1
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           postdec1	equ	0xFE5
  4317                           fsr1l	equ	0xFE1
  4318                           status	equ	0xFD8
  4319                           
  4320 ;; *************** function _Init_ADC *****************
  4321 ;; Defined at:
  4322 ;;		line 302 in file "Lab9.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;		None
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;		None
  4327 ;; Return value:  Size  Location     Type
  4328 ;;		None               void
  4329 ;; Registers used:
  4330 ;;		wreg, status,2
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;Total ram usage:        0 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; This function calls:
  4343 ;;		Nothing
  4344 ;; This function is called by:
  4345 ;;		_main
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text16
  4350  00D94C                     __ptext16:
  4351                           	opt stack 0
  4352  00D94C                     _Init_ADC:
  4353                           	opt stack 30
  4354                           
  4355                           ;Lab9.c: 304: ADCON1=0x0E ;
  4356                           
  4357                           ;incstack = 0
  4358  00D94C  0E0E               	movlw	14
  4359  00D94E  6EC1               	movwf	4033,c	;volatile
  4360                           
  4361                           ;Lab9.c: 305: ADCON2=0xA9;
  4362  00D950  0EA9               	movlw	169
  4363  00D952  6EC0               	movwf	4032,c	;volatile
  4364  00D954  0012               	return		;funcret
  4365  00D956                     __end_of_Init_ADC:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           intcon2	equ	0xFF1
  4372                           postinc0	equ	0xFEE
  4373                           wreg	equ	0xFE8
  4374                           postdec1	equ	0xFE5
  4375                           fsr1l	equ	0xFE1
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _Day_Mode *****************
  4379 ;; Defined at:
  4380 ;;		line 399 in file "Lab9.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;		None
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;		None               void
  4387 ;; Registers used:
  4388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;Total ram usage:        0 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:   10
  4401 ;; This function calls:
  4402 ;;		_PED_Control
  4403 ;;		_Set_EW
  4404 ;;		_Set_EWLT
  4405 ;;		_Set_NS
  4406 ;;		_Set_NSLT
  4407 ;;		_Wait_N_Seconds
  4408 ;; This function is called by:
  4409 ;;		_main
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text17
  4414  00EBAE                     __ptext17:
  4415                           	opt stack 0
  4416  00EBAE                     _Day_Mode:
  4417                           	opt stack 20
  4418                           
  4419                           ;Lab9.c: 401: MODE = 1;
  4420                           
  4421                           ;incstack = 0
  4422  00EBAE  0E00               	movlw	0
  4423  00EBB0  6E68               	movwf	_MODE+1,c
  4424  00EBB2  0E01               	movlw	1
  4425  00EBB4  6E67               	movwf	_MODE,c
  4426                           
  4427                           ;Lab9.c: 402: PORTEbits.RE2 = 1;
  4428  00EBB6  8484               	bsf	3972,2,c	;volatile
  4429                           
  4430                           ;Lab9.c: 403: Act_Mode_Txt[0] = 'D';
  4431  00EBB8  0E44               	movlw	68
  4432  00EBBA  6E54               	movwf	_Act_Mode_Txt,c
  4433                           
  4434                           ;Lab9.c: 405: Set_NS(2);
  4435  00EBBC  0E02               	movlw	2
  4436  00EBBE  EC82  F06E         	call	_Set_NS
  4437                           
  4438                           ;Lab9.c: 406: Set_NSLT(1);
  4439  00EBC2  0E01               	movlw	1
  4440  00EBC4  ECA4  F06E         	call	_Set_NSLT
  4441                           
  4442                           ;Lab9.c: 407: Set_EW(1);
  4443  00EBC8  0E01               	movlw	1
  4444  00EBCA  EC3E  F06E         	call	_Set_EW
  4445                           
  4446                           ;Lab9.c: 408: Set_EWLT(1);
  4447  00EBCE  0E01               	movlw	1
  4448  00EBD0  EC60  F06E         	call	_Set_EWLT
  4449                           
  4450                           ;Lab9.c: 409: if(PORTAbits.RA5 == 1)
  4451  00EBD4  AA80               	btfss	3968,5,c	;volatile
  4452  00EBD6  D012               	goto	l3617
  4453                           
  4454                           ;Lab9.c: 410: {
  4455                           ;Lab9.c: 411: PED_Control(0,6);
  4456  00EBD8  0E06               	movlw	6
  4457  00EBDA  6E3C               	movwf	PED_Control@Num_Sec,c
  4458  00EBDC  0E00               	movlw	0
  4459  00EBDE  EC8F  F06D         	call	_PED_Control
  4460                           
  4461                           ;Lab9.c: 412: Wait_N_Seconds(9);
  4462  00EBE2  0E09               	movlw	9
  4463  00EBE4  EC60  F06D         	call	_Wait_N_Seconds
  4464                           
  4465                           ;Lab9.c: 413: Set_NS(3);
  4466  00EBE8  0E03               	movlw	3
  4467  00EBEA  EC82  F06E         	call	_Set_NS
  4468                           
  4469                           ;Lab9.c: 414: Wait_N_Seconds(3);
  4470  00EBEE  0E03               	movlw	3
  4471  00EBF0  EC60  F06D         	call	_Wait_N_Seconds
  4472                           
  4473                           ;Lab9.c: 415: Set_NS(1);
  4474  00EBF4  0E01               	movlw	1
  4475  00EBF6  EC82  F06E         	call	_Set_NS
  4476                           
  4477                           ;Lab9.c: 416: }
  4478  00EBFA  D00D               	goto	l3623
  4479  00EBFC                     l3617:
  4480                           
  4481                           ;Lab9.c: 417: else
  4482                           ;Lab9.c: 418: {
  4483                           ;Lab9.c: 419: Wait_N_Seconds(9);
  4484  00EBFC  0E09               	movlw	9
  4485  00EBFE  EC60  F06D         	call	_Wait_N_Seconds
  4486                           
  4487                           ;Lab9.c: 420: Set_NS(3);
  4488  00EC02  0E03               	movlw	3
  4489  00EC04  EC82  F06E         	call	_Set_NS
  4490                           
  4491                           ;Lab9.c: 421: Wait_N_Seconds(3);
  4492  00EC08  0E03               	movlw	3
  4493  00EC0A  EC60  F06D         	call	_Wait_N_Seconds
  4494                           
  4495                           ;Lab9.c: 422: Set_NS(1);
  4496  00EC0E  0E01               	movlw	1
  4497  00EC10  EC82  F06E         	call	_Set_NS
  4498  00EC14  D000               	goto	l3623
  4499  00EC16                     l3623:
  4500                           
  4501                           ;Lab9.c: 423: }
  4502                           ;Lab9.c: 425: if(PORTCbits.RC2 == 1)
  4503  00EC16  A482               	btfss	3970,2,c	;volatile
  4504  00EC18  D033               	goto	l3649
  4505                           
  4506                           ;Lab9.c: 426: {
  4507                           ;Lab9.c: 427: Set_EWLT(2);
  4508  00EC1A  0E02               	movlw	2
  4509  00EC1C  EC60  F06E         	call	_Set_EWLT
  4510                           
  4511                           ;Lab9.c: 428: Wait_N_Seconds(6);
  4512  00EC20  0E06               	movlw	6
  4513  00EC22  EC60  F06D         	call	_Wait_N_Seconds
  4514                           
  4515                           ;Lab9.c: 429: Set_EWLT(3);
  4516  00EC26  0E03               	movlw	3
  4517  00EC28  EC60  F06E         	call	_Set_EWLT
  4518                           
  4519                           ;Lab9.c: 430: Wait_N_Seconds(3);
  4520  00EC2C  0E03               	movlw	3
  4521  00EC2E  EC60  F06D         	call	_Wait_N_Seconds
  4522                           
  4523                           ;Lab9.c: 431: Set_EWLT(1);
  4524  00EC32  0E01               	movlw	1
  4525  00EC34  EC60  F06E         	call	_Set_EWLT
  4526                           
  4527                           ;Lab9.c: 433: Set_EW(2);
  4528  00EC38  0E02               	movlw	2
  4529  00EC3A  EC3E  F06E         	call	_Set_EW
  4530                           
  4531                           ;Lab9.c: 434: if(PORTCbits.RC0 == 1)
  4532  00EC3E  A082               	btfss	3970,0,c	;volatile
  4533  00EC40  D012               	goto	l3643
  4534                           
  4535                           ;Lab9.c: 435: {
  4536                           ;Lab9.c: 436: PED_Control(1,9);
  4537  00EC42  0E09               	movlw	9
  4538  00EC44  6E3C               	movwf	PED_Control@Num_Sec,c
  4539  00EC46  0E01               	movlw	1
  4540  00EC48  EC8F  F06D         	call	_PED_Control
  4541                           
  4542                           ;Lab9.c: 437: Wait_N_Seconds(7);
  4543  00EC4C  0E07               	movlw	7
  4544  00EC4E  EC60  F06D         	call	_Wait_N_Seconds
  4545                           
  4546                           ;Lab9.c: 438: Set_EW(3);
  4547  00EC52  0E03               	movlw	3
  4548  00EC54  EC3E  F06E         	call	_Set_EW
  4549                           
  4550                           ;Lab9.c: 439: Wait_N_Seconds(3);
  4551  00EC58  0E03               	movlw	3
  4552  00EC5A  EC60  F06D         	call	_Wait_N_Seconds
  4553                           
  4554                           ;Lab9.c: 440: Set_EW(1);
  4555  00EC5E  0E01               	movlw	1
  4556  00EC60  EC3E  F06E         	call	_Set_EW
  4557                           
  4558                           ;Lab9.c: 442: }
  4559  00EC64  D031               	goto	l3665
  4560  00EC66                     l3643:
  4561                           
  4562                           ;Lab9.c: 443: else
  4563                           ;Lab9.c: 444: {
  4564                           ;Lab9.c: 445: Wait_N_Seconds(7);
  4565  00EC66  0E07               	movlw	7
  4566  00EC68  EC60  F06D         	call	_Wait_N_Seconds
  4567                           
  4568                           ;Lab9.c: 446: Set_EW(3);
  4569  00EC6C  0E03               	movlw	3
  4570  00EC6E  EC3E  F06E         	call	_Set_EW
  4571                           
  4572                           ;Lab9.c: 447: Wait_N_Seconds(3);
  4573  00EC72  0E03               	movlw	3
  4574  00EC74  EC60  F06D         	call	_Wait_N_Seconds
  4575                           
  4576                           ;Lab9.c: 448: Set_EW(1);
  4577  00EC78  0E01               	movlw	1
  4578  00EC7A  EC3E  F06E         	call	_Set_EW
  4579                           
  4580                           ;Lab9.c: 449: }
  4581                           ;Lab9.c: 450: }
  4582  00EC7E  D024               	goto	l3665
  4583  00EC80                     l3649:
  4584                           
  4585                           ;Lab9.c: 451: else
  4586                           ;Lab9.c: 452: {
  4587                           ;Lab9.c: 453: Set_EW(2);
  4588  00EC80  0E02               	movlw	2
  4589  00EC82  EC3E  F06E         	call	_Set_EW
  4590                           
  4591                           ;Lab9.c: 454: if(PORTCbits.RC0 == 1)
  4592  00EC86  A082               	btfss	3970,0,c	;volatile
  4593  00EC88  D012               	goto	l3659
  4594                           
  4595                           ;Lab9.c: 455: {
  4596                           ;Lab9.c: 456: PED_Control(1,9);
  4597  00EC8A  0E09               	movlw	9
  4598  00EC8C  6E3C               	movwf	PED_Control@Num_Sec,c
  4599  00EC8E  0E01               	movlw	1
  4600  00EC90  EC8F  F06D         	call	_PED_Control
  4601                           
  4602                           ;Lab9.c: 457: Wait_N_Seconds(7);
  4603  00EC94  0E07               	movlw	7
  4604  00EC96  EC60  F06D         	call	_Wait_N_Seconds
  4605                           
  4606                           ;Lab9.c: 458: Set_EW(3);
  4607  00EC9A  0E03               	movlw	3
  4608  00EC9C  EC3E  F06E         	call	_Set_EW
  4609                           
  4610                           ;Lab9.c: 459: Wait_N_Seconds(3);
  4611  00ECA0  0E03               	movlw	3
  4612  00ECA2  EC60  F06D         	call	_Wait_N_Seconds
  4613                           
  4614                           ;Lab9.c: 460: Set_EW(1);
  4615  00ECA6  0E01               	movlw	1
  4616  00ECA8  EC3E  F06E         	call	_Set_EW
  4617                           
  4618                           ;Lab9.c: 462: }
  4619  00ECAC  D00D               	goto	l3665
  4620  00ECAE                     l3659:
  4621                           
  4622                           ;Lab9.c: 463: else
  4623                           ;Lab9.c: 464: {
  4624                           ;Lab9.c: 465: Wait_N_Seconds(7);
  4625  00ECAE  0E07               	movlw	7
  4626  00ECB0  EC60  F06D         	call	_Wait_N_Seconds
  4627                           
  4628                           ;Lab9.c: 466: Set_EW(3);
  4629  00ECB4  0E03               	movlw	3
  4630  00ECB6  EC3E  F06E         	call	_Set_EW
  4631                           
  4632                           ;Lab9.c: 467: Wait_N_Seconds(3);
  4633  00ECBA  0E03               	movlw	3
  4634  00ECBC  EC60  F06D         	call	_Wait_N_Seconds
  4635                           
  4636                           ;Lab9.c: 468: Set_EW(1);
  4637  00ECC0  0E01               	movlw	1
  4638  00ECC2  EC3E  F06E         	call	_Set_EW
  4639  00ECC6  D000               	goto	l3665
  4640  00ECC8                     l3665:
  4641                           
  4642                           ;Lab9.c: 469: }
  4643                           ;Lab9.c: 470: }
  4644                           ;Lab9.c: 472: if(PORTCbits.RC1 == 1)
  4645  00ECC8  A282               	btfss	3970,1,c	;volatile
  4646  00ECCA  D010               	goto	l436
  4647                           
  4648                           ;Lab9.c: 473: {
  4649                           ;Lab9.c: 474: Set_NSLT(2);
  4650  00ECCC  0E02               	movlw	2
  4651  00ECCE  ECA4  F06E         	call	_Set_NSLT
  4652                           
  4653                           ;Lab9.c: 475: Wait_N_Seconds(6);
  4654  00ECD2  0E06               	movlw	6
  4655  00ECD4  EC60  F06D         	call	_Wait_N_Seconds
  4656                           
  4657                           ;Lab9.c: 476: Set_NSLT(3);
  4658  00ECD8  0E03               	movlw	3
  4659  00ECDA  ECA4  F06E         	call	_Set_NSLT
  4660                           
  4661                           ;Lab9.c: 477: Wait_N_Seconds(3);
  4662  00ECDE  0E03               	movlw	3
  4663  00ECE0  EC60  F06D         	call	_Wait_N_Seconds
  4664                           
  4665                           ;Lab9.c: 478: Set_NSLT(1);
  4666  00ECE4  0E01               	movlw	1
  4667  00ECE6  ECA4  F06E         	call	_Set_NSLT
  4668  00ECEA  D000               	goto	l436
  4669  00ECEC                     l436:
  4670  00ECEC  0012               	return		;funcret
  4671  00ECEE                     __end_of_Day_Mode:
  4672                           	opt stack 0
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           intcon2	equ	0xFF1
  4678                           postinc0	equ	0xFEE
  4679                           wreg	equ	0xFE8
  4680                           postdec1	equ	0xFE5
  4681                           fsr1l	equ	0xFE1
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function _Wait_N_Seconds *****************
  4685 ;; Defined at:
  4686 ;;		line 573 in file "Lab9.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  seconds         1    wreg     unsigned char 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  seconds         1   60[COMRAM] unsigned char 
  4691 ;;  I               1   61[COMRAM] unsigned char 
  4692 ;; Return value:  Size  Location     Type
  4693 ;;		None               void
  4694 ;; Registers used:
  4695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;Total ram usage:        2 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    9
  4708 ;; This function calls:
  4709 ;;		_Wait_One_Second
  4710 ;;		_update_LCD_count
  4711 ;; This function is called by:
  4712 ;;		_Day_Mode
  4713 ;;		_Night_Mode
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text18
  4718  00DAC0                     __ptext18:
  4719                           	opt stack 0
  4720  00DAC0                     _Wait_N_Seconds:
  4721                           	opt stack 20
  4722                           
  4723                           ;incstack = 0
  4724                           ;Wait_N_Seconds@seconds stored from wreg
  4725  00DAC0  6E3D               	movwf	Wait_N_Seconds@seconds,c
  4726                           
  4727                           ;Lab9.c: 575: char I;
  4728                           ;Lab9.c: 576: for (I = seconds; I> 0; I--)
  4729  00DAC2  C03D  F03E         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4730  00DAC6                     l3465:
  4731  00DAC6  503E               	movf	Wait_N_Seconds@I,w,c
  4732  00DAC8  B4D8               	btfsc	status,2,c
  4733  00DACA  D00B               	goto	l3475
  4734  00DACC  D001               	goto	l3469
  4735  00DACE  D009               	goto	l3475
  4736  00DAD0                     l3469:
  4737                           
  4738                           ;Lab9.c: 577: {
  4739                           ;Lab9.c: 578: Wait_One_Second();
  4740  00DAD0  EC10  F070         	call	_Wait_One_Second	;wreg free
  4741                           
  4742                           ;Lab9.c: 579: update_LCD_count(direction, I);
  4743  00DAD4  C03E  F03A         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4744  00DAD8  5077               	movf	_direction,w,c
  4745  00DADA  EC22  F077         	call	_update_LCD_count
  4746  00DADE  063E               	decf	Wait_N_Seconds@I,f,c
  4747  00DAE0  D7F2               	goto	l3465
  4748  00DAE2                     l3475:
  4749                           
  4750                           ;Lab9.c: 580: }
  4751                           ;Lab9.c: 581: update_LCD_count(direction, 0);
  4752  00DAE2  0E00               	movlw	0
  4753  00DAE4  6E3A               	movwf	update_LCD_count@count,c
  4754  00DAE6  5077               	movf	_direction,w,c
  4755  00DAE8  EC22  F077         	call	_update_LCD_count
  4756  00DAEC  0012               	return		;funcret
  4757  00DAEE                     __end_of_Wait_N_Seconds:
  4758                           	opt stack 0
  4759                           tblptru	equ	0xFF8
  4760                           tblptrh	equ	0xFF7
  4761                           tblptrl	equ	0xFF6
  4762                           tablat	equ	0xFF5
  4763                           intcon2	equ	0xFF1
  4764                           postinc0	equ	0xFEE
  4765                           wreg	equ	0xFE8
  4766                           postdec1	equ	0xFE5
  4767                           fsr1l	equ	0xFE1
  4768                           status	equ	0xFD8
  4769                           
  4770 ;; *************** function _update_LCD_count *****************
  4771 ;; Defined at:
  4772 ;;		line 630 in file "Lab9.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;  direction       1    wreg     unsigned char 
  4775 ;;  count           1   57[COMRAM] unsigned char 
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;  direction       1   58[COMRAM] unsigned char 
  4778 ;; Return value:  Size  Location     Type
  4779 ;;		None               void
  4780 ;; Registers used:
  4781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4787 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;Total ram usage:        2 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    7
  4794 ;; This function calls:
  4795 ;;		___awdiv
  4796 ;;		___awmod
  4797 ;;		_drawtext
  4798 ;; This function is called by:
  4799 ;;		_Wait_N_Seconds
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text19
  4804  00EE44                     __ptext19:
  4805                           	opt stack 0
  4806  00EE44                     _update_LCD_count:
  4807                           	opt stack 21
  4808                           
  4809                           ;incstack = 0
  4810                           ;update_LCD_count@direction stored from wreg
  4811  00EE44  6E3B               	movwf	update_LCD_count@direction,c
  4812                           
  4813                           ;Lab9.c: 632: switch (direction)
  4814  00EE46  D0AE               	goto	l3335
  4815  00EE48                     l3317:
  4816                           
  4817                           ;Lab9.c: 635: EW_Count[0] = count/10 + '0';
  4818  00EE48  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4819  00EE4C  6A02               	clrf	___awdiv@dividend+1,c
  4820  00EE4E  0E00               	movlw	0
  4821  00EE50  6E04               	movwf	___awdiv@divisor+1,c
  4822  00EE52  0E0A               	movlw	10
  4823  00EE54  6E03               	movwf	___awdiv@divisor,c
  4824  00EE56  ECD9  F070         	call	___awdiv	;wreg free
  4825  00EE5A  5001               	movf	?___awdiv,w,c
  4826  00EE5C  0F30               	addlw	48
  4827  00EE5E  6E45               	movwf	_EW_Count,c
  4828                           
  4829                           ;Lab9.c: 636: EW_Count[1] = count%10 + '0';
  4830  00EE60  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4831  00EE64  6A02               	clrf	___awmod@dividend+1,c
  4832  00EE66  0E00               	movlw	0
  4833  00EE68  6E04               	movwf	___awmod@divisor+1,c
  4834  00EE6A  0E0A               	movlw	10
  4835  00EE6C  6E03               	movwf	___awmod@divisor,c
  4836  00EE6E  ECCF  F06F         	call	___awmod	;wreg free
  4837  00EE72  5001               	movf	?___awmod,w,c
  4838  00EE74  0F30               	addlw	48
  4839  00EE76  6E46               	movwf	_EW_Count+1,c
  4840                           
  4841                           ;Lab9.c: 637: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4842  00EE78  0E1E               	movlw	30
  4843  00EE7A  6E29               	movwf	drawtext@y,c
  4844  00EE7C  0E45               	movlw	low _EW_Count
  4845  00EE7E  6E2A               	movwf	drawtext@_text,c
  4846  00EE80  0E00               	movlw	high _EW_Count
  4847  00EE82  6E2B               	movwf	drawtext@_text+1,c
  4848  00EE84  0E07               	movlw	7
  4849  00EE86  6E2D               	movwf	drawtext@color+1,c
  4850  00EE88  682C               	setf	drawtext@color,c
  4851  00EE8A  0E00               	movlw	0
  4852  00EE8C  6E2F               	movwf	drawtext@bg+1,c
  4853  00EE8E  0E00               	movlw	0
  4854  00EE90  6E2E               	movwf	drawtext@bg,c
  4855  00EE92  0E02               	movlw	2
  4856  00EE94  6E30               	movwf	drawtext@size,c
  4857  00EE96  0E64               	movlw	100
  4858  00EE98  EC5A  F073         	call	_drawtext
  4859                           
  4860                           ;Lab9.c: 638: break;
  4861  00EE9C  D091               	goto	l478
  4862  00EE9E                     l3321:
  4863                           
  4864                           ;Lab9.c: 642: EWLT_Count[0] = count/10 + '0';
  4865  00EE9E  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4866  00EEA2  6A02               	clrf	___awdiv@dividend+1,c
  4867  00EEA4  0E00               	movlw	0
  4868  00EEA6  6E04               	movwf	___awdiv@divisor+1,c
  4869  00EEA8  0E0A               	movlw	10
  4870  00EEAA  6E03               	movwf	___awdiv@divisor,c
  4871  00EEAC  ECD9  F070         	call	___awdiv	;wreg free
  4872  00EEB0  5001               	movf	?___awdiv,w,c
  4873  00EEB2  0F30               	addlw	48
  4874  00EEB4  6E42               	movwf	_EWLT_Count,c
  4875                           
  4876                           ;Lab9.c: 643: EWLT_Count[1] = count%10 + '0';
  4877  00EEB6  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4878  00EEBA  6A02               	clrf	___awmod@dividend+1,c
  4879  00EEBC  0E00               	movlw	0
  4880  00EEBE  6E04               	movwf	___awmod@divisor+1,c
  4881  00EEC0  0E0A               	movlw	10
  4882  00EEC2  6E03               	movwf	___awmod@divisor,c
  4883  00EEC4  ECCF  F06F         	call	___awmod	;wreg free
  4884  00EEC8  5001               	movf	?___awmod,w,c
  4885  00EECA  0F30               	addlw	48
  4886  00EECC  6E43               	movwf	_EWLT_Count+1,c
  4887                           
  4888                           ;Lab9.c: 644: drawtext(100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  4889  00EECE  0E3C               	movlw	60
  4890  00EED0  6E29               	movwf	drawtext@y,c
  4891  00EED2  0E42               	movlw	low _EWLT_Count
  4892  00EED4  6E2A               	movwf	drawtext@_text,c
  4893  00EED6  0E00               	movlw	high _EWLT_Count
  4894  00EED8  6E2B               	movwf	drawtext@_text+1,c
  4895  00EEDA  0EFF               	movlw	255
  4896  00EEDC  6E2D               	movwf	drawtext@color+1,c
  4897  00EEDE  682C               	setf	drawtext@color,c
  4898  00EEE0  0E00               	movlw	0
  4899  00EEE2  6E2F               	movwf	drawtext@bg+1,c
  4900  00EEE4  0E00               	movlw	0
  4901  00EEE6  6E2E               	movwf	drawtext@bg,c
  4902  00EEE8  0E02               	movlw	2
  4903  00EEEA  6E30               	movwf	drawtext@size,c
  4904  00EEEC  0E64               	movlw	100
  4905  00EEEE  EC5A  F073         	call	_drawtext
  4906                           
  4907                           ;Lab9.c: 645: break;
  4908  00EEF2  D066               	goto	l478
  4909  00EEF4                     l3325:
  4910                           
  4911                           ;Lab9.c: 648: NS_Count[0] = count/10 + '0';
  4912  00EEF4  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4913  00EEF8  6A02               	clrf	___awdiv@dividend+1,c
  4914  00EEFA  0E00               	movlw	0
  4915  00EEFC  6E04               	movwf	___awdiv@divisor+1,c
  4916  00EEFE  0E0A               	movlw	10
  4917  00EF00  6E03               	movwf	___awdiv@divisor,c
  4918  00EF02  ECD9  F070         	call	___awdiv	;wreg free
  4919  00EF06  5001               	movf	?___awdiv,w,c
  4920  00EF08  0F30               	addlw	48
  4921  00EF0A  6E4B               	movwf	_NS_Count,c
  4922                           
  4923                           ;Lab9.c: 649: NS_Count[1] = count%10 + '0';
  4924  00EF0C  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4925  00EF10  6A02               	clrf	___awmod@dividend+1,c
  4926  00EF12  0E00               	movlw	0
  4927  00EF14  6E04               	movwf	___awmod@divisor+1,c
  4928  00EF16  0E0A               	movlw	10
  4929  00EF18  6E03               	movwf	___awmod@divisor,c
  4930  00EF1A  ECCF  F06F         	call	___awmod	;wreg free
  4931  00EF1E  5001               	movf	?___awmod,w,c
  4932  00EF20  0F30               	addlw	48
  4933  00EF22  6E4C               	movwf	_NS_Count+1,c
  4934                           
  4935                           ;Lab9.c: 650: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  4936  00EF24  0E5A               	movlw	90
  4937  00EF26  6E29               	movwf	drawtext@y,c
  4938  00EF28  0E4B               	movlw	low _NS_Count
  4939  00EF2A  6E2A               	movwf	drawtext@_text,c
  4940  00EF2C  0E00               	movlw	high _NS_Count
  4941  00EF2E  6E2B               	movwf	drawtext@_text+1,c
  4942  00EF30  0E00               	movlw	0
  4943  00EF32  6E2D               	movwf	drawtext@color+1,c
  4944  00EF34  0E1F               	movlw	31
  4945  00EF36  6E2C               	movwf	drawtext@color,c
  4946  00EF38  0E00               	movlw	0
  4947  00EF3A  6E2F               	movwf	drawtext@bg+1,c
  4948  00EF3C  0E00               	movlw	0
  4949  00EF3E  6E2E               	movwf	drawtext@bg,c
  4950  00EF40  0E02               	movlw	2
  4951  00EF42  6E30               	movwf	drawtext@size,c
  4952  00EF44  0E64               	movlw	100
  4953  00EF46  EC5A  F073         	call	_drawtext
  4954                           
  4955                           ;Lab9.c: 651: break;
  4956  00EF4A  D03A               	goto	l478
  4957  00EF4C                     l3329:
  4958                           
  4959                           ;Lab9.c: 654: NSLT_Count[0] = count/10 + '0';
  4960  00EF4C  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4961  00EF50  6A02               	clrf	___awdiv@dividend+1,c
  4962  00EF52  0E00               	movlw	0
  4963  00EF54  6E04               	movwf	___awdiv@divisor+1,c
  4964  00EF56  0E0A               	movlw	10
  4965  00EF58  6E03               	movwf	___awdiv@divisor,c
  4966  00EF5A  ECD9  F070         	call	___awdiv	;wreg free
  4967  00EF5E  5001               	movf	?___awdiv,w,c
  4968  00EF60  0F30               	addlw	48
  4969  00EF62  6E48               	movwf	_NSLT_Count,c
  4970                           
  4971                           ;Lab9.c: 655: NSLT_Count[1] = count%10 + '0';
  4972  00EF64  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4973  00EF68  6A02               	clrf	___awmod@dividend+1,c
  4974  00EF6A  0E00               	movlw	0
  4975  00EF6C  6E04               	movwf	___awmod@divisor+1,c
  4976  00EF6E  0E0A               	movlw	10
  4977  00EF70  6E03               	movwf	___awmod@divisor,c
  4978  00EF72  ECCF  F06F         	call	___awmod	;wreg free
  4979  00EF76  5001               	movf	?___awmod,w,c
  4980  00EF78  0F30               	addlw	48
  4981  00EF7A  6E49               	movwf	_NSLT_Count+1,c
  4982                           
  4983                           ;Lab9.c: 656: drawtext(100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  4984  00EF7C  0E78               	movlw	120
  4985  00EF7E  6E29               	movwf	drawtext@y,c
  4986  00EF80  0E48               	movlw	low _NSLT_Count
  4987  00EF82  6E2A               	movwf	drawtext@_text,c
  4988  00EF84  0E00               	movlw	high _NSLT_Count
  4989  00EF86  6E2B               	movwf	drawtext@_text+1,c
  4990  00EF88  0EF8               	movlw	248
  4991  00EF8A  6E2D               	movwf	drawtext@color+1,c
  4992  00EF8C  0E1F               	movlw	31
  4993  00EF8E  6E2C               	movwf	drawtext@color,c
  4994  00EF90  0E00               	movlw	0
  4995  00EF92  6E2F               	movwf	drawtext@bg+1,c
  4996  00EF94  0E00               	movlw	0
  4997  00EF96  6E2E               	movwf	drawtext@bg,c
  4998  00EF98  0E02               	movlw	2
  4999  00EF9A  6E30               	movwf	drawtext@size,c
  5000  00EF9C  0E64               	movlw	100
  5001  00EF9E  EC5A  F073         	call	_drawtext
  5002                           
  5003                           ;Lab9.c: 658: }
  5004                           
  5005                           ;Lab9.c: 657: break;
  5006  00EFA2  D00E               	goto	l478
  5007  00EFA4                     l3335:
  5008  00EFA4  503B               	movf	update_LCD_count@direction,w,c
  5009                           
  5010                           ; Switch size 1, requested type "space"
  5011                           ; Number of cases is 4, Range of values is 0 to 3
  5012                           ; switch strategies available:
  5013                           ; Name         Instructions Cycles
  5014                           ; simple_byte           13     7 (average)
  5015                           ;	Chosen strategy is simple_byte
  5016  00EFA6  0A00               	xorlw	0	; case 0
  5017  00EFA8  B4D8               	btfsc	status,2,c
  5018  00EFAA  D74E               	goto	l3317
  5019  00EFAC  0A01               	xorlw	1	; case 1
  5020  00EFAE  B4D8               	btfsc	status,2,c
  5021  00EFB0  D776               	goto	l3321
  5022  00EFB2  0A03               	xorlw	3	; case 2
  5023  00EFB4  B4D8               	btfsc	status,2,c
  5024  00EFB6  D79E               	goto	l3325
  5025  00EFB8  0A01               	xorlw	1	; case 3
  5026  00EFBA  B4D8               	btfsc	status,2,c
  5027  00EFBC  D7C7               	goto	l3329
  5028  00EFBE  D000               	goto	l478
  5029  00EFC0                     l478:
  5030  00EFC0  0012               	return		;funcret
  5031  00EFC2                     __end_of_update_LCD_count:
  5032                           	opt stack 0
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           intcon2	equ	0xFF1
  5038                           postinc0	equ	0xFEE
  5039                           wreg	equ	0xFE8
  5040                           postdec1	equ	0xFE5
  5041                           fsr1l	equ	0xFE1
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function _Wait_One_Second *****************
  5045 ;; Defined at:
  5046 ;;		line 538 in file "Lab9.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;		None
  5051 ;; Return value:  Size  Location     Type
  5052 ;;		None               void
  5053 ;; Registers used:
  5054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;Total ram usage:        0 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    8
  5067 ;; This function calls:
  5068 ;;		_Wait_Half_Second
  5069 ;;		_drawtext
  5070 ;;		_strcpy
  5071 ;;		_update_LCD_misc
  5072 ;; This function is called by:
  5073 ;;		_Wait_N_Seconds
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text20
  5078  00E020                     __ptext20:
  5079                           	opt stack 0
  5080  00E020                     _Wait_One_Second:
  5081                           	opt stack 20
  5082                           
  5083                           ;Lab9.c: 540: PORTDbits.RD7 = 1;
  5084                           
  5085                           ;incstack = 0
  5086  00E020  8E83               	bsf	3971,7,c	;volatile
  5087                           
  5088                           ;Lab9.c: 541: strcpy(txt,"*");
  5089  00E022  C06B  F001         	movff	_txt,strcpy@to
  5090  00E026  C06C  F002         	movff	_txt+1,strcpy@to+1
  5091  00E02A  0EFD               	movlw	low STR_5
  5092  00E02C  6E03               	movwf	strcpy@from,c
  5093  00E02E  0EFF               	movlw	high STR_5
  5094  00E030  6E04               	movwf	strcpy@from+1,c
  5095  00E032  ECA8  F06D         	call	_strcpy	;wreg free
  5096                           
  5097                           ;Lab9.c: 542: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5098  00E036  0E0A               	movlw	10
  5099  00E038  6E29               	movwf	drawtext@y,c
  5100  00E03A  C06B  F02A         	movff	_txt,drawtext@_text
  5101  00E03E  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  5102  00E042  0EFF               	movlw	255
  5103  00E044  6E2D               	movwf	drawtext@color+1,c
  5104  00E046  682C               	setf	drawtext@color,c
  5105  00E048  0E00               	movlw	0
  5106  00E04A  6E2F               	movwf	drawtext@bg+1,c
  5107  00E04C  0E00               	movlw	0
  5108  00E04E  6E2E               	movwf	drawtext@bg,c
  5109  00E050  0E01               	movlw	1
  5110  00E052  6E30               	movwf	drawtext@size,c
  5111  00E054  0E78               	movlw	120
  5112  00E056  EC5A  F073         	call	_drawtext
  5113                           
  5114                           ;Lab9.c: 543: Wait_Half_Second();
  5115  00E05A  ECF7  F06C         	call	_Wait_Half_Second	;wreg free
  5116                           
  5117                           ;Lab9.c: 545: PORTDbits.RD7 = 0;
  5118  00E05E  9E83               	bcf	3971,7,c	;volatile
  5119                           
  5120                           ;Lab9.c: 546: strcpy(txt," ");
  5121  00E060  C06B  F001         	movff	_txt,strcpy@to
  5122  00E064  C06C  F002         	movff	_txt+1,strcpy@to+1
  5123  00E068  0EFB               	movlw	low STR_14
  5124  00E06A  6E03               	movwf	strcpy@from,c
  5125  00E06C  0EFF               	movlw	high STR_14
  5126  00E06E  6E04               	movwf	strcpy@from+1,c
  5127  00E070  ECA8  F06D         	call	_strcpy	;wreg free
  5128                           
  5129                           ;Lab9.c: 547: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5130  00E074  0E0A               	movlw	10
  5131  00E076  6E29               	movwf	drawtext@y,c
  5132  00E078  C06B  F02A         	movff	_txt,drawtext@_text
  5133  00E07C  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  5134  00E080  0EFF               	movlw	255
  5135  00E082  6E2D               	movwf	drawtext@color+1,c
  5136  00E084  682C               	setf	drawtext@color,c
  5137  00E086  0E00               	movlw	0
  5138  00E088  6E2F               	movwf	drawtext@bg+1,c
  5139  00E08A  0E00               	movlw	0
  5140  00E08C  6E2E               	movwf	drawtext@bg,c
  5141  00E08E  0E01               	movlw	1
  5142  00E090  6E30               	movwf	drawtext@size,c
  5143  00E092  0E78               	movlw	120
  5144  00E094  EC5A  F073         	call	_drawtext
  5145                           
  5146                           ;Lab9.c: 548: Wait_Half_Second();
  5147  00E098  ECF7  F06C         	call	_Wait_Half_Second	;wreg free
  5148                           
  5149                           ;Lab9.c: 549: update_LCD_misc();
  5150  00E09C  ECB8  F078         	call	_update_LCD_misc	;wreg free
  5151  00E0A0  0012               	return		;funcret
  5152  00E0A2                     __end_of_Wait_One_Second:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           intcon2	equ	0xFF1
  5159                           postinc0	equ	0xFEE
  5160                           wreg	equ	0xFE8
  5161                           postdec1	equ	0xFE5
  5162                           fsr1l	equ	0xFE1
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function _update_LCD_misc *****************
  5166 ;; Defined at:
  5167 ;;		line 680 in file "Lab9.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  nStep           2   57[COMRAM] int 
  5172 ;;  ch              1   59[COMRAM] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;Total ram usage:        3 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    7
  5189 ;; This function calls:
  5190 ;;		___awtoft
  5191 ;;		___ftdiv
  5192 ;;		___ftge
  5193 ;;		___wmul
  5194 ;;		_drawtext
  5195 ;;		_get_full_ADC
  5196 ;; This function is called by:
  5197 ;;		_Wait_One_Second
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text21
  5202  00F170                     __ptext21:
  5203                           	opt stack 0
  5204  00F170                     _update_LCD_misc:
  5205                           	opt stack 20
  5206                           
  5207                           ;Lab9.c: 682: char ch = 0;
  5208                           
  5209                           ;incstack = 0
  5210  00F170  0E00               	movlw	0
  5211  00F172  6E3C               	movwf	update_LCD_misc@ch,c
  5212                           
  5213                           ;Lab9.c: 683: ADCON0 = ch*4 + 1;
  5214  00F174  503C               	movf	update_LCD_misc@ch,w,c
  5215  00F176  0D04               	mullw	4
  5216  00F178  28F3               	incf	prodl,w,c
  5217  00F17A  6EC2               	movwf	4034,c	;volatile
  5218                           
  5219                           ;Lab9.c: 684: int nStep = get_full_ADC();
  5220  00F17C  EC24  F06D         	call	_get_full_ADC	;wreg free
  5221  00F180  C001  F03A         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5222  00F184  C002  F03B         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5223                           
  5224                           ;Lab9.c: 685: volt = nStep * 5 /1024.0;
  5225  00F188  C03A  F001         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5226  00F18C  C03B  F002         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5227  00F190  0E00               	movlw	0
  5228  00F192  6E04               	movwf	___wmul@multiplicand+1,c
  5229  00F194  0E05               	movlw	5
  5230  00F196  6E03               	movwf	___wmul@multiplicand,c
  5231  00F198  EC37  F06D         	call	___wmul	;wreg free
  5232  00F19C  C001  F009         	movff	?___wmul,___awtoft@c
  5233  00F1A0  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  5234  00F1A4  ECC1  F06D         	call	___awtoft	;wreg free
  5235  00F1A8  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5236  00F1AC  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5237  00F1B0  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5238  00F1B4  0E00               	movlw	0
  5239  00F1B6  6E10               	movwf	___ftdiv@f2,c
  5240  00F1B8  0E80               	movlw	128
  5241  00F1BA  6E11               	movwf	___ftdiv@f2+1,c
  5242  00F1BC  0E44               	movlw	68
  5243  00F1BE  6E12               	movwf	___ftdiv@f2+2,c
  5244  00F1C0  ECC9  F073         	call	___ftdiv	;wreg free
  5245  00F1C4  C00D  F064         	movff	?___ftdiv,_volt
  5246  00F1C8  C00E  F065         	movff	?___ftdiv+1,_volt+1
  5247  00F1CC  C00F  F066         	movff	?___ftdiv+2,_volt+2
  5248                           
  5249                           ;Lab9.c: 687: SW_MODE = volt < 3.3 ? 1:0;
  5250  00F1D0  C064  F001         	movff	_volt,___ftge@ff1
  5251  00F1D4  C065  F002         	movff	_volt+1,___ftge@ff1+1
  5252  00F1D8  C066  F003         	movff	_volt+2,___ftge@ff1+2
  5253  00F1DC  0E33               	movlw	51
  5254  00F1DE  6E04               	movwf	___ftge@ff2,c
  5255  00F1E0  0E53               	movlw	83
  5256  00F1E2  6E05               	movwf	___ftge@ff2+1,c
  5257  00F1E4  0E40               	movlw	64
  5258  00F1E6  6E06               	movwf	___ftge@ff2+2,c
  5259  00F1E8  EC24  F071         	call	___ftge	;wreg free
  5260  00F1EC  B0D8               	btfsc	status,0,c
  5261  00F1EE  D002               	goto	u1850
  5262  00F1F0  0E01               	movlw	1
  5263  00F1F2  D001               	goto	u1860
  5264  00F1F4                     u1850:
  5265  00F1F4  0E00               	movlw	0
  5266  00F1F6                     u1860:
  5267  00F1F6  6E71               	movwf	_SW_MODE,c
  5268                           
  5269                           ;Lab9.c: 688: SW_EWPED = PORTCbits.RC0;
  5270  00F1F8  0E00               	movlw	0
  5271  00F1FA  B082               	btfsc	3970,0,c	;volatile
  5272  00F1FC  0E01               	movlw	1
  5273  00F1FE  6E70               	movwf	_SW_EWPED,c
  5274                           
  5275                           ;Lab9.c: 689: SW_EWLT = PORTCbits.RC2;
  5276  00F200  0E00               	movlw	0
  5277  00F202  B482               	btfsc	3970,2,c	;volatile
  5278  00F204  0E01               	movlw	1
  5279  00F206  6E6F               	movwf	_SW_EWLT,c
  5280                           
  5281                           ;Lab9.c: 690: SW_NSPED = PORTAbits.RA5;
  5282  00F208  0E00               	movlw	0
  5283  00F20A  BA80               	btfsc	3968,5,c	;volatile
  5284  00F20C  0E01               	movlw	1
  5285  00F20E  6E73               	movwf	_SW_NSPED,c
  5286                           
  5287                           ;Lab9.c: 691: SW_NSLT = PORTCbits.RC1;
  5288  00F210  0E00               	movlw	0
  5289  00F212  B282               	btfsc	3970,1,c	;volatile
  5290  00F214  0E01               	movlw	1
  5291  00F216  6E72               	movwf	_SW_NSLT,c
  5292                           
  5293                           ;Lab9.c: 694: if(SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5294  00F218  5071               	movf	_SW_MODE,w,c
  5295  00F21A  A4D8               	btfss	status,2,c
  5296  00F21C  D002               	goto	l3003
  5297  00F21E  0E4E               	movlw	78
  5298  00F220  D001               	goto	L1
  5299  00F222                     l3003:
  5300  00F222  0E44               	movlw	68
  5301  00F224                     L1:
  5302  00F224  6E5E               	movwf	_SW_MODE_Txt,c
  5303                           
  5304                           ;Lab9.c: 695: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5305  00F226  5070               	movf	_SW_EWPED,w,c
  5306  00F228  A4D8               	btfss	status,2,c
  5307  00F22A  D002               	goto	l3007
  5308  00F22C  0E30               	movlw	48
  5309  00F22E  D001               	goto	L2
  5310  00F230                     l3007:
  5311  00F230  0E31               	movlw	49
  5312  00F232                     L2:
  5313  00F232  6E5C               	movwf	_SW_EWPED_Txt,c
  5314                           
  5315                           ;Lab9.c: 696: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5316  00F234  506F               	movf	_SW_EWLT,w,c
  5317  00F236  A4D8               	btfss	status,2,c
  5318  00F238  D002               	goto	l3011
  5319  00F23A  0E30               	movlw	48
  5320  00F23C  D001               	goto	L3
  5321  00F23E                     l3011:
  5322  00F23E  0E31               	movlw	49
  5323  00F240                     L3:
  5324  00F240  6E5A               	movwf	_SW_EWLT_Txt,c
  5325                           
  5326                           ;Lab9.c: 697: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5327  00F242  5073               	movf	_SW_NSPED,w,c
  5328  00F244  A4D8               	btfss	status,2,c
  5329  00F246  D002               	goto	l3015
  5330  00F248  0E30               	movlw	48
  5331  00F24A  D001               	goto	L4
  5332  00F24C                     l3015:
  5333  00F24C  0E31               	movlw	49
  5334  00F24E                     L4:
  5335  00F24E  6E62               	movwf	_SW_NSPED_Txt,c
  5336                           
  5337                           ;Lab9.c: 698: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5338  00F250  5072               	movf	_SW_NSLT,w,c
  5339  00F252  A4D8               	btfss	status,2,c
  5340  00F254  D002               	goto	l3019
  5341  00F256  0E30               	movlw	48
  5342  00F258  D001               	goto	L5
  5343  00F25A                     l3019:
  5344  00F25A  0E31               	movlw	49
  5345  00F25C                     L5:
  5346  00F25C  6E60               	movwf	_SW_NSLT_Txt,c
  5347  00F25E  D000               	goto	l3021
  5348  00F260                     l3021:
  5349                           
  5350                           ;Lab9.c: 700: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5351  00F260  0E0A               	movlw	10
  5352  00F262  6E29               	movwf	drawtext@y,c
  5353  00F264  0E54               	movlw	low _Act_Mode_Txt
  5354  00F266  6E2A               	movwf	drawtext@_text,c
  5355  00F268  0E00               	movlw	high _Act_Mode_Txt
  5356  00F26A  6E2B               	movwf	drawtext@_text+1,c
  5357  00F26C  0EFF               	movlw	255
  5358  00F26E  6E2D               	movwf	drawtext@color+1,c
  5359  00F270  682C               	setf	drawtext@color,c
  5360  00F272  0E00               	movlw	0
  5361  00F274  6E2F               	movwf	drawtext@bg+1,c
  5362  00F276  0E00               	movlw	0
  5363  00F278  6E2E               	movwf	drawtext@bg,c
  5364  00F27A  0E01               	movlw	1
  5365  00F27C  6E30               	movwf	drawtext@size,c
  5366  00F27E  0E23               	movlw	35
  5367  00F280  EC5A  F073         	call	_drawtext
  5368                           
  5369                           ;Lab9.c: 701: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5370  00F284  0E95               	movlw	149
  5371  00F286  6E29               	movwf	drawtext@y,c
  5372  00F288  0E5C               	movlw	low _SW_EWPED_Txt
  5373  00F28A  6E2A               	movwf	drawtext@_text,c
  5374  00F28C  0E00               	movlw	high _SW_EWPED_Txt
  5375  00F28E  6E2B               	movwf	drawtext@_text+1,c
  5376  00F290  0EFF               	movlw	255
  5377  00F292  6E2D               	movwf	drawtext@color+1,c
  5378  00F294  682C               	setf	drawtext@color,c
  5379  00F296  0E00               	movlw	0
  5380  00F298  6E2F               	movwf	drawtext@bg+1,c
  5381  00F29A  0E00               	movlw	0
  5382  00F29C  6E2E               	movwf	drawtext@bg,c
  5383  00F29E  0E01               	movlw	1
  5384  00F2A0  6E30               	movwf	drawtext@size,c
  5385  00F2A2  0E06               	movlw	6
  5386  00F2A4  EC5A  F073         	call	_drawtext
  5387                           
  5388                           ;Lab9.c: 702: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5389  00F2A8  0E95               	movlw	149
  5390  00F2AA  6E29               	movwf	drawtext@y,c
  5391  00F2AC  0E5A               	movlw	low _SW_EWLT_Txt
  5392  00F2AE  6E2A               	movwf	drawtext@_text,c
  5393  00F2B0  0E00               	movlw	high _SW_EWLT_Txt
  5394  00F2B2  6E2B               	movwf	drawtext@_text+1,c
  5395  00F2B4  0EFF               	movlw	255
  5396  00F2B6  6E2D               	movwf	drawtext@color+1,c
  5397  00F2B8  682C               	setf	drawtext@color,c
  5398  00F2BA  0E00               	movlw	0
  5399  00F2BC  6E2F               	movwf	drawtext@bg+1,c
  5400  00F2BE  0E00               	movlw	0
  5401  00F2C0  6E2E               	movwf	drawtext@bg,c
  5402  00F2C2  0E01               	movlw	1
  5403  00F2C4  6E30               	movwf	drawtext@size,c
  5404  00F2C6  0E20               	movlw	32
  5405  00F2C8  EC5A  F073         	call	_drawtext
  5406                           
  5407                           ;Lab9.c: 703: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5408  00F2CC  0E95               	movlw	149
  5409  00F2CE  6E29               	movwf	drawtext@y,c
  5410  00F2D0  0E62               	movlw	low _SW_NSPED_Txt
  5411  00F2D2  6E2A               	movwf	drawtext@_text,c
  5412  00F2D4  0E00               	movlw	high _SW_NSPED_Txt
  5413  00F2D6  6E2B               	movwf	drawtext@_text+1,c
  5414  00F2D8  0EFF               	movlw	255
  5415  00F2DA  6E2D               	movwf	drawtext@color+1,c
  5416  00F2DC  682C               	setf	drawtext@color,c
  5417  00F2DE  0E00               	movlw	0
  5418  00F2E0  6E2F               	movwf	drawtext@bg+1,c
  5419  00F2E2  0E00               	movlw	0
  5420  00F2E4  6E2E               	movwf	drawtext@bg,c
  5421  00F2E6  0E01               	movlw	1
  5422  00F2E8  6E30               	movwf	drawtext@size,c
  5423  00F2EA  0E3A               	movlw	58
  5424  00F2EC  EC5A  F073         	call	_drawtext
  5425                           
  5426                           ;Lab9.c: 704: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5427  00F2F0  0E95               	movlw	149
  5428  00F2F2  6E29               	movwf	drawtext@y,c
  5429  00F2F4  0E60               	movlw	low _SW_NSLT_Txt
  5430  00F2F6  6E2A               	movwf	drawtext@_text,c
  5431  00F2F8  0E00               	movlw	high _SW_NSLT_Txt
  5432  00F2FA  6E2B               	movwf	drawtext@_text+1,c
  5433  00F2FC  0EFF               	movlw	255
  5434  00F2FE  6E2D               	movwf	drawtext@color+1,c
  5435  00F300  682C               	setf	drawtext@color,c
  5436  00F302  0E00               	movlw	0
  5437  00F304  6E2F               	movwf	drawtext@bg+1,c
  5438  00F306  0E00               	movlw	0
  5439  00F308  6E2E               	movwf	drawtext@bg,c
  5440  00F30A  0E01               	movlw	1
  5441  00F30C  6E30               	movwf	drawtext@size,c
  5442  00F30E  0E57               	movlw	87
  5443  00F310  EC5A  F073         	call	_drawtext
  5444                           
  5445                           ;Lab9.c: 706: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5446  00F314  0E95               	movlw	149
  5447  00F316  6E29               	movwf	drawtext@y,c
  5448  00F318  0E5E               	movlw	low _SW_MODE_Txt
  5449  00F31A  6E2A               	movwf	drawtext@_text,c
  5450  00F31C  0E00               	movlw	high _SW_MODE_Txt
  5451  00F31E  6E2B               	movwf	drawtext@_text+1,c
  5452  00F320  0EFF               	movlw	255
  5453  00F322  6E2D               	movwf	drawtext@color+1,c
  5454  00F324  682C               	setf	drawtext@color,c
  5455  00F326  0E00               	movlw	0
  5456  00F328  6E2F               	movwf	drawtext@bg+1,c
  5457  00F32A  0E00               	movlw	0
  5458  00F32C  6E2E               	movwf	drawtext@bg,c
  5459  00F32E  0E01               	movlw	1
  5460  00F330  6E30               	movwf	drawtext@size,c
  5461  00F332  0E70               	movlw	112
  5462  00F334  EC5A  F073         	call	_drawtext
  5463  00F338  0012               	return		;funcret
  5464  00F33A                     __end_of_update_LCD_misc:
  5465                           	opt stack 0
  5466                           tblptru	equ	0xFF8
  5467                           tblptrh	equ	0xFF7
  5468                           tblptrl	equ	0xFF6
  5469                           tablat	equ	0xFF5
  5470                           prodl	equ	0xFF3
  5471                           intcon2	equ	0xFF1
  5472                           postinc0	equ	0xFEE
  5473                           wreg	equ	0xFE8
  5474                           postdec1	equ	0xFE5
  5475                           fsr1l	equ	0xFE1
  5476                           status	equ	0xFD8
  5477                           
  5478 ;; *************** function _get_full_ADC *****************
  5479 ;; Defined at:
  5480 ;;		line 309 in file "Lab9.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;		None
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  result          2    4[COMRAM] unsigned int 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  2    0[COMRAM] unsigned int 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;Total ram usage:        6 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_main
  5504 ;;		_update_LCD_misc
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text22
  5509  00DA48                     __ptext22:
  5510                           	opt stack 0
  5511  00DA48                     _get_full_ADC:
  5512                           	opt stack 30
  5513                           
  5514                           ;Lab9.c: 311: unsigned int result;
  5515                           ;Lab9.c: 312: ADCON0bits.GO=1;
  5516                           
  5517                           ;incstack = 0
  5518  00DA48  82C2               	bsf	4034,1,c	;volatile
  5519                           
  5520                           ;Lab9.c: 313: while(ADCON0bits.DONE==1);
  5521  00DA4A  D000               	goto	l374
  5522  00DA4C                     l374:
  5523  00DA4C  B2C2               	btfsc	4034,1,c	;volatile
  5524  00DA4E  D7FE               	goto	l374
  5525                           
  5526                           ;Lab9.c: 314: result = (ADRESH * 0x100) + ADRESL;
  5527  00DA50  50C4               	movf	4036,w,c	;volatile
  5528  00DA52  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5529  00DA54  6A03               	clrf	??_get_full_ADC& (0+255),c
  5530  00DA56  50C3               	movf	4035,w,c	;volatile
  5531  00DA58  2403               	addwf	??_get_full_ADC,w,c
  5532  00DA5A  6E05               	movwf	get_full_ADC@result,c
  5533  00DA5C  0E00               	movlw	0
  5534  00DA5E  2004               	addwfc	??_get_full_ADC+1,w,c
  5535  00DA60  6E06               	movwf	get_full_ADC@result+1,c
  5536                           
  5537                           ;Lab9.c: 316: return result;
  5538  00DA62  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5539  00DA66  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5540  00DA6A  D000               	goto	l377
  5541  00DA6C                     l377:
  5542  00DA6C  0012               	return		;funcret
  5543  00DA6E                     __end_of_get_full_ADC:
  5544                           	opt stack 0
  5545                           tblptru	equ	0xFF8
  5546                           tblptrh	equ	0xFF7
  5547                           tblptrl	equ	0xFF6
  5548                           tablat	equ	0xFF5
  5549                           prodl	equ	0xFF3
  5550                           intcon2	equ	0xFF1
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1l	equ	0xFE1
  5555                           status	equ	0xFD8
  5556                           
  5557 ;; *************** function ___ftge *****************
  5558 ;; Defined at:
  5559 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  ff1             3    0[COMRAM] float 
  5562 ;;  ff2             3    3[COMRAM] float 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5574 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;Total ram usage:        9 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		_main
  5584 ;;		_update_LCD_misc
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           	psect	text23
  5589  00E248                     __ptext23:
  5590                           	opt stack 0
  5591  00E248                     ___ftge:
  5592                           	opt stack 30
  5593                           
  5594                           ;incstack = 0
  5595  00E248  AE03               	btfss	___ftge@ff1+2,7,c
  5596  00E24A  D017               	goto	l2897
  5597  00E24C  C001  F007         	movff	___ftge@ff1,??___ftge
  5598  00E250  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5599  00E254  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5600  00E258  1E07               	comf	??___ftge,f,c
  5601  00E25A  1E08               	comf	??___ftge+1,f,c
  5602  00E25C  1E09               	comf	??___ftge+2,f,c
  5603  00E25E  2A07               	incf	??___ftge,f,c
  5604  00E260  0E00               	movlw	0
  5605  00E262  2208               	addwfc	??___ftge+1,f,c
  5606  00E264  2209               	addwfc	??___ftge+2,f,c
  5607  00E266  0E00               	movlw	0
  5608  00E268  2407               	addwf	??___ftge,w,c
  5609  00E26A  6E01               	movwf	___ftge@ff1,c
  5610  00E26C  0E00               	movlw	0
  5611  00E26E  2008               	addwfc	??___ftge+1,w,c
  5612  00E270  6E02               	movwf	___ftge@ff1+1,c
  5613  00E272  0E80               	movlw	128
  5614  00E274  2009               	addwfc	??___ftge+2,w,c
  5615  00E276  6E03               	movwf	___ftge@ff1+2,c
  5616  00E278  D000               	goto	l2897
  5617  00E27A                     l2897:
  5618  00E27A  AE06               	btfss	___ftge@ff2+2,7,c
  5619  00E27C  D017               	goto	l2901
  5620  00E27E  C004  F007         	movff	___ftge@ff2,??___ftge
  5621  00E282  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5622  00E286  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5623  00E28A  1E07               	comf	??___ftge,f,c
  5624  00E28C  1E08               	comf	??___ftge+1,f,c
  5625  00E28E  1E09               	comf	??___ftge+2,f,c
  5626  00E290  2A07               	incf	??___ftge,f,c
  5627  00E292  0E00               	movlw	0
  5628  00E294  2208               	addwfc	??___ftge+1,f,c
  5629  00E296  2209               	addwfc	??___ftge+2,f,c
  5630  00E298  0E00               	movlw	0
  5631  00E29A  2407               	addwf	??___ftge,w,c
  5632  00E29C  6E04               	movwf	___ftge@ff2,c
  5633  00E29E  0E00               	movlw	0
  5634  00E2A0  2008               	addwfc	??___ftge+1,w,c
  5635  00E2A2  6E05               	movwf	___ftge@ff2+1,c
  5636  00E2A4  0E80               	movlw	128
  5637  00E2A6  2009               	addwfc	??___ftge+2,w,c
  5638  00E2A8  6E06               	movwf	___ftge@ff2+2,c
  5639  00E2AA  D000               	goto	l2901
  5640  00E2AC                     l2901:
  5641  00E2AC  0E00               	movlw	0
  5642  00E2AE  1A01               	xorwf	___ftge@ff1,f,c
  5643  00E2B0  0E00               	movlw	0
  5644  00E2B2  1A02               	xorwf	___ftge@ff1+1,f,c
  5645  00E2B4  0E80               	movlw	128
  5646  00E2B6  1A03               	xorwf	___ftge@ff1+2,f,c
  5647  00E2B8  0E00               	movlw	0
  5648  00E2BA  1A04               	xorwf	___ftge@ff2,f,c
  5649  00E2BC  0E00               	movlw	0
  5650  00E2BE  1A05               	xorwf	___ftge@ff2+1,f,c
  5651  00E2C0  0E80               	movlw	128
  5652  00E2C2  1A06               	xorwf	___ftge@ff2+2,f,c
  5653  00E2C4  5004               	movf	___ftge@ff2,w,c
  5654  00E2C6  5C01               	subwf	___ftge@ff1,w,c
  5655  00E2C8  5005               	movf	___ftge@ff2+1,w,c
  5656  00E2CA  5802               	subwfb	___ftge@ff1+1,w,c
  5657  00E2CC  5006               	movf	___ftge@ff2+2,w,c
  5658  00E2CE  5803               	subwfb	___ftge@ff1+2,w,c
  5659  00E2D0  B0D8               	btfsc	status,0,c
  5660  00E2D2  D002               	goto	l2907
  5661  00E2D4  90D8               	bcf	status,0,c
  5662  00E2D6  D002               	goto	l923
  5663  00E2D8                     l2907:
  5664  00E2D8  80D8               	bsf	status,0,c
  5665  00E2DA  D000               	goto	l923
  5666  00E2DC                     l923:
  5667  00E2DC  0012               	return		;funcret
  5668  00E2DE                     __end_of___ftge:
  5669                           	opt stack 0
  5670                           tblptru	equ	0xFF8
  5671                           tblptrh	equ	0xFF7
  5672                           tblptrl	equ	0xFF6
  5673                           tablat	equ	0xFF5
  5674                           prodl	equ	0xFF3
  5675                           intcon2	equ	0xFF1
  5676                           postinc0	equ	0xFEE
  5677                           wreg	equ	0xFE8
  5678                           postdec1	equ	0xFE5
  5679                           fsr1l	equ	0xFE1
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function ___ftdiv *****************
  5683 ;; Defined at:
  5684 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  f1              3   12[COMRAM] float 
  5687 ;;  f2              3   15[COMRAM] float 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  f3              3   22[COMRAM] float 
  5690 ;;  sign            1   26[COMRAM] unsigned char 
  5691 ;;  exp             1   25[COMRAM] unsigned char 
  5692 ;;  cntr            1   21[COMRAM] unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  3   12[COMRAM] float 
  5695 ;; Registers used:
  5696 ;;		wreg, status,2, status,0, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5702 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;Total ram usage:       15 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:    1
  5709 ;; This function calls:
  5710 ;;		___ftpack
  5711 ;; This function is called by:
  5712 ;;		_main
  5713 ;;		_update_LCD_misc
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text24
  5718  00E792                     __ptext24:
  5719                           	opt stack 0
  5720  00E792                     ___ftdiv:
  5721                           	opt stack 29
  5722                           
  5723                           ;incstack = 0
  5724  00E792  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5725  00E796  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5726  00E798  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5727  00E79A  340E               	rlcf	___ftdiv@f1+1,w,c
  5728  00E79C  3613               	rlcf	??___ftdiv& (0+255),f,c
  5729  00E79E  E301               	bnc	u1721
  5730  00E7A0  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5731  00E7A2                     u1721:
  5732  00E7A2  5013               	movf	??___ftdiv,w,c
  5733  00E7A4  6E1A               	movwf	___ftdiv@exp,c
  5734  00E7A6  501A               	movf	___ftdiv@exp,w,c
  5735  00E7A8  A4D8               	btfss	status,2,c
  5736  00E7AA  D002               	goto	l2841
  5737  00E7AC  D00E               	goto	l2843
  5738  00E7AE  D061               	goto	l914
  5739  00E7B0                     l2841:
  5740  00E7B0  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5741  00E7B4  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5742  00E7B6  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5743  00E7B8  3411               	rlcf	___ftdiv@f2+1,w,c
  5744  00E7BA  3613               	rlcf	??___ftdiv& (0+255),f,c
  5745  00E7BC  E301               	bnc	u1741
  5746  00E7BE  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5747  00E7C0                     u1741:
  5748  00E7C0  5013               	movf	??___ftdiv,w,c
  5749  00E7C2  6E1B               	movwf	___ftdiv@sign,c
  5750  00E7C4  501B               	movf	___ftdiv@sign,w,c
  5751  00E7C6  A4D8               	btfss	status,2,c
  5752  00E7C8  D007               	goto	l2847
  5753  00E7CA                     l2843:
  5754  00E7CA  0E00               	movlw	0
  5755  00E7CC  6E0D               	movwf	?___ftdiv,c
  5756  00E7CE  0E00               	movlw	0
  5757  00E7D0  6E0E               	movwf	?___ftdiv+1,c
  5758  00E7D2  0E00               	movlw	0
  5759  00E7D4  6E0F               	movwf	?___ftdiv+2,c
  5760  00E7D6  D04D               	goto	l914
  5761  00E7D8                     l2847:
  5762  00E7D8  0E00               	movlw	0
  5763  00E7DA  6E17               	movwf	___ftdiv@f3,c
  5764  00E7DC  0E00               	movlw	0
  5765  00E7DE  6E18               	movwf	___ftdiv@f3+1,c
  5766  00E7E0  0E00               	movlw	0
  5767  00E7E2  6E19               	movwf	___ftdiv@f3+2,c
  5768  00E7E4  501B               	movf	___ftdiv@sign,w,c
  5769  00E7E6  0F89               	addlw	137
  5770  00E7E8  5E1A               	subwf	___ftdiv@exp,f,c
  5771  00E7EA  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5772  00E7EE  5012               	movf	___ftdiv@f2+2,w,c
  5773  00E7F0  1A1B               	xorwf	___ftdiv@sign,f,c
  5774  00E7F2  0E80               	movlw	128
  5775  00E7F4  161B               	andwf	___ftdiv@sign,f,c
  5776  00E7F6  8E0E               	bsf	___ftdiv@f1+1,7,c
  5777  00E7F8  0EFF               	movlw	255
  5778  00E7FA  160D               	andwf	___ftdiv@f1,f,c
  5779  00E7FC  0EFF               	movlw	255
  5780  00E7FE  160E               	andwf	___ftdiv@f1+1,f,c
  5781  00E800  0E00               	movlw	0
  5782  00E802  160F               	andwf	___ftdiv@f1+2,f,c
  5783  00E804  8E11               	bsf	___ftdiv@f2+1,7,c
  5784  00E806  0EFF               	movlw	255
  5785  00E808  1610               	andwf	___ftdiv@f2,f,c
  5786  00E80A  0EFF               	movlw	255
  5787  00E80C  1611               	andwf	___ftdiv@f2+1,f,c
  5788  00E80E  0E00               	movlw	0
  5789  00E810  1612               	andwf	___ftdiv@f2+2,f,c
  5790  00E812  0E18               	movlw	24
  5791  00E814  6E16               	movwf	___ftdiv@cntr,c
  5792  00E816  D000               	goto	l2867
  5793  00E818                     l2867:
  5794  00E818  90D8               	bcf	status,0,c
  5795  00E81A  3617               	rlcf	___ftdiv@f3,f,c
  5796  00E81C  3618               	rlcf	___ftdiv@f3+1,f,c
  5797  00E81E  3619               	rlcf	___ftdiv@f3+2,f,c
  5798  00E820  5010               	movf	___ftdiv@f2,w,c
  5799  00E822  5C0D               	subwf	___ftdiv@f1,w,c
  5800  00E824  5011               	movf	___ftdiv@f2+1,w,c
  5801  00E826  580E               	subwfb	___ftdiv@f1+1,w,c
  5802  00E828  5012               	movf	___ftdiv@f2+2,w,c
  5803  00E82A  580F               	subwfb	___ftdiv@f1+2,w,c
  5804  00E82C  A0D8               	btfss	status,0,c
  5805  00E82E  D007               	goto	l917
  5806  00E830  5010               	movf	___ftdiv@f2,w,c
  5807  00E832  5E0D               	subwf	___ftdiv@f1,f,c
  5808  00E834  5011               	movf	___ftdiv@f2+1,w,c
  5809  00E836  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5810  00E838  5012               	movf	___ftdiv@f2+2,w,c
  5811  00E83A  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5812  00E83C  8017               	bsf	___ftdiv@f3,0,c
  5813  00E83E                     l917:
  5814  00E83E  90D8               	bcf	status,0,c
  5815  00E840  360D               	rlcf	___ftdiv@f1,f,c
  5816  00E842  360E               	rlcf	___ftdiv@f1+1,f,c
  5817  00E844  360F               	rlcf	___ftdiv@f1+2,f,c
  5818  00E846  2E16               	decfsz	___ftdiv@cntr,f,c
  5819  00E848  D7E7               	goto	l2867
  5820  00E84A  D000               	goto	l2877
  5821  00E84C                     l2877:
  5822  00E84C  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5823  00E850  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5824  00E854  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5825  00E858  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5826  00E85C  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5827  00E860  EC26  F072         	call	___ftpack	;wreg free
  5828  00E864  C001  F00D         	movff	?___ftpack,?___ftdiv
  5829  00E868  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5830  00E86C  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5831  00E870  D000               	goto	l914
  5832  00E872                     l914:
  5833  00E872  0012               	return		;funcret
  5834  00E874                     __end_of___ftdiv:
  5835                           	opt stack 0
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodl	equ	0xFF3
  5841                           intcon2	equ	0xFF1
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           postdec1	equ	0xFE5
  5845                           fsr1l	equ	0xFE1
  5846                           status	equ	0xFD8
  5847                           
  5848 ;; *************** function ___awtoft *****************
  5849 ;; Defined at:
  5850 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  c               2    8[COMRAM] int 
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  sign            1   11[COMRAM] unsigned char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  3    8[COMRAM] float 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5864 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;Total ram usage:        4 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    1
  5871 ;; This function calls:
  5872 ;;		___ftpack
  5873 ;; This function is called by:
  5874 ;;		_main
  5875 ;;		_update_LCD_misc
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	text25
  5880  00DB82                     __ptext25:
  5881                           	opt stack 0
  5882  00DB82                     ___awtoft:
  5883                           	opt stack 29
  5884                           
  5885                           ;incstack = 0
  5886  00DB82  0E00               	movlw	0
  5887  00DB84  6E0C               	movwf	___awtoft@sign,c
  5888  00DB86  AE0A               	btfss	___awtoft@c+1,7,c
  5889  00DB88  D007               	goto	l2889
  5890  00DB8A  6C09               	negf	___awtoft@c,c
  5891  00DB8C  1E0A               	comf	___awtoft@c+1,f,c
  5892  00DB8E  B0D8               	btfsc	status,0,c
  5893  00DB90  2A0A               	incf	___awtoft@c+1,f,c
  5894  00DB92  0E01               	movlw	1
  5895  00DB94  6E0C               	movwf	___awtoft@sign,c
  5896  00DB96  D000               	goto	l2889
  5897  00DB98                     l2889:
  5898  00DB98  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5899  00DB9C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5900  00DBA0  6A03               	clrf	___ftpack@arg+2,c
  5901  00DBA2  0E8E               	movlw	142
  5902  00DBA4  6E04               	movwf	___ftpack@exp,c
  5903  00DBA6  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5904  00DBAA  EC26  F072         	call	___ftpack	;wreg free
  5905  00DBAE  C001  F009         	movff	?___ftpack,?___awtoft
  5906  00DBB2  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5907  00DBB6  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5908  00DBBA  D000               	goto	l752
  5909  00DBBC                     l752:
  5910  00DBBC  0012               	return		;funcret
  5911  00DBBE                     __end_of___awtoft:
  5912                           	opt stack 0
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodl	equ	0xFF3
  5918                           intcon2	equ	0xFF1
  5919                           postinc0	equ	0xFEE
  5920                           wreg	equ	0xFE8
  5921                           postdec1	equ	0xFE5
  5922                           fsr1l	equ	0xFE1
  5923                           status	equ	0xFD8
  5924                           
  5925 ;; *************** function ___ftpack *****************
  5926 ;; Defined at:
  5927 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;  arg             3    0[COMRAM] unsigned um
  5930 ;;  exp             1    3[COMRAM] unsigned char 
  5931 ;;  sign            1    4[COMRAM] unsigned char 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;		None
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  3    0[COMRAM] float 
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5943 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;Total ram usage:        8 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; This function calls:
  5950 ;;		Nothing
  5951 ;; This function is called by:
  5952 ;;		___awtoft
  5953 ;;		___ftdiv
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text26
  5958  00E44C                     __ptext26:
  5959                           	opt stack 0
  5960  00E44C                     ___ftpack:
  5961                           	opt stack 29
  5962                           
  5963                           ;incstack = 0
  5964  00E44C  5004               	movf	___ftpack@exp,w,c
  5965  00E44E  B4D8               	btfsc	status,2,c
  5966  00E450  D005               	goto	l2727
  5967  00E452  5001               	movf	___ftpack@arg,w,c
  5968  00E454  1002               	iorwf	___ftpack@arg+1,w,c
  5969  00E456  1003               	iorwf	___ftpack@arg+2,w,c
  5970  00E458  A4D8               	btfss	status,2,c
  5971  00E45A  D00E               	goto	l2733
  5972  00E45C                     l2727:
  5973  00E45C  0E00               	movlw	0
  5974  00E45E  6E01               	movwf	?___ftpack,c
  5975  00E460  0E00               	movlw	0
  5976  00E462  6E02               	movwf	?___ftpack+1,c
  5977  00E464  0E00               	movlw	0
  5978  00E466  6E03               	movwf	?___ftpack+2,c
  5979  00E468  D053               	goto	l842
  5980  00E46A  D006               	goto	l2733
  5981  00E46C                     l2731:
  5982  00E46C  2A04               	incf	___ftpack@exp,f,c
  5983  00E46E  90D8               	bcf	status,0,c
  5984  00E470  3203               	rrcf	___ftpack@arg+2,f,c
  5985  00E472  3202               	rrcf	___ftpack@arg+1,f,c
  5986  00E474  3201               	rrcf	___ftpack@arg,f,c
  5987  00E476  D000               	goto	l2733
  5988  00E478                     l2733:
  5989  00E478  0E00               	movlw	0
  5990  00E47A  1401               	andwf	___ftpack@arg,w,c
  5991  00E47C  6E06               	movwf	??___ftpack& (0+255),c
  5992  00E47E  0E00               	movlw	0
  5993  00E480  1402               	andwf	___ftpack@arg+1,w,c
  5994  00E482  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5995  00E484  0EFE               	movlw	254
  5996  00E486  1403               	andwf	___ftpack@arg+2,w,c
  5997  00E488  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5998  00E48A  5006               	movf	??___ftpack,w,c
  5999  00E48C  1007               	iorwf	??___ftpack+1,w,c
  6000  00E48E  1008               	iorwf	??___ftpack+2,w,c
  6001  00E490  B4D8               	btfsc	status,2,c
  6002  00E492  D00E               	goto	l2739
  6003  00E494  D7EB               	goto	l2731
  6004  00E496  D00C               	goto	l2739
  6005  00E498                     l2735:
  6006  00E498  2A04               	incf	___ftpack@exp,f,c
  6007  00E49A  0E01               	movlw	1
  6008  00E49C  2601               	addwf	___ftpack@arg,f,c
  6009  00E49E  0E00               	movlw	0
  6010  00E4A0  2202               	addwfc	___ftpack@arg+1,f,c
  6011  00E4A2  0E00               	movlw	0
  6012  00E4A4  2203               	addwfc	___ftpack@arg+2,f,c
  6013  00E4A6  90D8               	bcf	status,0,c
  6014  00E4A8  3203               	rrcf	___ftpack@arg+2,f,c
  6015  00E4AA  3202               	rrcf	___ftpack@arg+1,f,c
  6016  00E4AC  3201               	rrcf	___ftpack@arg,f,c
  6017  00E4AE  D000               	goto	l2739
  6018  00E4B0                     l2739:
  6019  00E4B0  0E00               	movlw	0
  6020  00E4B2  1401               	andwf	___ftpack@arg,w,c
  6021  00E4B4  6E06               	movwf	??___ftpack& (0+255),c
  6022  00E4B6  0E00               	movlw	0
  6023  00E4B8  1402               	andwf	___ftpack@arg+1,w,c
  6024  00E4BA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6025  00E4BC  0EFF               	movlw	255
  6026  00E4BE  1403               	andwf	___ftpack@arg+2,w,c
  6027  00E4C0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6028  00E4C2  5006               	movf	??___ftpack,w,c
  6029  00E4C4  1007               	iorwf	??___ftpack+1,w,c
  6030  00E4C6  1008               	iorwf	??___ftpack+2,w,c
  6031  00E4C8  B4D8               	btfsc	status,2,c
  6032  00E4CA  D008               	goto	l2743
  6033  00E4CC  D7E5               	goto	l2735
  6034  00E4CE  D006               	goto	l2743
  6035  00E4D0                     l2741:
  6036  00E4D0  0604               	decf	___ftpack@exp,f,c
  6037  00E4D2  90D8               	bcf	status,0,c
  6038  00E4D4  3601               	rlcf	___ftpack@arg,f,c
  6039  00E4D6  3602               	rlcf	___ftpack@arg+1,f,c
  6040  00E4D8  3603               	rlcf	___ftpack@arg+2,f,c
  6041  00E4DA  D000               	goto	l2743
  6042  00E4DC                     l2743:
  6043  00E4DC  BE02               	btfsc	___ftpack@arg+1,7,c
  6044  00E4DE  D004               	goto	l853
  6045  00E4E0  0E02               	movlw	2
  6046  00E4E2  6004               	cpfslt	___ftpack@exp,c
  6047  00E4E4  D7F5               	goto	l2741
  6048  00E4E6  D000               	goto	l853
  6049  00E4E8                     l853:
  6050  00E4E8  B004               	btfsc	___ftpack@exp,0,c
  6051  00E4EA  D002               	goto	l2749
  6052  00E4EC  9E02               	bcf	___ftpack@arg+1,7,c
  6053  00E4EE  D000               	goto	l2749
  6054  00E4F0                     l2749:
  6055  00E4F0  90D8               	bcf	status,0,c
  6056  00E4F2  3204               	rrcf	___ftpack@exp,f,c
  6057  00E4F4  5004               	movf	___ftpack@exp,w,c
  6058  00E4F6  1203               	iorwf	___ftpack@arg+2,f,c
  6059  00E4F8  5005               	movf	___ftpack@sign,w,c
  6060  00E4FA  B4D8               	btfsc	status,2,c
  6061  00E4FC  D002               	goto	l2755
  6062  00E4FE  8E03               	bsf	___ftpack@arg+2,7,c
  6063  00E500  D000               	goto	l2755
  6064  00E502                     l2755:
  6065  00E502  C001  F001         	movff	___ftpack@arg,?___ftpack
  6066  00E506  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6067  00E50A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6068  00E50E  D000               	goto	l842
  6069  00E510                     l842:
  6070  00E510  0012               	return		;funcret
  6071  00E512                     __end_of___ftpack:
  6072                           	opt stack 0
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodl	equ	0xFF3
  6078                           intcon2	equ	0xFF1
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           postdec1	equ	0xFE5
  6082                           fsr1l	equ	0xFE1
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _strcpy *****************
  6086 ;; Defined at:
  6087 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  to              2    0[COMRAM] PTR unsigned char 
  6090 ;;		 -> NULL(0), buffer(31), 
  6091 ;;  from            2    2[COMRAM] PTR const unsigned char 
  6092 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  6093 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
  6094 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
  6095 ;;		 -> STR_2(6), STR_1(22), 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;  cp              2    4[COMRAM] PTR unsigned char 
  6098 ;;		 -> NULL(0), buffer(31), 
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  2    0[COMRAM] PTR unsigned char 
  6101 ;; Registers used:
  6102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6108 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;Total ram usage:        6 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; This function calls:
  6115 ;;		Nothing
  6116 ;; This function is called by:
  6117 ;;		_Initialize_Screen
  6118 ;;		_Wait_One_Second
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text27
  6123  00DB50                     __ptext27:
  6124                           	opt stack 0
  6125  00DB50                     _strcpy:
  6126                           	opt stack 27
  6127                           
  6128                           ;incstack = 0
  6129  00DB50  C001  F005         	movff	strcpy@to,strcpy@cp
  6130  00DB54  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  6131  00DB58  D005               	goto	l2979
  6132  00DB5A                     l2977:
  6133  00DB5A  4A05               	infsnz	strcpy@cp,f,c
  6134  00DB5C  2A06               	incf	strcpy@cp+1,f,c
  6135  00DB5E  4A03               	infsnz	strcpy@from,f,c
  6136  00DB60  2A04               	incf	strcpy@from+1,f,c
  6137  00DB62  D000               	goto	l2979
  6138  00DB64                     l2979:
  6139  00DB64  C003  FFF6         	movff	strcpy@from,tblptrl
  6140  00DB68  C004  FFF7         	movff	strcpy@from+1,tblptrh
  6141  00DB6C                     	if	0	;tblptru may be non-zero
  6142  00DB6C                     	endif
  6143  00DB6C                     	if	0	;tblptru may be non-zero
  6144  00DB6C                     	endif
  6145  00DB6C  C005  FFD9         	movff	strcpy@cp,fsr2l
  6146  00DB70  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  6147  00DB74  0008               	tblrd		*
  6148  00DB76  CFF5 FFDF          	movff	tablat,indf2
  6149  00DB7A  50DF               	movf	indf2,w,c
  6150  00DB7C  A4D8               	btfss	status,2,c
  6151  00DB7E  D7ED               	goto	l2977
  6152                           
  6153                           ;	Return value of _strcpy is never used
  6154  00DB80  0012               	return		;funcret
  6155  00DB82                     __end_of_strcpy:
  6156                           	opt stack 0
  6157                           tblptru	equ	0xFF8
  6158                           tblptrh	equ	0xFF7
  6159                           tblptrl	equ	0xFF6
  6160                           tablat	equ	0xFF5
  6161                           prodl	equ	0xFF3
  6162                           intcon2	equ	0xFF1
  6163                           postinc0	equ	0xFEE
  6164                           wreg	equ	0xFE8
  6165                           postdec1	equ	0xFE5
  6166                           fsr1l	equ	0xFE1
  6167                           indf2	equ	0xFDF
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function _Set_NSLT *****************
  6173 ;; Defined at:
  6174 ;;		line 333 in file "Lab9.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  color           1    wreg     unsigned char 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  color           1   53[COMRAM] unsigned char 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;		None               void
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;Total ram usage:        1 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    7
  6195 ;; This function calls:
  6196 ;;		_update_LCD_color
  6197 ;; This function is called by:
  6198 ;;		_Day_Mode
  6199 ;;		_Night_Mode
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text28
  6204  00DD48                     __ptext28:
  6205                           	opt stack 0
  6206  00DD48                     _Set_NSLT:
  6207                           	opt stack 22
  6208                           
  6209                           ;incstack = 0
  6210                           ;Set_NSLT@color stored from wreg
  6211  00DD48  6E36               	movwf	Set_NSLT@color,c
  6212                           
  6213                           ;Lab9.c: 335: direction = 3;
  6214  00DD4A  0E03               	movlw	3
  6215  00DD4C  6E77               	movwf	_direction,c
  6216                           
  6217                           ;Lab9.c: 336: update_LCD_color(direction,color);
  6218  00DD4E  C036  F033         	movff	Set_NSLT@color,update_LCD_color@color
  6219  00DD52  5077               	movf	_direction,w,c
  6220  00DD54  EC9D  F079         	call	_update_LCD_color
  6221                           
  6222                           ;Lab9.c: 338: switch(color)
  6223  00DD58  D00A               	goto	l3427
  6224  00DD5A                     l390:
  6225  00DD5A  9683               	bcf	3971,3,c	;volatile
  6226  00DD5C  D001               	goto	L6
  6227  00DD5E                     l392:
  6228  00DD5E  8683               	bsf	3971,3,c	;volatile
  6229  00DD60                     L6:
  6230  00DD60  9883               	bcf	3971,4,c	;volatile
  6231  00DD62  D013               	goto	l395
  6232  00DD64                     l393:
  6233  00DD64  9683               	bcf	3971,3,c	;volatile
  6234  00DD66  D001               	goto	L7
  6235  00DD68                     l394:
  6236  00DD68  8683               	bsf	3971,3,c	;volatile
  6237  00DD6A                     L7:
  6238  00DD6A  8883               	bsf	3971,4,c	;volatile
  6239                           
  6240                           ;Lab9.c: 344: }
  6241  00DD6C  D00E               	goto	l395
  6242  00DD6E                     l3427:
  6243  00DD6E  5036               	movf	Set_NSLT@color,w,c
  6244                           
  6245                           ; Switch size 1, requested type "space"
  6246                           ; Number of cases is 4, Range of values is 0 to 3
  6247                           ; switch strategies available:
  6248                           ; Name         Instructions Cycles
  6249                           ; simple_byte           13     7 (average)
  6250                           ;	Chosen strategy is simple_byte
  6251  00DD70  0A00               	xorlw	0	; case 0
  6252  00DD72  B4D8               	btfsc	status,2,c
  6253  00DD74  D7F2               	goto	l390
  6254  00DD76  0A01               	xorlw	1	; case 1
  6255  00DD78  B4D8               	btfsc	status,2,c
  6256  00DD7A  D7F1               	goto	l392
  6257  00DD7C  0A03               	xorlw	3	; case 2
  6258  00DD7E  B4D8               	btfsc	status,2,c
  6259  00DD80  D7F1               	goto	l393
  6260  00DD82  0A01               	xorlw	1	; case 3
  6261  00DD84  B4D8               	btfsc	status,2,c
  6262  00DD86  D7F0               	goto	l394
  6263  00DD88  D000               	goto	l395
  6264  00DD8A                     l395:
  6265  00DD8A  0012               	return		;funcret
  6266  00DD8C                     __end_of_Set_NSLT:
  6267                           	opt stack 0
  6268                           tblptru	equ	0xFF8
  6269                           tblptrh	equ	0xFF7
  6270                           tblptrl	equ	0xFF6
  6271                           tablat	equ	0xFF5
  6272                           prodl	equ	0xFF3
  6273                           intcon2	equ	0xFF1
  6274                           postinc0	equ	0xFEE
  6275                           wreg	equ	0xFE8
  6276                           postdec1	equ	0xFE5
  6277                           fsr1l	equ	0xFE1
  6278                           indf2	equ	0xFDF
  6279                           fsr2h	equ	0xFDA
  6280                           fsr2l	equ	0xFD9
  6281                           status	equ	0xFD8
  6282                           
  6283 ;; *************** function _Set_NS *****************
  6284 ;; Defined at:
  6285 ;;		line 319 in file "Lab9.c"
  6286 ;; Parameters:    Size  Location     Type
  6287 ;;  color           1    wreg     unsigned char 
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;  color           1   53[COMRAM] unsigned char 
  6290 ;; Return value:  Size  Location     Type
  6291 ;;		None               void
  6292 ;; Registers used:
  6293 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;Total ram usage:        1 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; Hardware stack levels required when called:    7
  6306 ;; This function calls:
  6307 ;;		_update_LCD_color
  6308 ;; This function is called by:
  6309 ;;		_Day_Mode
  6310 ;;		_Night_Mode
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text29
  6315  00DD04                     __ptext29:
  6316                           	opt stack 0
  6317  00DD04                     _Set_NS:
  6318                           	opt stack 22
  6319                           
  6320                           ;incstack = 0
  6321                           ;Set_NS@color stored from wreg
  6322  00DD04  6E36               	movwf	Set_NS@color,c
  6323                           
  6324                           ;Lab9.c: 321: direction = 2;
  6325  00DD06  0E02               	movlw	2
  6326  00DD08  6E77               	movwf	_direction,c
  6327                           
  6328                           ;Lab9.c: 322: update_LCD_color(direction, color);
  6329  00DD0A  C036  F033         	movff	Set_NS@color,update_LCD_color@color
  6330  00DD0E  5077               	movf	_direction,w,c
  6331  00DD10  EC9D  F079         	call	_update_LCD_color
  6332                           
  6333                           ;Lab9.c: 324: switch (color)
  6334  00DD14  D00A               	goto	l3419
  6335  00DD16                     l381:
  6336  00DD16  9280               	bcf	3968,1,c	;volatile
  6337  00DD18  D001               	goto	L8
  6338  00DD1A                     l383:
  6339  00DD1A  8280               	bsf	3968,1,c	;volatile
  6340  00DD1C                     L8:
  6341  00DD1C  9480               	bcf	3968,2,c	;volatile
  6342  00DD1E  D013               	goto	l386
  6343  00DD20                     l384:
  6344  00DD20  9280               	bcf	3968,1,c	;volatile
  6345  00DD22  D001               	goto	L9
  6346  00DD24                     l385:
  6347  00DD24  8280               	bsf	3968,1,c	;volatile
  6348  00DD26                     L9:
  6349  00DD26  8480               	bsf	3968,2,c	;volatile
  6350                           
  6351                           ;Lab9.c: 330: }
  6352  00DD28  D00E               	goto	l386
  6353  00DD2A                     l3419:
  6354  00DD2A  5036               	movf	Set_NS@color,w,c
  6355                           
  6356                           ; Switch size 1, requested type "space"
  6357                           ; Number of cases is 4, Range of values is 0 to 3
  6358                           ; switch strategies available:
  6359                           ; Name         Instructions Cycles
  6360                           ; simple_byte           13     7 (average)
  6361                           ;	Chosen strategy is simple_byte
  6362  00DD2C  0A00               	xorlw	0	; case 0
  6363  00DD2E  B4D8               	btfsc	status,2,c
  6364  00DD30  D7F2               	goto	l381
  6365  00DD32  0A01               	xorlw	1	; case 1
  6366  00DD34  B4D8               	btfsc	status,2,c
  6367  00DD36  D7F1               	goto	l383
  6368  00DD38  0A03               	xorlw	3	; case 2
  6369  00DD3A  B4D8               	btfsc	status,2,c
  6370  00DD3C  D7F1               	goto	l384
  6371  00DD3E  0A01               	xorlw	1	; case 3
  6372  00DD40  B4D8               	btfsc	status,2,c
  6373  00DD42  D7F0               	goto	l385
  6374  00DD44  D000               	goto	l386
  6375  00DD46                     l386:
  6376  00DD46  0012               	return		;funcret
  6377  00DD48                     __end_of_Set_NS:
  6378                           	opt stack 0
  6379                           tblptru	equ	0xFF8
  6380                           tblptrh	equ	0xFF7
  6381                           tblptrl	equ	0xFF6
  6382                           tablat	equ	0xFF5
  6383                           prodl	equ	0xFF3
  6384                           intcon2	equ	0xFF1
  6385                           postinc0	equ	0xFEE
  6386                           wreg	equ	0xFE8
  6387                           postdec1	equ	0xFE5
  6388                           fsr1l	equ	0xFE1
  6389                           indf2	equ	0xFDF
  6390                           fsr2h	equ	0xFDA
  6391                           fsr2l	equ	0xFD9
  6392                           status	equ	0xFD8
  6393                           
  6394 ;; *************** function _Set_EWLT *****************
  6395 ;; Defined at:
  6396 ;;		line 360 in file "Lab9.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;  color           1    wreg     unsigned char 
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;  color           1   53[COMRAM] unsigned char 
  6401 ;; Return value:  Size  Location     Type
  6402 ;;		None               void
  6403 ;; Registers used:
  6404 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;Total ram usage:        1 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    7
  6417 ;; This function calls:
  6418 ;;		_update_LCD_color
  6419 ;; This function is called by:
  6420 ;;		_Day_Mode
  6421 ;;		_Night_Mode
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text30
  6426  00DCC0                     __ptext30:
  6427                           	opt stack 0
  6428  00DCC0                     _Set_EWLT:
  6429                           	opt stack 22
  6430                           
  6431                           ;incstack = 0
  6432                           ;Set_EWLT@color stored from wreg
  6433  00DCC0  6E36               	movwf	Set_EWLT@color,c
  6434                           
  6435                           ;Lab9.c: 362: direction = 1;
  6436  00DCC2  0E01               	movlw	1
  6437  00DCC4  6E77               	movwf	_direction,c
  6438                           
  6439                           ;Lab9.c: 363: update_LCD_color(direction,color);
  6440  00DCC6  C036  F033         	movff	Set_EWLT@color,update_LCD_color@color
  6441  00DCCA  5077               	movf	_direction,w,c
  6442  00DCCC  EC9D  F079         	call	_update_LCD_color
  6443                           
  6444                           ;Lab9.c: 364: switch(color)
  6445  00DCD0  D00A               	goto	l3443
  6446  00DCD2                     l408:
  6447  00DCD2  9084               	bcf	3972,0,c	;volatile
  6448  00DCD4  D001               	goto	L10
  6449  00DCD6                     l410:
  6450  00DCD6  8084               	bsf	3972,0,c	;volatile
  6451  00DCD8                     L10:
  6452  00DCD8  9284               	bcf	3972,1,c	;volatile
  6453  00DCDA  D013               	goto	l413
  6454  00DCDC                     l411:
  6455  00DCDC  9084               	bcf	3972,0,c	;volatile
  6456  00DCDE  D001               	goto	L11
  6457  00DCE0                     l412:
  6458  00DCE0  8084               	bsf	3972,0,c	;volatile
  6459  00DCE2                     L11:
  6460  00DCE2  8284               	bsf	3972,1,c	;volatile
  6461                           
  6462                           ;Lab9.c: 370: }
  6463  00DCE4  D00E               	goto	l413
  6464  00DCE6                     l3443:
  6465  00DCE6  5036               	movf	Set_EWLT@color,w,c
  6466                           
  6467                           ; Switch size 1, requested type "space"
  6468                           ; Number of cases is 4, Range of values is 0 to 3
  6469                           ; switch strategies available:
  6470                           ; Name         Instructions Cycles
  6471                           ; simple_byte           13     7 (average)
  6472                           ;	Chosen strategy is simple_byte
  6473  00DCE8  0A00               	xorlw	0	; case 0
  6474  00DCEA  B4D8               	btfsc	status,2,c
  6475  00DCEC  D7F2               	goto	l408
  6476  00DCEE  0A01               	xorlw	1	; case 1
  6477  00DCF0  B4D8               	btfsc	status,2,c
  6478  00DCF2  D7F1               	goto	l410
  6479  00DCF4  0A03               	xorlw	3	; case 2
  6480  00DCF6  B4D8               	btfsc	status,2,c
  6481  00DCF8  D7F1               	goto	l411
  6482  00DCFA  0A01               	xorlw	1	; case 3
  6483  00DCFC  B4D8               	btfsc	status,2,c
  6484  00DCFE  D7F0               	goto	l412
  6485  00DD00  D000               	goto	l413
  6486  00DD02                     l413:
  6487  00DD02  0012               	return		;funcret
  6488  00DD04                     __end_of_Set_EWLT:
  6489                           	opt stack 0
  6490                           tblptru	equ	0xFF8
  6491                           tblptrh	equ	0xFF7
  6492                           tblptrl	equ	0xFF6
  6493                           tablat	equ	0xFF5
  6494                           prodl	equ	0xFF3
  6495                           intcon2	equ	0xFF1
  6496                           postinc0	equ	0xFEE
  6497                           wreg	equ	0xFE8
  6498                           postdec1	equ	0xFE5
  6499                           fsr1l	equ	0xFE1
  6500                           indf2	equ	0xFDF
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _Set_EW *****************
  6506 ;; Defined at:
  6507 ;;		line 347 in file "Lab9.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  color           1    wreg     unsigned char 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  color           1   53[COMRAM] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;		None               void
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;Total ram usage:        1 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    7
  6528 ;; This function calls:
  6529 ;;		_update_LCD_color
  6530 ;; This function is called by:
  6531 ;;		_Day_Mode
  6532 ;;		_Night_Mode
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text31
  6537  00DC7C                     __ptext31:
  6538                           	opt stack 0
  6539  00DC7C                     _Set_EW:
  6540                           	opt stack 22
  6541                           
  6542                           ;incstack = 0
  6543                           ;Set_EW@color stored from wreg
  6544  00DC7C  6E36               	movwf	Set_EW@color,c
  6545                           
  6546                           ;Lab9.c: 349: direction = 0;
  6547  00DC7E  0E00               	movlw	0
  6548  00DC80  6E77               	movwf	_direction,c
  6549                           
  6550                           ;Lab9.c: 350: update_LCD_color(direction,color);
  6551  00DC82  C036  F033         	movff	Set_EW@color,update_LCD_color@color
  6552  00DC86  5077               	movf	_direction,w,c
  6553  00DC88  EC9D  F079         	call	_update_LCD_color
  6554                           
  6555                           ;Lab9.c: 351: switch(color)
  6556  00DC8C  D00A               	goto	l3435
  6557  00DC8E                     l399:
  6558  00DC8E  9A83               	bcf	3971,5,c	;volatile
  6559  00DC90  D001               	goto	L12
  6560  00DC92                     l401:
  6561  00DC92  8A83               	bsf	3971,5,c	;volatile
  6562  00DC94                     L12:
  6563  00DC94  9C83               	bcf	3971,6,c	;volatile
  6564  00DC96  D013               	goto	l404
  6565  00DC98                     l402:
  6566  00DC98  9A83               	bcf	3971,5,c	;volatile
  6567  00DC9A  D001               	goto	L13
  6568  00DC9C                     l403:
  6569  00DC9C  8A83               	bsf	3971,5,c	;volatile
  6570  00DC9E                     L13:
  6571  00DC9E  8C83               	bsf	3971,6,c	;volatile
  6572                           
  6573                           ;Lab9.c: 357: }
  6574  00DCA0  D00E               	goto	l404
  6575  00DCA2                     l3435:
  6576  00DCA2  5036               	movf	Set_EW@color,w,c
  6577                           
  6578                           ; Switch size 1, requested type "space"
  6579                           ; Number of cases is 4, Range of values is 0 to 3
  6580                           ; switch strategies available:
  6581                           ; Name         Instructions Cycles
  6582                           ; simple_byte           13     7 (average)
  6583                           ;	Chosen strategy is simple_byte
  6584  00DCA4  0A00               	xorlw	0	; case 0
  6585  00DCA6  B4D8               	btfsc	status,2,c
  6586  00DCA8  D7F2               	goto	l399
  6587  00DCAA  0A01               	xorlw	1	; case 1
  6588  00DCAC  B4D8               	btfsc	status,2,c
  6589  00DCAE  D7F1               	goto	l401
  6590  00DCB0  0A03               	xorlw	3	; case 2
  6591  00DCB2  B4D8               	btfsc	status,2,c
  6592  00DCB4  D7F1               	goto	l402
  6593  00DCB6  0A01               	xorlw	1	; case 3
  6594  00DCB8  B4D8               	btfsc	status,2,c
  6595  00DCBA  D7F0               	goto	l403
  6596  00DCBC  D000               	goto	l404
  6597  00DCBE                     l404:
  6598  00DCBE  0012               	return		;funcret
  6599  00DCC0                     __end_of_Set_EW:
  6600                           	opt stack 0
  6601                           tblptru	equ	0xFF8
  6602                           tblptrh	equ	0xFF7
  6603                           tblptrl	equ	0xFF6
  6604                           tablat	equ	0xFF5
  6605                           prodl	equ	0xFF3
  6606                           intcon2	equ	0xFF1
  6607                           postinc0	equ	0xFEE
  6608                           wreg	equ	0xFE8
  6609                           postdec1	equ	0xFE5
  6610                           fsr1l	equ	0xFE1
  6611                           indf2	equ	0xFDF
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function _update_LCD_color *****************
  6617 ;; Defined at:
  6618 ;;		line 584 in file "Lab9.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  direction       1    wreg     unsigned char 
  6621 ;;  color           1   50[COMRAM] unsigned char 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  direction       1   51[COMRAM] unsigned char 
  6624 ;;  Circle_Y        1   52[COMRAM] unsigned char 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;		None               void
  6627 ;; Registers used:
  6628 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6634 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6637 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;Total ram usage:        3 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    6
  6641 ;; This function calls:
  6642 ;;		_drawCircle
  6643 ;;		_fillCircle
  6644 ;; This function is called by:
  6645 ;;		_Set_NS
  6646 ;;		_Set_NSLT
  6647 ;;		_Set_EW
  6648 ;;		_Set_EWLT
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           	psect	text32
  6653  00F33A                     __ptext32:
  6654                           	opt stack 0
  6655  00F33A                     _update_LCD_color:
  6656                           	opt stack 22
  6657                           
  6658                           ;incstack = 0
  6659                           ;update_LCD_color@direction stored from wreg
  6660  00F33A  6E34               	movwf	update_LCD_color@direction,c
  6661                           
  6662                           ;Lab9.c: 586: char Circle_Y;
  6663                           ;Lab9.c: 587: Circle_Y = 20 + 15 + direction * 30;
  6664  00F33C  5034               	movf	update_LCD_color@direction,w,c
  6665  00F33E  0D1E               	mullw	30
  6666  00F340  50F3               	movf	prodl,w,c
  6667  00F342  0F23               	addlw	35
  6668  00F344  6E35               	movwf	update_LCD_color@Circle_Y,c
  6669                           
  6670                           ;Lab9.c: 589: if (color == 0)
  6671  00F346  5033               	movf	update_LCD_color@color,w,c
  6672  00F348  A4D8               	btfss	status,2,c
  6673  00F34A  D067               	goto	l3273
  6674                           
  6675                           ;Lab9.c: 590: {
  6676                           ;Lab9.c: 591: fillCircle(40, Circle_Y, 7, 0x0000);
  6677  00F34C  0E00               	movlw	0
  6678  00F34E  6E2C               	movwf	fillCircle@x0+1,c
  6679  00F350  0E28               	movlw	40
  6680  00F352  6E2B               	movwf	fillCircle@x0,c
  6681  00F354  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6682  00F358  6A2E               	clrf	fillCircle@y0+1,c
  6683  00F35A  0E00               	movlw	0
  6684  00F35C  6E30               	movwf	fillCircle@r+1,c
  6685  00F35E  0E07               	movlw	7
  6686  00F360  6E2F               	movwf	fillCircle@r,c
  6687  00F362  0E00               	movlw	0
  6688  00F364  6E32               	movwf	fillCircle@color+1,c
  6689  00F366  0E00               	movlw	0
  6690  00F368  6E31               	movwf	fillCircle@color,c
  6691  00F36A  EC12  F06F         	call	_fillCircle	;wreg free
  6692                           
  6693                           ;Lab9.c: 592: fillCircle(60, Circle_Y, 7, 0x0000);
  6694  00F36E  0E00               	movlw	0
  6695  00F370  6E2C               	movwf	fillCircle@x0+1,c
  6696  00F372  0E3C               	movlw	60
  6697  00F374  6E2B               	movwf	fillCircle@x0,c
  6698  00F376  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6699  00F37A  6A2E               	clrf	fillCircle@y0+1,c
  6700  00F37C  0E00               	movlw	0
  6701  00F37E  6E30               	movwf	fillCircle@r+1,c
  6702  00F380  0E07               	movlw	7
  6703  00F382  6E2F               	movwf	fillCircle@r,c
  6704  00F384  0E00               	movlw	0
  6705  00F386  6E32               	movwf	fillCircle@color+1,c
  6706  00F388  0E00               	movlw	0
  6707  00F38A  6E31               	movwf	fillCircle@color,c
  6708  00F38C  EC12  F06F         	call	_fillCircle	;wreg free
  6709                           
  6710                           ;Lab9.c: 593: fillCircle(80, Circle_Y, 7, 0x0000);
  6711  00F390  0E00               	movlw	0
  6712  00F392  6E2C               	movwf	fillCircle@x0+1,c
  6713  00F394  0E50               	movlw	80
  6714  00F396  6E2B               	movwf	fillCircle@x0,c
  6715  00F398  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6716  00F39C  6A2E               	clrf	fillCircle@y0+1,c
  6717  00F39E  0E00               	movlw	0
  6718  00F3A0  6E30               	movwf	fillCircle@r+1,c
  6719  00F3A2  0E07               	movlw	7
  6720  00F3A4  6E2F               	movwf	fillCircle@r,c
  6721  00F3A6  0E00               	movlw	0
  6722  00F3A8  6E32               	movwf	fillCircle@color+1,c
  6723  00F3AA  0E00               	movlw	0
  6724  00F3AC  6E31               	movwf	fillCircle@color,c
  6725  00F3AE  EC12  F06F         	call	_fillCircle	;wreg free
  6726                           
  6727                           ;Lab9.c: 594: drawCircle(40, Circle_Y, 7, 0xF800);
  6728  00F3B2  0E00               	movlw	0
  6729  00F3B4  6E0D               	movwf	drawCircle@x0+1,c
  6730  00F3B6  0E28               	movlw	40
  6731  00F3B8  6E0C               	movwf	drawCircle@x0,c
  6732  00F3BA  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6733  00F3BE  6A0F               	clrf	drawCircle@y0+1,c
  6734  00F3C0  0E00               	movlw	0
  6735  00F3C2  6E11               	movwf	drawCircle@r+1,c
  6736  00F3C4  0E07               	movlw	7
  6737  00F3C6  6E10               	movwf	drawCircle@r,c
  6738  00F3C8  0EF8               	movlw	248
  6739  00F3CA  6E13               	movwf	drawCircle@color+1,c
  6740  00F3CC  0E00               	movlw	0
  6741  00F3CE  6E12               	movwf	drawCircle@color,c
  6742  00F3D0  ECE1  F077         	call	_drawCircle	;wreg free
  6743                           
  6744                           ;Lab9.c: 595: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6745  00F3D4  0E00               	movlw	0
  6746  00F3D6  6E0D               	movwf	drawCircle@x0+1,c
  6747  00F3D8  0E3C               	movlw	60
  6748  00F3DA  6E0C               	movwf	drawCircle@x0,c
  6749  00F3DC  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6750  00F3E0  6A0F               	clrf	drawCircle@y0+1,c
  6751  00F3E2  0E00               	movlw	0
  6752  00F3E4  6E11               	movwf	drawCircle@r+1,c
  6753  00F3E6  0E07               	movlw	7
  6754  00F3E8  6E10               	movwf	drawCircle@r,c
  6755  00F3EA  0EFF               	movlw	255
  6756  00F3EC  6E13               	movwf	drawCircle@color+1,c
  6757  00F3EE  0EE0               	movlw	224
  6758  00F3F0  6E12               	movwf	drawCircle@color,c
  6759  00F3F2  ECE1  F077         	call	_drawCircle	;wreg free
  6760                           
  6761                           ;Lab9.c: 596: drawCircle(80, Circle_Y, 7, 0x07E0);
  6762  00F3F6  0E00               	movlw	0
  6763  00F3F8  6E0D               	movwf	drawCircle@x0+1,c
  6764  00F3FA  0E50               	movlw	80
  6765  00F3FC  6E0C               	movwf	drawCircle@x0,c
  6766  00F3FE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6767  00F402  6A0F               	clrf	drawCircle@y0+1,c
  6768  00F404  0E00               	movlw	0
  6769  00F406  6E11               	movwf	drawCircle@r+1,c
  6770  00F408  0E07               	movlw	7
  6771  00F40A  6E10               	movwf	drawCircle@r,c
  6772  00F40C  0E07               	movlw	7
  6773  00F40E  6E13               	movwf	drawCircle@color+1,c
  6774  00F410  0EE0               	movlw	224
  6775  00F412  6E12               	movwf	drawCircle@color,c
  6776  00F414  ECE1  F077         	call	_drawCircle	;wreg free
  6777  00F418  D000               	goto	l3273
  6778  00F41A                     l3273:
  6779                           
  6780                           ;Lab9.c: 597: }
  6781                           ;Lab9.c: 599: if (color == 1)
  6782  00F41A  0433               	decf	update_LCD_color@color,w,c
  6783  00F41C  A4D8               	btfss	status,2,c
  6784  00F41E  D067               	goto	l3277
  6785                           
  6786                           ;Lab9.c: 600: {
  6787                           ;Lab9.c: 601: fillCircle(40, Circle_Y, 7, 0xF800);
  6788  00F420  0E00               	movlw	0
  6789  00F422  6E2C               	movwf	fillCircle@x0+1,c
  6790  00F424  0E28               	movlw	40
  6791  00F426  6E2B               	movwf	fillCircle@x0,c
  6792  00F428  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6793  00F42C  6A2E               	clrf	fillCircle@y0+1,c
  6794  00F42E  0E00               	movlw	0
  6795  00F430  6E30               	movwf	fillCircle@r+1,c
  6796  00F432  0E07               	movlw	7
  6797  00F434  6E2F               	movwf	fillCircle@r,c
  6798  00F436  0EF8               	movlw	248
  6799  00F438  6E32               	movwf	fillCircle@color+1,c
  6800  00F43A  0E00               	movlw	0
  6801  00F43C  6E31               	movwf	fillCircle@color,c
  6802  00F43E  EC12  F06F         	call	_fillCircle	;wreg free
  6803                           
  6804                           ;Lab9.c: 602: fillCircle(60, Circle_Y, 7, 0x0000);
  6805  00F442  0E00               	movlw	0
  6806  00F444  6E2C               	movwf	fillCircle@x0+1,c
  6807  00F446  0E3C               	movlw	60
  6808  00F448  6E2B               	movwf	fillCircle@x0,c
  6809  00F44A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6810  00F44E  6A2E               	clrf	fillCircle@y0+1,c
  6811  00F450  0E00               	movlw	0
  6812  00F452  6E30               	movwf	fillCircle@r+1,c
  6813  00F454  0E07               	movlw	7
  6814  00F456  6E2F               	movwf	fillCircle@r,c
  6815  00F458  0E00               	movlw	0
  6816  00F45A  6E32               	movwf	fillCircle@color+1,c
  6817  00F45C  0E00               	movlw	0
  6818  00F45E  6E31               	movwf	fillCircle@color,c
  6819  00F460  EC12  F06F         	call	_fillCircle	;wreg free
  6820                           
  6821                           ;Lab9.c: 603: fillCircle(80, Circle_Y, 7, 0x0000);
  6822  00F464  0E00               	movlw	0
  6823  00F466  6E2C               	movwf	fillCircle@x0+1,c
  6824  00F468  0E50               	movlw	80
  6825  00F46A  6E2B               	movwf	fillCircle@x0,c
  6826  00F46C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6827  00F470  6A2E               	clrf	fillCircle@y0+1,c
  6828  00F472  0E00               	movlw	0
  6829  00F474  6E30               	movwf	fillCircle@r+1,c
  6830  00F476  0E07               	movlw	7
  6831  00F478  6E2F               	movwf	fillCircle@r,c
  6832  00F47A  0E00               	movlw	0
  6833  00F47C  6E32               	movwf	fillCircle@color+1,c
  6834  00F47E  0E00               	movlw	0
  6835  00F480  6E31               	movwf	fillCircle@color,c
  6836  00F482  EC12  F06F         	call	_fillCircle	;wreg free
  6837                           
  6838                           ;Lab9.c: 604: drawCircle(40, Circle_Y, 7, 0xF800);
  6839  00F486  0E00               	movlw	0
  6840  00F488  6E0D               	movwf	drawCircle@x0+1,c
  6841  00F48A  0E28               	movlw	40
  6842  00F48C  6E0C               	movwf	drawCircle@x0,c
  6843  00F48E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6844  00F492  6A0F               	clrf	drawCircle@y0+1,c
  6845  00F494  0E00               	movlw	0
  6846  00F496  6E11               	movwf	drawCircle@r+1,c
  6847  00F498  0E07               	movlw	7
  6848  00F49A  6E10               	movwf	drawCircle@r,c
  6849  00F49C  0EF8               	movlw	248
  6850  00F49E  6E13               	movwf	drawCircle@color+1,c
  6851  00F4A0  0E00               	movlw	0
  6852  00F4A2  6E12               	movwf	drawCircle@color,c
  6853  00F4A4  ECE1  F077         	call	_drawCircle	;wreg free
  6854                           
  6855                           ;Lab9.c: 605: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6856  00F4A8  0E00               	movlw	0
  6857  00F4AA  6E0D               	movwf	drawCircle@x0+1,c
  6858  00F4AC  0E3C               	movlw	60
  6859  00F4AE  6E0C               	movwf	drawCircle@x0,c
  6860  00F4B0  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6861  00F4B4  6A0F               	clrf	drawCircle@y0+1,c
  6862  00F4B6  0E00               	movlw	0
  6863  00F4B8  6E11               	movwf	drawCircle@r+1,c
  6864  00F4BA  0E07               	movlw	7
  6865  00F4BC  6E10               	movwf	drawCircle@r,c
  6866  00F4BE  0EFF               	movlw	255
  6867  00F4C0  6E13               	movwf	drawCircle@color+1,c
  6868  00F4C2  0EE0               	movlw	224
  6869  00F4C4  6E12               	movwf	drawCircle@color,c
  6870  00F4C6  ECE1  F077         	call	_drawCircle	;wreg free
  6871                           
  6872                           ;Lab9.c: 606: drawCircle(80, Circle_Y, 7, 0x07E0);
  6873  00F4CA  0E00               	movlw	0
  6874  00F4CC  6E0D               	movwf	drawCircle@x0+1,c
  6875  00F4CE  0E50               	movlw	80
  6876  00F4D0  6E0C               	movwf	drawCircle@x0,c
  6877  00F4D2  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6878  00F4D6  6A0F               	clrf	drawCircle@y0+1,c
  6879  00F4D8  0E00               	movlw	0
  6880  00F4DA  6E11               	movwf	drawCircle@r+1,c
  6881  00F4DC  0E07               	movlw	7
  6882  00F4DE  6E10               	movwf	drawCircle@r,c
  6883  00F4E0  0E07               	movlw	7
  6884  00F4E2  6E13               	movwf	drawCircle@color+1,c
  6885  00F4E4  0EE0               	movlw	224
  6886  00F4E6  6E12               	movwf	drawCircle@color,c
  6887  00F4E8  ECE1  F077         	call	_drawCircle	;wreg free
  6888  00F4EC  D000               	goto	l3277
  6889  00F4EE                     l3277:
  6890                           
  6891                           ;Lab9.c: 607: }
  6892                           ;Lab9.c: 610: if (color == 3)
  6893  00F4EE  0E03               	movlw	3
  6894  00F4F0  1833               	xorwf	update_LCD_color@color,w,c
  6895  00F4F2  A4D8               	btfss	status,2,c
  6896  00F4F4  D067               	goto	l3281
  6897                           
  6898                           ;Lab9.c: 611: {
  6899                           ;Lab9.c: 612: fillCircle(40, Circle_Y, 7, 0x0000);
  6900  00F4F6  0E00               	movlw	0
  6901  00F4F8  6E2C               	movwf	fillCircle@x0+1,c
  6902  00F4FA  0E28               	movlw	40
  6903  00F4FC  6E2B               	movwf	fillCircle@x0,c
  6904  00F4FE  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6905  00F502  6A2E               	clrf	fillCircle@y0+1,c
  6906  00F504  0E00               	movlw	0
  6907  00F506  6E30               	movwf	fillCircle@r+1,c
  6908  00F508  0E07               	movlw	7
  6909  00F50A  6E2F               	movwf	fillCircle@r,c
  6910  00F50C  0E00               	movlw	0
  6911  00F50E  6E32               	movwf	fillCircle@color+1,c
  6912  00F510  0E00               	movlw	0
  6913  00F512  6E31               	movwf	fillCircle@color,c
  6914  00F514  EC12  F06F         	call	_fillCircle	;wreg free
  6915                           
  6916                           ;Lab9.c: 613: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6917  00F518  0E00               	movlw	0
  6918  00F51A  6E2C               	movwf	fillCircle@x0+1,c
  6919  00F51C  0E3C               	movlw	60
  6920  00F51E  6E2B               	movwf	fillCircle@x0,c
  6921  00F520  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6922  00F524  6A2E               	clrf	fillCircle@y0+1,c
  6923  00F526  0E00               	movlw	0
  6924  00F528  6E30               	movwf	fillCircle@r+1,c
  6925  00F52A  0E07               	movlw	7
  6926  00F52C  6E2F               	movwf	fillCircle@r,c
  6927  00F52E  0EFF               	movlw	255
  6928  00F530  6E32               	movwf	fillCircle@color+1,c
  6929  00F532  0EE0               	movlw	224
  6930  00F534  6E31               	movwf	fillCircle@color,c
  6931  00F536  EC12  F06F         	call	_fillCircle	;wreg free
  6932                           
  6933                           ;Lab9.c: 614: fillCircle(80, Circle_Y, 7, 0x0000);
  6934  00F53A  0E00               	movlw	0
  6935  00F53C  6E2C               	movwf	fillCircle@x0+1,c
  6936  00F53E  0E50               	movlw	80
  6937  00F540  6E2B               	movwf	fillCircle@x0,c
  6938  00F542  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6939  00F546  6A2E               	clrf	fillCircle@y0+1,c
  6940  00F548  0E00               	movlw	0
  6941  00F54A  6E30               	movwf	fillCircle@r+1,c
  6942  00F54C  0E07               	movlw	7
  6943  00F54E  6E2F               	movwf	fillCircle@r,c
  6944  00F550  0E00               	movlw	0
  6945  00F552  6E32               	movwf	fillCircle@color+1,c
  6946  00F554  0E00               	movlw	0
  6947  00F556  6E31               	movwf	fillCircle@color,c
  6948  00F558  EC12  F06F         	call	_fillCircle	;wreg free
  6949                           
  6950                           ;Lab9.c: 615: drawCircle(40, Circle_Y, 7, 0xF800);
  6951  00F55C  0E00               	movlw	0
  6952  00F55E  6E0D               	movwf	drawCircle@x0+1,c
  6953  00F560  0E28               	movlw	40
  6954  00F562  6E0C               	movwf	drawCircle@x0,c
  6955  00F564  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6956  00F568  6A0F               	clrf	drawCircle@y0+1,c
  6957  00F56A  0E00               	movlw	0
  6958  00F56C  6E11               	movwf	drawCircle@r+1,c
  6959  00F56E  0E07               	movlw	7
  6960  00F570  6E10               	movwf	drawCircle@r,c
  6961  00F572  0EF8               	movlw	248
  6962  00F574  6E13               	movwf	drawCircle@color+1,c
  6963  00F576  0E00               	movlw	0
  6964  00F578  6E12               	movwf	drawCircle@color,c
  6965  00F57A  ECE1  F077         	call	_drawCircle	;wreg free
  6966                           
  6967                           ;Lab9.c: 616: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6968  00F57E  0E00               	movlw	0
  6969  00F580  6E0D               	movwf	drawCircle@x0+1,c
  6970  00F582  0E3C               	movlw	60
  6971  00F584  6E0C               	movwf	drawCircle@x0,c
  6972  00F586  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6973  00F58A  6A0F               	clrf	drawCircle@y0+1,c
  6974  00F58C  0E00               	movlw	0
  6975  00F58E  6E11               	movwf	drawCircle@r+1,c
  6976  00F590  0E07               	movlw	7
  6977  00F592  6E10               	movwf	drawCircle@r,c
  6978  00F594  0EFF               	movlw	255
  6979  00F596  6E13               	movwf	drawCircle@color+1,c
  6980  00F598  0EE0               	movlw	224
  6981  00F59A  6E12               	movwf	drawCircle@color,c
  6982  00F59C  ECE1  F077         	call	_drawCircle	;wreg free
  6983                           
  6984                           ;Lab9.c: 617: drawCircle(80, Circle_Y, 7, 0x07E0);
  6985  00F5A0  0E00               	movlw	0
  6986  00F5A2  6E0D               	movwf	drawCircle@x0+1,c
  6987  00F5A4  0E50               	movlw	80
  6988  00F5A6  6E0C               	movwf	drawCircle@x0,c
  6989  00F5A8  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6990  00F5AC  6A0F               	clrf	drawCircle@y0+1,c
  6991  00F5AE  0E00               	movlw	0
  6992  00F5B0  6E11               	movwf	drawCircle@r+1,c
  6993  00F5B2  0E07               	movlw	7
  6994  00F5B4  6E10               	movwf	drawCircle@r,c
  6995  00F5B6  0E07               	movlw	7
  6996  00F5B8  6E13               	movwf	drawCircle@color+1,c
  6997  00F5BA  0EE0               	movlw	224
  6998  00F5BC  6E12               	movwf	drawCircle@color,c
  6999  00F5BE  ECE1  F077         	call	_drawCircle	;wreg free
  7000  00F5C2  D000               	goto	l3281
  7001  00F5C4                     l3281:
  7002                           
  7003                           ;Lab9.c: 618: }
  7004                           ;Lab9.c: 619: if (color == 2)
  7005  00F5C4  0E02               	movlw	2
  7006  00F5C6  1833               	xorwf	update_LCD_color@color,w,c
  7007  00F5C8  A4D8               	btfss	status,2,c
  7008  00F5CA  D067               	goto	l469
  7009                           
  7010                           ;Lab9.c: 620: {
  7011                           ;Lab9.c: 621: fillCircle(40, Circle_Y, 7, 0x0000);
  7012  00F5CC  0E00               	movlw	0
  7013  00F5CE  6E2C               	movwf	fillCircle@x0+1,c
  7014  00F5D0  0E28               	movlw	40
  7015  00F5D2  6E2B               	movwf	fillCircle@x0,c
  7016  00F5D4  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7017  00F5D8  6A2E               	clrf	fillCircle@y0+1,c
  7018  00F5DA  0E00               	movlw	0
  7019  00F5DC  6E30               	movwf	fillCircle@r+1,c
  7020  00F5DE  0E07               	movlw	7
  7021  00F5E0  6E2F               	movwf	fillCircle@r,c
  7022  00F5E2  0E00               	movlw	0
  7023  00F5E4  6E32               	movwf	fillCircle@color+1,c
  7024  00F5E6  0E00               	movlw	0
  7025  00F5E8  6E31               	movwf	fillCircle@color,c
  7026  00F5EA  EC12  F06F         	call	_fillCircle	;wreg free
  7027                           
  7028                           ;Lab9.c: 622: fillCircle(60, Circle_Y, 7, 0x0000);
  7029  00F5EE  0E00               	movlw	0
  7030  00F5F0  6E2C               	movwf	fillCircle@x0+1,c
  7031  00F5F2  0E3C               	movlw	60
  7032  00F5F4  6E2B               	movwf	fillCircle@x0,c
  7033  00F5F6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7034  00F5FA  6A2E               	clrf	fillCircle@y0+1,c
  7035  00F5FC  0E00               	movlw	0
  7036  00F5FE  6E30               	movwf	fillCircle@r+1,c
  7037  00F600  0E07               	movlw	7
  7038  00F602  6E2F               	movwf	fillCircle@r,c
  7039  00F604  0E00               	movlw	0
  7040  00F606  6E32               	movwf	fillCircle@color+1,c
  7041  00F608  0E00               	movlw	0
  7042  00F60A  6E31               	movwf	fillCircle@color,c
  7043  00F60C  EC12  F06F         	call	_fillCircle	;wreg free
  7044                           
  7045                           ;Lab9.c: 623: fillCircle(80, Circle_Y, 7, 0x07E0);
  7046  00F610  0E00               	movlw	0
  7047  00F612  6E2C               	movwf	fillCircle@x0+1,c
  7048  00F614  0E50               	movlw	80
  7049  00F616  6E2B               	movwf	fillCircle@x0,c
  7050  00F618  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7051  00F61C  6A2E               	clrf	fillCircle@y0+1,c
  7052  00F61E  0E00               	movlw	0
  7053  00F620  6E30               	movwf	fillCircle@r+1,c
  7054  00F622  0E07               	movlw	7
  7055  00F624  6E2F               	movwf	fillCircle@r,c
  7056  00F626  0E07               	movlw	7
  7057  00F628  6E32               	movwf	fillCircle@color+1,c
  7058  00F62A  0EE0               	movlw	224
  7059  00F62C  6E31               	movwf	fillCircle@color,c
  7060  00F62E  EC12  F06F         	call	_fillCircle	;wreg free
  7061                           
  7062                           ;Lab9.c: 624: drawCircle(40, Circle_Y, 7, 0xF800);
  7063  00F632  0E00               	movlw	0
  7064  00F634  6E0D               	movwf	drawCircle@x0+1,c
  7065  00F636  0E28               	movlw	40
  7066  00F638  6E0C               	movwf	drawCircle@x0,c
  7067  00F63A  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7068  00F63E  6A0F               	clrf	drawCircle@y0+1,c
  7069  00F640  0E00               	movlw	0
  7070  00F642  6E11               	movwf	drawCircle@r+1,c
  7071  00F644  0E07               	movlw	7
  7072  00F646  6E10               	movwf	drawCircle@r,c
  7073  00F648  0EF8               	movlw	248
  7074  00F64A  6E13               	movwf	drawCircle@color+1,c
  7075  00F64C  0E00               	movlw	0
  7076  00F64E  6E12               	movwf	drawCircle@color,c
  7077  00F650  ECE1  F077         	call	_drawCircle	;wreg free
  7078                           
  7079                           ;Lab9.c: 625: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7080  00F654  0E00               	movlw	0
  7081  00F656  6E0D               	movwf	drawCircle@x0+1,c
  7082  00F658  0E3C               	movlw	60
  7083  00F65A  6E0C               	movwf	drawCircle@x0,c
  7084  00F65C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7085  00F660  6A0F               	clrf	drawCircle@y0+1,c
  7086  00F662  0E00               	movlw	0
  7087  00F664  6E11               	movwf	drawCircle@r+1,c
  7088  00F666  0E07               	movlw	7
  7089  00F668  6E10               	movwf	drawCircle@r,c
  7090  00F66A  0EFF               	movlw	255
  7091  00F66C  6E13               	movwf	drawCircle@color+1,c
  7092  00F66E  0EE0               	movlw	224
  7093  00F670  6E12               	movwf	drawCircle@color,c
  7094  00F672  ECE1  F077         	call	_drawCircle	;wreg free
  7095                           
  7096                           ;Lab9.c: 626: drawCircle(80, Circle_Y, 7, 0x07E0);
  7097  00F676  0E00               	movlw	0
  7098  00F678  6E0D               	movwf	drawCircle@x0+1,c
  7099  00F67A  0E50               	movlw	80
  7100  00F67C  6E0C               	movwf	drawCircle@x0,c
  7101  00F67E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7102  00F682  6A0F               	clrf	drawCircle@y0+1,c
  7103  00F684  0E00               	movlw	0
  7104  00F686  6E11               	movwf	drawCircle@r+1,c
  7105  00F688  0E07               	movlw	7
  7106  00F68A  6E10               	movwf	drawCircle@r,c
  7107  00F68C  0E07               	movlw	7
  7108  00F68E  6E13               	movwf	drawCircle@color+1,c
  7109  00F690  0EE0               	movlw	224
  7110  00F692  6E12               	movwf	drawCircle@color,c
  7111  00F694  ECE1  F077         	call	_drawCircle	;wreg free
  7112  00F698  D000               	goto	l469
  7113  00F69A                     l469:
  7114  00F69A  0012               	return		;funcret
  7115  00F69C                     __end_of_update_LCD_color:
  7116                           	opt stack 0
  7117                           tblptru	equ	0xFF8
  7118                           tblptrh	equ	0xFF7
  7119                           tblptrl	equ	0xFF6
  7120                           tablat	equ	0xFF5
  7121                           prodl	equ	0xFF3
  7122                           intcon2	equ	0xFF1
  7123                           postinc0	equ	0xFEE
  7124                           wreg	equ	0xFE8
  7125                           postdec1	equ	0xFE5
  7126                           fsr1l	equ	0xFE1
  7127                           indf2	equ	0xFDF
  7128                           fsr2h	equ	0xFDA
  7129                           fsr2l	equ	0xFD9
  7130                           status	equ	0xFD8
  7131                           
  7132 ;; *************** function _fillCircle *****************
  7133 ;; Defined at:
  7134 ;;		line 647 in file "ST7735_TFT.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;  x0              2   42[COMRAM] int 
  7137 ;;  y0              2   44[COMRAM] int 
  7138 ;;  r               2   46[COMRAM] int 
  7139 ;;  color           2   48[COMRAM] unsigned int 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;		None
  7142 ;; Return value:  Size  Location     Type
  7143 ;;		None               void
  7144 ;; Registers used:
  7145 ;;		wreg, status,2, status,0, cstack
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7151 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;Total ram usage:        8 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    5
  7158 ;; This function calls:
  7159 ;;		_drawFastVLine
  7160 ;;		_fillCircleHelper
  7161 ;; This function is called by:
  7162 ;;		_Initialize_Screen
  7163 ;;		_update_LCD_color
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           	psect	text33
  7168  00DE24                     __ptext33:
  7169                           	opt stack 0
  7170  00DE24                     _fillCircle:
  7171                           	opt stack 22
  7172                           
  7173                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7174                           
  7175                           ;incstack = 0
  7176  00DE24  502F               	movf	fillCircle@r,w,c
  7177  00DE26  0800               	sublw	0
  7178  00DE28  242D               	addwf	fillCircle@y0,w,c
  7179  00DE2A  6E08               	movwf	drawFastVLine@y,c
  7180  00DE2C  80D8               	bsf	status,0,c
  7181  00DE2E  342F               	rlcf	fillCircle@r,w,c
  7182  00DE30  6E09               	movwf	drawFastVLine@h,c
  7183  00DE32  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  7184  00DE36  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  7185  00DE3A  502B               	movf	fillCircle@x0,w,c
  7186  00DE3C  EC51  F070         	call	_drawFastVLine
  7187                           
  7188                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  7189  00DE40  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  7190  00DE44  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7191  00DE48  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  7192  00DE4C  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7193  00DE50  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  7194  00DE54  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7195  00DE58  0E00               	movlw	0
  7196  00DE5A  6E1A               	movwf	fillCircleHelper@cornername+1,c
  7197  00DE5C  0E03               	movlw	3
  7198  00DE5E  6E19               	movwf	fillCircleHelper@cornername,c
  7199  00DE60  0E00               	movlw	0
  7200  00DE62  6E1C               	movwf	fillCircleHelper@delta+1,c
  7201  00DE64  0E00               	movlw	0
  7202  00DE66  6E1B               	movwf	fillCircleHelper@delta,c
  7203  00DE68  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  7204  00DE6C  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7205  00DE70  EC3B  F075         	call	_fillCircleHelper	;wreg free
  7206  00DE74  0012               	return		;funcret
  7207  00DE76                     __end_of_fillCircle:
  7208                           	opt stack 0
  7209                           tblptru	equ	0xFF8
  7210                           tblptrh	equ	0xFF7
  7211                           tblptrl	equ	0xFF6
  7212                           tablat	equ	0xFF5
  7213                           prodl	equ	0xFF3
  7214                           intcon2	equ	0xFF1
  7215                           postinc0	equ	0xFEE
  7216                           wreg	equ	0xFE8
  7217                           postdec1	equ	0xFE5
  7218                           fsr1l	equ	0xFE1
  7219                           indf2	equ	0xFDF
  7220                           fsr2h	equ	0xFDA
  7221                           fsr2l	equ	0xFD9
  7222                           status	equ	0xFD8
  7223                           
  7224 ;; *************** function _fillCircleHelper *****************
  7225 ;; Defined at:
  7226 ;;		line 622 in file "ST7735_TFT.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;  x0              2   18[COMRAM] int 
  7229 ;;  y0              2   20[COMRAM] int 
  7230 ;;  r               2   22[COMRAM] int 
  7231 ;;  cornername      2   24[COMRAM] unsigned int 
  7232 ;;  delta           2   26[COMRAM] int 
  7233 ;;  color           2   28[COMRAM] unsigned int 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  y               2   40[COMRAM] int 
  7236 ;;  x               2   38[COMRAM] int 
  7237 ;;  f               2   36[COMRAM] int 
  7238 ;;  ddF_y           2   34[COMRAM] int 
  7239 ;;  ddF_x           2   32[COMRAM] int 
  7240 ;; Return value:  Size  Location     Type
  7241 ;;		None               void
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7249 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;Total ram usage:       24 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    4
  7256 ;; This function calls:
  7257 ;;		_drawFastVLine
  7258 ;; This function is called by:
  7259 ;;		_fillCircle
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           	psect	text34
  7264  00EA76                     __ptext34:
  7265                           	opt stack 0
  7266  00EA76                     _fillCircleHelper:
  7267                           	opt stack 22
  7268                           
  7269                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  7270                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7271                           
  7272                           ;incstack = 0
  7273  00EA76  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  7274  00EA7A  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7275  00EA7E  1E1F               	comf	??_fillCircleHelper,f,c
  7276  00EA80  1E20               	comf	??_fillCircleHelper+1,f,c
  7277  00EA82  4A1F               	infsnz	??_fillCircleHelper,f,c
  7278  00EA84  2A20               	incf	??_fillCircleHelper+1,f,c
  7279  00EA86  0E01               	movlw	1
  7280  00EA88  241F               	addwf	??_fillCircleHelper,w,c
  7281  00EA8A  6E25               	movwf	fillCircleHelper@f,c
  7282  00EA8C  0E00               	movlw	0
  7283  00EA8E  2020               	addwfc	??_fillCircleHelper+1,w,c
  7284  00EA90  6E26               	movwf	fillCircleHelper@f+1,c
  7285  00EA92  0E00               	movlw	0
  7286  00EA94  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  7287  00EA96  0E01               	movlw	1
  7288  00EA98  6E21               	movwf	fillCircleHelper@ddF_x,c
  7289  00EA9A  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  7290  00EA9E  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7291  00EAA2  90D8               	bcf	status,0,c
  7292  00EAA4  361F               	rlcf	??_fillCircleHelper,f,c
  7293  00EAA6  3620               	rlcf	??_fillCircleHelper+1,f,c
  7294  00EAA8  1E1F               	comf	??_fillCircleHelper,f,c
  7295  00EAAA  1E20               	comf	??_fillCircleHelper+1,f,c
  7296  00EAAC  4A1F               	infsnz	??_fillCircleHelper,f,c
  7297  00EAAE  2A20               	incf	??_fillCircleHelper+1,f,c
  7298  00EAB0  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7299  00EAB4  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7300  00EAB8  0E00               	movlw	0
  7301  00EABA  6E28               	movwf	fillCircleHelper@x+1,c
  7302  00EABC  0E00               	movlw	0
  7303  00EABE  6E27               	movwf	fillCircleHelper@x,c
  7304  00EAC0  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  7305  00EAC4  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7306                           
  7307                           ;ST7735_TFT.c: 626: while (x<y) {
  7308  00EAC8  D067               	goto	l2825
  7309  00EACA                     l2805:
  7310                           
  7311                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7312  00EACA  BE26               	btfsc	fillCircleHelper@f+1,7,c
  7313  00EACC  D00B               	goto	l257
  7314                           
  7315                           ;ST7735_TFT.c: 628: y--;
  7316  00EACE  0629               	decf	fillCircleHelper@y,f,c
  7317  00EAD0  A0D8               	btfss	status,0,c
  7318  00EAD2  062A               	decf	fillCircleHelper@y+1,f,c
  7319                           
  7320                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7321  00EAD4  0E02               	movlw	2
  7322  00EAD6  2623               	addwf	fillCircleHelper@ddF_y,f,c
  7323  00EAD8  0E00               	movlw	0
  7324  00EADA  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7325                           
  7326                           ;ST7735_TFT.c: 630: f += ddF_y;
  7327  00EADC  5023               	movf	fillCircleHelper@ddF_y,w,c
  7328  00EADE  2625               	addwf	fillCircleHelper@f,f,c
  7329  00EAE0  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  7330  00EAE2  2226               	addwfc	fillCircleHelper@f+1,f,c
  7331  00EAE4                     l257:
  7332                           
  7333                           ;ST7735_TFT.c: 631: }
  7334                           ;ST7735_TFT.c: 632: x++;
  7335  00EAE4  4A27               	infsnz	fillCircleHelper@x,f,c
  7336  00EAE6  2A28               	incf	fillCircleHelper@x+1,f,c
  7337                           
  7338                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7339  00EAE8  0E02               	movlw	2
  7340  00EAEA  2621               	addwf	fillCircleHelper@ddF_x,f,c
  7341  00EAEC  0E00               	movlw	0
  7342  00EAEE  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7343                           
  7344                           ;ST7735_TFT.c: 634: f += ddF_x;
  7345  00EAF0  5021               	movf	fillCircleHelper@ddF_x,w,c
  7346  00EAF2  2625               	addwf	fillCircleHelper@f,f,c
  7347  00EAF4  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  7348  00EAF6  2226               	addwfc	fillCircleHelper@f+1,f,c
  7349                           
  7350                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7351  00EAF8  A019               	btfss	fillCircleHelper@cornername,0,c
  7352  00EAFA  D025               	goto	l2821
  7353                           
  7354                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7355  00EAFC  5029               	movf	fillCircleHelper@y,w,c
  7356  00EAFE  0800               	sublw	0
  7357  00EB00  2415               	addwf	fillCircleHelper@y0,w,c
  7358  00EB02  6E08               	movwf	drawFastVLine@y,c
  7359  00EB04  5029               	movf	fillCircleHelper@y,w,c
  7360  00EB06  2429               	addwf	fillCircleHelper@y,w,c
  7361  00EB08  241B               	addwf	fillCircleHelper@delta,w,c
  7362  00EB0A  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7363  00EB0C  281F               	incf	??_fillCircleHelper,w,c
  7364  00EB0E  6E09               	movwf	drawFastVLine@h,c
  7365  00EB10  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7366  00EB14  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7367  00EB18  5013               	movf	fillCircleHelper@x0,w,c
  7368  00EB1A  2427               	addwf	fillCircleHelper@x,w,c
  7369  00EB1C  EC51  F070         	call	_drawFastVLine
  7370                           
  7371                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7372  00EB20  5027               	movf	fillCircleHelper@x,w,c
  7373  00EB22  0800               	sublw	0
  7374  00EB24  2415               	addwf	fillCircleHelper@y0,w,c
  7375  00EB26  6E08               	movwf	drawFastVLine@y,c
  7376  00EB28  5027               	movf	fillCircleHelper@x,w,c
  7377  00EB2A  2427               	addwf	fillCircleHelper@x,w,c
  7378  00EB2C  241B               	addwf	fillCircleHelper@delta,w,c
  7379  00EB2E  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7380  00EB30  281F               	incf	??_fillCircleHelper,w,c
  7381  00EB32  6E09               	movwf	drawFastVLine@h,c
  7382  00EB34  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7383  00EB38  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7384  00EB3C  5013               	movf	fillCircleHelper@x0,w,c
  7385  00EB3E  2429               	addwf	fillCircleHelper@y,w,c
  7386  00EB40  EC51  F070         	call	_drawFastVLine
  7387  00EB44  D000               	goto	l2821
  7388  00EB46                     l2821:
  7389                           
  7390                           ;ST7735_TFT.c: 639: }
  7391                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7392  00EB46  A219               	btfss	fillCircleHelper@cornername,1,c
  7393  00EB48  D027               	goto	l2825
  7394                           
  7395                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7396  00EB4A  5029               	movf	fillCircleHelper@y,w,c
  7397  00EB4C  0800               	sublw	0
  7398  00EB4E  2415               	addwf	fillCircleHelper@y0,w,c
  7399  00EB50  6E08               	movwf	drawFastVLine@y,c
  7400  00EB52  5029               	movf	fillCircleHelper@y,w,c
  7401  00EB54  2429               	addwf	fillCircleHelper@y,w,c
  7402  00EB56  241B               	addwf	fillCircleHelper@delta,w,c
  7403  00EB58  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7404  00EB5A  281F               	incf	??_fillCircleHelper,w,c
  7405  00EB5C  6E09               	movwf	drawFastVLine@h,c
  7406  00EB5E  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7407  00EB62  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7408  00EB66  5027               	movf	fillCircleHelper@x,w,c
  7409  00EB68  0800               	sublw	0
  7410  00EB6A  2413               	addwf	fillCircleHelper@x0,w,c
  7411  00EB6C  EC51  F070         	call	_drawFastVLine
  7412                           
  7413                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7414  00EB70  5027               	movf	fillCircleHelper@x,w,c
  7415  00EB72  0800               	sublw	0
  7416  00EB74  2415               	addwf	fillCircleHelper@y0,w,c
  7417  00EB76  6E08               	movwf	drawFastVLine@y,c
  7418  00EB78  5027               	movf	fillCircleHelper@x,w,c
  7419  00EB7A  2427               	addwf	fillCircleHelper@x,w,c
  7420  00EB7C  241B               	addwf	fillCircleHelper@delta,w,c
  7421  00EB7E  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7422  00EB80  281F               	incf	??_fillCircleHelper,w,c
  7423  00EB82  6E09               	movwf	drawFastVLine@h,c
  7424  00EB84  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7425  00EB88  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7426  00EB8C  5029               	movf	fillCircleHelper@y,w,c
  7427  00EB8E  0800               	sublw	0
  7428  00EB90  2413               	addwf	fillCircleHelper@x0,w,c
  7429  00EB92  EC51  F070         	call	_drawFastVLine
  7430  00EB96  D000               	goto	l2825
  7431  00EB98                     l2825:
  7432  00EB98  5029               	movf	fillCircleHelper@y,w,c
  7433  00EB9A  5C27               	subwf	fillCircleHelper@x,w,c
  7434  00EB9C  5028               	movf	fillCircleHelper@x+1,w,c
  7435  00EB9E  0A80               	xorlw	128
  7436  00EBA0  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7437  00EBA2  502A               	movf	fillCircleHelper@y+1,w,c
  7438  00EBA4  0A80               	xorlw	128
  7439  00EBA6  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  7440  00EBA8  A0D8               	btfss	status,0,c
  7441  00EBAA  D78F               	goto	l2805
  7442  00EBAC  0012               	return		;funcret
  7443  00EBAE                     __end_of_fillCircleHelper:
  7444                           	opt stack 0
  7445                           tblptru	equ	0xFF8
  7446                           tblptrh	equ	0xFF7
  7447                           tblptrl	equ	0xFF6
  7448                           tablat	equ	0xFF5
  7449                           prodl	equ	0xFF3
  7450                           intcon2	equ	0xFF1
  7451                           postinc0	equ	0xFEE
  7452                           wreg	equ	0xFE8
  7453                           postdec1	equ	0xFE5
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _drawCircle *****************
  7461 ;; Defined at:
  7462 ;;		line 561 in file "ST7735_TFT.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;  x0              2   11[COMRAM] int 
  7465 ;;  y0              2   13[COMRAM] int 
  7466 ;;  r               2   15[COMRAM] int 
  7467 ;;  color           2   17[COMRAM] unsigned int 
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;  y               2   29[COMRAM] int 
  7470 ;;  x               2   27[COMRAM] int 
  7471 ;;  f               2   25[COMRAM] int 
  7472 ;;  ddF_y           2   23[COMRAM] int 
  7473 ;;  ddF_x           2   21[COMRAM] int 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;		None               void
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7483 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;Total ram usage:       20 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    4
  7490 ;; This function calls:
  7491 ;;		_drawPixel
  7492 ;; This function is called by:
  7493 ;;		_Initialize_Screen
  7494 ;;		_update_LCD_color
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text35
  7499  00EFC2                     __ptext35:
  7500                           	opt stack 0
  7501  00EFC2                     _drawCircle:
  7502                           	opt stack 23
  7503                           
  7504                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7505                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7506                           
  7507                           ;incstack = 0
  7508  00EFC2  C010  F014         	movff	drawCircle@r,??_drawCircle
  7509  00EFC6  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7510  00EFCA  1E14               	comf	??_drawCircle,f,c
  7511  00EFCC  1E15               	comf	??_drawCircle+1,f,c
  7512  00EFCE  4A14               	infsnz	??_drawCircle,f,c
  7513  00EFD0  2A15               	incf	??_drawCircle+1,f,c
  7514  00EFD2  0E01               	movlw	1
  7515  00EFD4  2414               	addwf	??_drawCircle,w,c
  7516  00EFD6  6E1A               	movwf	drawCircle@f,c
  7517  00EFD8  0E00               	movlw	0
  7518  00EFDA  2015               	addwfc	??_drawCircle+1,w,c
  7519  00EFDC  6E1B               	movwf	drawCircle@f+1,c
  7520  00EFDE  0E00               	movlw	0
  7521  00EFE0  6E17               	movwf	drawCircle@ddF_x+1,c
  7522  00EFE2  0E01               	movlw	1
  7523  00EFE4  6E16               	movwf	drawCircle@ddF_x,c
  7524  00EFE6  C010  F014         	movff	drawCircle@r,??_drawCircle
  7525  00EFEA  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7526  00EFEE  90D8               	bcf	status,0,c
  7527  00EFF0  3614               	rlcf	??_drawCircle,f,c
  7528  00EFF2  3615               	rlcf	??_drawCircle+1,f,c
  7529  00EFF4  1E14               	comf	??_drawCircle,f,c
  7530  00EFF6  1E15               	comf	??_drawCircle+1,f,c
  7531  00EFF8  4A14               	infsnz	??_drawCircle,f,c
  7532  00EFFA  2A15               	incf	??_drawCircle+1,f,c
  7533  00EFFC  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  7534  00F000  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7535  00F004  0E00               	movlw	0
  7536  00F006  6E1D               	movwf	drawCircle@x+1,c
  7537  00F008  0E00               	movlw	0
  7538  00F00A  6E1C               	movwf	drawCircle@x,c
  7539  00F00C  C010  F01E         	movff	drawCircle@r,drawCircle@y
  7540  00F010  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  7541                           
  7542                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7543  00F014  500E               	movf	drawCircle@y0,w,c
  7544  00F016  2410               	addwf	drawCircle@r,w,c
  7545  00F018  6E08               	movwf	drawPixel@y,c
  7546  00F01A  C012  F009         	movff	drawCircle@color,drawPixel@color
  7547  00F01E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7548  00F022  500C               	movf	drawCircle@x0,w,c
  7549  00F024  EC77  F06D         	call	_drawPixel
  7550                           
  7551                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7552  00F028  5010               	movf	drawCircle@r,w,c
  7553  00F02A  0800               	sublw	0
  7554  00F02C  240E               	addwf	drawCircle@y0,w,c
  7555  00F02E  6E08               	movwf	drawPixel@y,c
  7556  00F030  C012  F009         	movff	drawCircle@color,drawPixel@color
  7557  00F034  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7558  00F038  500C               	movf	drawCircle@x0,w,c
  7559  00F03A  EC77  F06D         	call	_drawPixel
  7560                           
  7561                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7562  00F03E  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7563  00F042  C012  F009         	movff	drawCircle@color,drawPixel@color
  7564  00F046  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7565  00F04A  500C               	movf	drawCircle@x0,w,c
  7566  00F04C  2410               	addwf	drawCircle@r,w,c
  7567  00F04E  EC77  F06D         	call	_drawPixel
  7568                           
  7569                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7570  00F052  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7571  00F056  C012  F009         	movff	drawCircle@color,drawPixel@color
  7572  00F05A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7573  00F05E  5010               	movf	drawCircle@r,w,c
  7574  00F060  0800               	sublw	0
  7575  00F062  240C               	addwf	drawCircle@x0,w,c
  7576  00F064  EC77  F06D         	call	_drawPixel
  7577                           
  7578                           ;ST7735_TFT.c: 569: while (x < y) {
  7579  00F068  D078               	goto	l2971
  7580  00F06A                     l2943:
  7581                           
  7582                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7583  00F06A  BE1B               	btfsc	drawCircle@f+1,7,c
  7584  00F06C  D00B               	goto	l239
  7585                           
  7586                           ;ST7735_TFT.c: 571: y--;
  7587  00F06E  061E               	decf	drawCircle@y,f,c
  7588  00F070  A0D8               	btfss	status,0,c
  7589  00F072  061F               	decf	drawCircle@y+1,f,c
  7590                           
  7591                           ;ST7735_TFT.c: 572: ddF_y += 2;
  7592  00F074  0E02               	movlw	2
  7593  00F076  2618               	addwf	drawCircle@ddF_y,f,c
  7594  00F078  0E00               	movlw	0
  7595  00F07A  2219               	addwfc	drawCircle@ddF_y+1,f,c
  7596                           
  7597                           ;ST7735_TFT.c: 573: f += ddF_y;
  7598  00F07C  5018               	movf	drawCircle@ddF_y,w,c
  7599  00F07E  261A               	addwf	drawCircle@f,f,c
  7600  00F080  5019               	movf	drawCircle@ddF_y+1,w,c
  7601  00F082  221B               	addwfc	drawCircle@f+1,f,c
  7602  00F084                     l239:
  7603                           
  7604                           ;ST7735_TFT.c: 574: }
  7605                           ;ST7735_TFT.c: 575: x++;
  7606  00F084  4A1C               	infsnz	drawCircle@x,f,c
  7607  00F086  2A1D               	incf	drawCircle@x+1,f,c
  7608                           
  7609                           ;ST7735_TFT.c: 576: ddF_x += 2;
  7610  00F088  0E02               	movlw	2
  7611  00F08A  2616               	addwf	drawCircle@ddF_x,f,c
  7612  00F08C  0E00               	movlw	0
  7613  00F08E  2217               	addwfc	drawCircle@ddF_x+1,f,c
  7614                           
  7615                           ;ST7735_TFT.c: 577: f += ddF_x;
  7616  00F090  5016               	movf	drawCircle@ddF_x,w,c
  7617  00F092  261A               	addwf	drawCircle@f,f,c
  7618  00F094  5017               	movf	drawCircle@ddF_x+1,w,c
  7619  00F096  221B               	addwfc	drawCircle@f+1,f,c
  7620                           
  7621                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  7622  00F098  500E               	movf	drawCircle@y0,w,c
  7623  00F09A  241E               	addwf	drawCircle@y,w,c
  7624  00F09C  6E08               	movwf	drawPixel@y,c
  7625  00F09E  C012  F009         	movff	drawCircle@color,drawPixel@color
  7626  00F0A2  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7627  00F0A6  500C               	movf	drawCircle@x0,w,c
  7628  00F0A8  241C               	addwf	drawCircle@x,w,c
  7629  00F0AA  EC77  F06D         	call	_drawPixel
  7630                           
  7631                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  7632  00F0AE  500E               	movf	drawCircle@y0,w,c
  7633  00F0B0  241E               	addwf	drawCircle@y,w,c
  7634  00F0B2  6E08               	movwf	drawPixel@y,c
  7635  00F0B4  C012  F009         	movff	drawCircle@color,drawPixel@color
  7636  00F0B8  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7637  00F0BC  501C               	movf	drawCircle@x,w,c
  7638  00F0BE  0800               	sublw	0
  7639  00F0C0  240C               	addwf	drawCircle@x0,w,c
  7640  00F0C2  EC77  F06D         	call	_drawPixel
  7641                           
  7642                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  7643  00F0C6  501E               	movf	drawCircle@y,w,c
  7644  00F0C8  0800               	sublw	0
  7645  00F0CA  240E               	addwf	drawCircle@y0,w,c
  7646  00F0CC  6E08               	movwf	drawPixel@y,c
  7647  00F0CE  C012  F009         	movff	drawCircle@color,drawPixel@color
  7648  00F0D2  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7649  00F0D6  500C               	movf	drawCircle@x0,w,c
  7650  00F0D8  241C               	addwf	drawCircle@x,w,c
  7651  00F0DA  EC77  F06D         	call	_drawPixel
  7652                           
  7653                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  7654  00F0DE  501E               	movf	drawCircle@y,w,c
  7655  00F0E0  0800               	sublw	0
  7656  00F0E2  240E               	addwf	drawCircle@y0,w,c
  7657  00F0E4  6E08               	movwf	drawPixel@y,c
  7658  00F0E6  C012  F009         	movff	drawCircle@color,drawPixel@color
  7659  00F0EA  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7660  00F0EE  501C               	movf	drawCircle@x,w,c
  7661  00F0F0  0800               	sublw	0
  7662  00F0F2  240C               	addwf	drawCircle@x0,w,c
  7663  00F0F4  EC77  F06D         	call	_drawPixel
  7664                           
  7665                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  7666  00F0F8  500E               	movf	drawCircle@y0,w,c
  7667  00F0FA  241C               	addwf	drawCircle@x,w,c
  7668  00F0FC  6E08               	movwf	drawPixel@y,c
  7669  00F0FE  C012  F009         	movff	drawCircle@color,drawPixel@color
  7670  00F102  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7671  00F106  500C               	movf	drawCircle@x0,w,c
  7672  00F108  241E               	addwf	drawCircle@y,w,c
  7673  00F10A  EC77  F06D         	call	_drawPixel
  7674                           
  7675                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  7676  00F10E  500E               	movf	drawCircle@y0,w,c
  7677  00F110  241C               	addwf	drawCircle@x,w,c
  7678  00F112  6E08               	movwf	drawPixel@y,c
  7679  00F114  C012  F009         	movff	drawCircle@color,drawPixel@color
  7680  00F118  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7681  00F11C  501E               	movf	drawCircle@y,w,c
  7682  00F11E  0800               	sublw	0
  7683  00F120  240C               	addwf	drawCircle@x0,w,c
  7684  00F122  EC77  F06D         	call	_drawPixel
  7685                           
  7686                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  7687  00F126  501C               	movf	drawCircle@x,w,c
  7688  00F128  0800               	sublw	0
  7689  00F12A  240E               	addwf	drawCircle@y0,w,c
  7690  00F12C  6E08               	movwf	drawPixel@y,c
  7691  00F12E  C012  F009         	movff	drawCircle@color,drawPixel@color
  7692  00F132  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7693  00F136  500C               	movf	drawCircle@x0,w,c
  7694  00F138  241E               	addwf	drawCircle@y,w,c
  7695  00F13A  EC77  F06D         	call	_drawPixel
  7696                           
  7697                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  7698  00F13E  501C               	movf	drawCircle@x,w,c
  7699  00F140  0800               	sublw	0
  7700  00F142  240E               	addwf	drawCircle@y0,w,c
  7701  00F144  6E08               	movwf	drawPixel@y,c
  7702  00F146  C012  F009         	movff	drawCircle@color,drawPixel@color
  7703  00F14A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7704  00F14E  501E               	movf	drawCircle@y,w,c
  7705  00F150  0800               	sublw	0
  7706  00F152  240C               	addwf	drawCircle@x0,w,c
  7707  00F154  EC77  F06D         	call	_drawPixel
  7708  00F158  D000               	goto	l2971
  7709  00F15A                     l2971:
  7710  00F15A  501E               	movf	drawCircle@y,w,c
  7711  00F15C  5C1C               	subwf	drawCircle@x,w,c
  7712  00F15E  501D               	movf	drawCircle@x+1,w,c
  7713  00F160  0A80               	xorlw	128
  7714  00F162  6E14               	movwf	??_drawCircle& (0+255),c
  7715  00F164  501F               	movf	drawCircle@y+1,w,c
  7716  00F166  0A80               	xorlw	128
  7717  00F168  5814               	subwfb	??_drawCircle& (0+255),w,c
  7718  00F16A  A0D8               	btfss	status,0,c
  7719  00F16C  D77E               	goto	l2943
  7720  00F16E  0012               	return		;funcret
  7721  00F170                     __end_of_drawCircle:
  7722                           	opt stack 0
  7723                           tblptru	equ	0xFF8
  7724                           tblptrh	equ	0xFF7
  7725                           tblptrl	equ	0xFF6
  7726                           tablat	equ	0xFF5
  7727                           prodl	equ	0xFF3
  7728                           intcon2	equ	0xFF1
  7729                           postinc0	equ	0xFEE
  7730                           wreg	equ	0xFE8
  7731                           postdec1	equ	0xFE5
  7732                           fsr1l	equ	0xFE1
  7733                           indf2	equ	0xFDF
  7734                           fsr2h	equ	0xFDA
  7735                           fsr2l	equ	0xFD9
  7736                           status	equ	0xFD8
  7737                           
  7738 ;; *************** function _PED_Control *****************
  7739 ;; Defined at:
  7740 ;;		line 387 in file "Lab9.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;  direction       1    wreg     unsigned char 
  7743 ;;  Num_Sec         1   59[COMRAM] unsigned char 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  direction       1   60[COMRAM] unsigned char 
  7746 ;;  i               1   61[COMRAM] unsigned char 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;		None               void
  7749 ;; Registers used:
  7750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7756 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;Total ram usage:        3 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    8
  7763 ;; This function calls:
  7764 ;;		_Wait_One_Second_With_Beep
  7765 ;;		_update_LCD_PED_Count
  7766 ;; This function is called by:
  7767 ;;		_Day_Mode
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           	psect	text36
  7772  00DB1E                     __ptext36:
  7773                           	opt stack 0
  7774  00DB1E                     _PED_Control:
  7775                           	opt stack 21
  7776                           
  7777                           ;incstack = 0
  7778                           ;PED_Control@direction stored from wreg
  7779  00DB1E  6E3D               	movwf	PED_Control@direction,c
  7780                           
  7781                           ;Lab9.c: 389: for(char i = Num_Sec-1;i>0; i--)
  7782  00DB20  043C               	decf	PED_Control@Num_Sec,w,c
  7783  00DB22  6E3E               	movwf	PED_Control@i,c
  7784  00DB24                     l3447:
  7785  00DB24  503E               	movf	PED_Control@i,w,c
  7786  00DB26  B4D8               	btfsc	status,2,c
  7787  00DB28  D00B               	goto	l3459
  7788  00DB2A  D001               	goto	l3451
  7789  00DB2C  D009               	goto	l3459
  7790  00DB2E                     l3451:
  7791                           
  7792                           ;Lab9.c: 390: {
  7793                           ;Lab9.c: 391: update_LCD_PED_Count(direction, i);
  7794  00DB2E  C03E  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
  7795  00DB32  503D               	movf	PED_Control@direction,w,c
  7796  00DB34  ECC4  F071         	call	_update_LCD_PED_Count
  7797                           
  7798                           ;Lab9.c: 392: Wait_One_Second_With_Beep();
  7799  00DB38  ECE1  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7800  00DB3C  063E               	decf	PED_Control@i,f,c
  7801  00DB3E  D7F2               	goto	l3447
  7802  00DB40                     l3459:
  7803                           
  7804                           ;Lab9.c: 393: }
  7805                           ;Lab9.c: 395: update_LCD_PED_Count(direction, 0);
  7806  00DB40  0E00               	movlw	0
  7807  00DB42  6E3A               	movwf	update_LCD_PED_Count@count,c
  7808  00DB44  503D               	movf	PED_Control@direction,w,c
  7809  00DB46  ECC4  F071         	call	_update_LCD_PED_Count
  7810                           
  7811                           ;Lab9.c: 396: Wait_One_Second_With_Beep();
  7812  00DB4A  ECE1  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7813  00DB4E  0012               	return		;funcret
  7814  00DB50                     __end_of_PED_Control:
  7815                           	opt stack 0
  7816                           tblptru	equ	0xFF8
  7817                           tblptrh	equ	0xFF7
  7818                           tblptrl	equ	0xFF6
  7819                           tablat	equ	0xFF5
  7820                           prodl	equ	0xFF3
  7821                           intcon2	equ	0xFF1
  7822                           postinc0	equ	0xFEE
  7823                           wreg	equ	0xFE8
  7824                           postdec1	equ	0xFE5
  7825                           fsr1l	equ	0xFE1
  7826                           indf2	equ	0xFDF
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function _update_LCD_PED_Count *****************
  7832 ;; Defined at:
  7833 ;;		line 661 in file "Lab9.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  direction       1    wreg     unsigned char 
  7836 ;;  count           1   57[COMRAM] unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  direction       1   58[COMRAM] unsigned char 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;		None               void
  7841 ;; Registers used:
  7842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:        2 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    7
  7855 ;; This function calls:
  7856 ;;		___awdiv
  7857 ;;		___awmod
  7858 ;;		_drawtext
  7859 ;; This function is called by:
  7860 ;;		_PED_Control
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text37
  7865  00E388                     __ptext37:
  7866                           	opt stack 0
  7867  00E388                     _update_LCD_PED_Count:
  7868                           	opt stack 21
  7869                           
  7870                           ;incstack = 0
  7871                           ;update_LCD_PED_Count@direction stored from wreg
  7872  00E388  6E3B               	movwf	update_LCD_PED_Count@direction,c
  7873                           
  7874                           ;Lab9.c: 663: switch (direction)
  7875  00E38A  D057               	goto	l3297
  7876  00E38C                     l3287:
  7877                           
  7878                           ;Lab9.c: 666: PED_EW_Count[0] = count/10 + '0';
  7879  00E38C  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7880  00E390  6A02               	clrf	___awdiv@dividend+1,c
  7881  00E392  0E00               	movlw	0
  7882  00E394  6E04               	movwf	___awdiv@divisor+1,c
  7883  00E396  0E0A               	movlw	10
  7884  00E398  6E03               	movwf	___awdiv@divisor,c
  7885  00E39A  ECD9  F070         	call	___awdiv	;wreg free
  7886  00E39E  5001               	movf	?___awdiv,w,c
  7887  00E3A0  0F30               	addlw	48
  7888  00E3A2  6E4E               	movwf	_PED_EW_Count,c
  7889                           
  7890                           ;Lab9.c: 667: PED_EW_Count[1] = count%10 + '0';
  7891  00E3A4  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7892  00E3A8  6A02               	clrf	___awmod@dividend+1,c
  7893  00E3AA  0E00               	movlw	0
  7894  00E3AC  6E04               	movwf	___awmod@divisor+1,c
  7895  00E3AE  0E0A               	movlw	10
  7896  00E3B0  6E03               	movwf	___awmod@divisor,c
  7897  00E3B2  ECCF  F06F         	call	___awmod	;wreg free
  7898  00E3B6  5001               	movf	?___awmod,w,c
  7899  00E3B8  0F30               	addlw	48
  7900  00E3BA  6E4F               	movwf	_PED_EW_Count+1,c
  7901                           
  7902                           ;Lab9.c: 668: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  7903  00E3BC  0E1E               	movlw	30
  7904  00E3BE  6E29               	movwf	drawtext@y,c
  7905  00E3C0  0E4E               	movlw	low _PED_EW_Count
  7906  00E3C2  6E2A               	movwf	drawtext@_text,c
  7907  00E3C4  0E00               	movlw	high _PED_EW_Count
  7908  00E3C6  6E2B               	movwf	drawtext@_text+1,c
  7909  00E3C8  0E07               	movlw	7
  7910  00E3CA  6E2D               	movwf	drawtext@color+1,c
  7911  00E3CC  682C               	setf	drawtext@color,c
  7912  00E3CE  0E00               	movlw	0
  7913  00E3D0  6E2F               	movwf	drawtext@bg+1,c
  7914  00E3D2  0E00               	movlw	0
  7915  00E3D4  6E2E               	movwf	drawtext@bg,c
  7916  00E3D6  0E02               	movlw	2
  7917  00E3D8  6E30               	movwf	drawtext@size,c
  7918  00E3DA  0E02               	movlw	2
  7919  00E3DC  EC5A  F073         	call	_drawtext
  7920                           
  7921                           ;Lab9.c: 669: break;
  7922  00E3E0  D034               	goto	l485
  7923  00E3E2                     l3291:
  7924                           
  7925                           ;Lab9.c: 672: PED_NS_Count[0] = count/10 + '0';
  7926  00E3E2  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7927  00E3E6  6A02               	clrf	___awdiv@dividend+1,c
  7928  00E3E8  0E00               	movlw	0
  7929  00E3EA  6E04               	movwf	___awdiv@divisor+1,c
  7930  00E3EC  0E0A               	movlw	10
  7931  00E3EE  6E03               	movwf	___awdiv@divisor,c
  7932  00E3F0  ECD9  F070         	call	___awdiv	;wreg free
  7933  00E3F4  5001               	movf	?___awdiv,w,c
  7934  00E3F6  0F30               	addlw	48
  7935  00E3F8  6E51               	movwf	_PED_NS_Count,c
  7936                           
  7937                           ;Lab9.c: 673: PED_NS_Count[1] = count%10 + '0';
  7938  00E3FA  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7939  00E3FE  6A02               	clrf	___awmod@dividend+1,c
  7940  00E400  0E00               	movlw	0
  7941  00E402  6E04               	movwf	___awmod@divisor+1,c
  7942  00E404  0E0A               	movlw	10
  7943  00E406  6E03               	movwf	___awmod@divisor,c
  7944  00E408  ECCF  F06F         	call	___awmod	;wreg free
  7945  00E40C  5001               	movf	?___awmod,w,c
  7946  00E40E  0F30               	addlw	48
  7947  00E410  6E52               	movwf	_PED_NS_Count+1,c
  7948                           
  7949                           ;Lab9.c: 674: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  7950  00E412  0E5A               	movlw	90
  7951  00E414  6E29               	movwf	drawtext@y,c
  7952  00E416  0E51               	movlw	low _PED_NS_Count
  7953  00E418  6E2A               	movwf	drawtext@_text,c
  7954  00E41A  0E00               	movlw	high _PED_NS_Count
  7955  00E41C  6E2B               	movwf	drawtext@_text+1,c
  7956  00E41E  0E00               	movlw	0
  7957  00E420  6E2D               	movwf	drawtext@color+1,c
  7958  00E422  0E1F               	movlw	31
  7959  00E424  6E2C               	movwf	drawtext@color,c
  7960  00E426  0E00               	movlw	0
  7961  00E428  6E2F               	movwf	drawtext@bg+1,c
  7962  00E42A  0E00               	movlw	0
  7963  00E42C  6E2E               	movwf	drawtext@bg,c
  7964  00E42E  0E02               	movlw	2
  7965  00E430  6E30               	movwf	drawtext@size,c
  7966  00E432  0E02               	movlw	2
  7967  00E434  EC5A  F073         	call	_drawtext
  7968                           
  7969                           ;Lab9.c: 676: }
  7970                           
  7971                           ;Lab9.c: 675: break;
  7972  00E438  D008               	goto	l485
  7973  00E43A                     l3297:
  7974  00E43A  503B               	movf	update_LCD_PED_Count@direction,w,c
  7975                           
  7976                           ; Switch size 1, requested type "space"
  7977                           ; Number of cases is 2, Range of values is 0 to 2
  7978                           ; switch strategies available:
  7979                           ; Name         Instructions Cycles
  7980                           ; simple_byte            7     4 (average)
  7981                           ;	Chosen strategy is simple_byte
  7982  00E43C  0A00               	xorlw	0	; case 0
  7983  00E43E  B4D8               	btfsc	status,2,c
  7984  00E440  D7A5               	goto	l3287
  7985  00E442  0A02               	xorlw	2	; case 2
  7986  00E444  B4D8               	btfsc	status,2,c
  7987  00E446  D7CD               	goto	l3291
  7988  00E448  D000               	goto	l485
  7989  00E44A                     l485:
  7990  00E44A  0012               	return		;funcret
  7991  00E44C                     __end_of_update_LCD_PED_Count:
  7992                           	opt stack 0
  7993                           tblptru	equ	0xFF8
  7994                           tblptrh	equ	0xFF7
  7995                           tblptrl	equ	0xFF6
  7996                           tablat	equ	0xFF5
  7997                           prodl	equ	0xFF3
  7998                           intcon2	equ	0xFF1
  7999                           postinc0	equ	0xFEE
  8000                           wreg	equ	0xFE8
  8001                           postdec1	equ	0xFE5
  8002                           fsr1l	equ	0xFE1
  8003                           indf2	equ	0xFDF
  8004                           fsr2h	equ	0xFDA
  8005                           fsr2l	equ	0xFD9
  8006                           status	equ	0xFD8
  8007                           
  8008 ;; *************** function _drawtext *****************
  8009 ;; Defined at:
  8010 ;;		line 507 in file "ST7735_TFT.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  x               1    wreg     unsigned char 
  8013 ;;  y               1   40[COMRAM] unsigned char 
  8014 ;;  _text           2   41[COMRAM] PTR unsigned char 
  8015 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8016 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8017 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8018 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8019 ;;  color           2   43[COMRAM] unsigned int 
  8020 ;;  bg              2   45[COMRAM] unsigned int 
  8021 ;;  size            1   47[COMRAM] unsigned char 
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  x               1   52[COMRAM] unsigned char 
  8024 ;;  i               2   53[COMRAM] unsigned int 
  8025 ;;  textsize        2   50[COMRAM] unsigned int 
  8026 ;;  cursor_x        1   56[COMRAM] unsigned char 
  8027 ;;  cursor_y        1   55[COMRAM] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;		None               void
  8030 ;; Registers used:
  8031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8037 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;Total ram usage:       17 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    6
  8044 ;; This function calls:
  8045 ;;		_drawChar
  8046 ;;		_strlen
  8047 ;; This function is called by:
  8048 ;;		_Initialize_Screen
  8049 ;;		_Wait_One_Second
  8050 ;;		_update_LCD_count
  8051 ;;		_update_LCD_PED_Count
  8052 ;;		_update_LCD_misc
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text38
  8057  00E6B4                     __ptext38:
  8058                           	opt stack 0
  8059  00E6B4                     _drawtext:
  8060                           	opt stack 21
  8061                           
  8062                           ;incstack = 0
  8063                           ;drawtext@x stored from wreg
  8064  00E6B4  6E35               	movwf	drawtext@x,c
  8065                           
  8066                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  8067                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  8068                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  8069  00E6B6  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  8070  00E6BA  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  8071                           
  8072                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  8073  00E6BE  C02A  F001         	movff	drawtext@_text,strlen@s
  8074  00E6C2  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  8075  00E6C6  ECDF  F06D         	call	_strlen	;wreg free
  8076  00E6CA  C001  F033         	movff	?_strlen,drawtext@textsize
  8077  00E6CE  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  8078                           
  8079                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  8080  00E6D2  0E00               	movlw	0
  8081  00E6D4  6E37               	movwf	drawtext@i+1,c
  8082  00E6D6  0E00               	movlw	0
  8083  00E6D8  6E36               	movwf	drawtext@i,c
  8084  00E6DA  D054               	goto	l2793
  8085  00E6DC                     l2767:
  8086                           
  8087                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  8088  00E6DC  5041               	movf	_wrap,w,c
  8089  00E6DE  B4D8               	btfsc	status,2,c
  8090  00E6E0  D02C               	goto	l2783
  8091  00E6E2  5030               	movf	drawtext@size,w,c
  8092  00E6E4  0D05               	mullw	5
  8093  00E6E6  5039               	movf	drawtext@cursor_x,w,c
  8094  00E6E8  6E31               	movwf	??_drawtext& (0+255),c
  8095  00E6EA  6A32               	clrf	(??_drawtext+1)& (0+255),c
  8096  00E6EC  50F3               	movf	prodl,w,c
  8097  00E6EE  2631               	addwf	??_drawtext,f,c
  8098  00E6F0  50F4               	movf	prodh,w,c
  8099  00E6F2  2232               	addwfc	??_drawtext+1,f,c
  8100  00E6F4  BE32               	btfsc	??_drawtext+1,7,c
  8101  00E6F6  D021               	goto	l2783
  8102  00E6F8  5032               	movf	??_drawtext+1,w,c
  8103  00E6FA  E104               	bnz	u1620
  8104  00E6FC  0E81               	movlw	129
  8105  00E6FE  5C31               	subwf	??_drawtext,w,c
  8106  00E700  A0D8               	btfss	status,0,c
  8107  00E702  D01B               	goto	l2783
  8108  00E704                     u1620:
  8109                           
  8110                           ;ST7735_TFT.c: 515: cursor_x = 0;
  8111  00E704  0E00               	movlw	0
  8112  00E706  6E39               	movwf	drawtext@cursor_x,c
  8113                           
  8114                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  8115  00E708  5030               	movf	drawtext@size,w,c
  8116  00E70A  0D07               	mullw	7
  8117  00E70C  50F3               	movf	prodl,w,c
  8118  00E70E  2438               	addwf	drawtext@cursor_y,w,c
  8119  00E710  0F03               	addlw	3
  8120  00E712  6E38               	movwf	drawtext@cursor_y,c
  8121                           
  8122                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  8123  00E714  0EA0               	movlw	160
  8124  00E716  6438               	cpfsgt	drawtext@cursor_y,c
  8125  00E718  D003               	goto	l2779
  8126  00E71A  0EA0               	movlw	160
  8127  00E71C  6E38               	movwf	drawtext@cursor_y,c
  8128  00E71E  D000               	goto	l2779
  8129  00E720                     l2779:
  8130                           
  8131                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  8132  00E720  5036               	movf	drawtext@i,w,c
  8133  00E722  242A               	addwf	drawtext@_text,w,c
  8134  00E724  6ED9               	movwf	fsr2l,c
  8135  00E726  5037               	movf	drawtext@i+1,w,c
  8136  00E728  202B               	addwfc	drawtext@_text+1,w,c
  8137  00E72A  6EDA               	movwf	fsr2h,c
  8138  00E72C  0E20               	movlw	32
  8139  00E72E  18DE               	xorwf	postinc2,w,c
  8140  00E730  B4D8               	btfsc	status,2,c
  8141  00E732  D025               	goto	l2791
  8142  00E734  D002               	goto	l2783
  8143  00E736  D023               	goto	l2791
  8144  00E738  D000               	goto	l2783
  8145  00E73A                     l2783:
  8146                           
  8147                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8148  00E73A  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  8149  00E73E  5036               	movf	drawtext@i,w,c
  8150  00E740  242A               	addwf	drawtext@_text,w,c
  8151  00E742  6ED9               	movwf	fsr2l,c
  8152  00E744  5037               	movf	drawtext@i+1,w,c
  8153  00E746  202B               	addwfc	drawtext@_text+1,w,c
  8154  00E748  6EDA               	movwf	fsr2h,c
  8155  00E74A  50DF               	movf	indf2,w,c
  8156  00E74C  6E1F               	movwf	drawChar@c,c
  8157  00E74E  C02C  F020         	movff	drawtext@color,drawChar@color
  8158  00E752  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  8159  00E756  C02E  F022         	movff	drawtext@bg,drawChar@bg
  8160  00E75A  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  8161  00E75E  C030  F024         	movff	drawtext@size,drawChar@size
  8162  00E762  5039               	movf	drawtext@cursor_x,w,c
  8163  00E764  EC77  F076         	call	_drawChar
  8164                           
  8165                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  8166  00E768  5030               	movf	drawtext@size,w,c
  8167  00E76A  0D06               	mullw	6
  8168  00E76C  50F3               	movf	prodl,w,c
  8169  00E76E  2439               	addwf	drawtext@cursor_x,w,c
  8170  00E770  6E39               	movwf	drawtext@cursor_x,c
  8171                           
  8172                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  8173  00E772  0E80               	movlw	128
  8174  00E774  6439               	cpfsgt	drawtext@cursor_x,c
  8175  00E776  D003               	goto	l2791
  8176  00E778  0E80               	movlw	128
  8177  00E77A  6E39               	movwf	drawtext@cursor_x,c
  8178  00E77C  D000               	goto	l2791
  8179  00E77E                     l2791:
  8180  00E77E  4A36               	infsnz	drawtext@i,f,c
  8181  00E780  2A37               	incf	drawtext@i+1,f,c
  8182  00E782  D000               	goto	l2793
  8183  00E784                     l2793:
  8184  00E784  5033               	movf	drawtext@textsize,w,c
  8185  00E786  5C36               	subwf	drawtext@i,w,c
  8186  00E788  5034               	movf	drawtext@textsize+1,w,c
  8187  00E78A  5837               	subwfb	drawtext@i+1,w,c
  8188  00E78C  A0D8               	btfss	status,0,c
  8189  00E78E  D7A6               	goto	l2767
  8190  00E790  0012               	return		;funcret
  8191  00E792                     __end_of_drawtext:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon2	equ	0xFF1
  8200                           postinc0	equ	0xFEE
  8201                           wreg	equ	0xFE8
  8202                           postdec1	equ	0xFE5
  8203                           fsr1l	equ	0xFE1
  8204                           indf2	equ	0xFDF
  8205                           postinc2	equ	0xFDE
  8206                           fsr2h	equ	0xFDA
  8207                           fsr2l	equ	0xFD9
  8208                           status	equ	0xFD8
  8209                           
  8210 ;; *************** function _strlen *****************
  8211 ;; Defined at:
  8212 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;  s               2    0[COMRAM] PTR const unsigned char 
  8215 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8216 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8217 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8218 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  8221 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8222 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8223 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8224 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8225 ;; Return value:  Size  Location     Type
  8226 ;;                  2    0[COMRAM] unsigned int 
  8227 ;; Registers used:
  8228 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8229 ;; Tracked objects:
  8230 ;;		On entry : 0/0
  8231 ;;		On exit  : 0/0
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8234 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8236 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;Total ram usage:        6 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; This function calls:
  8241 ;;		Nothing
  8242 ;; This function is called by:
  8243 ;;		_drawtext
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           	psect	text39
  8248  00DBBE                     __ptext39:
  8249                           	opt stack 0
  8250  00DBBE                     _strlen:
  8251                           	opt stack 26
  8252                           
  8253                           ;incstack = 0
  8254  00DBBE  C001  F005         	movff	strlen@s,strlen@cp
  8255  00DBC2  C002  F006         	movff	strlen@s+1,strlen@cp+1
  8256  00DBC6  D003               	goto	l2717
  8257  00DBC8                     l2715:
  8258  00DBC8  4A05               	infsnz	strlen@cp,f,c
  8259  00DBCA  2A06               	incf	strlen@cp+1,f,c
  8260  00DBCC  D000               	goto	l2717
  8261  00DBCE                     l2717:
  8262  00DBCE  C005  FFD9         	movff	strlen@cp,fsr2l
  8263  00DBD2  C006  FFDA         	movff	strlen@cp+1,fsr2h
  8264  00DBD6  50DF               	movf	indf2,w,c
  8265  00DBD8  A4D8               	btfss	status,2,c
  8266  00DBDA  D7F6               	goto	l2715
  8267  00DBDC  C001  F003         	movff	strlen@s,??_strlen
  8268  00DBE0  C002  F004         	movff	strlen@s+1,??_strlen+1
  8269  00DBE4  1E03               	comf	??_strlen,f,c
  8270  00DBE6  1E04               	comf	??_strlen+1,f,c
  8271  00DBE8  4A03               	infsnz	??_strlen,f,c
  8272  00DBEA  2A04               	incf	??_strlen+1,f,c
  8273  00DBEC  5005               	movf	strlen@cp,w,c
  8274  00DBEE  2403               	addwf	??_strlen,w,c
  8275  00DBF0  6E01               	movwf	?_strlen,c
  8276  00DBF2  5006               	movf	strlen@cp+1,w,c
  8277  00DBF4  2004               	addwfc	??_strlen+1,w,c
  8278  00DBF6  6E02               	movwf	?_strlen+1,c
  8279  00DBF8  D000               	goto	l1091
  8280  00DBFA                     l1091:
  8281  00DBFA  0012               	return		;funcret
  8282  00DBFC                     __end_of_strlen:
  8283                           	opt stack 0
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon2	equ	0xFF1
  8291                           postinc0	equ	0xFEE
  8292                           wreg	equ	0xFE8
  8293                           postdec1	equ	0xFE5
  8294                           fsr1l	equ	0xFE1
  8295                           indf2	equ	0xFDF
  8296                           postinc2	equ	0xFDE
  8297                           fsr2h	equ	0xFDA
  8298                           fsr2l	equ	0xFD9
  8299                           status	equ	0xFD8
  8300                           
  8301 ;; *************** function _drawChar *****************
  8302 ;; Defined at:
  8303 ;;		line 480 in file "ST7735_TFT.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  x               1    wreg     unsigned char 
  8306 ;;  y               1   29[COMRAM] unsigned char 
  8307 ;;  c               1   30[COMRAM] unsigned char 
  8308 ;;  color           2   31[COMRAM] unsigned int 
  8309 ;;  bg              2   33[COMRAM] unsigned int 
  8310 ;;  size            1   35[COMRAM] unsigned char 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;  x               1   37[COMRAM] unsigned char 
  8313 ;;  line            1   36[COMRAM] unsigned char 
  8314 ;;  i               1   39[COMRAM] unsigned char 
  8315 ;;  j               1   38[COMRAM] unsigned char 
  8316 ;; Return value:  Size  Location     Type
  8317 ;;		None               void
  8318 ;; Registers used:
  8319 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8325 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;Total ram usage:       11 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    5
  8332 ;; This function calls:
  8333 ;;		___wmul
  8334 ;;		_drawPixel
  8335 ;;		_fillRect
  8336 ;; This function is called by:
  8337 ;;		_drawtext
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	text40
  8342  00ECEE                     __ptext40:
  8343                           	opt stack 0
  8344  00ECEE                     _drawChar:
  8345                           	opt stack 21
  8346                           
  8347                           ;incstack = 0
  8348                           ;drawChar@x stored from wreg
  8349  00ECEE  6E26               	movwf	drawChar@x,c
  8350                           
  8351                           ;ST7735_TFT.c: 482: char i, j;
  8352                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  8353  00ECF0  0E80               	movlw	128
  8354  00ECF2  6026               	cpfslt	drawChar@x,c
  8355  00ECF4  D0A6               	goto	l191
  8356  00ECF6  0E9F               	movlw	159
  8357  00ECF8  641E               	cpfsgt	drawChar@y,c
  8358  00ECFA  D001               	goto	l2663
  8359                           
  8360                           ;ST7735_TFT.c: 484: return;
  8361  00ECFC  D0A2               	goto	l191
  8362  00ECFE                     l2663:
  8363                           
  8364                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  8365  00ECFE  5024               	movf	drawChar@size,w,c
  8366  00ED00  A4D8               	btfss	status,2,c
  8367  00ED02  D003               	goto	l2667
  8368  00ED04  0E01               	movlw	1
  8369  00ED06  6E24               	movwf	drawChar@size,c
  8370  00ED08  D000               	goto	l2667
  8371  00ED0A                     l2667:
  8372                           
  8373                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8374  00ED0A  0E1F               	movlw	31
  8375  00ED0C  641F               	cpfsgt	drawChar@c,c
  8376  00ED0E  D004               	goto	l2671
  8377  00ED10  0E7E               	movlw	126
  8378  00ED12  641F               	cpfsgt	drawChar@c,c
  8379  00ED14  D003               	goto	l193
  8380  00ED16  D000               	goto	l2671
  8381  00ED18                     l2671:
  8382                           
  8383                           ;ST7735_TFT.c: 487: c = '?';
  8384  00ED18  0E3F               	movlw	63
  8385  00ED1A  6E1F               	movwf	drawChar@c,c
  8386  00ED1C                     l193:
  8387                           
  8388                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8389  00ED1C  0E00               	movlw	0
  8390  00ED1E  6E28               	movwf	drawChar@i,c
  8391  00ED20                     l2673:
  8392  00ED20  0E04               	movlw	4
  8393  00ED22  6428               	cpfsgt	drawChar@i,c
  8394  00ED24  D001               	goto	l2677
  8395  00ED26  D08D               	goto	l191
  8396  00ED28                     l2677:
  8397                           
  8398                           ;ST7735_TFT.c: 489: unsigned char line;
  8399                           ;ST7735_TFT.c: 490: if(c < 'S')
  8400  00ED28  0E53               	movlw	83
  8401  00ED2A  601F               	cpfslt	drawChar@c,c
  8402  00ED2C  D015               	goto	l2681
  8403                           
  8404                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8405  00ED2E  0EE0               	movlw	224
  8406  00ED30  241F               	addwf	drawChar@c,w,c
  8407  00ED32  6E01               	movwf	___wmul@multiplier,c
  8408  00ED34  6A02               	clrf	___wmul@multiplier+1,c
  8409  00ED36  0EFF               	movlw	255
  8410  00ED38  2202               	addwfc	___wmul@multiplier+1,f,c
  8411  00ED3A  0E00               	movlw	0
  8412  00ED3C  6E04               	movwf	___wmul@multiplicand+1,c
  8413  00ED3E  0E05               	movlw	5
  8414  00ED40  6E03               	movwf	___wmul@multiplicand,c
  8415  00ED42  EC37  F06D         	call	___wmul	;wreg free
  8416  00ED46  5028               	movf	drawChar@i,w,c
  8417  00ED48  2601               	addwf	?___wmul,f,c
  8418  00ED4A  0E00               	movlw	0
  8419  00ED4C  2202               	addwfc	?___wmul+1,f,c
  8420  00ED4E  0EBB               	movlw	low _font
  8421  00ED50  2401               	addwf	?___wmul,w,c
  8422  00ED52  6EF6               	movwf	tblptrl,c
  8423  00ED54  0EFD               	movlw	high _font
  8424  00ED56  D014               	goto	L14
  8425  00ED58                     l2681:
  8426                           
  8427                           ;ST7735_TFT.c: 492: else
  8428                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8429  00ED58  0EAD               	movlw	173
  8430  00ED5A  241F               	addwf	drawChar@c,w,c
  8431  00ED5C  6E01               	movwf	___wmul@multiplier,c
  8432  00ED5E  6A02               	clrf	___wmul@multiplier+1,c
  8433  00ED60  0EFF               	movlw	255
  8434  00ED62  2202               	addwfc	___wmul@multiplier+1,f,c
  8435  00ED64  0E00               	movlw	0
  8436  00ED66  6E04               	movwf	___wmul@multiplicand+1,c
  8437  00ED68  0E05               	movlw	5
  8438  00ED6A  6E03               	movwf	___wmul@multiplicand,c
  8439  00ED6C  EC37  F06D         	call	___wmul	;wreg free
  8440  00ED70  5028               	movf	drawChar@i,w,c
  8441  00ED72  2601               	addwf	?___wmul,f,c
  8442  00ED74  0E00               	movlw	0
  8443  00ED76  2202               	addwfc	?___wmul+1,f,c
  8444  00ED78  0EBA               	movlw	low _font2
  8445  00ED7A  2401               	addwf	?___wmul,w,c
  8446  00ED7C  6EF6               	movwf	tblptrl,c
  8447  00ED7E  0EFE               	movlw	high _font2
  8448  00ED80                     L14:
  8449  00ED80  2002               	addwfc	?___wmul+1,w,c
  8450  00ED82  6EF7               	movwf	tblptrh,c
  8451  00ED84                     	if	0	;There are less than 3 active tblptr bytes
  8452  00ED84                     	endif
  8453  00ED84  0008               	tblrd		*
  8454  00ED86  CFF5 F025          	movff	tablat,drawChar@line
  8455  00ED8A  D000               	goto	l2683
  8456  00ED8C                     l2683:
  8457                           
  8458                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8459  00ED8C  0E00               	movlw	0
  8460  00ED8E  6E27               	movwf	drawChar@j,c
  8461  00ED90                     l2685:
  8462  00ED90  0E06               	movlw	6
  8463  00ED92  6427               	cpfsgt	drawChar@j,c
  8464  00ED94  D001               	goto	l200
  8465  00ED96  D053               	goto	l2709
  8466  00ED98                     l200:
  8467                           
  8468                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8469  00ED98  A025               	btfss	drawChar@line,0,c
  8470  00ED9A  D023               	goto	l2695
  8471                           
  8472                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8473  00ED9C  0424               	decf	drawChar@size,w,c
  8474  00ED9E  A4D8               	btfss	status,2,c
  8475  00EDA0  D00C               	goto	l2693
  8476  00EDA2  501E               	movf	drawChar@y,w,c
  8477  00EDA4  2427               	addwf	drawChar@j,w,c
  8478  00EDA6  6E08               	movwf	drawPixel@y,c
  8479  00EDA8  C020  F009         	movff	drawChar@color,drawPixel@color
  8480  00EDAC  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  8481  00EDB0  5026               	movf	drawChar@x,w,c
  8482  00EDB2  2428               	addwf	drawChar@i,w,c
  8483  00EDB4  EC77  F06D         	call	_drawPixel
  8484  00EDB8  D03E               	goto	l2703
  8485  00EDBA                     l2693:
  8486                           
  8487                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8488  00EDBA  5027               	movf	drawChar@j,w,c
  8489  00EDBC  0224               	mulwf	drawChar@size,c
  8490  00EDBE  50F3               	movf	prodl,w,c
  8491  00EDC0  241E               	addwf	drawChar@y,w,c
  8492  00EDC2  6E13               	movwf	fillRect@y,c
  8493  00EDC4  C024  F014         	movff	drawChar@size,fillRect@w
  8494  00EDC8  C024  F015         	movff	drawChar@size,fillRect@h
  8495  00EDCC  C020  F016         	movff	drawChar@color,fillRect@color
  8496  00EDD0  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  8497  00EDD4  5028               	movf	drawChar@i,w,c
  8498  00EDD6  0224               	mulwf	drawChar@size,c
  8499  00EDD8  50F3               	movf	prodl,w,c
  8500  00EDDA  2426               	addwf	drawChar@x,w,c
  8501  00EDDC  ECC6  F06E         	call	_fillRect
  8502                           
  8503                           ;ST7735_TFT.c: 498: }
  8504  00EDE0  D02A               	goto	l2703
  8505  00EDE2                     l2695:
  8506                           
  8507                           ;ST7735_TFT.c: 499: else if(bg != color) {
  8508  00EDE2  5020               	movf	drawChar@color,w,c
  8509  00EDE4  1822               	xorwf	drawChar@bg,w,c
  8510  00EDE6  E104               	bnz	u1480
  8511  00EDE8  5021               	movf	drawChar@color+1,w,c
  8512  00EDEA  1823               	xorwf	drawChar@bg+1,w,c
  8513  00EDEC  B4D8               	btfsc	status,2,c
  8514  00EDEE  D023               	goto	l2703
  8515  00EDF0                     u1480:
  8516                           
  8517                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  8518  00EDF0  0424               	decf	drawChar@size,w,c
  8519  00EDF2  A4D8               	btfss	status,2,c
  8520  00EDF4  D00C               	goto	l2701
  8521  00EDF6  501E               	movf	drawChar@y,w,c
  8522  00EDF8  2427               	addwf	drawChar@j,w,c
  8523  00EDFA  6E08               	movwf	drawPixel@y,c
  8524  00EDFC  C022  F009         	movff	drawChar@bg,drawPixel@color
  8525  00EE00  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  8526  00EE04  5026               	movf	drawChar@x,w,c
  8527  00EE06  2428               	addwf	drawChar@i,w,c
  8528  00EE08  EC77  F06D         	call	_drawPixel
  8529  00EE0C  D014               	goto	l2703
  8530  00EE0E                     l2701:
  8531                           
  8532                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  8533  00EE0E  5027               	movf	drawChar@j,w,c
  8534  00EE10  0224               	mulwf	drawChar@size,c
  8535  00EE12  50F3               	movf	prodl,w,c
  8536  00EE14  241E               	addwf	drawChar@y,w,c
  8537  00EE16  6E13               	movwf	fillRect@y,c
  8538  00EE18  C024  F014         	movff	drawChar@size,fillRect@w
  8539  00EE1C  C024  F015         	movff	drawChar@size,fillRect@h
  8540  00EE20  C022  F016         	movff	drawChar@bg,fillRect@color
  8541  00EE24  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  8542  00EE28  5028               	movf	drawChar@i,w,c
  8543  00EE2A  0224               	mulwf	drawChar@size,c
  8544  00EE2C  50F3               	movf	prodl,w,c
  8545  00EE2E  2426               	addwf	drawChar@x,w,c
  8546  00EE30  ECC6  F06E         	call	_fillRect
  8547  00EE34  D000               	goto	l2703
  8548  00EE36                     l2703:
  8549  00EE36  2A27               	incf	drawChar@j,f,c
  8550  00EE38  90D8               	bcf	status,0,c
  8551  00EE3A  3225               	rrcf	drawChar@line,f,c
  8552  00EE3C  D7A9               	goto	l2685
  8553  00EE3E                     l2709:
  8554  00EE3E  2A28               	incf	drawChar@i,f,c
  8555  00EE40  D76F               	goto	l2673
  8556  00EE42                     l191:
  8557  00EE42  0012               	return		;funcret
  8558  00EE44                     __end_of_drawChar:
  8559                           	opt stack 0
  8560                           tblptru	equ	0xFF8
  8561                           tblptrh	equ	0xFF7
  8562                           tblptrl	equ	0xFF6
  8563                           tablat	equ	0xFF5
  8564                           prodh	equ	0xFF4
  8565                           prodl	equ	0xFF3
  8566                           intcon2	equ	0xFF1
  8567                           postinc0	equ	0xFEE
  8568                           wreg	equ	0xFE8
  8569                           postdec1	equ	0xFE5
  8570                           fsr1l	equ	0xFE1
  8571                           indf2	equ	0xFDF
  8572                           postinc2	equ	0xFDE
  8573                           fsr2h	equ	0xFDA
  8574                           fsr2l	equ	0xFD9
  8575                           status	equ	0xFD8
  8576                           
  8577 ;; *************** function _fillRect *****************
  8578 ;; Defined at:
  8579 ;;		line 470 in file "ST7735_TFT.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;  x               1    wreg     unsigned char 
  8582 ;;  y               1   18[COMRAM] unsigned char 
  8583 ;;  w               1   19[COMRAM] unsigned char 
  8584 ;;  h               1   20[COMRAM] unsigned char 
  8585 ;;  color           2   21[COMRAM] unsigned int 
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;  x               1   26[COMRAM] unsigned char 
  8588 ;;  i               2   27[COMRAM] int 
  8589 ;; Return value:  Size  Location     Type
  8590 ;;		None               void
  8591 ;; Registers used:
  8592 ;;		wreg, status,2, status,0, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8598 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;Total ram usage:       11 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    4
  8605 ;; This function calls:
  8606 ;;		_drawFastVLine
  8607 ;; This function is called by:
  8608 ;;		_drawChar
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           	psect	text41
  8613  00DD8C                     __ptext41:
  8614                           	opt stack 0
  8615  00DD8C                     _fillRect:
  8616                           	opt stack 21
  8617                           
  8618                           ;incstack = 0
  8619                           ;fillRect@x stored from wreg
  8620  00DD8C  6E1B               	movwf	fillRect@x,c
  8621                           
  8622                           ;ST7735_TFT.c: 472: signed int i;
  8623                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  8624  00DD8E  C01B  F01C         	movff	fillRect@x,fillRect@i
  8625  00DD92  6A1D               	clrf	fillRect@i+1,c
  8626  00DD94  D00E               	goto	l2651
  8627  00DD96                     l2647:
  8628                           
  8629                           ;ST7735_TFT.c: 475: {
  8630                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  8631  00DD96  C013  F008         	movff	fillRect@y,drawFastVLine@y
  8632  00DD9A  C015  F009         	movff	fillRect@h,drawFastVLine@h
  8633  00DD9E  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  8634  00DDA2  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  8635  00DDA6  501C               	movf	fillRect@i,w,c
  8636  00DDA8  EC51  F070         	call	_drawFastVLine
  8637  00DDAC  4A1C               	infsnz	fillRect@i,f,c
  8638  00DDAE  2A1D               	incf	fillRect@i+1,f,c
  8639  00DDB0  D000               	goto	l2651
  8640  00DDB2                     l2651:
  8641  00DDB2  5014               	movf	fillRect@w,w,c
  8642  00DDB4  C01B  F018         	movff	fillRect@x,??_fillRect
  8643  00DDB8  6A19               	clrf	(??_fillRect+1)& (0+255),c
  8644  00DDBA  2618               	addwf	??_fillRect,f,c
  8645  00DDBC  0E00               	movlw	0
  8646  00DDBE  2219               	addwfc	??_fillRect+1,f,c
  8647  00DDC0  5018               	movf	??_fillRect,w,c
  8648  00DDC2  5C1C               	subwf	fillRect@i,w,c
  8649  00DDC4  501D               	movf	fillRect@i+1,w,c
  8650  00DDC6  0A80               	xorlw	128
  8651  00DDC8  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  8652  00DDCA  5019               	movf	??_fillRect+1,w,c
  8653  00DDCC  0A80               	xorlw	128
  8654  00DDCE  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  8655  00DDD0  A0D8               	btfss	status,0,c
  8656  00DDD2  D7E1               	goto	l2647
  8657  00DDD4  0012               	return		;funcret
  8658  00DDD6                     __end_of_fillRect:
  8659                           	opt stack 0
  8660                           tblptru	equ	0xFF8
  8661                           tblptrh	equ	0xFF7
  8662                           tblptrl	equ	0xFF6
  8663                           tablat	equ	0xFF5
  8664                           prodh	equ	0xFF4
  8665                           prodl	equ	0xFF3
  8666                           intcon2	equ	0xFF1
  8667                           postinc0	equ	0xFEE
  8668                           wreg	equ	0xFE8
  8669                           postdec1	equ	0xFE5
  8670                           fsr1l	equ	0xFE1
  8671                           indf2	equ	0xFDF
  8672                           postinc2	equ	0xFDE
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8
  8676                           
  8677 ;; *************** function _drawFastVLine *****************
  8678 ;; Defined at:
  8679 ;;		line 449 in file "ST7735_TFT.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  x               1    wreg     unsigned char 
  8682 ;;  y               1    7[COMRAM] unsigned char 
  8683 ;;  h               1    8[COMRAM] unsigned char 
  8684 ;;  color           2    9[COMRAM] unsigned int 
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;  x               1   17[COMRAM] unsigned char 
  8687 ;;  lo              1   16[COMRAM] unsigned char 
  8688 ;;  hi              1   15[COMRAM] unsigned char 
  8689 ;; Return value:  Size  Location     Type
  8690 ;;		None               void
  8691 ;; Registers used:
  8692 ;;		wreg, status,2, status,0, cstack
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8698 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;Total ram usage:       11 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    3
  8705 ;; This function calls:
  8706 ;;		_setAddrWindow
  8707 ;;		_spiwrite
  8708 ;; This function is called by:
  8709 ;;		_fillRect
  8710 ;;		_fillCircleHelper
  8711 ;;		_fillCircle
  8712 ;;		_drawRect
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           	psect	text42
  8717  00E0A2                     __ptext42:
  8718                           	opt stack 0
  8719  00E0A2                     _drawFastVLine:
  8720                           	opt stack 21
  8721                           
  8722                           ;incstack = 0
  8723                           ;drawFastVLine@x stored from wreg
  8724  00E0A2  6E12               	movwf	drawFastVLine@x,c
  8725                           
  8726                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  8727                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  8728  00E0A4  0E80               	movlw	128
  8729  00E0A6  6012               	cpfslt	drawFastVLine@x,c
  8730  00E0A8  D03F               	goto	l175
  8731  00E0AA  0E9F               	movlw	159
  8732  00E0AC  6408               	cpfsgt	drawFastVLine@y,c
  8733  00E0AE  D001               	goto	l2617
  8734                           
  8735                           ;ST7735_TFT.c: 453: return;
  8736  00E0B0  D03B               	goto	l175
  8737  00E0B2                     l2617:
  8738                           
  8739                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  8740  00E0B2  0EFF               	movlw	255
  8741  00E0B4  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8742  00E0B6  0EFF               	movlw	255
  8743  00E0B8  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  8744  00E0BA  5009               	movf	drawFastVLine@h,w,c
  8745  00E0BC  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  8746  00E0C0  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  8747  00E0C2  260E               	addwf	??_drawFastVLine+2,f,c
  8748  00E0C4  0E00               	movlw	0
  8749  00E0C6  220F               	addwfc	??_drawFastVLine+3,f,c
  8750  00E0C8  500C               	movf	??_drawFastVLine,w,c
  8751  00E0CA  260E               	addwf	??_drawFastVLine+2,f,c
  8752  00E0CC  500D               	movf	??_drawFastVLine+1,w,c
  8753  00E0CE  220F               	addwfc	??_drawFastVLine+3,f,c
  8754  00E0D0  BE0F               	btfsc	??_drawFastVLine+3,7,c
  8755  00E0D2  D00B               	goto	l2621
  8756  00E0D4  500F               	movf	??_drawFastVLine+3,w,c
  8757  00E0D6  E104               	bnz	u1330
  8758  00E0D8  0EA0               	movlw	160
  8759  00E0DA  5C0E               	subwf	??_drawFastVLine+2,w,c
  8760  00E0DC  A0D8               	btfss	status,0,c
  8761  00E0DE  D005               	goto	l2621
  8762  00E0E0                     u1330:
  8763                           
  8764                           ;ST7735_TFT.c: 455: h = 160 - y;
  8765  00E0E0  5008               	movf	drawFastVLine@y,w,c
  8766  00E0E2  0800               	sublw	0
  8767  00E0E4  0FA0               	addlw	160
  8768  00E0E6  6E09               	movwf	drawFastVLine@h,c
  8769  00E0E8  D000               	goto	l2621
  8770  00E0EA                     l2621:
  8771                           
  8772                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  8773  00E0EA  500B               	movf	drawFastVLine@color+1,w,c
  8774  00E0EC  6E10               	movwf	drawFastVLine@hi,c
  8775  00E0EE  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  8776                           
  8777                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  8778  00E0F2  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  8779  00E0F6  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  8780  00E0FA  5008               	movf	drawFastVLine@y,w,c
  8781  00E0FC  2409               	addwf	drawFastVLine@h,w,c
  8782  00E0FE  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8783  00E100  040C               	decf	??_drawFastVLine,w,c
  8784  00E102  6E06               	movwf	setAddrWindow@y1,c
  8785  00E104  5012               	movf	drawFastVLine@x,w,c
  8786  00E106  ECEB  F06E         	call	_setAddrWindow
  8787                           
  8788                           ;ST7735_TFT.c: 458: PORTDbits.RD0 = 1;
  8789  00E10A  8083               	bsf	3971,0,c	;volatile
  8790                           
  8791                           ;ST7735_TFT.c: 459: PORTDbits.RD1 = 0;
  8792  00E10C  9283               	bcf	3971,1,c	;volatile
  8793                           
  8794                           ;ST7735_TFT.c: 461: while (h--) {
  8795  00E10E  D007               	goto	l2633
  8796  00E110                     l2631:
  8797                           
  8798                           ;ST7735_TFT.c: 462: spiwrite(hi);
  8799  00E110  5010               	movf	drawFastVLine@hi,w,c
  8800  00E112  ECCD  F06C         	call	_spiwrite
  8801                           
  8802                           ;ST7735_TFT.c: 463: spiwrite(lo);
  8803  00E116  5011               	movf	drawFastVLine@lo,w,c
  8804  00E118  ECCD  F06C         	call	_spiwrite
  8805  00E11C  D000               	goto	l2633
  8806  00E11E                     l2633:
  8807  00E11E  0609               	decf	drawFastVLine@h,f,c
  8808  00E120  2809               	incf	drawFastVLine@h,w,c
  8809  00E122  A4D8               	btfss	status,2,c
  8810  00E124  D7F5               	goto	l2631
  8811                           
  8812                           ;ST7735_TFT.c: 464: }
  8813                           ;ST7735_TFT.c: 465: PORTDbits.RD1 = 1;
  8814  00E126  8283               	bsf	3971,1,c	;volatile
  8815  00E128                     l175:
  8816  00E128  0012               	return		;funcret
  8817  00E12A                     __end_of_drawFastVLine:
  8818                           	opt stack 0
  8819                           tblptru	equ	0xFF8
  8820                           tblptrh	equ	0xFF7
  8821                           tblptrl	equ	0xFF6
  8822                           tablat	equ	0xFF5
  8823                           prodh	equ	0xFF4
  8824                           prodl	equ	0xFF3
  8825                           intcon2	equ	0xFF1
  8826                           postinc0	equ	0xFEE
  8827                           wreg	equ	0xFE8
  8828                           postdec1	equ	0xFE5
  8829                           fsr1l	equ	0xFE1
  8830                           indf2	equ	0xFDF
  8831                           postinc2	equ	0xFDE
  8832                           fsr2h	equ	0xFDA
  8833                           fsr2l	equ	0xFD9
  8834                           status	equ	0xFD8
  8835                           
  8836 ;; *************** function _drawPixel *****************
  8837 ;; Defined at:
  8838 ;;		line 440 in file "ST7735_TFT.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  x               1    wreg     unsigned char 
  8841 ;;  y               1    7[COMRAM] unsigned char 
  8842 ;;  color           2    8[COMRAM] unsigned int 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;  x               1   10[COMRAM] unsigned char 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;		None               void
  8847 ;; Registers used:
  8848 ;;		wreg, status,2, status,0, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8854 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8858 ;;Total ram usage:        4 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    3
  8861 ;; This function calls:
  8862 ;;		_setAddrWindow
  8863 ;;		_write_data
  8864 ;; This function is called by:
  8865 ;;		_drawChar
  8866 ;;		_drawCircle
  8867 ;;		_drawCircleHelper
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text43
  8872  00DAEE                     __ptext43:
  8873                           	opt stack 0
  8874  00DAEE                     _drawPixel:
  8875                           	opt stack 22
  8876                           
  8877                           ;incstack = 0
  8878                           ;drawPixel@x stored from wreg
  8879  00DAEE  6E0B               	movwf	drawPixel@x,c
  8880                           
  8881                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  8882  00DAF0  0E80               	movlw	128
  8883  00DAF2  600B               	cpfslt	drawPixel@x,c
  8884  00DAF4  D013               	goto	l169
  8885  00DAF6  0E9F               	movlw	159
  8886  00DAF8  6408               	cpfsgt	drawPixel@y,c
  8887  00DAFA  D001               	goto	l2639
  8888                           
  8889                           ;ST7735_TFT.c: 443: return;
  8890  00DAFC  D00F               	goto	l169
  8891  00DAFE                     l2639:
  8892                           
  8893                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  8894  00DAFE  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  8895  00DB02  280B               	incf	drawPixel@x,w,c
  8896  00DB04  6E05               	movwf	setAddrWindow@x1,c
  8897  00DB06  2808               	incf	drawPixel@y,w,c
  8898  00DB08  6E06               	movwf	setAddrWindow@y1,c
  8899  00DB0A  500B               	movf	drawPixel@x,w,c
  8900  00DB0C  ECEB  F06E         	call	_setAddrWindow
  8901                           
  8902                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  8903  00DB10  500A               	movf	drawPixel@color+1,w,c
  8904  00DB12  ECB3  F06C         	call	_write_data
  8905                           
  8906                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  8907  00DB16  5009               	movf	drawPixel@color,w,c
  8908  00DB18  ECB3  F06C         	call	_write_data
  8909  00DB1C                     l169:
  8910  00DB1C  0012               	return		;funcret
  8911  00DB1E                     __end_of_drawPixel:
  8912                           	opt stack 0
  8913                           tblptru	equ	0xFF8
  8914                           tblptrh	equ	0xFF7
  8915                           tblptrl	equ	0xFF6
  8916                           tablat	equ	0xFF5
  8917                           prodh	equ	0xFF4
  8918                           prodl	equ	0xFF3
  8919                           intcon2	equ	0xFF1
  8920                           postinc0	equ	0xFEE
  8921                           wreg	equ	0xFE8
  8922                           postdec1	equ	0xFE5
  8923                           fsr1l	equ	0xFE1
  8924                           indf2	equ	0xFDF
  8925                           postinc2	equ	0xFDE
  8926                           fsr2h	equ	0xFDA
  8927                           fsr2l	equ	0xFD9
  8928                           status	equ	0xFD8
  8929                           
  8930 ;; *************** function _setAddrWindow *****************
  8931 ;; Defined at:
  8932 ;;		line 425 in file "ST7735_TFT.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;  x0              1    wreg     unsigned char 
  8935 ;;  y0              1    3[COMRAM] unsigned char 
  8936 ;;  x1              1    4[COMRAM] unsigned char 
  8937 ;;  y1              1    5[COMRAM] unsigned char 
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;  x0              1    6[COMRAM] unsigned char 
  8940 ;; Return value:  Size  Location     Type
  8941 ;;		None               void
  8942 ;; Registers used:
  8943 ;;		wreg, status,2, status,0, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8949 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8953 ;;Total ram usage:        4 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    2
  8956 ;; This function calls:
  8957 ;;		_write_command
  8958 ;;		_write_data
  8959 ;; This function is called by:
  8960 ;;		_drawPixel
  8961 ;;		_drawFastVLine
  8962 ;;		_fillRectangle
  8963 ;;		_drawFastHLine
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           	psect	text44
  8968  00DDD6                     __ptext44:
  8969                           	opt stack 0
  8970  00DDD6                     _setAddrWindow:
  8971                           	opt stack 21
  8972                           
  8973                           ;incstack = 0
  8974                           ;setAddrWindow@x0 stored from wreg
  8975  00DDD6  6E07               	movwf	setAddrWindow@x0,c
  8976                           
  8977                           ;ST7735_TFT.c: 427: write_command(0x2A);
  8978  00DDD8  0E2A               	movlw	42
  8979  00DDDA  ECAB  F06C         	call	_write_command
  8980                           
  8981                           ;ST7735_TFT.c: 428: write_data(0);
  8982  00DDDE  0E00               	movlw	0
  8983  00DDE0  ECB3  F06C         	call	_write_data
  8984                           
  8985                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  8986  00DDE4  5007               	movf	setAddrWindow@x0,w,c
  8987  00DDE6  2475               	addwf	_colstart,w,c
  8988  00DDE8  ECB3  F06C         	call	_write_data
  8989                           
  8990                           ;ST7735_TFT.c: 430: write_data(0);
  8991  00DDEC  0E00               	movlw	0
  8992  00DDEE  ECB3  F06C         	call	_write_data
  8993                           
  8994                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  8995  00DDF2  5005               	movf	setAddrWindow@x1,w,c
  8996  00DDF4  2475               	addwf	_colstart,w,c
  8997  00DDF6  ECB3  F06C         	call	_write_data
  8998                           
  8999                           ;ST7735_TFT.c: 432: write_command(0x2B);
  9000  00DDFA  0E2B               	movlw	43
  9001  00DDFC  ECAB  F06C         	call	_write_command
  9002                           
  9003                           ;ST7735_TFT.c: 433: write_data(0);
  9004  00DE00  0E00               	movlw	0
  9005  00DE02  ECB3  F06C         	call	_write_data
  9006                           
  9007                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  9008  00DE06  5004               	movf	setAddrWindow@y0,w,c
  9009  00DE08  2478               	addwf	_rowstart,w,c
  9010  00DE0A  ECB3  F06C         	call	_write_data
  9011                           
  9012                           ;ST7735_TFT.c: 435: write_data(0);
  9013  00DE0E  0E00               	movlw	0
  9014  00DE10  ECB3  F06C         	call	_write_data
  9015                           
  9016                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  9017  00DE14  5006               	movf	setAddrWindow@y1,w,c
  9018  00DE16  2478               	addwf	_rowstart,w,c
  9019  00DE18  ECB3  F06C         	call	_write_data
  9020                           
  9021                           ;ST7735_TFT.c: 437: write_command(0x2C);
  9022  00DE1C  0E2C               	movlw	44
  9023  00DE1E  ECAB  F06C         	call	_write_command
  9024  00DE22  0012               	return		;funcret
  9025  00DE24                     __end_of_setAddrWindow:
  9026                           	opt stack 0
  9027                           tblptru	equ	0xFF8
  9028                           tblptrh	equ	0xFF7
  9029                           tblptrl	equ	0xFF6
  9030                           tablat	equ	0xFF5
  9031                           prodh	equ	0xFF4
  9032                           prodl	equ	0xFF3
  9033                           intcon2	equ	0xFF1
  9034                           postinc0	equ	0xFEE
  9035                           wreg	equ	0xFE8
  9036                           postdec1	equ	0xFE5
  9037                           fsr1l	equ	0xFE1
  9038                           indf2	equ	0xFDF
  9039                           postinc2	equ	0xFDE
  9040                           fsr2h	equ	0xFDA
  9041                           fsr2l	equ	0xFD9
  9042                           status	equ	0xFD8
  9043                           
  9044 ;; *************** function _write_data *****************
  9045 ;; Defined at:
  9046 ;;		line 242 in file "ST7735_TFT.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;  data_           1    wreg     unsigned char 
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;  data_           1    2[COMRAM] unsigned char 
  9051 ;; Return value:  Size  Location     Type
  9052 ;;		None               void
  9053 ;; Registers used:
  9054 ;;		wreg, status,2, cstack
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;Total ram usage:        1 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    1
  9067 ;; This function calls:
  9068 ;;		_spiwrite
  9069 ;; This function is called by:
  9070 ;;		_Rcmd1
  9071 ;;		_Rcmd2red
  9072 ;;		_Rcmd3
  9073 ;;		_setAddrWindow
  9074 ;;		_drawPixel
  9075 ;;		_TFT_GreenTab_Initialize
  9076 ;;		_Bcmd
  9077 ;;		_setScrollDefinition
  9078 ;;		_Rcmd2green
  9079 ;;		_VerticalScroll
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           	psect	text45
  9084  00D966                     __ptext45:
  9085                           	opt stack 0
  9086  00D966                     _write_data:
  9087                           	opt stack 21
  9088                           
  9089                           ;incstack = 0
  9090                           ;write_data@data_ stored from wreg
  9091  00D966  6E03               	movwf	write_data@data_,c
  9092                           
  9093                           ;ST7735_TFT.c: 244: PORTDbits.RD1 = 0;
  9094  00D968  9283               	bcf	3971,1,c	;volatile
  9095                           
  9096                           ;ST7735_TFT.c: 245: PORTDbits.RD0 = 1;
  9097  00D96A  8083               	bsf	3971,0,c	;volatile
  9098                           
  9099                           ;ST7735_TFT.c: 246: spiwrite(data_);
  9100  00D96C  5003               	movf	write_data@data_,w,c
  9101  00D96E  ECCD  F06C         	call	_spiwrite
  9102                           
  9103                           ;ST7735_TFT.c: 247: PORTDbits.RD1 = 1;
  9104  00D972  8283               	bsf	3971,1,c	;volatile
  9105  00D974  0012               	return		;funcret
  9106  00D976                     __end_of_write_data:
  9107                           	opt stack 0
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon2	equ	0xFF1
  9115                           postinc0	equ	0xFEE
  9116                           wreg	equ	0xFE8
  9117                           postdec1	equ	0xFE5
  9118                           fsr1l	equ	0xFE1
  9119                           indf2	equ	0xFDF
  9120                           postinc2	equ	0xFDE
  9121                           fsr2h	equ	0xFDA
  9122                           fsr2l	equ	0xFD9
  9123                           status	equ	0xFD8
  9124                           
  9125 ;; *************** function _write_command *****************
  9126 ;; Defined at:
  9127 ;;		line 231 in file "ST7735_TFT.c"
  9128 ;; Parameters:    Size  Location     Type
  9129 ;;  cmd_            1    wreg     unsigned char 
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;  cmd_            1    2[COMRAM] unsigned char 
  9132 ;; Return value:  Size  Location     Type
  9133 ;;		None               void
  9134 ;; Registers used:
  9135 ;;		wreg, status,2, cstack
  9136 ;; Tracked objects:
  9137 ;;		On entry : 0/0
  9138 ;;		On exit  : 0/0
  9139 ;;		Unchanged: 0/0
  9140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;Total ram usage:        1 bytes
  9146 ;; Hardware stack levels used:    1
  9147 ;; Hardware stack levels required when called:    1
  9148 ;; This function calls:
  9149 ;;		_spiwrite
  9150 ;; This function is called by:
  9151 ;;		_Rcmd1
  9152 ;;		_Rcmd2red
  9153 ;;		_Rcmd3
  9154 ;;		_setAddrWindow
  9155 ;;		_TFT_GreenTab_Initialize
  9156 ;;		_Bcmd
  9157 ;;		_setScrollDefinition
  9158 ;;		_Rcmd2green
  9159 ;;		_VerticalScroll
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           	psect	text46
  9164  00D956                     __ptext46:
  9165                           	opt stack 0
  9166  00D956                     _write_command:
  9167                           	opt stack 21
  9168                           
  9169                           ;incstack = 0
  9170                           ;write_command@cmd_ stored from wreg
  9171  00D956  6E03               	movwf	write_command@cmd_,c
  9172                           
  9173                           ;ST7735_TFT.c: 233: PORTDbits.RD1 = 0;
  9174  00D958  9283               	bcf	3971,1,c	;volatile
  9175                           
  9176                           ;ST7735_TFT.c: 235: PORTDbits.RD0 = 0;
  9177  00D95A  9083               	bcf	3971,0,c	;volatile
  9178                           
  9179                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  9180  00D95C  5003               	movf	write_command@cmd_,w,c
  9181  00D95E  ECCD  F06C         	call	_spiwrite
  9182                           
  9183                           ;ST7735_TFT.c: 238: PORTDbits.RD1 = 1;
  9184  00D962  8283               	bsf	3971,1,c	;volatile
  9185  00D964  0012               	return		;funcret
  9186  00D966                     __end_of_write_command:
  9187                           	opt stack 0
  9188                           tblptru	equ	0xFF8
  9189                           tblptrh	equ	0xFF7
  9190                           tblptrl	equ	0xFF6
  9191                           tablat	equ	0xFF5
  9192                           prodh	equ	0xFF4
  9193                           prodl	equ	0xFF3
  9194                           intcon2	equ	0xFF1
  9195                           postinc0	equ	0xFEE
  9196                           wreg	equ	0xFE8
  9197                           postdec1	equ	0xFE5
  9198                           fsr1l	equ	0xFE1
  9199                           indf2	equ	0xFDF
  9200                           postinc2	equ	0xFDE
  9201                           fsr2h	equ	0xFDA
  9202                           fsr2l	equ	0xFD9
  9203                           status	equ	0xFD8
  9204                           
  9205 ;; *************** function _spiwrite *****************
  9206 ;; Defined at:
  9207 ;;		line 222 in file "ST7735_TFT.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;  spidata         1    wreg     unsigned char 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;  spidata         1    1[COMRAM] unsigned char 
  9212 ;;  x               1    0[COMRAM] unsigned char 
  9213 ;; Return value:  Size  Location     Type
  9214 ;;		None               void
  9215 ;; Registers used:
  9216 ;;		wreg
  9217 ;; Tracked objects:
  9218 ;;		On entry : 0/0
  9219 ;;		On exit  : 0/0
  9220 ;;		Unchanged: 0/0
  9221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;Total ram usage:        2 bytes
  9227 ;; Hardware stack levels used:    1
  9228 ;; This function calls:
  9229 ;;		Nothing
  9230 ;; This function is called by:
  9231 ;;		_write_command
  9232 ;;		_write_data
  9233 ;;		_drawFastVLine
  9234 ;;		_fillRectangle
  9235 ;;		_drawFastHLine
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           	psect	text47
  9240  00D99A                     __ptext47:
  9241                           	opt stack 0
  9242  00D99A                     _spiwrite:
  9243                           	opt stack 23
  9244                           
  9245                           ;incstack = 0
  9246                           ;spiwrite@spidata stored from wreg
  9247  00D99A  6E02               	movwf	spiwrite@spidata,c
  9248                           
  9249                           ;ST7735_TFT.c: 224: char x;
  9250                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  9251  00D99C  969E               	bcf	3998,3,c	;volatile
  9252                           
  9253                           ;ST7735_TFT.c: 226: x = SSPBUF;
  9254  00D99E  CFC9 F001          	movff	4041,spiwrite@x	;volatile
  9255                           
  9256                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  9257  00D9A2  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9258                           
  9259                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  9260  00D9A6  D000               	goto	l125
  9261  00D9A8                     l125:
  9262  00D9A8  A0C7               	btfss	4039,0,c	;volatile
  9263  00D9AA  D7FE               	goto	l125
  9264  00D9AC  0012               	return		;funcret
  9265  00D9AE                     __end_of_spiwrite:
  9266                           	opt stack 0
  9267                           tblptru	equ	0xFF8
  9268                           tblptrh	equ	0xFF7
  9269                           tblptrl	equ	0xFF6
  9270                           tablat	equ	0xFF5
  9271                           prodh	equ	0xFF4
  9272                           prodl	equ	0xFF3
  9273                           intcon2	equ	0xFF1
  9274                           postinc0	equ	0xFEE
  9275                           wreg	equ	0xFE8
  9276                           postdec1	equ	0xFE5
  9277                           fsr1l	equ	0xFE1
  9278                           indf2	equ	0xFDF
  9279                           postinc2	equ	0xFDE
  9280                           fsr2h	equ	0xFDA
  9281                           fsr2l	equ	0xFD9
  9282                           status	equ	0xFD8
  9283                           
  9284 ;; *************** function ___wmul *****************
  9285 ;; Defined at:
  9286 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9287 ;; Parameters:    Size  Location     Type
  9288 ;;  multiplier      2    0[COMRAM] unsigned int 
  9289 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;  product         2    4[COMRAM] unsigned int 
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  2    0[COMRAM] unsigned int 
  9294 ;; Registers used:
  9295 ;;		wreg, status,2, status,0, prodl, prodh
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;Total ram usage:        6 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; This function calls:
  9308 ;;		Nothing
  9309 ;; This function is called by:
  9310 ;;		_delay_ms
  9311 ;;		_drawChar
  9312 ;;		_main
  9313 ;;		_update_LCD_misc
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           	psect	text48
  9318  00DA6E                     __ptext48:
  9319                           	opt stack 0
  9320  00DA6E                     ___wmul:
  9321                           	opt stack 30
  9322                           
  9323                           ;incstack = 0
  9324  00DA6E  5001               	movf	___wmul@multiplier,w,c
  9325  00DA70  0203               	mulwf	___wmul@multiplicand,c
  9326  00DA72  CFF3 F005          	movff	prodl,___wmul@product
  9327  00DA76  CFF4 F006          	movff	prodh,___wmul@product+1
  9328  00DA7A  5001               	movf	___wmul@multiplier,w,c
  9329  00DA7C  0204               	mulwf	___wmul@multiplicand+1,c
  9330  00DA7E  50F3               	movf	prodl,w,c
  9331  00DA80  2606               	addwf	___wmul@product+1,f,c
  9332  00DA82  5002               	movf	___wmul@multiplier+1,w,c
  9333  00DA84  0203               	mulwf	___wmul@multiplicand,c
  9334  00DA86  50F3               	movf	prodl,w,c
  9335  00DA88  2606               	addwf	___wmul@product+1,f,c
  9336  00DA8A  C005  F001         	movff	___wmul@product,?___wmul
  9337  00DA8E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9338  00DA92  D000               	goto	l534
  9339  00DA94                     l534:
  9340  00DA94  0012               	return		;funcret
  9341  00DA96                     __end_of___wmul:
  9342                           	opt stack 0
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon2	equ	0xFF1
  9350                           postinc0	equ	0xFEE
  9351                           wreg	equ	0xFE8
  9352                           postdec1	equ	0xFE5
  9353                           fsr1l	equ	0xFE1
  9354                           indf2	equ	0xFDF
  9355                           postinc2	equ	0xFDE
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function ___awmod *****************
  9361 ;; Defined at:
  9362 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;  dividend        2    0[COMRAM] int 
  9365 ;;  divisor         2    2[COMRAM] int 
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;  sign            1    5[COMRAM] unsigned char 
  9368 ;;  counter         1    4[COMRAM] unsigned char 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  2    0[COMRAM] int 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;Total ram usage:        6 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; This function calls:
  9385 ;;		Nothing
  9386 ;; This function is called by:
  9387 ;;		_update_LCD_count
  9388 ;;		_update_LCD_PED_Count
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text49
  9393  00DF9E                     __ptext49:
  9394                           	opt stack 0
  9395  00DF9E                     ___awmod:
  9396                           	opt stack 27
  9397                           
  9398                           ;incstack = 0
  9399  00DF9E  0E00               	movlw	0
  9400  00DFA0  6E06               	movwf	___awmod@sign,c
  9401  00DFA2  AE02               	btfss	___awmod@dividend+1,7,c
  9402  00DFA4  D007               	goto	l3085
  9403  00DFA6  6C01               	negf	___awmod@dividend,c
  9404  00DFA8  1E02               	comf	___awmod@dividend+1,f,c
  9405  00DFAA  B0D8               	btfsc	status,0,c
  9406  00DFAC  2A02               	incf	___awmod@dividend+1,f,c
  9407  00DFAE  0E01               	movlw	1
  9408  00DFB0  6E06               	movwf	___awmod@sign,c
  9409  00DFB2  D000               	goto	l3085
  9410  00DFB4                     l3085:
  9411  00DFB4  AE04               	btfss	___awmod@divisor+1,7,c
  9412  00DFB6  D005               	goto	l3089
  9413  00DFB8  6C03               	negf	___awmod@divisor,c
  9414  00DFBA  1E04               	comf	___awmod@divisor+1,f,c
  9415  00DFBC  B0D8               	btfsc	status,0,c
  9416  00DFBE  2A04               	incf	___awmod@divisor+1,f,c
  9417  00DFC0  D000               	goto	l3089
  9418  00DFC2                     l3089:
  9419  00DFC2  5003               	movf	___awmod@divisor,w,c
  9420  00DFC4  1004               	iorwf	___awmod@divisor+1,w,c
  9421  00DFC6  B4D8               	btfsc	status,2,c
  9422  00DFC8  D01D               	goto	l3105
  9423  00DFCA  0E01               	movlw	1
  9424  00DFCC  6E05               	movwf	___awmod@counter,c
  9425  00DFCE  D005               	goto	l3095
  9426  00DFD0                     l3093:
  9427  00DFD0  90D8               	bcf	status,0,c
  9428  00DFD2  3603               	rlcf	___awmod@divisor,f,c
  9429  00DFD4  3604               	rlcf	___awmod@divisor+1,f,c
  9430  00DFD6  2A05               	incf	___awmod@counter,f,c
  9431  00DFD8  D000               	goto	l3095
  9432  00DFDA                     l3095:
  9433  00DFDA  BE04               	btfsc	___awmod@divisor+1,7,c
  9434  00DFDC  D002               	goto	l3097
  9435  00DFDE  D7F8               	goto	l3093
  9436  00DFE0  D000               	goto	l3097
  9437  00DFE2                     l3097:
  9438  00DFE2  5003               	movf	___awmod@divisor,w,c
  9439  00DFE4  5C01               	subwf	___awmod@dividend,w,c
  9440  00DFE6  5004               	movf	___awmod@divisor+1,w,c
  9441  00DFE8  5802               	subwfb	___awmod@dividend+1,w,c
  9442  00DFEA  A0D8               	btfss	status,0,c
  9443  00DFEC  D005               	goto	l3101
  9444  00DFEE  5003               	movf	___awmod@divisor,w,c
  9445  00DFF0  5E01               	subwf	___awmod@dividend,f,c
  9446  00DFF2  5004               	movf	___awmod@divisor+1,w,c
  9447  00DFF4  5A02               	subwfb	___awmod@dividend+1,f,c
  9448  00DFF6  D000               	goto	l3101
  9449  00DFF8                     l3101:
  9450  00DFF8  90D8               	bcf	status,0,c
  9451  00DFFA  3204               	rrcf	___awmod@divisor+1,f,c
  9452  00DFFC  3203               	rrcf	___awmod@divisor,f,c
  9453  00DFFE  2E05               	decfsz	___awmod@counter,f,c
  9454  00E000  D7F0               	goto	l3097
  9455  00E002  D000               	goto	l3105
  9456  00E004                     l3105:
  9457  00E004  5006               	movf	___awmod@sign,w,c
  9458  00E006  B4D8               	btfsc	status,2,c
  9459  00E008  D005               	goto	l3109
  9460  00E00A  6C01               	negf	___awmod@dividend,c
  9461  00E00C  1E02               	comf	___awmod@dividend+1,f,c
  9462  00E00E  B0D8               	btfsc	status,0,c
  9463  00E010  2A02               	incf	___awmod@dividend+1,f,c
  9464  00E012  D000               	goto	l3109
  9465  00E014                     l3109:
  9466  00E014  C001  F001         	movff	___awmod@dividend,?___awmod
  9467  00E018  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9468  00E01C  D000               	goto	l740
  9469  00E01E                     l740:
  9470  00E01E  0012               	return		;funcret
  9471  00E020                     __end_of___awmod:
  9472                           	opt stack 0
  9473                           tblptru	equ	0xFF8
  9474                           tblptrh	equ	0xFF7
  9475                           tblptrl	equ	0xFF6
  9476                           tablat	equ	0xFF5
  9477                           prodh	equ	0xFF4
  9478                           prodl	equ	0xFF3
  9479                           intcon2	equ	0xFF1
  9480                           postinc0	equ	0xFEE
  9481                           wreg	equ	0xFE8
  9482                           postdec1	equ	0xFE5
  9483                           fsr1l	equ	0xFE1
  9484                           indf2	equ	0xFDF
  9485                           postinc2	equ	0xFDE
  9486                           fsr2h	equ	0xFDA
  9487                           fsr2l	equ	0xFD9
  9488                           status	equ	0xFD8
  9489                           
  9490 ;; *************** function ___awdiv *****************
  9491 ;; Defined at:
  9492 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;  dividend        2    0[COMRAM] int 
  9495 ;;  divisor         2    2[COMRAM] int 
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;  quotient        2    6[COMRAM] int 
  9498 ;;  sign            1    5[COMRAM] unsigned char 
  9499 ;;  counter         1    4[COMRAM] unsigned char 
  9500 ;; Return value:  Size  Location     Type
  9501 ;;                  2    0[COMRAM] int 
  9502 ;; Registers used:
  9503 ;;		wreg, status,2, status,0
  9504 ;; Tracked objects:
  9505 ;;		On entry : 0/0
  9506 ;;		On exit  : 0/0
  9507 ;;		Unchanged: 0/0
  9508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9510 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9512 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9513 ;;Total ram usage:        8 bytes
  9514 ;; Hardware stack levels used:    1
  9515 ;; This function calls:
  9516 ;;		Nothing
  9517 ;; This function is called by:
  9518 ;;		_update_LCD_count
  9519 ;;		_update_LCD_PED_Count
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           	psect	text50
  9524  00E1B2                     __ptext50:
  9525                           	opt stack 0
  9526  00E1B2                     ___awdiv:
  9527                           	opt stack 27
  9528                           
  9529                           ;incstack = 0
  9530  00E1B2  0E00               	movlw	0
  9531  00E1B4  6E06               	movwf	___awdiv@sign,c
  9532  00E1B6  AE04               	btfss	___awdiv@divisor+1,7,c
  9533  00E1B8  D007               	goto	l3041
  9534  00E1BA  6C03               	negf	___awdiv@divisor,c
  9535  00E1BC  1E04               	comf	___awdiv@divisor+1,f,c
  9536  00E1BE  B0D8               	btfsc	status,0,c
  9537  00E1C0  2A04               	incf	___awdiv@divisor+1,f,c
  9538  00E1C2  0E01               	movlw	1
  9539  00E1C4  6E06               	movwf	___awdiv@sign,c
  9540  00E1C6  D000               	goto	l3041
  9541  00E1C8                     l3041:
  9542  00E1C8  AE02               	btfss	___awdiv@dividend+1,7,c
  9543  00E1CA  D007               	goto	l3047
  9544  00E1CC  6C01               	negf	___awdiv@dividend,c
  9545  00E1CE  1E02               	comf	___awdiv@dividend+1,f,c
  9546  00E1D0  B0D8               	btfsc	status,0,c
  9547  00E1D2  2A02               	incf	___awdiv@dividend+1,f,c
  9548  00E1D4  0E01               	movlw	1
  9549  00E1D6  1A06               	xorwf	___awdiv@sign,f,c
  9550  00E1D8  D000               	goto	l3047
  9551  00E1DA                     l3047:
  9552  00E1DA  0E00               	movlw	0
  9553  00E1DC  6E08               	movwf	___awdiv@quotient+1,c
  9554  00E1DE  0E00               	movlw	0
  9555  00E1E0  6E07               	movwf	___awdiv@quotient,c
  9556  00E1E2  5003               	movf	___awdiv@divisor,w,c
  9557  00E1E4  1004               	iorwf	___awdiv@divisor+1,w,c
  9558  00E1E6  B4D8               	btfsc	status,2,c
  9559  00E1E8  D021               	goto	l3069
  9560  00E1EA  0E01               	movlw	1
  9561  00E1EC  6E05               	movwf	___awdiv@counter,c
  9562  00E1EE  D005               	goto	l3055
  9563  00E1F0                     l3053:
  9564  00E1F0  90D8               	bcf	status,0,c
  9565  00E1F2  3603               	rlcf	___awdiv@divisor,f,c
  9566  00E1F4  3604               	rlcf	___awdiv@divisor+1,f,c
  9567  00E1F6  2A05               	incf	___awdiv@counter,f,c
  9568  00E1F8  D000               	goto	l3055
  9569  00E1FA                     l3055:
  9570  00E1FA  BE04               	btfsc	___awdiv@divisor+1,7,c
  9571  00E1FC  D002               	goto	l3057
  9572  00E1FE  D7F8               	goto	l3053
  9573  00E200  D000               	goto	l3057
  9574  00E202                     l3057:
  9575  00E202  90D8               	bcf	status,0,c
  9576  00E204  3607               	rlcf	___awdiv@quotient,f,c
  9577  00E206  3608               	rlcf	___awdiv@quotient+1,f,c
  9578  00E208  5003               	movf	___awdiv@divisor,w,c
  9579  00E20A  5C01               	subwf	___awdiv@dividend,w,c
  9580  00E20C  5004               	movf	___awdiv@divisor+1,w,c
  9581  00E20E  5802               	subwfb	___awdiv@dividend+1,w,c
  9582  00E210  A0D8               	btfss	status,0,c
  9583  00E212  D006               	goto	l3065
  9584  00E214  5003               	movf	___awdiv@divisor,w,c
  9585  00E216  5E01               	subwf	___awdiv@dividend,f,c
  9586  00E218  5004               	movf	___awdiv@divisor+1,w,c
  9587  00E21A  5A02               	subwfb	___awdiv@dividend+1,f,c
  9588  00E21C  8007               	bsf	___awdiv@quotient,0,c
  9589  00E21E  D000               	goto	l3065
  9590  00E220                     l3065:
  9591  00E220  90D8               	bcf	status,0,c
  9592  00E222  3204               	rrcf	___awdiv@divisor+1,f,c
  9593  00E224  3203               	rrcf	___awdiv@divisor,f,c
  9594  00E226  2E05               	decfsz	___awdiv@counter,f,c
  9595  00E228  D7EC               	goto	l3057
  9596  00E22A  D000               	goto	l3069
  9597  00E22C                     l3069:
  9598  00E22C  5006               	movf	___awdiv@sign,w,c
  9599  00E22E  B4D8               	btfsc	status,2,c
  9600  00E230  D005               	goto	l3073
  9601  00E232  6C07               	negf	___awdiv@quotient,c
  9602  00E234  1E08               	comf	___awdiv@quotient+1,f,c
  9603  00E236  B0D8               	btfsc	status,0,c
  9604  00E238  2A08               	incf	___awdiv@quotient+1,f,c
  9605  00E23A  D000               	goto	l3073
  9606  00E23C                     l3073:
  9607  00E23C  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9608  00E240  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9609  00E244  D000               	goto	l727
  9610  00E246                     l727:
  9611  00E246  0012               	return		;funcret
  9612  00E248                     __end_of___awdiv:
  9613                           	opt stack 0
  9614                           tblptru	equ	0xFF8
  9615                           tblptrh	equ	0xFF7
  9616                           tblptrl	equ	0xFF6
  9617                           tablat	equ	0xFF5
  9618                           prodh	equ	0xFF4
  9619                           prodl	equ	0xFF3
  9620                           intcon2	equ	0xFF1
  9621                           postinc0	equ	0xFEE
  9622                           wreg	equ	0xFE8
  9623                           postdec1	equ	0xFE5
  9624                           fsr1l	equ	0xFE1
  9625                           indf2	equ	0xFDF
  9626                           postinc2	equ	0xFDE
  9627                           fsr2h	equ	0xFDA
  9628                           fsr2l	equ	0xFD9
  9629                           status	equ	0xFD8
  9630                           
  9631 ;; *************** function _Wait_One_Second_With_Beep *****************
  9632 ;; Defined at:
  9633 ;;		line 552 in file "Lab9.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;		None
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;		None
  9638 ;; Return value:  Size  Location     Type
  9639 ;;		None               void
  9640 ;; Registers used:
  9641 ;;		wreg, status,2, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;Total ram usage:        0 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    1
  9654 ;; This function calls:
  9655 ;;		_Activate_Buzzer
  9656 ;;		_Deactivate_Buzzer
  9657 ;;		_Wait_Half_Second
  9658 ;; This function is called by:
  9659 ;;		_PED_Control
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           	psect	text51
  9664  00D9C2                     __ptext51:
  9665                           	opt stack 0
  9666  00D9C2                     _Wait_One_Second_With_Beep:
  9667                           	opt stack 27
  9668                           
  9669                           ;Lab9.c: 554: PORTDbits.RD7 = 1;
  9670                           
  9671                           ;incstack = 0
  9672  00D9C2  8E83               	bsf	3971,7,c	;volatile
  9673                           
  9674                           ;Lab9.c: 555: Activate_Buzzer();
  9675  00D9C4  ECBB  F06C         	call	_Activate_Buzzer	;wreg free
  9676                           
  9677                           ;Lab9.c: 556: Wait_Half_Second();
  9678  00D9C8  ECF7  F06C         	call	_Wait_Half_Second	;wreg free
  9679                           
  9680                           ;Lab9.c: 557: PORTDbits.RD7 = 0;
  9681  00D9CC  9E83               	bcf	3971,7,c	;volatile
  9682                           
  9683                           ;Lab9.c: 558: Deactivate_Buzzer();
  9684  00D9CE  ECA2  F06C         	call	_Deactivate_Buzzer	;wreg free
  9685                           
  9686                           ;Lab9.c: 559: Wait_Half_Second();
  9687  00D9D2  ECF7  F06C         	call	_Wait_Half_Second	;wreg free
  9688  00D9D6  0012               	return		;funcret
  9689  00D9D8                     __end_of_Wait_One_Second_With_Beep:
  9690                           	opt stack 0
  9691                           tblptru	equ	0xFF8
  9692                           tblptrh	equ	0xFF7
  9693                           tblptrl	equ	0xFF6
  9694                           tablat	equ	0xFF5
  9695                           prodh	equ	0xFF4
  9696                           prodl	equ	0xFF3
  9697                           intcon2	equ	0xFF1
  9698                           postinc0	equ	0xFEE
  9699                           wreg	equ	0xFE8
  9700                           postdec1	equ	0xFE5
  9701                           fsr1l	equ	0xFE1
  9702                           indf2	equ	0xFDF
  9703                           postinc2	equ	0xFDE
  9704                           fsr2h	equ	0xFDA
  9705                           fsr2l	equ	0xFD9
  9706                           status	equ	0xFD8
  9707                           
  9708 ;; *************** function _Wait_Half_Second *****************
  9709 ;; Defined at:
  9710 ;;		line 562 in file "Lab9.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;		None
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;		None
  9715 ;; Return value:  Size  Location     Type
  9716 ;;		None               void
  9717 ;; Registers used:
  9718 ;;		wreg, status,2
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;Total ram usage:        0 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;;		_Wait_One_Second
  9734 ;;		_Wait_One_Second_With_Beep
  9735 ;;		_Old_Wait_One_Second
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           	psect	text52
  9740  00D9EE                     __ptext52:
  9741                           	opt stack 0
  9742  00D9EE                     _Wait_Half_Second:
  9743                           	opt stack 27
  9744                           
  9745                           ;Lab9.c: 564: T0CON = 0x03;
  9746                           
  9747                           ;incstack = 0
  9748  00D9EE  0E03               	movlw	3
  9749  00D9F0  6ED5               	movwf	4053,c	;volatile
  9750                           
  9751                           ;Lab9.c: 565: TMR0L = 0xDB;
  9752  00D9F2  0EDB               	movlw	219
  9753  00D9F4  6ED6               	movwf	4054,c	;volatile
  9754                           
  9755                           ;Lab9.c: 566: TMR0H = 0x0B;
  9756  00D9F6  0E0B               	movlw	11
  9757  00D9F8  6ED7               	movwf	4055,c	;volatile
  9758                           
  9759                           ;Lab9.c: 567: INTCONbits.TMR0IF = 0;
  9760  00D9FA  94F2               	bcf	intcon,2,c	;volatile
  9761                           
  9762                           ;Lab9.c: 568: T0CONbits.TMR0ON = 1;
  9763  00D9FC  8ED5               	bsf	4053,7,c	;volatile
  9764                           
  9765                           ;Lab9.c: 569: while (INTCONbits.TMR0IF == 0);
  9766  00D9FE  D000               	goto	l454
  9767  00DA00                     l454:
  9768  00DA00  A4F2               	btfss	intcon,2,c	;volatile
  9769  00DA02  D7FE               	goto	l454
  9770                           
  9771                           ;Lab9.c: 570: T0CONbits.TMR0ON = 0;
  9772  00DA04  9ED5               	bcf	4053,7,c	;volatile
  9773  00DA06  0012               	return		;funcret
  9774  00DA08                     __end_of_Wait_Half_Second:
  9775                           	opt stack 0
  9776                           tblptru	equ	0xFF8
  9777                           tblptrh	equ	0xFF7
  9778                           tblptrl	equ	0xFF6
  9779                           tablat	equ	0xFF5
  9780                           prodh	equ	0xFF4
  9781                           prodl	equ	0xFF3
  9782                           intcon	equ	0xFF2
  9783                           intcon2	equ	0xFF1
  9784                           postinc0	equ	0xFEE
  9785                           wreg	equ	0xFE8
  9786                           postdec1	equ	0xFE5
  9787                           fsr1l	equ	0xFE1
  9788                           indf2	equ	0xFDF
  9789                           postinc2	equ	0xFDE
  9790                           fsr2h	equ	0xFDA
  9791                           fsr2l	equ	0xFD9
  9792                           status	equ	0xFD8
  9793                           
  9794 ;; *************** function _Deactivate_Buzzer *****************
  9795 ;; Defined at:
  9796 ;;		line 381 in file "Lab9.c"
  9797 ;; Parameters:    Size  Location     Type
  9798 ;;		None
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;		None
  9801 ;; Return value:  Size  Location     Type
  9802 ;;		None               void
  9803 ;; Registers used:
  9804 ;;		wreg, status,2
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;Total ram usage:        0 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; This function calls:
  9817 ;;		Nothing
  9818 ;; This function is called by:
  9819 ;;		_Wait_One_Second_With_Beep
  9820 ;; This function uses a non-reentrant model
  9821 ;;
  9822                           
  9823                           	psect	text53
  9824  00D944                     __ptext53:
  9825                           	opt stack 0
  9826  00D944                     _Deactivate_Buzzer:
  9827                           	opt stack 27
  9828                           
  9829                           ;Lab9.c: 383: CCP2CON = 0x0;
  9830                           
  9831                           ;incstack = 0
  9832  00D944  0E00               	movlw	0
  9833  00D946  6EBA               	movwf	4026,c	;volatile
  9834                           
  9835                           ;Lab9.c: 384: PORTBbits.RB3 = 0;
  9836  00D948  9681               	bcf	3969,3,c	;volatile
  9837  00D94A  0012               	return		;funcret
  9838  00D94C                     __end_of_Deactivate_Buzzer:
  9839                           	opt stack 0
  9840                           tblptru	equ	0xFF8
  9841                           tblptrh	equ	0xFF7
  9842                           tblptrl	equ	0xFF6
  9843                           tablat	equ	0xFF5
  9844                           prodh	equ	0xFF4
  9845                           prodl	equ	0xFF3
  9846                           intcon	equ	0xFF2
  9847                           intcon2	equ	0xFF1
  9848                           postinc0	equ	0xFEE
  9849                           wreg	equ	0xFE8
  9850                           postdec1	equ	0xFE5
  9851                           fsr1l	equ	0xFE1
  9852                           indf2	equ	0xFDF
  9853                           postinc2	equ	0xFDE
  9854                           fsr2h	equ	0xFDA
  9855                           fsr2l	equ	0xFD9
  9856                           status	equ	0xFD8
  9857                           
  9858 ;; *************** function _Activate_Buzzer *****************
  9859 ;; Defined at:
  9860 ;;		line 373 in file "Lab9.c"
  9861 ;; Parameters:    Size  Location     Type
  9862 ;;		None
  9863 ;; Auto vars:     Size  Location     Type
  9864 ;;		None
  9865 ;; Return value:  Size  Location     Type
  9866 ;;		None               void
  9867 ;; Registers used:
  9868 ;;		wreg, status,2
  9869 ;; Tracked objects:
  9870 ;;		On entry : 0/0
  9871 ;;		On exit  : 0/0
  9872 ;;		Unchanged: 0/0
  9873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;Total ram usage:        0 bytes
  9879 ;; Hardware stack levels used:    1
  9880 ;; This function calls:
  9881 ;;		Nothing
  9882 ;; This function is called by:
  9883 ;;		_Wait_One_Second_With_Beep
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           	psect	text54
  9888  00D976                     __ptext54:
  9889                           	opt stack 0
  9890  00D976                     _Activate_Buzzer:
  9891                           	opt stack 27
  9892                           
  9893                           ;Lab9.c: 375: PR2 = 0b11111001;
  9894                           
  9895                           ;incstack = 0
  9896  00D976  0EF9               	movlw	249
  9897  00D978  6ECB               	movwf	4043,c	;volatile
  9898                           
  9899                           ;Lab9.c: 376: T2CON = 0b00000101;
  9900  00D97A  0E05               	movlw	5
  9901  00D97C  6ECA               	movwf	4042,c	;volatile
  9902                           
  9903                           ;Lab9.c: 377: CCPR2L = 0b01001010;
  9904  00D97E  0E4A               	movlw	74
  9905  00D980  6EBB               	movwf	4027,c	;volatile
  9906                           
  9907                           ;Lab9.c: 378: CCP2CON = 0b00111100;
  9908  00D982  0E3C               	movlw	60
  9909  00D984  6EBA               	movwf	4026,c	;volatile
  9910  00D986  0012               	return		;funcret
  9911  00D988                     __end_of_Activate_Buzzer:
  9912                           	opt stack 0
  9913                           tblptru	equ	0xFF8
  9914                           tblptrh	equ	0xFF7
  9915                           tblptrl	equ	0xFF6
  9916                           tablat	equ	0xFF5
  9917                           prodh	equ	0xFF4
  9918                           prodl	equ	0xFF3
  9919                           intcon	equ	0xFF2
  9920                           intcon2	equ	0xFF1
  9921                           postinc0	equ	0xFEE
  9922                           wreg	equ	0xFE8
  9923                           postdec1	equ	0xFE5
  9924                           fsr1l	equ	0xFE1
  9925                           indf2	equ	0xFDF
  9926                           postinc2	equ	0xFDE
  9927                           fsr2h	equ	0xFDA
  9928                           fsr2l	equ	0xFD9
  9929                           status	equ	0xFD8
  9930                           tblptru	equ	0xFF8
  9931                           tblptrh	equ	0xFF7
  9932                           tblptrl	equ	0xFF6
  9933                           tablat	equ	0xFF5
  9934                           prodh	equ	0xFF4
  9935                           prodl	equ	0xFF3
  9936                           intcon	equ	0xFF2
  9937                           intcon2	equ	0xFF1
  9938                           postinc0	equ	0xFEE
  9939                           wreg	equ	0xFE8
  9940                           postdec1	equ	0xFE5
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           fsr2h	equ	0xFDA
  9945                           fsr2l	equ	0xFD9
  9946                           status	equ	0xFD8
  9947                           
  9948                           	psect	rparam
  9949  0000                     tblptru	equ	0xFF8
  9950                           tblptrh	equ	0xFF7
  9951                           tblptrl	equ	0xFF6
  9952                           tablat	equ	0xFF5
  9953                           prodh	equ	0xFF4
  9954                           prodl	equ	0xFF3
  9955                           intcon	equ	0xFF2
  9956                           intcon2	equ	0xFF1
  9957                           postinc0	equ	0xFEE
  9958                           wreg	equ	0xFE8
  9959                           postdec1	equ	0xFE5
  9960                           fsr1l	equ	0xFE1
  9961                           indf2	equ	0xFDF
  9962                           postinc2	equ	0xFDE
  9963                           fsr2h	equ	0xFDA
  9964                           fsr2l	equ	0xFD9
  9965                           status	equ	0xFD8


Data Sizes:
    Strings     105
    Constant    475
    Data        35
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     120
    BANK0           128      0      31
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_PED_Control
    _Day_Mode->_Wait_N_Seconds
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  371501
                                             62 COMRAM     2     2      0
                           _Day_Mode
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  146129
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   51838
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3402
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1521
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1521
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  168151
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   67889
                                             60 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   21817
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   45982
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   24778
                                             57 COMRAM     3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2201
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1826
                                              8 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1559
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   22022
                                             59 COMRAM     3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   21729
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   19645
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7    8408
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     689
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     932
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     936
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      1F       5       24.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      78       1       94.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      97      34        0.0%
DATA                 0      0      97       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Mar 31 16:50:50 2021

                       drawCircle@f 001A                         drawCircle@r 0010  
                       drawCircle@x 001C                         drawCircle@y 001E  
         _Wait_One_Second_With_Beep D9C2                         _SSPSTATbits 000FC7  
                      drawCircle@x0 000C                        drawCircle@y0 000E  
                      ___awdiv@sign 0006                 ___wmul@multiplicand 0003  
          update_LCD_color@Circle_Y 0035                                 l200 ED98  
                               l115 DEC0                                 l125 D9A8  
                               l231 E68E                                 l232 E6B0  
                               l401 DC92                                 l402 DC98  
                               l410 DCD6                                 l403 DC9C  
                               l411 DCDC                                 l404 DCBE  
                               l412 DCE0                                 l228 E6B2  
                               l413 DD02                                 l229 E61E  
                               l175 E128                                 l191 EE42  
                               l239 F084                                 l408 DCD2  
                               l169 DB1C                                 l193 ED1C  
                               l257 EAE4                                 l273 E1B0  
                               l442 E5D6                                 l522 DF5A  
                               l531 DF9C                                 l436 ECEC  
                               l381 DD16                                 l454 DA00  
                               l534 DA94                                 l390 DD5A  
                               l374 DA4C                                 l526 DF74  
                               l383 DD1A                                 l527 DF76  
                               l384 DD20                                 l392 DD5E  
                               l528 DF80                                 l385 DD24  
                               l393 DD64                                 l377 DA6C  
                               l529 DF82                                 l386 DD46  
                               l394 DD68                                 l395 DD8A  
                               l740 E01E                                 l485 E44A  
                               l469 F69A                                 l478 EFC0  
                               l727 E246                                 l399 DC8E  
                               l752 DBBC                                 l842 E510  
                               l914 E872                                 l923 E2DC  
                               l853 E4E8                                 l917 E83E  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 003B  
                               _PR2 000FCB                   _Deactivate_Buzzer D944  
                               _dir 0076                                 _nbr 0069  
                               _txt 006B                      drawFastHLine@w 0009  
                    drawFastHLine@x 0012                      drawFastHLine@y 0008  
                      ___awmod@sign 0006             __end_of_update_LCD_misc F33A  
                               wreg 000FE8                  ??_Wait_Half_Second 0001  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 000D  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize DA96  
                      ___ftdiv@cntr 0016                        ___ftdiv@sign 001B  
                      __CFG_WDT$OFF 000000                      drawFastVLine@h 0009  
                              l1091 DBFA                                l3011 F23E  
                              l3003 F222                                l3101 DFF8  
                              l3021 F260                                l3015 F24C  
                              l3007 F230                                l3041 E1C8  
                              l3105 E004                                l3019 F25A  
                    drawFastVLine@x 0012                                l3053 E1F0  
                              l3109 E014                      drawFastVLine@y 0008  
                              l3055 E1FA                                l3047 E1DA  
                              l3231 E692                                l3215 E656  
                              l3073 E23C                                l3065 E220  
                              l3057 E202                                l3321 EE9E  
                              l3241 E6AC                                l3209 E5E8  
                              l3235 E69C                                l3227 E684  
                              l3069 E22C                                l3093 DFD0  
                              l3085 DFB4                                l2621 E0EA  
                              l2701 EE0E                                l3325 EEF4  
                              l3317 EE48                                l3253 E172  
                              l3095 DFDA                                l2631 E110  
                              l2703 EE36                                l3335 EFA4  
                              l3263 E198                                l3097 DFE2  
                              l3089 DFC2                                l2633 E11E  
                              l2617 E0B2                                l3281 F5C4  
                              l3273 F41A                                l3329 EF4C  
                              l3265 E1A6                                l3249 E13A  
                              l2651 DDB2                                l2715 DBC8  
                              l3291 E3E2                                l3451 DB2E  
                              l3435 DCA2                                l3443 DCE6  
                              l3419 DD2A                                l3427 DD6E  
                              l2731 E46C                                l2709 EE3E  
                              l2717 DBCE                                l2821 EB46  
                              l2805 EACA                                l3277 F4EE  
                              l2741 E4D0                                l2733 E478  
                              l2901 E2AC                                l3381 DF5E  
                              l3373 DF4A                                l2639 DAFE  
                              l2647 DD96                                l2671 ED18  
                              l2663 ECFE                                l3287 E38C  
                              l3447 DB24                                l2743 E4DC  
                              l2735 E498                                l2727 E45C  
                              l3623 EC16                                l3711 E592  
                              l2681 ED58                                l2673 ED20  
                              l3297 E43A                                l2825 EB98  
                              l2841 E7B0                                l3465 DAC6  
                              l3617 EBFC                                l3377 DF52  
                              l3369 DF40                                l2683 ED8C  
                              l2667 ED0A                                l3459 DB40  
                              l2755 E502                                l2739 E4B0  
                              l2843 E7CA                                l2907 E2D8  
                              l3475 DAE2                                l3643 EC66  
                              l2693 EDBA                                l2685 ED90  
                              l2677 ED28                                l2749 E4F0  
                              l3469 DAD0                                l3389 DF6C  
                              l2695 EDE2                                l2791 E77E  
                              l2783 E73A                                l2767 E6DC  
                              l2943 F06A                                l2847 E7D8  
                              l3719 E5B2                                l2793 E784  
                              l3665 ECC8                                l3649 EC80  
                              l2779 E720                                l2971 F15A  
                              l2867 E818                                l3659 ECAE  
                              l2877 E84C                                l2977 DB5A  
                              l2889 DB98                                l2897 E27A  
                              l2979 DB64                                l3983 E37E  
                              l3979 E372                                STR_1 FF96  
                              STR_2 FFE5                                STR_3 FFEB  
                              STR_4 FFEF                                STR_5 FFFD  
                              STR_6 FFCD                                STR_7 FFDE  
                              STR_8 FFC1                                STR_9 FFD7  
                              u1330 E0E0                                u2140 E168  
                              u2060 E616                                u2070 E64C  
                              u1620 E704                                u1480 EDF0  
                              u1721 E7A2                                u2540 E36C  
                              u1741 E7C0                                u2550 E36E  
                              u1850 F1F4                                u1860 F1F6  
                              _MODE 0067                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 0001  
                              _main E2DE                                _font FDBB  
                      ___ftpack@arg 0001                        ___ftpack@exp 0004  
                    ??_get_full_ADC 0003                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 0041  
                              _volt 0064                     drawFastHLine@hi 0010  
                   drawFastHLine@lo 0011            __end_of_update_LCD_color F69C  
          __end_of_update_LCD_count EFC2                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0000                     ??_drawFastHLine 000C  
                   ??_drawFastVLine 000C                        ___param_bank 000010  
                      _Act_Mode_Txt 0054           __end_of_Deactivate_Buzzer D94C  
                   drawFastVLine@hi 0010                     drawFastVLine@lo 0011  
                       _SW_EWLT_Txt 005A                         _SW_MODE_Txt 005E  
                             ?_main 0001                     __end_of___awdiv E248  
                   drawCircle@ddF_x 0016                               STR_10 FFF7  
                   drawCircle@ddF_y 0018                               STR_11 FFF3  
                             STR_12 FFAC                               STR_13 FFFD  
                             STR_14 FFFB                     __end_of___awmod E020  
                   __end_of___ftdiv E874                               _T0CON 000FD5  
                   ___awdiv@divisor 0003                               _T2CON 000FCA  
                             _T3CON 000FB1                     ___awdiv@counter 0005  
                   drawCircle@color 0012                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _SPBRG 000FAF                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 006D                        ?_PED_Control 003C  
                             _Rcmd1 E966                               _Rcmd3 E874  
                       _SW_NSLT_Txt 0060                       drawRect@color 001B  
                     ___awtoft@sign 000C                     __end_of_init_IO D9EE  
                             _font2 FEBA               fillCircleHelper@ddF_x 0021  
             fillCircleHelper@ddF_y 0023                   ??_Wait_One_Second 003D  
                     ___ftpack@sign 0005               fillCircleHelper@delta 001B  
             fillCircleHelper@color 001D                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 003B                    __end_of_Day_Mode ECEE  
                    _Wait_N_Seconds DAC0                     write_data@data_ 0003  
                   __initialization DC3A                        __end_of_main E388  
                      __end_of_font FEBA                    __end_of_Init_ADC D956  
                  __end_of_Rcmd2red DC3A                          _Night_Mode E512  
                  __end_of_Set_EWLT DD04                    __end_of_Set_NSLT DD8C  
                            ??_main 003F                       __activetblptr 000002  
             Wait_N_Seconds@seconds 003D                   __end_of_LCD_Reset D99A  
                      _SW_EWPED_Txt 005C           ??_TFT_GreenTab_Initialize 000D  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 003D  
                  ___awdiv@dividend 0001                    __end_of___awtoft DBBE  
                  __end_of___ftpack E512                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds DAEE                        _SW_NSPED_Txt 0062  
                  __end_of_delay_ms DEC8                              _Set_EW DC7C  
                            _Set_NS DD04                    __end_of_fillRect DDD6  
                  __end_of_drawChar EE44                    __end_of_drawRect DF2E  
                __size_of_OpenUSART 0070                              ___ftge E248  
          __size_of_Activate_Buzzer 0012                              ___wmul DA6E  
                         ??___awdiv 0005           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext E792                           ??___awmod 0005  
                         ??___ftdiv 0013                              _buffer 0080  
                            clear_0 DC40                              clear_1 DC4C  
                  ___awdiv@quotient 0007                     ___awmod@divisor 0003  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0005  
                      drawtext@size 0030                              _strcpy DB50  
                            _strlen DBBE                __end_of_get_full_ADC DA6E  
                         ??_init_IO 0001                        __pdataCOMRAM 0041  
__size_of_Wait_One_Second_With_Beep 0016                         Set_EW@color 0036  
                      __mediumconst FDBA                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                  __end_of_spiwrite D9AE                         Set_NS@color 0036  
                        __accesstop 0080             __end_of__initialization DC72  
                        ___ftge@ff1 0001                          ___ftge@ff2 0004  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 000D                          ___ftdiv@f2 0010  
                        ___ftdiv@f3 0017                          ___awtoft@c 0009  
                     __end_of_Rcmd1 EA76                       __end_of_Rcmd3 E966  
                    __pcstackCOMRAM 0001                       __end_of_font2 FF96  
                       ?_Night_Mode 0001                      drawPixel@color 0009  
            __size_of_write_command 0010                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0019                             ??_Rcmd1 000D  
                           ??_Rcmd3 000D                  __size_of_drawPixel 0030  
                 __end_of_OpenUSART DF9E                __size_of_PED_Control 0032  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
         __size_of_Wait_Half_Second 001A                     spiwrite@spidata 0002  
                         ?_Set_EWLT 0001                           ?_Set_NSLT 0001  
                 ?_update_LCD_color 0033                   ?_update_LCD_count 003A  
                           ?_Set_EW 0001                             ?_Set_NS 0001  
                __CFG_CCP2MX$PORTBE 000000                  ??_update_LCD_color 0034  
                ??_update_LCD_count 003B                             ?___ftge 0001  
                           ?___wmul 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA           update_LCD_PED_Count@count 003A  
                         ?___awtoft 0009                           ?___ftpack 0001  
                   _Wait_One_Second E020                          _fillCircle DE24  
                           ?_strcpy 0001                             ?_strlen 0001  
                 ??_Activate_Buzzer 0001                          _fillScreen DA08  
                        _drawCircle EFC2                          ??_Day_Mode 003F  
                         ?_delay_ms 0007                           ?_fillRect 0013  
         update_LCD_count@direction 003B                           ?_drawChar 001E  
                           _SSPCON1 000FC6                           ?_drawRect 0013  
                           _SSPSTAT 000FC7               __end_of_fillRectangle E6B4  
                         ?_drawtext 0029                             _SW_EWLT 006F  
                           _SW_MODE 0071                          ??_Init_ADC 0001  
                           _SW_NSLT 0072                          ??_Rcmd2red 0004  
               __size_of_Night_Mode 00C6                       _write_command D956  
                        ??_Set_EWLT 0036                          ??_Set_NSLT 0036  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0044                     __size_of_Set_NS 0044  
             __end_of_drawFastHLine E1B2                   __end_of_drawPixel DB1E  
             __end_of_drawFastVLine E12A                    _fillCircleHelper EA76  
                   __size_of___ftge 0096                             ___awdiv E1B2  
                           ___awmod DF9E                             ___ftdiv E792  
                   __size_of___wmul 0028               __size_of_get_full_ADC 0026  
                         ?_spiwrite 0001                             __pcinit DC3A  
                        ??___awtoft 000C                          ??___ftpack 0006  
                           __ramtop 1000                             __ptext0 E2DE  
                           __ptext1 D9AE                             __ptext2 DF2E  
                           __ptext3 D9D8                             __ptext4 E512  
                           __ptext5 F69C                             __ptext6 DA08  
                           __ptext7 E5D8                             __ptext8 DEC8  
                           __ptext9 E12A                   __end_of_init_UART D9C2  
                         _T0CONbits 000FD5                     __size_of_strcpy 0032  
                   __size_of_strlen 003E                             _init_IO D9D8  
                         _T3CONbits 000FB1                    ___awmod@dividend 0001  
                        ??_delay_ms 0009                       drawtext@_text 002A  
                     drawtext@color 002C                          ??_fillRect 0018  
                        ??_drawChar 0025                           _LCD_Reset D988  
                        ??_drawRect 001D                       _setAddrWindow DDD6  
                drawFastHLine@color 000A                          delay_ms@ms 0007  
              end_of_initialization DC72                          ??_drawtext 0031  
                    ?_write_command 0001                       __Lmediumconst FDBA  
                         _PED_Count 006E                        _get_full_ADC DA48  
                      PED_Control@i 003E       __size_of_update_LCD_PED_Count 00C4  
           __end_of_Wait_One_Second E0A2                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 0001  
                           strlen@s 0001                     fillCircle@color 0031  
                       ?_fillCircle 002B                           _PORTAbits 000F80  
                  drawtext@cursor_x 0039                    drawtext@cursor_y 0038  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0014                         ?_drawCircle 000C  
                        drawChar@bg 0022                           _TRISCbits 000F94  
                    ?_setAddrWindow 0004                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 003D                    drawtext@textsize 0033  
          __size_of_update_LCD_misc 01CA                          drawPixel@x 000B  
                        drawPixel@y 0008                    _Wait_Half_Second D9EE  
                       ___ftdiv@exp 001A                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 003C                  get_full_ADC@result 0005  
                    __end_of_Set_EW DCC0                      __end_of_Set_NS DD48  
                    __end_of___ftge E2DE                      __end_of___wmul DA96  
                     delay_ms@count 000B                          _write_data D966  
                     __pidataCOMRAM DA25                        ??_Night_Mode 003F  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 002E  
                    __end_of_strcpy DB82                      __end_of_strlen DBFC  
               start_initialization DC3A                   __size_of_Day_Mode 0140  
                   ??_write_command 0003                           _OpenUSART DF2E  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000A                  __end_of_Night_Mode E5D8  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 003E                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0036                            ??_Set_NS 0036  
                 __size_of_Set_EWLT 0044                     _Activate_Buzzer D976  
                 __size_of_Set_NSLT 0044                    ?_Wait_One_Second 0001  
                          ??___ftge 0007                            ??___wmul 0005  
                 update_LCD_misc@ch 003C                     setAddrWindow@x0 0007  
                   setAddrWindow@x1 0005                     setAddrWindow@y0 0004  
                   setAddrWindow@y1 0006                            ??_strcpy 0005  
                          ??_strlen 0003                        _PED_EW_Count 004E  
         __size_of_update_LCD_color 0362           __size_of_update_LCD_count 017E  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0064                       ??_PED_Control 003D  
                   ??_setAddrWindow 0007                        _PED_NS_Count 0051  
                       ??_LCD_Reset 000D            __end_of_fillCircleHelper EBAE  
                 __size_of_delay_ms 0052          ?_Wait_One_Second_With_Beep 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_OpenUSART 0001                   __size_of_drawRect 0066  
                 __size_of_drawtext 00DE                   ??_update_LCD_misc 003A  
   __end_of_TFT_GreenTab_Initialize DAC0                       __pmediumconst FDBA  
                          ?___awdiv 0001                            ?___awmod 0001  
                          ?___ftdiv 000D                           __tft_type 0074  
                         _direction 0077                  drawFastVLine@color 000A  
                       ?_write_data 0001                           _drawPixel DAEE  
                 __size_of_spiwrite 0014                            ?_init_IO 0001  
                 _Initialize_Screen F69C                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART D9AE  
                ?_Initialize_Screen 0001   __end_of_Wait_One_Second_With_Beep D9D8  
               __end_of_PED_Control DB50             __end_of_Activate_Buzzer D988  
                    ___wmul@product 0005                 ??_Initialize_Screen 003A  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 0045  
                         fillRect@h 0015                           fillRect@i 001C  
                         fillRect@w 0014                           fillRect@x 001B  
                         fillRect@y 0013                           drawChar@c 001F  
                         drawChar@i 0028                           drawChar@j 0027  
                      ??_fillCircle 0033                           drawChar@x 0026  
                         drawChar@y 001E                          ?_drawPixel 0008  
            __size_of_fillRectangle 00DC                            _NS_Count 004B  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second DA08  
                 ___wmul@multiplier 0001           __end_of_Initialize_Screen FDBA  
                      ??_fillScreen 0016                           drawRect@h 0019  
                         drawRect@w 0017                           drawRect@x 0013  
                         drawRect@y 0015                       _FlashingR_Txt 0056  
                     _FlashingS_Txt 0058                        ??_drawCircle 0014  
      __end_of_update_LCD_PED_Count E44C                           main@nStep 003F  
                          _SW_EWPED 0070               update_LCD_color@color 0033  
                          _Day_Mode EBAE                            _SW_NSPED 0073  
         update_LCD_color@direction 0034                          ?_init_UART 0001  
            __size_of_drawFastHLine 0088                           copy_data0 DC66  
                         drawtext@i 0036              __size_of_drawFastVLine 0088  
                         drawtext@x 0035                           drawtext@y 0029  
                          _Init_ADC D94C                   write_command@cmd_ 0003  
                       ??_OpenUSART 0003                            _Rcmd2red DBFC  
               __size_of_write_data 0010                     OpenUSART@config 0003  
                          _Set_EWLT DCC0                  __end_of_fillCircle DE76  
                          _Set_NSLT DD48                            __Hrparam 0000  
                __end_of_fillScreen DA24               update_LCD_count@count 003A  
                          __Lrparam 0000                  __end_of_drawCircle F170  
                  __size_of___awdiv 0096                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                            ___awtoft DB82  
                          ___ftpack E44C                    _update_LCD_color F33A  
                  _update_LCD_count EE44                    __size_of_init_IO 0016  
                       _PED_Control DB1E                            _delay_ms DE76  
                          __ptext10 DA96                            __ptext11 E874  
                          __ptext20 E020                            __ptext12 DBFC  
                          __ptext21 F170                            __ptext13 E966  
                          __ptext30 DCC0                            __ptext22 DA48  
                          __ptext14 D988                            __ptext31 DC7C  
                          __ptext23 E248                            __ptext15 DE76  
                          __ptext40 ECEE                            __ptext32 F33A  
                          __ptext24 E792                            __ptext16 D94C  
                          __ptext41 DD8C                            __ptext33 DE24  
                          __ptext25 DB82                            __ptext17 EBAE  
                          __ptext50 E1B2                            __ptext42 E0A2  
                          __ptext34 EA76                            __ptext26 E44C  
                          __ptext18 DAC0                            __ptext51 D9C2  
                          __ptext43 DAEE                            __ptext35 EFC2  
                          __ptext27 DB50                            __ptext19 EE44  
                          __ptext52 D9EE                            __ptext44 DDD6  
                          __ptext36 DB1E                            __ptext28 DD48  
                          __ptext53 D944                            __ptext45 D966  
                          __ptext37 E388                            __ptext29 DD04  
                          __ptext54 D976                            __ptext46 D956  
                          __ptext38 E6B4                            __ptext47 D99A  
                          __ptext39 DBBE                            __ptext48 DA6E  
                          __ptext49 DF9E                            _fillRect DD8C  
                          _drawChar ECEE                            _drawRect DEC8  
  __size_of_TFT_GreenTab_Initialize 002A                            _colstart 0075  
                          _drawtext E6B4                          strcpy@from 0003  
                     _fillRectangle E5D8                    ?_Activate_Buzzer 0001  
                     __size_of_main 00AA                     fillRectangle@hi 0011  
                   fillRectangle@lo 0012                       _drawFastHLine E12A  
                     _drawFastVLine E0A2                            _spiwrite D99A  
                       ??_drawPixel 000B                            _rowstart 0078  
                fillCircleHelper@x0 0013                  fillCircleHelper@y0 0015  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 0001                         ??_init_UART 0004  
                     Set_EWLT@color 0036                          _EWLT_Count 0042  
                 ?_fillCircleHelper 0013                           spiwrite@x 0001  
       ??_Wait_One_Second_With_Beep 0001                     _update_LCD_misc F170  
                    ?_fillRectangle 0008                  ??_fillCircleHelper 001F  
             __end_of_write_command D966                     fillScreen@color 0014  
              update_LCD_misc@nStep 003A                _update_LCD_PED_Count E388  
           __size_of_Wait_N_Seconds 002E                        fillCircle@x0 002B  
                      fillCircle@y0 002D                      ?_drawFastHLine 0008  
                    fillRectangle@h 000A                      fillRectangle@w 0009  
                    fillRectangle@x 0013                      fillRectangle@y 0008  
                    ?_drawFastVLine 0008                   fillCircleHelper@f 0025  
                 fillCircleHelper@r 0017                   fillCircleHelper@x 0027  
                 fillCircleHelper@y 0029                        ??_write_data 0003  
                     fillRect@color 0016            __size_of_Wait_One_Second 0082  
                          strcpy@cp 0005                            strlen@cp 0005  
                          strcpy@to 0001                       Set_NSLT@color 0036  
                        _NSLT_Count 0048                         fillCircle@r 002F  
             __end_of_setAddrWindow DE24                  fillRectangle@color 000B  
                     drawChar@color 0020                  __end_of_write_data D976  
                      drawChar@line 0025                       ?_get_full_ADC 0001  
                      drawChar@size 0024               ?_update_LCD_PED_Count 003A  
