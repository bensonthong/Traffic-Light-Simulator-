

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Apr 11 14:48:11 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  00252A                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _wrap
    85  00252A  01                 	db	1
    86                           
    87                           ;initializer for _EWLT_Count
    88  00252B  30                 	db	48
    89  00252C  30                 	db	48
    90  00252D  00                 	db	0
    91                           
    92                           ;initializer for _EW_Count
    93  00252E  30                 	db	48
    94  00252F  30                 	db	48
    95  002530  00                 	db	0
    96                           
    97                           ;initializer for _NS_Count
    98  002531  30                 	db	48
    99  002532  30                 	db	48
   100  002533  00                 	db	0
   101                           
   102                           ;initializer for _Act_Mode_Txt
   103  002534  44                 	db	68
   104  002535  00                 	db	0
   105                           
   106                           ;initializer for _FlashingR_Txt
   107  002536  30                 	db	48
   108  002537  00                 	db	0
   109                           
   110                           ;initializer for _FlashingS_Txt
   111  002538  30                 	db	48
   112  002539  00                 	db	0
   113                           
   114                           ;initializer for _SW_EWLT_Txt
   115  00253A  30                 	db	48
   116  00253B  00                 	db	0
   117                           
   118                           ;initializer for _SW_EWPED_Txt
   119  00253C  30                 	db	48
   120  00253D  00                 	db	0
   121                           
   122                           ;initializer for _SW_MODE_Txt
   123  00253E  44                 	db	68
   124  00253F  00                 	db	0
   125                           
   126                           ;initializer for _SW_NSLT_Txt
   127  002540  30                 	db	48
   128  002541  00                 	db	0
   129                           
   130                           ;initializer for _SW_NSPED_Txt
   131  002542  30                 	db	48
   132  002543  00                 	db	0
   133                           
   134                           	psect	idataBANK0
   135  002628                     __pidataBANK0:
   136                           	opt stack 0
   137                           
   138                           ;initializer for _NSLT_Count
   139  002628  30                 	db	48
   140  002629  30                 	db	48
   141  00262A  00                 	db	0
   142                           
   143                           ;initializer for _PED_EW_Count
   144  00262B  30                 	db	48
   145  00262C  30                 	db	48
   146  00262D  00                 	db	0
   147                           
   148                           ;initializer for _PED_NS_Count
   149  00262E  30                 	db	48
   150  00262F  30                 	db	48
   151  002630  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  00FDBA                     __pmediumconst:
   155                           	opt stack 0
   156  00FDBA  00                 	db	0
   157  00FDBB                     _font:
   158                           	opt stack 0
   159  00FDBB  00                 	db	0
   160  00FDBC  00                 	db	0
   161  00FDBD  00                 	db	0
   162  00FDBE  00                 	db	0
   163  00FDBF  00                 	db	0
   164  00FDC0  00                 	db	0
   165  00FDC1  00                 	db	0
   166  00FDC2  5F                 	db	95
   167  00FDC3  00                 	db	0
   168  00FDC4  00                 	db	0
   169  00FDC5  00                 	db	0
   170  00FDC6  07                 	db	7
   171  00FDC7  00                 	db	0
   172  00FDC8  07                 	db	7
   173  00FDC9  00                 	db	0
   174  00FDCA  14                 	db	20
   175  00FDCB  7F                 	db	127
   176  00FDCC  14                 	db	20
   177  00FDCD  7F                 	db	127
   178  00FDCE  14                 	db	20
   179  00FDCF  24                 	db	36
   180  00FDD0  2A                 	db	42
   181  00FDD1  7F                 	db	127
   182  00FDD2  2A                 	db	42
   183  00FDD3  12                 	db	18
   184  00FDD4  23                 	db	35
   185  00FDD5  13                 	db	19
   186  00FDD6  08                 	db	8
   187  00FDD7  64                 	db	100
   188  00FDD8  62                 	db	98
   189  00FDD9  36                 	db	54
   190  00FDDA  49                 	db	73
   191  00FDDB  56                 	db	86
   192  00FDDC  20                 	db	32
   193  00FDDD  50                 	db	80
   194  00FDDE  00                 	db	0
   195  00FDDF  08                 	db	8
   196  00FDE0  07                 	db	7
   197  00FDE1  03                 	db	3
   198  00FDE2  00                 	db	0
   199  00FDE3  00                 	db	0
   200  00FDE4  1C                 	db	28
   201  00FDE5  22                 	db	34
   202  00FDE6  41                 	db	65
   203  00FDE7  00                 	db	0
   204  00FDE8  00                 	db	0
   205  00FDE9  41                 	db	65
   206  00FDEA  22                 	db	34
   207  00FDEB  1C                 	db	28
   208  00FDEC  00                 	db	0
   209  00FDED  2A                 	db	42
   210  00FDEE  1C                 	db	28
   211  00FDEF  7F                 	db	127
   212  00FDF0  1C                 	db	28
   213  00FDF1  2A                 	db	42
   214  00FDF2  08                 	db	8
   215  00FDF3  08                 	db	8
   216  00FDF4  3E                 	db	62
   217  00FDF5  08                 	db	8
   218  00FDF6  08                 	db	8
   219  00FDF7  00                 	db	0
   220  00FDF8  80                 	db	128
   221  00FDF9  70                 	db	112
   222  00FDFA  30                 	db	48
   223  00FDFB  00                 	db	0
   224  00FDFC  08                 	db	8
   225  00FDFD  08                 	db	8
   226  00FDFE  08                 	db	8
   227  00FDFF  08                 	db	8
   228  00FE00  08                 	db	8
   229  00FE01  00                 	db	0
   230  00FE02  00                 	db	0
   231  00FE03  60                 	db	96
   232  00FE04  60                 	db	96
   233  00FE05  00                 	db	0
   234  00FE06  20                 	db	32
   235  00FE07  10                 	db	16
   236  00FE08  08                 	db	8
   237  00FE09  04                 	db	4
   238  00FE0A  02                 	db	2
   239  00FE0B  3E                 	db	62
   240  00FE0C  51                 	db	81
   241  00FE0D  49                 	db	73
   242  00FE0E  45                 	db	69
   243  00FE0F  3E                 	db	62
   244  00FE10  00                 	db	0
   245  00FE11  42                 	db	66
   246  00FE12  7F                 	db	127
   247  00FE13  40                 	db	64
   248  00FE14  00                 	db	0
   249  00FE15  72                 	db	114
   250  00FE16  49                 	db	73
   251  00FE17  49                 	db	73
   252  00FE18  49                 	db	73
   253  00FE19  46                 	db	70
   254  00FE1A  21                 	db	33
   255  00FE1B  41                 	db	65
   256  00FE1C  49                 	db	73
   257  00FE1D  4D                 	db	77
   258  00FE1E  33                 	db	51
   259  00FE1F  18                 	db	24
   260  00FE20  14                 	db	20
   261  00FE21  12                 	db	18
   262  00FE22  7F                 	db	127
   263  00FE23  10                 	db	16
   264  00FE24  27                 	db	39
   265  00FE25  45                 	db	69
   266  00FE26  45                 	db	69
   267  00FE27  45                 	db	69
   268  00FE28  39                 	db	57
   269  00FE29  3C                 	db	60
   270  00FE2A  4A                 	db	74
   271  00FE2B  49                 	db	73
   272  00FE2C  49                 	db	73
   273  00FE2D  31                 	db	49
   274  00FE2E  41                 	db	65
   275  00FE2F  21                 	db	33
   276  00FE30  11                 	db	17
   277  00FE31  09                 	db	9
   278  00FE32  07                 	db	7
   279  00FE33  36                 	db	54
   280  00FE34  49                 	db	73
   281  00FE35  49                 	db	73
   282  00FE36  49                 	db	73
   283  00FE37  36                 	db	54
   284  00FE38  46                 	db	70
   285  00FE39  49                 	db	73
   286  00FE3A  49                 	db	73
   287  00FE3B  29                 	db	41
   288  00FE3C  1E                 	db	30
   289  00FE3D  00                 	db	0
   290  00FE3E  00                 	db	0
   291  00FE3F  14                 	db	20
   292  00FE40  00                 	db	0
   293  00FE41  00                 	db	0
   294  00FE42  00                 	db	0
   295  00FE43  40                 	db	64
   296  00FE44  34                 	db	52
   297  00FE45  00                 	db	0
   298  00FE46  00                 	db	0
   299  00FE47  00                 	db	0
   300  00FE48  08                 	db	8
   301  00FE49  14                 	db	20
   302  00FE4A  22                 	db	34
   303  00FE4B  41                 	db	65
   304  00FE4C  14                 	db	20
   305  00FE4D  14                 	db	20
   306  00FE4E  14                 	db	20
   307  00FE4F  14                 	db	20
   308  00FE50  14                 	db	20
   309  00FE51  00                 	db	0
   310  00FE52  41                 	db	65
   311  00FE53  22                 	db	34
   312  00FE54  14                 	db	20
   313  00FE55  08                 	db	8
   314  00FE56  02                 	db	2
   315  00FE57  01                 	db	1
   316  00FE58  59                 	db	89
   317  00FE59  09                 	db	9
   318  00FE5A  06                 	db	6
   319  00FE5B  3E                 	db	62
   320  00FE5C  41                 	db	65
   321  00FE5D  5D                 	db	93
   322  00FE5E  59                 	db	89
   323  00FE5F  4E                 	db	78
   324  00FE60  7C                 	db	124
   325  00FE61  12                 	db	18
   326  00FE62  11                 	db	17
   327  00FE63  12                 	db	18
   328  00FE64  7C                 	db	124
   329  00FE65  7F                 	db	127
   330  00FE66  49                 	db	73
   331  00FE67  49                 	db	73
   332  00FE68  49                 	db	73
   333  00FE69  36                 	db	54
   334  00FE6A  3E                 	db	62
   335  00FE6B  41                 	db	65
   336  00FE6C  41                 	db	65
   337  00FE6D  41                 	db	65
   338  00FE6E  22                 	db	34
   339  00FE6F  7F                 	db	127
   340  00FE70  41                 	db	65
   341  00FE71  41                 	db	65
   342  00FE72  41                 	db	65
   343  00FE73  3E                 	db	62
   344  00FE74  7F                 	db	127
   345  00FE75  49                 	db	73
   346  00FE76  49                 	db	73
   347  00FE77  49                 	db	73
   348  00FE78  41                 	db	65
   349  00FE79  7F                 	db	127
   350  00FE7A  09                 	db	9
   351  00FE7B  09                 	db	9
   352  00FE7C  09                 	db	9
   353  00FE7D  01                 	db	1
   354  00FE7E  3E                 	db	62
   355  00FE7F  41                 	db	65
   356  00FE80  41                 	db	65
   357  00FE81  51                 	db	81
   358  00FE82  73                 	db	115
   359  00FE83  7F                 	db	127
   360  00FE84  08                 	db	8
   361  00FE85  08                 	db	8
   362  00FE86  08                 	db	8
   363  00FE87  7F                 	db	127
   364  00FE88  00                 	db	0
   365  00FE89  41                 	db	65
   366  00FE8A  7F                 	db	127
   367  00FE8B  41                 	db	65
   368  00FE8C  00                 	db	0
   369  00FE8D  20                 	db	32
   370  00FE8E  40                 	db	64
   371  00FE8F  41                 	db	65
   372  00FE90  3F                 	db	63
   373  00FE91  01                 	db	1
   374  00FE92  7F                 	db	127
   375  00FE93  08                 	db	8
   376  00FE94  14                 	db	20
   377  00FE95  22                 	db	34
   378  00FE96  41                 	db	65
   379  00FE97  7F                 	db	127
   380  00FE98  40                 	db	64
   381  00FE99  40                 	db	64
   382  00FE9A  40                 	db	64
   383  00FE9B  40                 	db	64
   384  00FE9C  7F                 	db	127
   385  00FE9D  02                 	db	2
   386  00FE9E  1C                 	db	28
   387  00FE9F  02                 	db	2
   388  00FEA0  7F                 	db	127
   389  00FEA1  7F                 	db	127
   390  00FEA2  04                 	db	4
   391  00FEA3  08                 	db	8
   392  00FEA4  10                 	db	16
   393  00FEA5  7F                 	db	127
   394  00FEA6  3E                 	db	62
   395  00FEA7  41                 	db	65
   396  00FEA8  41                 	db	65
   397  00FEA9  41                 	db	65
   398  00FEAA  3E                 	db	62
   399  00FEAB  7F                 	db	127
   400  00FEAC  09                 	db	9
   401  00FEAD  09                 	db	9
   402  00FEAE  09                 	db	9
   403  00FEAF  06                 	db	6
   404  00FEB0  3E                 	db	62
   405  00FEB1  41                 	db	65
   406  00FEB2  51                 	db	81
   407  00FEB3  21                 	db	33
   408  00FEB4  5E                 	db	94
   409  00FEB5  7F                 	db	127
   410  00FEB6  09                 	db	9
   411  00FEB7  19                 	db	25
   412  00FEB8  29                 	db	41
   413  00FEB9  46                 	db	70
   414  00FEBA                     __end_of_font:
   415                           	opt stack 0
   416  00FEBA                     _font2:
   417                           	opt stack 0
   418  00FEBA  26                 	db	38
   419  00FEBB  49                 	db	73
   420  00FEBC  49                 	db	73
   421  00FEBD  49                 	db	73
   422  00FEBE  32                 	db	50
   423  00FEBF  03                 	db	3
   424  00FEC0  01                 	db	1
   425  00FEC1  7F                 	db	127
   426  00FEC2  01                 	db	1
   427  00FEC3  03                 	db	3
   428  00FEC4  3F                 	db	63
   429  00FEC5  40                 	db	64
   430  00FEC6  40                 	db	64
   431  00FEC7  40                 	db	64
   432  00FEC8  3F                 	db	63
   433  00FEC9  1F                 	db	31
   434  00FECA  20                 	db	32
   435  00FECB  40                 	db	64
   436  00FECC  20                 	db	32
   437  00FECD  1F                 	db	31
   438  00FECE  3F                 	db	63
   439  00FECF  40                 	db	64
   440  00FED0  38                 	db	56
   441  00FED1  40                 	db	64
   442  00FED2  3F                 	db	63
   443  00FED3  63                 	db	99
   444  00FED4  14                 	db	20
   445  00FED5  08                 	db	8
   446  00FED6  14                 	db	20
   447  00FED7  63                 	db	99
   448  00FED8  03                 	db	3
   449  00FED9  04                 	db	4
   450  00FEDA  78                 	db	120
   451  00FEDB  04                 	db	4
   452  00FEDC  03                 	db	3
   453  00FEDD  61                 	db	97
   454  00FEDE  59                 	db	89
   455  00FEDF  49                 	db	73
   456  00FEE0  4D                 	db	77
   457  00FEE1  43                 	db	67
   458  00FEE2  00                 	db	0
   459  00FEE3  7F                 	db	127
   460  00FEE4  41                 	db	65
   461  00FEE5  41                 	db	65
   462  00FEE6  41                 	db	65
   463  00FEE7  02                 	db	2
   464  00FEE8  04                 	db	4
   465  00FEE9  08                 	db	8
   466  00FEEA  10                 	db	16
   467  00FEEB  20                 	db	32
   468  00FEEC  00                 	db	0
   469  00FEED  41                 	db	65
   470  00FEEE  41                 	db	65
   471  00FEEF  41                 	db	65
   472  00FEF0  7F                 	db	127
   473  00FEF1  04                 	db	4
   474  00FEF2  02                 	db	2
   475  00FEF3  01                 	db	1
   476  00FEF4  02                 	db	2
   477  00FEF5  04                 	db	4
   478  00FEF6  40                 	db	64
   479  00FEF7  40                 	db	64
   480  00FEF8  40                 	db	64
   481  00FEF9  40                 	db	64
   482  00FEFA  40                 	db	64
   483  00FEFB  00                 	db	0
   484  00FEFC  03                 	db	3
   485  00FEFD  07                 	db	7
   486  00FEFE  08                 	db	8
   487  00FEFF  00                 	db	0
   488  00FF00  20                 	db	32
   489  00FF01  54                 	db	84
   490  00FF02  54                 	db	84
   491  00FF03  78                 	db	120
   492  00FF04  40                 	db	64
   493  00FF05  7F                 	db	127
   494  00FF06  28                 	db	40
   495  00FF07  44                 	db	68
   496  00FF08  44                 	db	68
   497  00FF09  38                 	db	56
   498  00FF0A  38                 	db	56
   499  00FF0B  44                 	db	68
   500  00FF0C  44                 	db	68
   501  00FF0D  44                 	db	68
   502  00FF0E  28                 	db	40
   503  00FF0F  38                 	db	56
   504  00FF10  44                 	db	68
   505  00FF11  44                 	db	68
   506  00FF12  28                 	db	40
   507  00FF13  7F                 	db	127
   508  00FF14  38                 	db	56
   509  00FF15  54                 	db	84
   510  00FF16  54                 	db	84
   511  00FF17  54                 	db	84
   512  00FF18  18                 	db	24
   513  00FF19  00                 	db	0
   514  00FF1A  08                 	db	8
   515  00FF1B  7E                 	db	126
   516  00FF1C  09                 	db	9
   517  00FF1D  02                 	db	2
   518  00FF1E  18                 	db	24
   519  00FF1F  A4                 	db	164
   520  00FF20  A4                 	db	164
   521  00FF21  9C                 	db	156
   522  00FF22  78                 	db	120
   523  00FF23  7F                 	db	127
   524  00FF24  08                 	db	8
   525  00FF25  04                 	db	4
   526  00FF26  04                 	db	4
   527  00FF27  78                 	db	120
   528  00FF28  00                 	db	0
   529  00FF29  44                 	db	68
   530  00FF2A  7D                 	db	125
   531  00FF2B  40                 	db	64
   532  00FF2C  00                 	db	0
   533  00FF2D  20                 	db	32
   534  00FF2E  40                 	db	64
   535  00FF2F  40                 	db	64
   536  00FF30  3D                 	db	61
   537  00FF31  00                 	db	0
   538  00FF32  7F                 	db	127
   539  00FF33  10                 	db	16
   540  00FF34  28                 	db	40
   541  00FF35  44                 	db	68
   542  00FF36  00                 	db	0
   543  00FF37  00                 	db	0
   544  00FF38  41                 	db	65
   545  00FF39  7F                 	db	127
   546  00FF3A  40                 	db	64
   547  00FF3B  00                 	db	0
   548  00FF3C  7C                 	db	124
   549  00FF3D  04                 	db	4
   550  00FF3E  78                 	db	120
   551  00FF3F  04                 	db	4
   552  00FF40  78                 	db	120
   553  00FF41  7C                 	db	124
   554  00FF42  08                 	db	8
   555  00FF43  04                 	db	4
   556  00FF44  04                 	db	4
   557  00FF45  78                 	db	120
   558  00FF46  38                 	db	56
   559  00FF47  44                 	db	68
   560  00FF48  44                 	db	68
   561  00FF49  44                 	db	68
   562  00FF4A  38                 	db	56
   563  00FF4B  FC                 	db	252
   564  00FF4C  18                 	db	24
   565  00FF4D  24                 	db	36
   566  00FF4E  24                 	db	36
   567  00FF4F  18                 	db	24
   568  00FF50  18                 	db	24
   569  00FF51  24                 	db	36
   570  00FF52  24                 	db	36
   571  00FF53  18                 	db	24
   572  00FF54  FC                 	db	252
   573  00FF55  7C                 	db	124
   574  00FF56  08                 	db	8
   575  00FF57  04                 	db	4
   576  00FF58  04                 	db	4
   577  00FF59  08                 	db	8
   578  00FF5A  48                 	db	72
   579  00FF5B  54                 	db	84
   580  00FF5C  54                 	db	84
   581  00FF5D  54                 	db	84
   582  00FF5E  24                 	db	36
   583  00FF5F  04                 	db	4
   584  00FF60  04                 	db	4
   585  00FF61  3F                 	db	63
   586  00FF62  44                 	db	68
   587  00FF63  24                 	db	36
   588  00FF64  3C                 	db	60
   589  00FF65  40                 	db	64
   590  00FF66  40                 	db	64
   591  00FF67  20                 	db	32
   592  00FF68  7C                 	db	124
   593  00FF69  1C                 	db	28
   594  00FF6A  20                 	db	32
   595  00FF6B  40                 	db	64
   596  00FF6C  20                 	db	32
   597  00FF6D  1C                 	db	28
   598  00FF6E  3C                 	db	60
   599  00FF6F  40                 	db	64
   600  00FF70  30                 	db	48
   601  00FF71  40                 	db	64
   602  00FF72  3C                 	db	60
   603  00FF73  44                 	db	68
   604  00FF74  28                 	db	40
   605  00FF75  10                 	db	16
   606  00FF76  28                 	db	40
   607  00FF77  44                 	db	68
   608  00FF78  4C                 	db	76
   609  00FF79  90                 	db	144
   610  00FF7A  90                 	db	144
   611  00FF7B  90                 	db	144
   612  00FF7C  7C                 	db	124
   613  00FF7D  44                 	db	68
   614  00FF7E  64                 	db	100
   615  00FF7F  54                 	db	84
   616  00FF80  4C                 	db	76
   617  00FF81  44                 	db	68
   618  00FF82  00                 	db	0
   619  00FF83  08                 	db	8
   620  00FF84  36                 	db	54
   621  00FF85  41                 	db	65
   622  00FF86  00                 	db	0
   623  00FF87  00                 	db	0
   624  00FF88  00                 	db	0
   625  00FF89  77                 	db	119
   626  00FF8A  00                 	db	0
   627  00FF8B  00                 	db	0
   628  00FF8C  00                 	db	0
   629  00FF8D  41                 	db	65
   630  00FF8E  36                 	db	54
   631  00FF8F  08                 	db	8
   632  00FF90  00                 	db	0
   633  00FF91  02                 	db	2
   634  00FF92  01                 	db	1
   635  00FF93  02                 	db	2
   636  00FF94  04                 	db	4
   637  00FF95  02                 	db	2
   638  00FF96                     __end_of_font2:
   639                           	opt stack 0
   640  0000                     _ADCON0	set	4034
   641  0000                     _ADCON0bits	set	4034
   642  0000                     _ADCON1	set	4033
   643  0000                     _ADCON2	set	4032
   644  0000                     _ADRESH	set	4036
   645  0000                     _ADRESL	set	4035
   646  0000                     _CCP2CON	set	4026
   647  0000                     _CCPR2L	set	4027
   648  0000                     _INTCON2bits	set	4081
   649  0000                     _INTCON3bits	set	4080
   650  0000                     _INTCONbits	set	4082
   651  0000                     _OSCCON	set	4051
   652  0000                     _PIE1bits	set	3997
   653  0000                     _PIR1bits	set	3998
   654  0000                     _PIR2bits	set	4001
   655  0000                     _PORTAbits	set	3968
   656  0000                     _PORTBbits	set	3969
   657  0000                     _PORTCbits	set	3970
   658  0000                     _PORTDbits	set	3971
   659  0000                     _PORTEbits	set	3972
   660  0000                     _PR2	set	4043
   661  0000                     _RCSTA	set	4011
   662  0000                     _RCSTAbits	set	4011
   663  0000                     _SPBRG	set	4015
   664  0000                     _SPBRGH	set	4016
   665  0000                     _SSPBUF	set	4041
   666  0000                     _SSPCON1	set	4038
   667  0000                     _SSPSTAT	set	4039
   668  0000                     _SSPSTATbits	set	4039
   669  0000                     _T0CON	set	4053
   670  0000                     _T0CONbits	set	4053
   671  0000                     _T2CON	set	4042
   672  0000                     _T3CON	set	4017
   673  0000                     _T3CONbits	set	4017
   674  0000                     _TMR0H	set	4055
   675  0000                     _TMR0L	set	4054
   676  0000                     _TRISA	set	3986
   677  0000                     _TRISB	set	3987
   678  0000                     _TRISC	set	3988
   679  0000                     _TRISCbits	set	3988
   680  0000                     _TRISD	set	3989
   681  0000                     _TRISE	set	3990
   682  0000                     _TXREG	set	4013
   683  0000                     _TXSTA	set	4012
   684  0000                     _TXSTAbits	set	4012
   685  0000                     _RBPU	set	32655
   686  0000                     _TRMT	set	32097
   687  00FF96                     STR_1:
   688  00FF96  45                 	db	69	;'E'
   689  00FF97  43                 	db	67	;'C'
   690  00FF98  45                 	db	69	;'E'
   691  00FF99  33                 	db	51	;'3'
   692  00FF9A  33                 	db	51	;'3'
   693  00FF9B  30                 	db	48	;'0'
   694  00FF9C  31                 	db	49	;'1'
   695  00FF9D  4C                 	db	76	;'L'
   696  00FF9E  20                 	db	32
   697  00FF9F  53                 	db	83	;'S'
   698  00FFA0  70                 	db	112	;'p'
   699  00FFA1  72                 	db	114	;'r'
   700  00FFA2  69                 	db	105	;'i'
   701  00FFA3  6E                 	db	110	;'n'
   702  00FFA4  67                 	db	103	;'g'
   703  00FFA5  20                 	db	32
   704  00FFA6  32                 	db	50	;'2'
   705  00FFA7  31                 	db	49	;'1'
   706  00FFA8  2D                 	db	45
   707  00FFA9  53                 	db	83	;'S'
   708  00FFAA  31                 	db	49	;'1'
   709  00FFAB  00                 	db	0
   710  00FFAC                     STR_12:
   711  00FFAC  45                 	db	69	;'E'
   712  00FFAD  57                 	db	87	;'W'
   713  00FFAE  50                 	db	80	;'P'
   714  00FFAF  20                 	db	32
   715  00FFB0  45                 	db	69	;'E'
   716  00FFB1  57                 	db	87	;'W'
   717  00FFB2  4C                 	db	76	;'L'
   718  00FFB3  54                 	db	84	;'T'
   719  00FFB4  20                 	db	32
   720  00FFB5  4E                 	db	78	;'N'
   721  00FFB6  53                 	db	83	;'S'
   722  00FFB7  50                 	db	80	;'P'
   723  00FFB8  20                 	db	32
   724  00FFB9  4E                 	db	78	;'N'
   725  00FFBA  53                 	db	83	;'S'
   726  00FFBB  4C                 	db	76	;'L'
   727  00FFBC  54                 	db	84	;'T'
   728  00FFBD  20                 	db	32
   729  00FFBE  4D                 	db	77	;'M'
   730  00FFBF  44                 	db	68	;'D'
   731  00FFC0  00                 	db	0
   732  00FFC1                     STR_8:
   733  00FFC1  4E                 	db	78	;'N'
   734  00FFC2  4F                 	db	79	;'O'
   735  00FFC3  52                 	db	82	;'R'
   736  00FFC4  54                 	db	84	;'T'
   737  00FFC5  48                 	db	72	;'H'
   738  00FFC6  2F                 	db	47
   739  00FFC7  53                 	db	83	;'S'
   740  00FFC8  4F                 	db	79	;'O'
   741  00FFC9  55                 	db	85	;'U'
   742  00FFCA  54                 	db	84	;'T'
   743  00FFCB  48                 	db	72	;'H'
   744  00FFCC  00                 	db	0
   745  00FFCD                     STR_6:
   746  00FFCD  45                 	db	69	;'E'
   747  00FFCE  41                 	db	65	;'A'
   748  00FFCF  53                 	db	83	;'S'
   749  00FFD0  54                 	db	84	;'T'
   750  00FFD1  2F                 	db	47
   751  00FFD2  57                 	db	87	;'W'
   752  00FFD3  45                 	db	69	;'E'
   753  00FFD4  53                 	db	83	;'S'
   754  00FFD5  54                 	db	84	;'T'
   755  00FFD6  00                 	db	0
   756  00FFD7                     STR_9:
   757  00FFD7  4E                 	db	78	;'N'
   758  00FFD8  2F                 	db	47
   759  00FFD9  53                 	db	83	;'S'
   760  00FFDA  20                 	db	32
   761  00FFDB  4C                 	db	76	;'L'
   762  00FFDC  54                 	db	84	;'T'
   763  00FFDD  00                 	db	0
   764  00FFDE                     STR_7:
   765  00FFDE  45                 	db	69	;'E'
   766  00FFDF  2F                 	db	47
   767  00FFE0  57                 	db	87	;'W'
   768  00FFE1  20                 	db	32
   769  00FFE2  4C                 	db	76	;'L'
   770  00FFE3  54                 	db	84	;'T'
   771  00FFE4  00                 	db	0
   772  00FFE5                     STR_2:
   773  00FFE5  4D                 	db	77	;'M'
   774  00FFE6  6F                 	db	111	;'o'
   775  00FFE7  64                 	db	100	;'d'
   776  00FFE8  65                 	db	101	;'e'
   777  00FFE9  3A                 	db	58	;':'
   778  00FFEA  00                 	db	0
   779  00FFEB                     STR_3:
   780  00FFEB  46                 	db	70	;'F'
   781  00FFEC  52                 	db	82	;'R'
   782  00FFED  3A                 	db	58	;':'
   783  00FFEE  00                 	db	0
   784  00FFEF                     STR_4:
   785  00FFEF  46                 	db	70	;'F'
   786  00FFF0  53                 	db	83	;'S'
   787  00FFF1  3A                 	db	58	;':'
   788  00FFF2  00                 	db	0
   789  00FFF3                     STR_11:
   790  00FFF3  50                 	db	80	;'P'
   791  00FFF4  4E                 	db	78	;'N'
   792  00FFF5  53                 	db	83	;'S'
   793  00FFF6  00                 	db	0
   794  00FFF7                     STR_10:
   795  00FFF7  50                 	db	80	;'P'
   796  00FFF8  45                 	db	69	;'E'
   797  00FFF9  57                 	db	87	;'W'
   798  00FFFA  00                 	db	0
   799  00FFFB                     STR_14:
   800  00FFFB  20                 	db	32
   801  00FFFC  00                 	db	0
   802  00FFFD                     STR_5:
   803  00FFFD  2A                 	db	42
   804  00FFFE  00                 	db	0
   805  0000                     
   806                           ; #config settings
   807  00FFFF  00                 	db	0	; dummy byte at the end
   808  0000                     
   809                           	psect	cinit
   810  001FC6                     __pcinit:
   811                           	opt stack 0
   812  001FC6                     start_initialization:
   813                           	opt stack 0
   814  001FC6                     __initialization:
   815                           	opt stack 0
   816                           
   817                           ; Clear objects allocated to BANK0 (33 bytes)
   818  001FC6  EE00  F080         	lfsr	0,__pbssBANK0
   819  001FCA  0E21               	movlw	33
   820  001FCC                     clear_0:
   821  001FCC  6AEE               	clrf	postinc0,c
   822  001FCE  06E8               	decf	wreg,f,c
   823  001FD0  E1FD               	bnz	clear_0
   824                           
   825                           ; Clear objects allocated to COMRAM (23 bytes)
   826  001FD2  EE00  F05B         	lfsr	0,__pbssCOMRAM
   827  001FD6  0E17               	movlw	23
   828  001FD8                     clear_1:
   829  001FD8  6AEE               	clrf	postinc0,c
   830  001FDA  06E8               	decf	wreg,f,c
   831  001FDC  E1FD               	bnz	clear_1
   832                           
   833                           ; Initialize objects allocated to BANK0 (9 bytes)
   834                           ; load TBLPTR registers with __pidataBANK0
   835  001FDE  0E28               	movlw	low __pidataBANK0
   836  001FE0  6EF6               	movwf	tblptrl,c
   837  001FE2  0E26               	movlw	high __pidataBANK0
   838  001FE4  6EF7               	movwf	tblptrh,c
   839  001FE6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   840  001FE8  6EF8               	movwf	tblptru,c
   841  001FEA  EE00  F0AF         	lfsr	0,__pdataBANK0
   842  001FEE  EE10 F009          	lfsr	1,9
   843  001FF2                     copy_data0:
   844  001FF2  0009               	tblrd		*+
   845  001FF4  CFF5 FFEE          	movff	tablat,postinc0
   846  001FF8  50E5               	movf	postdec1,w,c
   847  001FFA  50E1               	movf	fsr1l,w,c
   848  001FFC  E1FA               	bnz	copy_data0
   849                           
   850                           ; Initialize objects allocated to COMRAM (26 bytes)
   851                           ; load TBLPTR registers with __pidataCOMRAM
   852  001FFE  0E2A               	movlw	low __pidataCOMRAM
   853  002000  6EF6               	movwf	tblptrl,c
   854  002002  0E25               	movlw	high __pidataCOMRAM
   855  002004  6EF7               	movwf	tblptrh,c
   856  002006  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   857  002008  6EF8               	movwf	tblptru,c
   858  00200A  EE00  F041         	lfsr	0,__pdataCOMRAM
   859  00200E  EE10 F01A          	lfsr	1,26
   860  002012                     copy_data1:
   861  002012  0009               	tblrd		*+
   862  002014  CFF5 FFEE          	movff	tablat,postinc0
   863  002018  50E5               	movf	postdec1,w,c
   864  00201A  50E1               	movf	fsr1l,w,c
   865  00201C  E1FA               	bnz	copy_data1
   866  00201E                     end_of_initialization:
   867                           	opt stack 0
   868  00201E                     __end_of__initialization:
   869                           	opt stack 0
   870  00201E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   871  002020  6EF8               	movwf	tblptru,c
   872  002022  0100               	movlb	0
   873  002024  EFE7  F00C         	goto	_main	;jump to C main() function
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           postinc0	equ	0xFEE
   879                           wreg	equ	0xFE8
   880                           postdec1	equ	0xFE5
   881                           fsr1l	equ	0xFE1
   882                           
   883                           	psect	bssCOMRAM
   884  00005B                     __pbssCOMRAM:
   885                           	opt stack 0
   886  00005B                     _volt:
   887                           	opt stack 0
   888  00005B                     	ds	3
   889  00005E                     _MODE:
   890                           	opt stack 0
   891  00005E                     	ds	2
   892  000060                     _txt:
   893                           	opt stack 0
   894  000060                     	ds	2
   895  000062                     _Count:
   896                           	opt stack 0
   897  000062                     	ds	1
   898  000063                     _EW_PED_SW:
   899                           	opt stack 0
   900  000063                     	ds	1
   901  000064                     _FLASHING:
   902                           	opt stack 0
   903  000064                     	ds	1
   904  000065                     _FLASHING_REQUEST:
   905                           	opt stack 0
   906  000065                     	ds	1
   907  000066                     _NS_PED_SW:
   908                           	opt stack 0
   909  000066                     	ds	1
   910  000067                     _PED_Count:
   911                           	opt stack 0
   912  000067                     	ds	1
   913  000068                     _SW_EWLT:
   914                           	opt stack 0
   915  000068                     	ds	1
   916  000069                     _SW_EWPED:
   917                           	opt stack 0
   918  000069                     	ds	1
   919  00006A                     _SW_MODE:
   920                           	opt stack 0
   921  00006A                     	ds	1
   922  00006B                     _SW_NSLT:
   923                           	opt stack 0
   924  00006B                     	ds	1
   925  00006C                     _SW_NSPED:
   926                           	opt stack 0
   927  00006C                     	ds	1
   928  00006D                     __tft_type:
   929                           	opt stack 0
   930  00006D                     	ds	1
   931  00006E                     _colstart:
   932                           	opt stack 0
   933  00006E                     	ds	1
   934  00006F                     _dir:
   935                           	opt stack 0
   936  00006F                     	ds	1
   937  000070                     _direction:
   938                           	opt stack 0
   939  000070                     	ds	1
   940  000071                     _rowstart:
   941                           	opt stack 0
   942  000071                     	ds	1
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952                           	psect	dataCOMRAM
   953  000041                     __pdataCOMRAM:
   954                           	opt stack 0
   955  000041                     _wrap:
   956                           	opt stack 0
   957  000041                     	ds	1
   958  000042                     _EWLT_Count:
   959                           	opt stack 0
   960  000042                     	ds	3
   961  000045                     _EW_Count:
   962                           	opt stack 0
   963  000045                     	ds	3
   964  000048                     _NS_Count:
   965                           	opt stack 0
   966  000048                     	ds	3
   967  00004B                     _Act_Mode_Txt:
   968                           	opt stack 0
   969  00004B                     	ds	2
   970  00004D                     _FlashingR_Txt:
   971                           	opt stack 0
   972  00004D                     	ds	2
   973  00004F                     _FlashingS_Txt:
   974                           	opt stack 0
   975  00004F                     	ds	2
   976  000051                     _SW_EWLT_Txt:
   977                           	opt stack 0
   978  000051                     	ds	2
   979  000053                     _SW_EWPED_Txt:
   980                           	opt stack 0
   981  000053                     	ds	2
   982  000055                     _SW_MODE_Txt:
   983                           	opt stack 0
   984  000055                     	ds	2
   985  000057                     _SW_NSLT_Txt:
   986                           	opt stack 0
   987  000057                     	ds	2
   988  000059                     _SW_NSPED_Txt:
   989                           	opt stack 0
   990  000059                     	ds	2
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           postinc0	equ	0xFEE
   996                           wreg	equ	0xFE8
   997                           postdec1	equ	0xFE5
   998                           fsr1l	equ	0xFE1
   999                           
  1000                           	psect	bssBANK0
  1001  000080                     __pbssBANK0:
  1002                           	opt stack 0
  1003  000080                     _nbr:
  1004                           	opt stack 0
  1005  000080                     	ds	2
  1006  000082                     _buffer:
  1007                           	opt stack 0
  1008  000082                     	ds	31
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           postdec1	equ	0xFE5
  1016                           fsr1l	equ	0xFE1
  1017                           
  1018                           	psect	dataBANK0
  1019  0000AF                     __pdataBANK0:
  1020                           	opt stack 0
  1021  0000AF                     _NSLT_Count:
  1022                           	opt stack 0
  1023  0000AF                     	ds	3
  1024  0000B2                     _PED_EW_Count:
  1025                           	opt stack 0
  1026  0000B2                     	ds	3
  1027  0000B5                     _PED_NS_Count:
  1028                           	opt stack 0
  1029  0000B5                     	ds	3
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  0000A1                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  0000A1                     drawtext@x:
  1043                           	opt stack 0
  1044  0000A1                     update_LCD_color@color:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x0
  1048  0000A1                     	ds	1
  1049  0000A2                     update_LCD_color@direction:
  1050                           	opt stack 0
  1051  0000A2                     drawtext@textsize:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x1
  1055  0000A2                     	ds	1
  1056  0000A3                     update_LCD_color@Circle_Y:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x2
  1060  0000A3                     	ds	1
  1061  0000A4                     Set_NS@color:
  1062                           	opt stack 0
  1063  0000A4                     Set_NSLT@color:
  1064                           	opt stack 0
  1065  0000A4                     Set_EW@color:
  1066                           	opt stack 0
  1067  0000A4                     Set_EWLT@color:
  1068                           	opt stack 0
  1069  0000A4                     drawtext@i:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x3
  1073  0000A4                     	ds	2
  1074  0000A6                     drawtext@cursor_y:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x5
  1078  0000A6                     	ds	1
  1079  0000A7                     drawtext@cursor_x:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x6
  1083  0000A7                     	ds	1
  1084  0000A8                     update_LCD_count@count:
  1085                           	opt stack 0
  1086  0000A8                     update_LCD_PED_Count@count:
  1087                           	opt stack 0
  1088  0000A8                     update_LCD_misc@nStep:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x7
  1092  0000A8                     	ds	1
  1093  0000A9                     update_LCD_count@direction:
  1094                           	opt stack 0
  1095  0000A9                     update_LCD_PED_Count@direction:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x8
  1099  0000A9                     	ds	1
  1100  0000AA                     PED_Control@Num_Sec:
  1101                           	opt stack 0
  1102  0000AA                     update_LCD_misc@ch:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x9
  1106  0000AA                     	ds	1
  1107  0000AB                     PED_Control@direction:
  1108                           	opt stack 0
  1109  0000AB                     Wait_N_Seconds@seconds:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0xA
  1113  0000AB                     	ds	1
  1114  0000AC                     PED_Control@i:
  1115                           	opt stack 0
  1116  0000AC                     Wait_N_Seconds@I:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0xB
  1120  0000AC                     	ds	1
  1121  0000AD                     main@nStep:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0xC
  1125  0000AD                     	ds	2
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           postdec1	equ	0xFE5
  1133                           fsr1l	equ	0xFE1
  1134                           
  1135                           	psect	cstackCOMRAM
  1136  000001                     __pcstackCOMRAM:
  1137                           	opt stack 0
  1138  000001                     ??_chkisr:
  1139  000001                     
  1140                           ; 0 bytes @ 0x0
  1141  000001                     	ds	14
  1142  00000F                     ?_strlen:
  1143                           	opt stack 0
  1144  00000F                     ?_get_full_ADC:
  1145                           	opt stack 0
  1146  00000F                     ?___wmul:
  1147                           	opt stack 0
  1148  00000F                     ?___awdiv:
  1149                           	opt stack 0
  1150  00000F                     ?___awmod:
  1151                           	opt stack 0
  1152  00000F                     ?___ftpack:
  1153                           	opt stack 0
  1154  00000F                     spiwrite@x:
  1155                           	opt stack 0
  1156  00000F                     OpenUSART@spbrg:
  1157                           	opt stack 0
  1158  00000F                     ___wmul@multiplier:
  1159                           	opt stack 0
  1160  00000F                     ___awdiv@dividend:
  1161                           	opt stack 0
  1162  00000F                     ___awmod@dividend:
  1163                           	opt stack 0
  1164  00000F                     strcpy@to:
  1165                           	opt stack 0
  1166  00000F                     strlen@s:
  1167                           	opt stack 0
  1168  00000F                     ___ftpack@arg:
  1169                           	opt stack 0
  1170  00000F                     ___ftge@ff1:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0xE
  1174  00000F                     	ds	1
  1175  000010                     spiwrite@spidata:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0xF
  1179  000010                     	ds	1
  1180  000011                     ??_strlen:
  1181  000011                     ??_get_full_ADC:
  1182  000011                     write_command@cmd_:
  1183                           	opt stack 0
  1184  000011                     write_data@data_:
  1185                           	opt stack 0
  1186  000011                     OpenUSART@config:
  1187                           	opt stack 0
  1188  000011                     ___wmul@multiplicand:
  1189                           	opt stack 0
  1190  000011                     ___awdiv@divisor:
  1191                           	opt stack 0
  1192  000011                     ___awmod@divisor:
  1193                           	opt stack 0
  1194  000011                     strcpy@from:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x10
  1198  000011                     	ds	1
  1199  000012                     setAddrWindow@y0:
  1200                           	opt stack 0
  1201  000012                     ___ftpack@exp:
  1202                           	opt stack 0
  1203  000012                     ___ftge@ff2:
  1204                           	opt stack 0
  1205                           
  1206                           ; 3 bytes @ 0x11
  1207  000012                     	ds	1
  1208  000013                     setAddrWindow@x1:
  1209                           	opt stack 0
  1210  000013                     ___awdiv@counter:
  1211                           	opt stack 0
  1212  000013                     ___awmod@counter:
  1213                           	opt stack 0
  1214  000013                     ___ftpack@sign:
  1215                           	opt stack 0
  1216  000013                     get_full_ADC@result:
  1217                           	opt stack 0
  1218  000013                     ___wmul@product:
  1219                           	opt stack 0
  1220  000013                     strcpy@cp:
  1221                           	opt stack 0
  1222  000013                     strlen@cp:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x12
  1226  000013                     	ds	1
  1227  000014                     ??___ftpack:
  1228  000014                     setAddrWindow@y1:
  1229                           	opt stack 0
  1230  000014                     ___awdiv@sign:
  1231                           	opt stack 0
  1232  000014                     ___awmod@sign:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x13
  1236  000014                     	ds	1
  1237  000015                     ??___ftge:
  1238  000015                     setAddrWindow@x0:
  1239                           	opt stack 0
  1240  000015                     delay_ms@ms:
  1241                           	opt stack 0
  1242  000015                     ___awdiv@quotient:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x14
  1246  000015                     	ds	1
  1247  000016                     drawPixel@y:
  1248                           	opt stack 0
  1249  000016                     drawFastVLine@y:
  1250                           	opt stack 0
  1251  000016                     fillRectangle@y:
  1252                           	opt stack 0
  1253  000016                     drawFastHLine@y:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x15
  1257  000016                     	ds	1
  1258  000017                     ??_delay_ms:
  1259  000017                     ?___awtoft:
  1260                           	opt stack 0
  1261  000017                     drawFastVLine@h:
  1262                           	opt stack 0
  1263  000017                     fillRectangle@w:
  1264                           	opt stack 0
  1265  000017                     drawFastHLine@w:
  1266                           	opt stack 0
  1267  000017                     drawPixel@color:
  1268                           	opt stack 0
  1269  000017                     ___awtoft@c:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x16
  1273  000017                     	ds	1
  1274  000018                     fillRectangle@h:
  1275                           	opt stack 0
  1276  000018                     drawFastVLine@color:
  1277                           	opt stack 0
  1278  000018                     drawFastHLine@color:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x17
  1282  000018                     	ds	1
  1283  000019                     drawPixel@x:
  1284                           	opt stack 0
  1285  000019                     delay_ms@count:
  1286                           	opt stack 0
  1287  000019                     fillRectangle@color:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x18
  1291  000019                     	ds	1
  1292  00001A                     ??_drawFastVLine:
  1293  00001A                     ??_drawFastHLine:
  1294  00001A                     ___awtoft@sign:
  1295                           	opt stack 0
  1296  00001A                     drawCircle@x0:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x19
  1300  00001A                     	ds	1
  1301  00001B                     ??_fillRectangle:
  1302  00001B                     ?___ftdiv:
  1303                           	opt stack 0
  1304  00001B                     ___ftdiv@f1:
  1305                           	opt stack 0
  1306                           
  1307                           ; 3 bytes @ 0x1A
  1308  00001B                     	ds	1
  1309  00001C                     drawCircle@y0:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x1B
  1313  00001C                     	ds	2
  1314  00001E                     drawFastVLine@hi:
  1315                           	opt stack 0
  1316  00001E                     drawFastHLine@hi:
  1317                           	opt stack 0
  1318  00001E                     drawCircle@r:
  1319                           	opt stack 0
  1320  00001E                     ___ftdiv@f2:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x1D
  1324  00001E                     	ds	1
  1325  00001F                     drawFastVLine@lo:
  1326                           	opt stack 0
  1327  00001F                     fillRectangle@hi:
  1328                           	opt stack 0
  1329  00001F                     drawFastHLine@lo:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x1E
  1333  00001F                     	ds	1
  1334  000020                     drawFastVLine@x:
  1335                           	opt stack 0
  1336  000020                     fillRectangle@lo:
  1337                           	opt stack 0
  1338  000020                     drawFastHLine@x:
  1339                           	opt stack 0
  1340  000020                     drawCircle@color:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x1F
  1344  000020                     	ds	1
  1345  000021                     ??___ftdiv:
  1346  000021                     fillRect@y:
  1347                           	opt stack 0
  1348  000021                     fillRectangle@x:
  1349                           	opt stack 0
  1350  000021                     fillCircleHelper@x0:
  1351                           	opt stack 0
  1352  000021                     drawRect@x:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x20
  1356  000021                     	ds	1
  1357  000022                     ??_drawCircle:
  1358  000022                     fillRect@w:
  1359                           	opt stack 0
  1360  000022                     fillScreen@color:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x21
  1364  000022                     	ds	1
  1365  000023                     fillRect@h:
  1366                           	opt stack 0
  1367  000023                     fillCircleHelper@y0:
  1368                           	opt stack 0
  1369  000023                     drawRect@y:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x22
  1373  000023                     	ds	1
  1374  000024                     ___ftdiv@cntr:
  1375                           	opt stack 0
  1376  000024                     fillRect@color:
  1377                           	opt stack 0
  1378  000024                     drawCircle@ddF_x:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x23
  1382  000024                     	ds	1
  1383  000025                     fillCircleHelper@r:
  1384                           	opt stack 0
  1385  000025                     drawRect@w:
  1386                           	opt stack 0
  1387  000025                     ___ftdiv@f3:
  1388                           	opt stack 0
  1389                           
  1390                           ; 3 bytes @ 0x24
  1391  000025                     	ds	1
  1392  000026                     ??_fillRect:
  1393  000026                     drawCircle@ddF_y:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x25
  1397  000026                     	ds	1
  1398  000027                     fillCircleHelper@cornername:
  1399                           	opt stack 0
  1400  000027                     drawRect@h:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x26
  1404  000027                     	ds	1
  1405  000028                     ___ftdiv@exp:
  1406                           	opt stack 0
  1407  000028                     drawCircle@f:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x27
  1411  000028                     	ds	1
  1412  000029                     fillRect@x:
  1413                           	opt stack 0
  1414  000029                     ___ftdiv@sign:
  1415                           	opt stack 0
  1416  000029                     fillCircleHelper@delta:
  1417                           	opt stack 0
  1418  000029                     drawRect@color:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x28
  1422  000029                     	ds	1
  1423  00002A                     fillRect@i:
  1424                           	opt stack 0
  1425  00002A                     drawCircle@x:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x29
  1429  00002A                     	ds	1
  1430  00002B                     ??_drawRect:
  1431  00002B                     fillCircleHelper@color:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x2A
  1435  00002B                     	ds	1
  1436  00002C                     drawChar@y:
  1437                           	opt stack 0
  1438  00002C                     drawCircle@y:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x2B
  1442  00002C                     	ds	1
  1443  00002D                     ??_fillCircleHelper:
  1444  00002D                     drawChar@c:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x2C
  1448  00002D                     	ds	1
  1449  00002E                     drawChar@color:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x2D
  1453  00002E                     	ds	1
  1454  00002F                     fillCircleHelper@ddF_x:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x2E
  1458  00002F                     	ds	1
  1459  000030                     drawChar@bg:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x2F
  1463  000030                     	ds	1
  1464  000031                     fillCircleHelper@ddF_y:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x30
  1468  000031                     	ds	1
  1469  000032                     drawChar@size:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x31
  1473  000032                     	ds	1
  1474  000033                     drawChar@line:
  1475                           	opt stack 0
  1476  000033                     fillCircleHelper@f:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x32
  1480  000033                     	ds	1
  1481  000034                     drawChar@x:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x33
  1485  000034                     	ds	1
  1486  000035                     drawChar@j:
  1487                           	opt stack 0
  1488  000035                     fillCircleHelper@x:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x34
  1492  000035                     	ds	1
  1493  000036                     drawChar@i:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x35
  1497  000036                     	ds	1
  1498  000037                     drawtext@y:
  1499                           	opt stack 0
  1500  000037                     fillCircleHelper@y:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x36
  1504  000037                     	ds	1
  1505  000038                     drawtext@_text:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x37
  1509  000038                     	ds	1
  1510  000039                     fillCircle@x0:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x38
  1514  000039                     	ds	1
  1515  00003A                     drawtext@color:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x39
  1519  00003A                     	ds	1
  1520  00003B                     fillCircle@y0:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x3A
  1524  00003B                     	ds	1
  1525  00003C                     drawtext@bg:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x3B
  1529  00003C                     	ds	1
  1530  00003D                     fillCircle@r:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x3C
  1534  00003D                     	ds	1
  1535  00003E                     drawtext@size:
  1536                           	opt stack 0
  1537                           
  1538                           ; 1 bytes @ 0x3D
  1539  00003E                     	ds	1
  1540  00003F                     ??_drawtext:
  1541  00003F                     fillCircle@color:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x3E
  1545  00003F                     	ds	2
  1546  000041                     tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           fsr1l	equ	0xFE1
  1554                           
  1555                           ; 0 bytes @ 0x40
  1556 ;;
  1557 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1558 ;;
  1559 ;; *************** function _main *****************
  1560 ;; Defined at:
  1561 ;;		line 327 in file "Lab9.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;		None
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  nStep           2   12[BANK0 ] int 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;		None               void
  1568 ;; Registers used:
  1569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;Total ram usage:        2 bytes
  1580 ;; Hardware stack levels required when called:   13
  1581 ;; This function calls:
  1582 ;;		_Day_Mode
  1583 ;;		_Do_Flashing
  1584 ;;		_Do_Init
  1585 ;;		_Initialize_Screen
  1586 ;;		_Night_Mode
  1587 ;;		___awtoft
  1588 ;;		___ftdiv
  1589 ;;		___ftge
  1590 ;;		___wmul
  1591 ;;		_get_full_ADC
  1592 ;; This function is called by:
  1593 ;;		Startup code after reset
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           	psect	text0
  1598  0019CE                     __ptext0:
  1599                           	opt stack 0
  1600  0019CE                     _main:
  1601                           	opt stack 18
  1602                           
  1603                           ;Lab9.c: 329: Do_Init();
  1604                           
  1605                           ;incstack = 0
  1606  0019CE  EC61  F012         	call	_Do_Init	;wreg free
  1607                           
  1608                           ;Lab9.c: 330: RBPU = 0;
  1609  0019D2  9EF1               	bcf	intcon2,7,c	;volatile
  1610                           
  1611                           ;Lab9.c: 331: Initialize_Screen();
  1612  0019D4  EC0E  F000         	call	_Initialize_Screen	;wreg free
  1613                           
  1614                           ;Lab9.c: 333: int nStep = get_full_ADC();
  1615  0019D8  EC74  F012         	call	_get_full_ADC	;wreg free
  1616  0019DC  C00F  F0AD         	movff	?_get_full_ADC,main@nStep
  1617  0019E0  C010  F0AE         	movff	?_get_full_ADC+1,main@nStep+1
  1618                           
  1619                           ;Lab9.c: 334: volt = nStep * 5 /1024.0;
  1620  0019E4  C0AD  F00F         	movff	main@nStep,___wmul@multiplier
  1621  0019E8  C0AE  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1622  0019EC  0E00               	movlw	0
  1623  0019EE  6E12               	movwf	___wmul@multiplicand+1,c
  1624  0019F0  0E05               	movlw	5
  1625  0019F2  6E11               	movwf	___wmul@multiplicand,c
  1626  0019F4  EC4D  F012         	call	___wmul	;wreg free
  1627  0019F8  C00F  F017         	movff	?___wmul,___awtoft@c
  1628  0019FC  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1629  001A00  ECCD  F011         	call	___awtoft	;wreg free
  1630  001A04  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  1631  001A08  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  1632  001A0C  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  1633  001A10  0E00               	movlw	0
  1634  001A12  6E1E               	movwf	___ftdiv@f2,c
  1635  001A14  0E80               	movlw	128
  1636  001A16  6E1F               	movwf	___ftdiv@f2+1,c
  1637  001A18  0E44               	movlw	68
  1638  001A1A  6E20               	movwf	___ftdiv@f2+2,c
  1639  001A1C  ECD2  F00A         	call	___ftdiv	;wreg free
  1640  001A20  C01B  F05B         	movff	?___ftdiv,_volt
  1641  001A24  C01C  F05C         	movff	?___ftdiv+1,_volt+1
  1642  001A28  C01D  F05D         	movff	?___ftdiv+2,_volt+2
  1643                           
  1644                           ;Lab9.c: 335: SW_MODE = volt < 2.5 ? 1:0;
  1645  001A2C  C05B  F00F         	movff	_volt,___ftge@ff1
  1646  001A30  C05C  F010         	movff	_volt+1,___ftge@ff1+1
  1647  001A34  C05D  F011         	movff	_volt+2,___ftge@ff1+2
  1648  001A38  0E00               	movlw	0
  1649  001A3A  6E12               	movwf	___ftge@ff2,c
  1650  001A3C  0E20               	movlw	32
  1651  001A3E  6E13               	movwf	___ftge@ff2+1,c
  1652  001A40  0E40               	movlw	64
  1653  001A42  6E14               	movwf	___ftge@ff2+2,c
  1654  001A44  EC95  F00D         	call	___ftge	;wreg free
  1655  001A48  B0D8               	btfsc	status,0,c
  1656  001A4A  D002               	goto	u3980
  1657  001A4C  0E01               	movlw	1
  1658  001A4E  D001               	goto	u3990
  1659  001A50                     u3980:
  1660  001A50  0E00               	movlw	0
  1661  001A52                     u3990:
  1662  001A52  6E6A               	movwf	_SW_MODE,c
  1663  001A54  D000               	goto	l5590
  1664  001A56                     l5590:
  1665                           
  1666                           ;Lab9.c: 338: {
  1667                           ;Lab9.c: 339: if (SW_MODE)
  1668  001A56  506A               	movf	_SW_MODE,w,c
  1669  001A58  B4D8               	btfsc	status,2,c
  1670  001A5A  D003               	goto	l5594
  1671                           
  1672                           ;Lab9.c: 340: {
  1673                           ;Lab9.c: 341: Day_Mode();
  1674  001A5C  ECB1  F00B         	call	_Day_Mode	;wreg free
  1675                           
  1676                           ;Lab9.c: 342: }
  1677  001A60  D003               	goto	l5596
  1678  001A62                     l5594:
  1679                           
  1680                           ;Lab9.c: 343: else
  1681                           ;Lab9.c: 344: {
  1682                           ;Lab9.c: 345: Night_Mode();
  1683  001A62  EC3E  F00D         	call	_Night_Mode	;wreg free
  1684  001A66  D000               	goto	l5596
  1685  001A68                     l5596:
  1686                           
  1687                           ;Lab9.c: 346: }
  1688                           ;Lab9.c: 348: if(FLASHING_REQUEST == 1)
  1689  001A68  0465               	decf	_FLASHING_REQUEST,w,c
  1690  001A6A  A4D8               	btfss	status,2,c
  1691  001A6C  D7F4               	goto	l5590
  1692                           
  1693                           ;Lab9.c: 349: {
  1694                           ;Lab9.c: 350: FLASHING_REQUEST = 0;
  1695  001A6E  0E00               	movlw	0
  1696  001A70  6E65               	movwf	_FLASHING_REQUEST,c
  1697                           
  1698                           ;Lab9.c: 351: Do_Flashing();
  1699  001A72  EC14  F010         	call	_Do_Flashing	;wreg free
  1700  001A76  D7EF               	goto	l5590
  1701  001A78  EF0C  F000         	goto	start
  1702  001A7C                     __end_of_main:
  1703                           	opt stack 0
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           intcon2	equ	0xFF1
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           postdec1	equ	0xFE5
  1712                           fsr1l	equ	0xFE1
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _Night_Mode *****************
  1716 ;; Defined at:
  1717 ;;		line 532 in file "Lab9.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;		None               void
  1724 ;; Registers used:
  1725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;Total ram usage:        0 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:   12
  1738 ;; This function calls:
  1739 ;;		_Set_EW
  1740 ;;		_Set_EWLT
  1741 ;;		_Set_NS
  1742 ;;		_Set_NSLT
  1743 ;;		_Wait_N_Seconds
  1744 ;; This function is called by:
  1745 ;;		_main
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text1
  1750  001A7C                     __ptext1:
  1751                           	opt stack 0
  1752  001A7C                     _Night_Mode:
  1753                           	opt stack 18
  1754                           
  1755                           ;Lab9.c: 534: MODE = 0;
  1756                           
  1757                           ;incstack = 0
  1758  001A7C  0E00               	movlw	0
  1759  001A7E  6E5F               	movwf	_MODE+1,c
  1760  001A80  0E00               	movlw	0
  1761  001A82  6E5E               	movwf	_MODE,c
  1762                           
  1763                           ;Lab9.c: 535: PORTEbits.RE2 = 0;
  1764  001A84  9484               	bcf	3972,2,c	;volatile
  1765                           
  1766                           ;Lab9.c: 536: Act_Mode_Txt[0] = 'N';
  1767  001A86  0E4E               	movlw	78
  1768  001A88  6E4B               	movwf	_Act_Mode_Txt,c
  1769                           
  1770                           ;Lab9.c: 537: EW_PED_SW = 0;
  1771  001A8A  0E00               	movlw	0
  1772  001A8C  6E63               	movwf	_EW_PED_SW,c
  1773                           
  1774                           ;Lab9.c: 538: NS_PED_SW = 0;
  1775  001A8E  0E00               	movlw	0
  1776  001A90  6E66               	movwf	_NS_PED_SW,c
  1777                           
  1778                           ;Lab9.c: 540: Set_NSLT(1);
  1779  001A92  0E01               	movlw	1
  1780  001A94  ECDD  F010         	call	_Set_NSLT
  1781                           
  1782                           ;Lab9.c: 541: Set_EW(1);
  1783  001A98  0E01               	movlw	1
  1784  001A9A  EC49  F011         	call	_Set_EW
  1785                           
  1786                           ;Lab9.c: 542: Set_EWLT(1);
  1787  001A9E  0E01               	movlw	1
  1788  001AA0  EC25  F011         	call	_Set_EWLT
  1789                           
  1790                           ;Lab9.c: 543: Set_NS(2);
  1791  001AA4  0E02               	movlw	2
  1792  001AA6  EC01  F011         	call	_Set_NS
  1793                           
  1794                           ;Lab9.c: 544: Wait_N_Seconds(8);
  1795  001AAA  0E08               	movlw	8
  1796  001AAC  ECEB  F011         	call	_Wait_N_Seconds
  1797                           
  1798                           ;Lab9.c: 545: Set_NS(3);
  1799  001AB0  0E03               	movlw	3
  1800  001AB2  EC01  F011         	call	_Set_NS
  1801                           
  1802                           ;Lab9.c: 546: Wait_N_Seconds(3);
  1803  001AB6  0E03               	movlw	3
  1804  001AB8  ECEB  F011         	call	_Wait_N_Seconds
  1805                           
  1806                           ;Lab9.c: 547: Set_NS(1);
  1807  001ABC  0E01               	movlw	1
  1808  001ABE  EC01  F011         	call	_Set_NS
  1809                           
  1810                           ;Lab9.c: 549: if(PORTCbits.RC2 == 1)
  1811  001AC2  A482               	btfss	3970,2,c	;volatile
  1812  001AC4  D010               	goto	l5326
  1813                           
  1814                           ;Lab9.c: 550: {
  1815                           ;Lab9.c: 551: Set_EWLT(2);
  1816  001AC6  0E02               	movlw	2
  1817  001AC8  EC25  F011         	call	_Set_EWLT
  1818                           
  1819                           ;Lab9.c: 552: Wait_N_Seconds(6);
  1820  001ACC  0E06               	movlw	6
  1821  001ACE  ECEB  F011         	call	_Wait_N_Seconds
  1822                           
  1823                           ;Lab9.c: 553: Set_EWLT(3);
  1824  001AD2  0E03               	movlw	3
  1825  001AD4  EC25  F011         	call	_Set_EWLT
  1826                           
  1827                           ;Lab9.c: 554: Wait_N_Seconds(3);
  1828  001AD8  0E03               	movlw	3
  1829  001ADA  ECEB  F011         	call	_Wait_N_Seconds
  1830                           
  1831                           ;Lab9.c: 555: Set_EWLT(1);
  1832  001ADE  0E01               	movlw	1
  1833  001AE0  EC25  F011         	call	_Set_EWLT
  1834  001AE4  D000               	goto	l5326
  1835  001AE6                     l5326:
  1836                           
  1837                           ;Lab9.c: 556: }
  1838                           ;Lab9.c: 557: Set_EW(2);
  1839  001AE6  0E02               	movlw	2
  1840  001AE8  EC49  F011         	call	_Set_EW
  1841                           
  1842                           ;Lab9.c: 558: Wait_N_Seconds(8);
  1843  001AEC  0E08               	movlw	8
  1844  001AEE  ECEB  F011         	call	_Wait_N_Seconds
  1845                           
  1846                           ;Lab9.c: 559: Set_EW(3);
  1847  001AF2  0E03               	movlw	3
  1848  001AF4  EC49  F011         	call	_Set_EW
  1849                           
  1850                           ;Lab9.c: 560: Wait_N_Seconds(3);
  1851  001AF8  0E03               	movlw	3
  1852  001AFA  ECEB  F011         	call	_Wait_N_Seconds
  1853                           
  1854                           ;Lab9.c: 561: Set_EW(1);
  1855  001AFE  0E01               	movlw	1
  1856  001B00  EC49  F011         	call	_Set_EW
  1857                           
  1858                           ;Lab9.c: 563: if(PORTCbits.RC1 == 1)
  1859  001B04  A282               	btfss	3970,1,c	;volatile
  1860  001B06  D010               	goto	l485
  1861                           
  1862                           ;Lab9.c: 564: {
  1863                           ;Lab9.c: 565: Set_NSLT(2);
  1864  001B08  0E02               	movlw	2
  1865  001B0A  ECDD  F010         	call	_Set_NSLT
  1866                           
  1867                           ;Lab9.c: 566: Wait_N_Seconds(6);
  1868  001B0E  0E06               	movlw	6
  1869  001B10  ECEB  F011         	call	_Wait_N_Seconds
  1870                           
  1871                           ;Lab9.c: 567: Set_NSLT(3);
  1872  001B14  0E03               	movlw	3
  1873  001B16  ECDD  F010         	call	_Set_NSLT
  1874                           
  1875                           ;Lab9.c: 568: Wait_N_Seconds(3);
  1876  001B1A  0E03               	movlw	3
  1877  001B1C  ECEB  F011         	call	_Wait_N_Seconds
  1878                           
  1879                           ;Lab9.c: 569: Set_NSLT(1);
  1880  001B20  0E01               	movlw	1
  1881  001B22  ECDD  F010         	call	_Set_NSLT
  1882  001B26  D000               	goto	l485
  1883  001B28                     l485:
  1884  001B28  0012               	return		;funcret
  1885  001B2A                     __end_of_Night_Mode:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           intcon2	equ	0xFF1
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           status	equ	0xFD8
  1897                           
  1898 ;; *************** function _Initialize_Screen *****************
  1899 ;; Defined at:
  1900 ;;		line 168 in file "Lab9.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;		None               void
  1907 ;; Registers used:
  1908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    9
  1921 ;; This function calls:
  1922 ;;		_LCD_Reset
  1923 ;;		_TFT_GreenTab_Initialize
  1924 ;;		_drawCircle
  1925 ;;		_drawRect
  1926 ;;		_drawtext
  1927 ;;		_fillCircle
  1928 ;;		_fillScreen
  1929 ;;		_strcpy
  1930 ;; This function is called by:
  1931 ;;		_main
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text2
  1936  00001C                     __ptext2:
  1937                           	opt stack 0
  1938  00001C                     _Initialize_Screen:
  1939                           	opt stack 21
  1940                           
  1941                           ;Lab9.c: 170: LCD_Reset();
  1942                           
  1943                           ;incstack = 0
  1944  00001C  ECD9  F012         	call	_LCD_Reset	;wreg free
  1945                           
  1946                           ;Lab9.c: 171: TFT_GreenTab_Initialize();
  1947  000020  EC38  F012         	call	_TFT_GreenTab_Initialize	;wreg free
  1948                           
  1949                           ;Lab9.c: 172: fillScreen(0x0000);
  1950  000024  0E00               	movlw	0
  1951  000026  6E23               	movwf	fillScreen@color+1,c
  1952  000028  0E00               	movlw	0
  1953  00002A  6E22               	movwf	fillScreen@color,c
  1954  00002C  EC87  F012         	call	_fillScreen	;wreg free
  1955                           
  1956                           ;Lab9.c: 175: txt = buffer;
  1957  000030  0E82               	movlw	low _buffer
  1958  000032  6E60               	movwf	_txt,c
  1959  000034  0E00               	movlw	high _buffer
  1960  000036  6E61               	movwf	_txt+1,c
  1961                           
  1962                           ;Lab9.c: 176: strcpy(txt, "ECE3301L Spring 21-S1");
  1963  000038  C060  F00F         	movff	_txt,strcpy@to
  1964  00003C  C061  F010         	movff	_txt+1,strcpy@to+1
  1965  000040  0E96               	movlw	low STR_1
  1966  000042  6E11               	movwf	strcpy@from,c
  1967  000044  0EFF               	movlw	high STR_1
  1968  000046  6E12               	movwf	strcpy@from+1,c
  1969  000048  EC07  F012         	call	_strcpy	;wreg free
  1970                           
  1971                           ;Lab9.c: 177: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  1972  00004C  0E02               	movlw	2
  1973  00004E  6E37               	movwf	drawtext@y,c
  1974  000050  C060  F038         	movff	_txt,drawtext@_text
  1975  000054  C061  F039         	movff	_txt+1,drawtext@_text+1
  1976  000058  0EFF               	movlw	255
  1977  00005A  6E3B               	movwf	drawtext@color+1,c
  1978  00005C  683A               	setf	drawtext@color,c
  1979  00005E  0E00               	movlw	0
  1980  000060  6E3D               	movwf	drawtext@bg+1,c
  1981  000062  0E00               	movlw	0
  1982  000064  6E3C               	movwf	drawtext@bg,c
  1983  000066  0E01               	movlw	1
  1984  000068  6E3E               	movwf	drawtext@size,c
  1985  00006A  0E02               	movlw	2
  1986  00006C  ECD4  F009         	call	_drawtext
  1987                           
  1988                           ;Lab9.c: 180: strcpy(txt, "Mode:");
  1989  000070  C060  F00F         	movff	_txt,strcpy@to
  1990  000074  C061  F010         	movff	_txt+1,strcpy@to+1
  1991  000078  0EE5               	movlw	low STR_2
  1992  00007A  6E11               	movwf	strcpy@from,c
  1993  00007C  0EFF               	movlw	high STR_2
  1994  00007E  6E12               	movwf	strcpy@from+1,c
  1995  000080  EC07  F012         	call	_strcpy	;wreg free
  1996                           
  1997                           ;Lab9.c: 181: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  1998  000084  0E0A               	movlw	10
  1999  000086  6E37               	movwf	drawtext@y,c
  2000  000088  C060  F038         	movff	_txt,drawtext@_text
  2001  00008C  C061  F039         	movff	_txt+1,drawtext@_text+1
  2002  000090  0EFF               	movlw	255
  2003  000092  6E3B               	movwf	drawtext@color+1,c
  2004  000094  683A               	setf	drawtext@color,c
  2005  000096  0E00               	movlw	0
  2006  000098  6E3D               	movwf	drawtext@bg+1,c
  2007  00009A  0E00               	movlw	0
  2008  00009C  6E3C               	movwf	drawtext@bg,c
  2009  00009E  0E01               	movlw	1
  2010  0000A0  6E3E               	movwf	drawtext@size,c
  2011  0000A2  0E02               	movlw	2
  2012  0000A4  ECD4  F009         	call	_drawtext
  2013                           
  2014                           ;Lab9.c: 182: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2015  0000A8  0E0A               	movlw	10
  2016  0000AA  6E37               	movwf	drawtext@y,c
  2017  0000AC  0E4B               	movlw	low _Act_Mode_Txt
  2018  0000AE  6E38               	movwf	drawtext@_text,c
  2019  0000B0  0E00               	movlw	high _Act_Mode_Txt
  2020  0000B2  6E39               	movwf	drawtext@_text+1,c
  2021  0000B4  0EFF               	movlw	255
  2022  0000B6  6E3B               	movwf	drawtext@color+1,c
  2023  0000B8  683A               	setf	drawtext@color,c
  2024  0000BA  0E00               	movlw	0
  2025  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2026  0000BE  0E00               	movlw	0
  2027  0000C0  6E3C               	movwf	drawtext@bg,c
  2028  0000C2  0E01               	movlw	1
  2029  0000C4  6E3E               	movwf	drawtext@size,c
  2030  0000C6  0E23               	movlw	35
  2031  0000C8  ECD4  F009         	call	_drawtext
  2032                           
  2033                           ;Lab9.c: 185: strcpy(txt, "FR:");
  2034  0000CC  C060  F00F         	movff	_txt,strcpy@to
  2035  0000D0  C061  F010         	movff	_txt+1,strcpy@to+1
  2036  0000D4  0EEB               	movlw	low STR_3
  2037  0000D6  6E11               	movwf	strcpy@from,c
  2038  0000D8  0EFF               	movlw	high STR_3
  2039  0000DA  6E12               	movwf	strcpy@from+1,c
  2040  0000DC  EC07  F012         	call	_strcpy	;wreg free
  2041                           
  2042                           ;Lab9.c: 186: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2043  0000E0  0E0A               	movlw	10
  2044  0000E2  6E37               	movwf	drawtext@y,c
  2045  0000E4  C060  F038         	movff	_txt,drawtext@_text
  2046  0000E8  C061  F039         	movff	_txt+1,drawtext@_text+1
  2047  0000EC  0EFF               	movlw	255
  2048  0000EE  6E3B               	movwf	drawtext@color+1,c
  2049  0000F0  683A               	setf	drawtext@color,c
  2050  0000F2  0E00               	movlw	0
  2051  0000F4  6E3D               	movwf	drawtext@bg+1,c
  2052  0000F6  0E00               	movlw	0
  2053  0000F8  6E3C               	movwf	drawtext@bg,c
  2054  0000FA  0E01               	movlw	1
  2055  0000FC  6E3E               	movwf	drawtext@size,c
  2056  0000FE  0E32               	movlw	50
  2057  000100  ECD4  F009         	call	_drawtext
  2058                           
  2059                           ;Lab9.c: 187: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2060  000104  0E0A               	movlw	10
  2061  000106  6E37               	movwf	drawtext@y,c
  2062  000108  0E4D               	movlw	low _FlashingR_Txt
  2063  00010A  6E38               	movwf	drawtext@_text,c
  2064  00010C  0E00               	movlw	high _FlashingR_Txt
  2065  00010E  6E39               	movwf	drawtext@_text+1,c
  2066  000110  0EFF               	movlw	255
  2067  000112  6E3B               	movwf	drawtext@color+1,c
  2068  000114  683A               	setf	drawtext@color,c
  2069  000116  0E00               	movlw	0
  2070  000118  6E3D               	movwf	drawtext@bg+1,c
  2071  00011A  0E00               	movlw	0
  2072  00011C  6E3C               	movwf	drawtext@bg,c
  2073  00011E  0E01               	movlw	1
  2074  000120  6E3E               	movwf	drawtext@size,c
  2075  000122  0E46               	movlw	70
  2076  000124  ECD4  F009         	call	_drawtext
  2077                           
  2078                           ;Lab9.c: 190: strcpy(txt, "FS:");
  2079  000128  C060  F00F         	movff	_txt,strcpy@to
  2080  00012C  C061  F010         	movff	_txt+1,strcpy@to+1
  2081  000130  0EEF               	movlw	low STR_4
  2082  000132  6E11               	movwf	strcpy@from,c
  2083  000134  0EFF               	movlw	high STR_4
  2084  000136  6E12               	movwf	strcpy@from+1,c
  2085  000138  EC07  F012         	call	_strcpy	;wreg free
  2086                           
  2087                           ;Lab9.c: 191: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2088  00013C  0E0A               	movlw	10
  2089  00013E  6E37               	movwf	drawtext@y,c
  2090  000140  C060  F038         	movff	_txt,drawtext@_text
  2091  000144  C061  F039         	movff	_txt+1,drawtext@_text+1
  2092  000148  0EFF               	movlw	255
  2093  00014A  6E3B               	movwf	drawtext@color+1,c
  2094  00014C  683A               	setf	drawtext@color,c
  2095  00014E  0E00               	movlw	0
  2096  000150  6E3D               	movwf	drawtext@bg+1,c
  2097  000152  0E00               	movlw	0
  2098  000154  6E3C               	movwf	drawtext@bg,c
  2099  000156  0E01               	movlw	1
  2100  000158  6E3E               	movwf	drawtext@size,c
  2101  00015A  0E50               	movlw	80
  2102  00015C  ECD4  F009         	call	_drawtext
  2103                           
  2104                           ;Lab9.c: 192: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2105  000160  0E0A               	movlw	10
  2106  000162  6E37               	movwf	drawtext@y,c
  2107  000164  0E4F               	movlw	low _FlashingS_Txt
  2108  000166  6E38               	movwf	drawtext@_text,c
  2109  000168  0E00               	movlw	high _FlashingS_Txt
  2110  00016A  6E39               	movwf	drawtext@_text+1,c
  2111  00016C  0EFF               	movlw	255
  2112  00016E  6E3B               	movwf	drawtext@color+1,c
  2113  000170  683A               	setf	drawtext@color,c
  2114  000172  0E00               	movlw	0
  2115  000174  6E3D               	movwf	drawtext@bg+1,c
  2116  000176  0E00               	movlw	0
  2117  000178  6E3C               	movwf	drawtext@bg,c
  2118  00017A  0E01               	movlw	1
  2119  00017C  6E3E               	movwf	drawtext@size,c
  2120  00017E  0E64               	movlw	100
  2121  000180  ECD4  F009         	call	_drawtext
  2122                           
  2123                           ;Lab9.c: 195: strcpy(txt, "*");
  2124  000184  C060  F00F         	movff	_txt,strcpy@to
  2125  000188  C061  F010         	movff	_txt+1,strcpy@to+1
  2126  00018C  0EFD               	movlw	low STR_5
  2127  00018E  6E11               	movwf	strcpy@from,c
  2128  000190  0EFF               	movlw	high STR_5
  2129  000192  6E12               	movwf	strcpy@from+1,c
  2130  000194  EC07  F012         	call	_strcpy	;wreg free
  2131                           
  2132                           ;Lab9.c: 196: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2133  000198  0E0A               	movlw	10
  2134  00019A  6E37               	movwf	drawtext@y,c
  2135  00019C  C060  F038         	movff	_txt,drawtext@_text
  2136  0001A0  C061  F039         	movff	_txt+1,drawtext@_text+1
  2137  0001A4  0EFF               	movlw	255
  2138  0001A6  6E3B               	movwf	drawtext@color+1,c
  2139  0001A8  683A               	setf	drawtext@color,c
  2140  0001AA  0E00               	movlw	0
  2141  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2142  0001AE  0E00               	movlw	0
  2143  0001B0  6E3C               	movwf	drawtext@bg,c
  2144  0001B2  0E01               	movlw	1
  2145  0001B4  6E3E               	movwf	drawtext@size,c
  2146  0001B6  0E78               	movlw	120
  2147  0001B8  ECD4  F009         	call	_drawtext
  2148                           
  2149                           ;Lab9.c: 199: strcpy(txt, "EAST/WEST");
  2150  0001BC  C060  F00F         	movff	_txt,strcpy@to
  2151  0001C0  C061  F010         	movff	_txt+1,strcpy@to+1
  2152  0001C4  0ECD               	movlw	low STR_6
  2153  0001C6  6E11               	movwf	strcpy@from,c
  2154  0001C8  0EFF               	movlw	high STR_6
  2155  0001CA  6E12               	movwf	strcpy@from+1,c
  2156  0001CC  EC07  F012         	call	_strcpy	;wreg free
  2157                           
  2158                           ;Lab9.c: 200: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2159  0001D0  0E14               	movlw	20
  2160  0001D2  6E37               	movwf	drawtext@y,c
  2161  0001D4  C060  F038         	movff	_txt,drawtext@_text
  2162  0001D8  C061  F039         	movff	_txt+1,drawtext@_text+1
  2163  0001DC  0E07               	movlw	7
  2164  0001DE  6E3B               	movwf	drawtext@color+1,c
  2165  0001E0  683A               	setf	drawtext@color,c
  2166  0001E2  0E00               	movlw	0
  2167  0001E4  6E3D               	movwf	drawtext@bg+1,c
  2168  0001E6  0E00               	movlw	0
  2169  0001E8  6E3C               	movwf	drawtext@bg,c
  2170  0001EA  0E01               	movlw	1
  2171  0001EC  6E3E               	movwf	drawtext@size,c
  2172  0001EE  0E1E               	movlw	30
  2173  0001F0  ECD4  F009         	call	_drawtext
  2174                           
  2175                           ;Lab9.c: 201: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2176  0001F4  0E00               	movlw	0
  2177  0001F6  6E22               	movwf	drawRect@x+1,c
  2178  0001F8  0E1E               	movlw	30
  2179  0001FA  6E21               	movwf	drawRect@x,c
  2180  0001FC  0E00               	movlw	0
  2181  0001FE  6E24               	movwf	drawRect@y+1,c
  2182  000200  0E1B               	movlw	27
  2183  000202  6E23               	movwf	drawRect@y,c
  2184  000204  0E00               	movlw	0
  2185  000206  6E26               	movwf	drawRect@w+1,c
  2186  000208  0E3C               	movlw	60
  2187  00020A  6E25               	movwf	drawRect@w,c
  2188  00020C  0E00               	movlw	0
  2189  00020E  6E28               	movwf	drawRect@h+1,c
  2190  000210  0E12               	movlw	18
  2191  000212  6E27               	movwf	drawRect@h,c
  2192  000214  0E07               	movlw	7
  2193  000216  6E2A               	movwf	drawRect@color+1,c
  2194  000218  6829               	setf	drawRect@color,c
  2195  00021A  ECB0  F00F         	call	_drawRect	;wreg free
  2196                           
  2197                           ;Lab9.c: 202: fillCircle(40, 20 + 15, 7, 0xF800);
  2198  00021E  0E00               	movlw	0
  2199  000220  6E3A               	movwf	fillCircle@x0+1,c
  2200  000222  0E28               	movlw	40
  2201  000224  6E39               	movwf	fillCircle@x0,c
  2202  000226  0E00               	movlw	0
  2203  000228  6E3C               	movwf	fillCircle@y0+1,c
  2204  00022A  0E23               	movlw	35
  2205  00022C  6E3B               	movwf	fillCircle@y0,c
  2206  00022E  0E00               	movlw	0
  2207  000230  6E3E               	movwf	fillCircle@r+1,c
  2208  000232  0E07               	movlw	7
  2209  000234  6E3D               	movwf	fillCircle@r,c
  2210  000236  0EF8               	movlw	248
  2211  000238  6E40               	movwf	fillCircle@color+1,c
  2212  00023A  0E00               	movlw	0
  2213  00023C  6E3F               	movwf	fillCircle@color,c
  2214  00023E  EC68  F010         	call	_fillCircle	;wreg free
  2215                           
  2216                           ;Lab9.c: 203: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2217  000242  0E00               	movlw	0
  2218  000244  6E1B               	movwf	drawCircle@x0+1,c
  2219  000246  0E3C               	movlw	60
  2220  000248  6E1A               	movwf	drawCircle@x0,c
  2221  00024A  0E00               	movlw	0
  2222  00024C  6E1D               	movwf	drawCircle@y0+1,c
  2223  00024E  0E23               	movlw	35
  2224  000250  6E1C               	movwf	drawCircle@y0,c
  2225  000252  0E00               	movlw	0
  2226  000254  6E1F               	movwf	drawCircle@r+1,c
  2227  000256  0E07               	movlw	7
  2228  000258  6E1E               	movwf	drawCircle@r,c
  2229  00025A  0EFF               	movlw	255
  2230  00025C  6E21               	movwf	drawCircle@color+1,c
  2231  00025E  0EE0               	movlw	224
  2232  000260  6E20               	movwf	drawCircle@color,c
  2233  000262  EC6B  F006         	call	_drawCircle	;wreg free
  2234                           
  2235                           ;Lab9.c: 204: drawCircle(80, 20 + 15, 7, 0x07E0);
  2236  000266  0E00               	movlw	0
  2237  000268  6E1B               	movwf	drawCircle@x0+1,c
  2238  00026A  0E50               	movlw	80
  2239  00026C  6E1A               	movwf	drawCircle@x0,c
  2240  00026E  0E00               	movlw	0
  2241  000270  6E1D               	movwf	drawCircle@y0+1,c
  2242  000272  0E23               	movlw	35
  2243  000274  6E1C               	movwf	drawCircle@y0,c
  2244  000276  0E00               	movlw	0
  2245  000278  6E1F               	movwf	drawCircle@r+1,c
  2246  00027A  0E07               	movlw	7
  2247  00027C  6E1E               	movwf	drawCircle@r,c
  2248  00027E  0E07               	movlw	7
  2249  000280  6E21               	movwf	drawCircle@color+1,c
  2250  000282  0EE0               	movlw	224
  2251  000284  6E20               	movwf	drawCircle@color,c
  2252  000286  EC6B  F006         	call	_drawCircle	;wreg free
  2253                           
  2254                           ;Lab9.c: 205: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2255  00028A  0E1E               	movlw	30
  2256  00028C  6E37               	movwf	drawtext@y,c
  2257  00028E  0E45               	movlw	low _EW_Count
  2258  000290  6E38               	movwf	drawtext@_text,c
  2259  000292  0E00               	movlw	high _EW_Count
  2260  000294  6E39               	movwf	drawtext@_text+1,c
  2261  000296  0E07               	movlw	7
  2262  000298  6E3B               	movwf	drawtext@color+1,c
  2263  00029A  683A               	setf	drawtext@color,c
  2264  00029C  0E00               	movlw	0
  2265  00029E  6E3D               	movwf	drawtext@bg+1,c
  2266  0002A0  0E00               	movlw	0
  2267  0002A2  6E3C               	movwf	drawtext@bg,c
  2268  0002A4  0E02               	movlw	2
  2269  0002A6  6E3E               	movwf	drawtext@size,c
  2270  0002A8  0E64               	movlw	100
  2271  0002AA  ECD4  F009         	call	_drawtext
  2272                           
  2273                           ;Lab9.c: 208: strcpy(txt, "E/W LT");
  2274  0002AE  C060  F00F         	movff	_txt,strcpy@to
  2275  0002B2  C061  F010         	movff	_txt+1,strcpy@to+1
  2276  0002B6  0EDE               	movlw	low STR_7
  2277  0002B8  6E11               	movwf	strcpy@from,c
  2278  0002BA  0EFF               	movlw	high STR_7
  2279  0002BC  6E12               	movwf	strcpy@from+1,c
  2280  0002BE  EC07  F012         	call	_strcpy	;wreg free
  2281                           
  2282                           ;Lab9.c: 209: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2283  0002C2  0E32               	movlw	50
  2284  0002C4  6E37               	movwf	drawtext@y,c
  2285  0002C6  C060  F038         	movff	_txt,drawtext@_text
  2286  0002CA  C061  F039         	movff	_txt+1,drawtext@_text+1
  2287  0002CE  0EFF               	movlw	255
  2288  0002D0  6E3B               	movwf	drawtext@color+1,c
  2289  0002D2  683A               	setf	drawtext@color,c
  2290  0002D4  0E00               	movlw	0
  2291  0002D6  6E3D               	movwf	drawtext@bg+1,c
  2292  0002D8  0E00               	movlw	0
  2293  0002DA  6E3C               	movwf	drawtext@bg,c
  2294  0002DC  0E01               	movlw	1
  2295  0002DE  6E3E               	movwf	drawtext@size,c
  2296  0002E0  0E1E               	movlw	30
  2297  0002E2  ECD4  F009         	call	_drawtext
  2298                           
  2299                           ;Lab9.c: 210: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2300  0002E6  0E00               	movlw	0
  2301  0002E8  6E22               	movwf	drawRect@x+1,c
  2302  0002EA  0E1E               	movlw	30
  2303  0002EC  6E21               	movwf	drawRect@x,c
  2304  0002EE  0E00               	movlw	0
  2305  0002F0  6E24               	movwf	drawRect@y+1,c
  2306  0002F2  0E39               	movlw	57
  2307  0002F4  6E23               	movwf	drawRect@y,c
  2308  0002F6  0E00               	movlw	0
  2309  0002F8  6E26               	movwf	drawRect@w+1,c
  2310  0002FA  0E3C               	movlw	60
  2311  0002FC  6E25               	movwf	drawRect@w,c
  2312  0002FE  0E00               	movlw	0
  2313  000300  6E28               	movwf	drawRect@h+1,c
  2314  000302  0E12               	movlw	18
  2315  000304  6E27               	movwf	drawRect@h,c
  2316  000306  0EFF               	movlw	255
  2317  000308  6E2A               	movwf	drawRect@color+1,c
  2318  00030A  6829               	setf	drawRect@color,c
  2319  00030C  ECB0  F00F         	call	_drawRect	;wreg free
  2320                           
  2321                           ;Lab9.c: 211: fillCircle(40, 50 + 15, 7, 0xF800);
  2322  000310  0E00               	movlw	0
  2323  000312  6E3A               	movwf	fillCircle@x0+1,c
  2324  000314  0E28               	movlw	40
  2325  000316  6E39               	movwf	fillCircle@x0,c
  2326  000318  0E00               	movlw	0
  2327  00031A  6E3C               	movwf	fillCircle@y0+1,c
  2328  00031C  0E41               	movlw	65
  2329  00031E  6E3B               	movwf	fillCircle@y0,c
  2330  000320  0E00               	movlw	0
  2331  000322  6E3E               	movwf	fillCircle@r+1,c
  2332  000324  0E07               	movlw	7
  2333  000326  6E3D               	movwf	fillCircle@r,c
  2334  000328  0EF8               	movlw	248
  2335  00032A  6E40               	movwf	fillCircle@color+1,c
  2336  00032C  0E00               	movlw	0
  2337  00032E  6E3F               	movwf	fillCircle@color,c
  2338  000330  EC68  F010         	call	_fillCircle	;wreg free
  2339                           
  2340                           ;Lab9.c: 212: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2341  000334  0E00               	movlw	0
  2342  000336  6E1B               	movwf	drawCircle@x0+1,c
  2343  000338  0E3C               	movlw	60
  2344  00033A  6E1A               	movwf	drawCircle@x0,c
  2345  00033C  0E00               	movlw	0
  2346  00033E  6E1D               	movwf	drawCircle@y0+1,c
  2347  000340  0E41               	movlw	65
  2348  000342  6E1C               	movwf	drawCircle@y0,c
  2349  000344  0E00               	movlw	0
  2350  000346  6E1F               	movwf	drawCircle@r+1,c
  2351  000348  0E07               	movlw	7
  2352  00034A  6E1E               	movwf	drawCircle@r,c
  2353  00034C  0EFF               	movlw	255
  2354  00034E  6E21               	movwf	drawCircle@color+1,c
  2355  000350  0EE0               	movlw	224
  2356  000352  6E20               	movwf	drawCircle@color,c
  2357  000354  EC6B  F006         	call	_drawCircle	;wreg free
  2358                           
  2359                           ;Lab9.c: 213: drawCircle(80, 50 + 15, 7, 0x07E0);
  2360  000358  0E00               	movlw	0
  2361  00035A  6E1B               	movwf	drawCircle@x0+1,c
  2362  00035C  0E50               	movlw	80
  2363  00035E  6E1A               	movwf	drawCircle@x0,c
  2364  000360  0E00               	movlw	0
  2365  000362  6E1D               	movwf	drawCircle@y0+1,c
  2366  000364  0E41               	movlw	65
  2367  000366  6E1C               	movwf	drawCircle@y0,c
  2368  000368  0E00               	movlw	0
  2369  00036A  6E1F               	movwf	drawCircle@r+1,c
  2370  00036C  0E07               	movlw	7
  2371  00036E  6E1E               	movwf	drawCircle@r,c
  2372  000370  0E07               	movlw	7
  2373  000372  6E21               	movwf	drawCircle@color+1,c
  2374  000374  0EE0               	movlw	224
  2375  000376  6E20               	movwf	drawCircle@color,c
  2376  000378  EC6B  F006         	call	_drawCircle	;wreg free
  2377                           
  2378                           ;Lab9.c: 214: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2379  00037C  0E3C               	movlw	60
  2380  00037E  6E37               	movwf	drawtext@y,c
  2381  000380  0E42               	movlw	low _EWLT_Count
  2382  000382  6E38               	movwf	drawtext@_text,c
  2383  000384  0E00               	movlw	high _EWLT_Count
  2384  000386  6E39               	movwf	drawtext@_text+1,c
  2385  000388  0EFF               	movlw	255
  2386  00038A  6E3B               	movwf	drawtext@color+1,c
  2387  00038C  683A               	setf	drawtext@color,c
  2388  00038E  0E00               	movlw	0
  2389  000390  6E3D               	movwf	drawtext@bg+1,c
  2390  000392  0E00               	movlw	0
  2391  000394  6E3C               	movwf	drawtext@bg,c
  2392  000396  0E02               	movlw	2
  2393  000398  6E3E               	movwf	drawtext@size,c
  2394  00039A  0E64               	movlw	100
  2395  00039C  ECD4  F009         	call	_drawtext
  2396                           
  2397                           ;Lab9.c: 217: strcpy(txt, "NORTH/SOUTH");
  2398  0003A0  C060  F00F         	movff	_txt,strcpy@to
  2399  0003A4  C061  F010         	movff	_txt+1,strcpy@to+1
  2400  0003A8  0EC1               	movlw	low STR_8
  2401  0003AA  6E11               	movwf	strcpy@from,c
  2402  0003AC  0EFF               	movlw	high STR_8
  2403  0003AE  6E12               	movwf	strcpy@from+1,c
  2404  0003B0  EC07  F012         	call	_strcpy	;wreg free
  2405                           
  2406                           ;Lab9.c: 218: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2407  0003B4  0E50               	movlw	80
  2408  0003B6  6E37               	movwf	drawtext@y,c
  2409  0003B8  C060  F038         	movff	_txt,drawtext@_text
  2410  0003BC  C061  F039         	movff	_txt+1,drawtext@_text+1
  2411  0003C0  0E00               	movlw	0
  2412  0003C2  6E3B               	movwf	drawtext@color+1,c
  2413  0003C4  0E1F               	movlw	31
  2414  0003C6  6E3A               	movwf	drawtext@color,c
  2415  0003C8  0E00               	movlw	0
  2416  0003CA  6E3D               	movwf	drawtext@bg+1,c
  2417  0003CC  0E00               	movlw	0
  2418  0003CE  6E3C               	movwf	drawtext@bg,c
  2419  0003D0  0E01               	movlw	1
  2420  0003D2  6E3E               	movwf	drawtext@size,c
  2421  0003D4  0E1E               	movlw	30
  2422  0003D6  ECD4  F009         	call	_drawtext
  2423                           
  2424                           ;Lab9.c: 219: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2425  0003DA  0E00               	movlw	0
  2426  0003DC  6E22               	movwf	drawRect@x+1,c
  2427  0003DE  0E1E               	movlw	30
  2428  0003E0  6E21               	movwf	drawRect@x,c
  2429  0003E2  0E00               	movlw	0
  2430  0003E4  6E24               	movwf	drawRect@y+1,c
  2431  0003E6  0E57               	movlw	87
  2432  0003E8  6E23               	movwf	drawRect@y,c
  2433  0003EA  0E00               	movlw	0
  2434  0003EC  6E26               	movwf	drawRect@w+1,c
  2435  0003EE  0E3C               	movlw	60
  2436  0003F0  6E25               	movwf	drawRect@w,c
  2437  0003F2  0E00               	movlw	0
  2438  0003F4  6E28               	movwf	drawRect@h+1,c
  2439  0003F6  0E12               	movlw	18
  2440  0003F8  6E27               	movwf	drawRect@h,c
  2441  0003FA  0E00               	movlw	0
  2442  0003FC  6E2A               	movwf	drawRect@color+1,c
  2443  0003FE  0E1F               	movlw	31
  2444  000400  6E29               	movwf	drawRect@color,c
  2445  000402  ECB0  F00F         	call	_drawRect	;wreg free
  2446                           
  2447                           ;Lab9.c: 220: drawCircle(40, 80 + 15 , 7, 0xF800);
  2448  000406  0E00               	movlw	0
  2449  000408  6E1B               	movwf	drawCircle@x0+1,c
  2450  00040A  0E28               	movlw	40
  2451  00040C  6E1A               	movwf	drawCircle@x0,c
  2452  00040E  0E00               	movlw	0
  2453  000410  6E1D               	movwf	drawCircle@y0+1,c
  2454  000412  0E5F               	movlw	95
  2455  000414  6E1C               	movwf	drawCircle@y0,c
  2456  000416  0E00               	movlw	0
  2457  000418  6E1F               	movwf	drawCircle@r+1,c
  2458  00041A  0E07               	movlw	7
  2459  00041C  6E1E               	movwf	drawCircle@r,c
  2460  00041E  0EF8               	movlw	248
  2461  000420  6E21               	movwf	drawCircle@color+1,c
  2462  000422  0E00               	movlw	0
  2463  000424  6E20               	movwf	drawCircle@color,c
  2464  000426  EC6B  F006         	call	_drawCircle	;wreg free
  2465                           
  2466                           ;Lab9.c: 221: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2467  00042A  0E00               	movlw	0
  2468  00042C  6E1B               	movwf	drawCircle@x0+1,c
  2469  00042E  0E3C               	movlw	60
  2470  000430  6E1A               	movwf	drawCircle@x0,c
  2471  000432  0E00               	movlw	0
  2472  000434  6E1D               	movwf	drawCircle@y0+1,c
  2473  000436  0E5F               	movlw	95
  2474  000438  6E1C               	movwf	drawCircle@y0,c
  2475  00043A  0E00               	movlw	0
  2476  00043C  6E1F               	movwf	drawCircle@r+1,c
  2477  00043E  0E07               	movlw	7
  2478  000440  6E1E               	movwf	drawCircle@r,c
  2479  000442  0EFF               	movlw	255
  2480  000444  6E21               	movwf	drawCircle@color+1,c
  2481  000446  0EE0               	movlw	224
  2482  000448  6E20               	movwf	drawCircle@color,c
  2483  00044A  EC6B  F006         	call	_drawCircle	;wreg free
  2484                           
  2485                           ;Lab9.c: 222: fillCircle(80, 80 + 15 , 7, 0x07E0);
  2486  00044E  0E00               	movlw	0
  2487  000450  6E3A               	movwf	fillCircle@x0+1,c
  2488  000452  0E50               	movlw	80
  2489  000454  6E39               	movwf	fillCircle@x0,c
  2490  000456  0E00               	movlw	0
  2491  000458  6E3C               	movwf	fillCircle@y0+1,c
  2492  00045A  0E5F               	movlw	95
  2493  00045C  6E3B               	movwf	fillCircle@y0,c
  2494  00045E  0E00               	movlw	0
  2495  000460  6E3E               	movwf	fillCircle@r+1,c
  2496  000462  0E07               	movlw	7
  2497  000464  6E3D               	movwf	fillCircle@r,c
  2498  000466  0E07               	movlw	7
  2499  000468  6E40               	movwf	fillCircle@color+1,c
  2500  00046A  0EE0               	movlw	224
  2501  00046C  6E3F               	movwf	fillCircle@color,c
  2502  00046E  EC68  F010         	call	_fillCircle	;wreg free
  2503                           
  2504                           ;Lab9.c: 223: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2505  000472  0E5A               	movlw	90
  2506  000474  6E37               	movwf	drawtext@y,c
  2507  000476  0E48               	movlw	low _NS_Count
  2508  000478  6E38               	movwf	drawtext@_text,c
  2509  00047A  0E00               	movlw	high _NS_Count
  2510  00047C  6E39               	movwf	drawtext@_text+1,c
  2511  00047E  0E00               	movlw	0
  2512  000480  6E3B               	movwf	drawtext@color+1,c
  2513  000482  0E1F               	movlw	31
  2514  000484  6E3A               	movwf	drawtext@color,c
  2515  000486  0E00               	movlw	0
  2516  000488  6E3D               	movwf	drawtext@bg+1,c
  2517  00048A  0E00               	movlw	0
  2518  00048C  6E3C               	movwf	drawtext@bg,c
  2519  00048E  0E02               	movlw	2
  2520  000490  6E3E               	movwf	drawtext@size,c
  2521  000492  0E64               	movlw	100
  2522  000494  ECD4  F009         	call	_drawtext
  2523                           
  2524                           ;Lab9.c: 226: strcpy(txt, "N/S LT");
  2525  000498  C060  F00F         	movff	_txt,strcpy@to
  2526  00049C  C061  F010         	movff	_txt+1,strcpy@to+1
  2527  0004A0  0ED7               	movlw	low STR_9
  2528  0004A2  6E11               	movwf	strcpy@from,c
  2529  0004A4  0EFF               	movlw	high STR_9
  2530  0004A6  6E12               	movwf	strcpy@from+1,c
  2531  0004A8  EC07  F012         	call	_strcpy	;wreg free
  2532                           
  2533                           ;Lab9.c: 227: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2534  0004AC  0E6E               	movlw	110
  2535  0004AE  6E37               	movwf	drawtext@y,c
  2536  0004B0  C060  F038         	movff	_txt,drawtext@_text
  2537  0004B4  C061  F039         	movff	_txt+1,drawtext@_text+1
  2538  0004B8  0EF8               	movlw	248
  2539  0004BA  6E3B               	movwf	drawtext@color+1,c
  2540  0004BC  0E1F               	movlw	31
  2541  0004BE  6E3A               	movwf	drawtext@color,c
  2542  0004C0  0E00               	movlw	0
  2543  0004C2  6E3D               	movwf	drawtext@bg+1,c
  2544  0004C4  0E00               	movlw	0
  2545  0004C6  6E3C               	movwf	drawtext@bg,c
  2546  0004C8  0E01               	movlw	1
  2547  0004CA  6E3E               	movwf	drawtext@size,c
  2548  0004CC  0E1E               	movlw	30
  2549  0004CE  ECD4  F009         	call	_drawtext
  2550                           
  2551                           ;Lab9.c: 228: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2552  0004D2  0E00               	movlw	0
  2553  0004D4  6E22               	movwf	drawRect@x+1,c
  2554  0004D6  0E1E               	movlw	30
  2555  0004D8  6E21               	movwf	drawRect@x,c
  2556  0004DA  0E00               	movlw	0
  2557  0004DC  6E24               	movwf	drawRect@y+1,c
  2558  0004DE  0E75               	movlw	117
  2559  0004E0  6E23               	movwf	drawRect@y,c
  2560  0004E2  0E00               	movlw	0
  2561  0004E4  6E26               	movwf	drawRect@w+1,c
  2562  0004E6  0E3C               	movlw	60
  2563  0004E8  6E25               	movwf	drawRect@w,c
  2564  0004EA  0E00               	movlw	0
  2565  0004EC  6E28               	movwf	drawRect@h+1,c
  2566  0004EE  0E12               	movlw	18
  2567  0004F0  6E27               	movwf	drawRect@h,c
  2568  0004F2  0EF8               	movlw	248
  2569  0004F4  6E2A               	movwf	drawRect@color+1,c
  2570  0004F6  0E1F               	movlw	31
  2571  0004F8  6E29               	movwf	drawRect@color,c
  2572  0004FA  ECB0  F00F         	call	_drawRect	;wreg free
  2573                           
  2574                           ;Lab9.c: 229: fillCircle(40, 110 + 15, 7, 0xF800);
  2575  0004FE  0E00               	movlw	0
  2576  000500  6E3A               	movwf	fillCircle@x0+1,c
  2577  000502  0E28               	movlw	40
  2578  000504  6E39               	movwf	fillCircle@x0,c
  2579  000506  0E00               	movlw	0
  2580  000508  6E3C               	movwf	fillCircle@y0+1,c
  2581  00050A  0E7D               	movlw	125
  2582  00050C  6E3B               	movwf	fillCircle@y0,c
  2583  00050E  0E00               	movlw	0
  2584  000510  6E3E               	movwf	fillCircle@r+1,c
  2585  000512  0E07               	movlw	7
  2586  000514  6E3D               	movwf	fillCircle@r,c
  2587  000516  0EF8               	movlw	248
  2588  000518  6E40               	movwf	fillCircle@color+1,c
  2589  00051A  0E00               	movlw	0
  2590  00051C  6E3F               	movwf	fillCircle@color,c
  2591  00051E  EC68  F010         	call	_fillCircle	;wreg free
  2592                           
  2593                           ;Lab9.c: 230: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2594  000522  0E00               	movlw	0
  2595  000524  6E1B               	movwf	drawCircle@x0+1,c
  2596  000526  0E3C               	movlw	60
  2597  000528  6E1A               	movwf	drawCircle@x0,c
  2598  00052A  0E00               	movlw	0
  2599  00052C  6E1D               	movwf	drawCircle@y0+1,c
  2600  00052E  0E7D               	movlw	125
  2601  000530  6E1C               	movwf	drawCircle@y0,c
  2602  000532  0E00               	movlw	0
  2603  000534  6E1F               	movwf	drawCircle@r+1,c
  2604  000536  0E07               	movlw	7
  2605  000538  6E1E               	movwf	drawCircle@r,c
  2606  00053A  0EFF               	movlw	255
  2607  00053C  6E21               	movwf	drawCircle@color+1,c
  2608  00053E  0EE0               	movlw	224
  2609  000540  6E20               	movwf	drawCircle@color,c
  2610  000542  EC6B  F006         	call	_drawCircle	;wreg free
  2611                           
  2612                           ;Lab9.c: 231: drawCircle(80, 110 + 15, 7, 0x07E0);
  2613  000546  0E00               	movlw	0
  2614  000548  6E1B               	movwf	drawCircle@x0+1,c
  2615  00054A  0E50               	movlw	80
  2616  00054C  6E1A               	movwf	drawCircle@x0,c
  2617  00054E  0E00               	movlw	0
  2618  000550  6E1D               	movwf	drawCircle@y0+1,c
  2619  000552  0E7D               	movlw	125
  2620  000554  6E1C               	movwf	drawCircle@y0,c
  2621  000556  0E00               	movlw	0
  2622  000558  6E1F               	movwf	drawCircle@r+1,c
  2623  00055A  0E07               	movlw	7
  2624  00055C  6E1E               	movwf	drawCircle@r,c
  2625  00055E  0E07               	movlw	7
  2626  000560  6E21               	movwf	drawCircle@color+1,c
  2627  000562  0EE0               	movlw	224
  2628  000564  6E20               	movwf	drawCircle@color,c
  2629  000566  EC6B  F006         	call	_drawCircle	;wreg free
  2630                           
  2631                           ;Lab9.c: 232: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2632  00056A  0E78               	movlw	120
  2633  00056C  6E37               	movwf	drawtext@y,c
  2634  00056E  0EAF               	movlw	low _NSLT_Count
  2635  000570  6E38               	movwf	drawtext@_text,c
  2636  000572  0E00               	movlw	high _NSLT_Count
  2637  000574  6E39               	movwf	drawtext@_text+1,c
  2638  000576  0EF8               	movlw	248
  2639  000578  6E3B               	movwf	drawtext@color+1,c
  2640  00057A  0E1F               	movlw	31
  2641  00057C  6E3A               	movwf	drawtext@color,c
  2642  00057E  0E00               	movlw	0
  2643  000580  6E3D               	movwf	drawtext@bg+1,c
  2644  000582  0E00               	movlw	0
  2645  000584  6E3C               	movwf	drawtext@bg,c
  2646  000586  0E02               	movlw	2
  2647  000588  6E3E               	movwf	drawtext@size,c
  2648  00058A  0E64               	movlw	100
  2649  00058C  ECD4  F009         	call	_drawtext
  2650                           
  2651                           ;Lab9.c: 236: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2652  000590  0E1E               	movlw	30
  2653  000592  6E37               	movwf	drawtext@y,c
  2654  000594  0EB2               	movlw	low _PED_EW_Count
  2655  000596  6E38               	movwf	drawtext@_text,c
  2656  000598  0E00               	movlw	high _PED_EW_Count
  2657  00059A  6E39               	movwf	drawtext@_text+1,c
  2658  00059C  0E07               	movlw	7
  2659  00059E  6E3B               	movwf	drawtext@color+1,c
  2660  0005A0  683A               	setf	drawtext@color,c
  2661  0005A2  0E00               	movlw	0
  2662  0005A4  6E3D               	movwf	drawtext@bg+1,c
  2663  0005A6  0E00               	movlw	0
  2664  0005A8  6E3C               	movwf	drawtext@bg,c
  2665  0005AA  0E02               	movlw	2
  2666  0005AC  6E3E               	movwf	drawtext@size,c
  2667  0005AE  0E02               	movlw	2
  2668  0005B0  ECD4  F009         	call	_drawtext
  2669                           
  2670                           ;Lab9.c: 237: strcpy(txt, "PEW");
  2671  0005B4  C060  F00F         	movff	_txt,strcpy@to
  2672  0005B8  C061  F010         	movff	_txt+1,strcpy@to+1
  2673  0005BC  0EF7               	movlw	low STR_10
  2674  0005BE  6E11               	movwf	strcpy@from,c
  2675  0005C0  0EFF               	movlw	high STR_10
  2676  0005C2  6E12               	movwf	strcpy@from+1,c
  2677  0005C4  EC07  F012         	call	_strcpy	;wreg free
  2678                           
  2679                           ;Lab9.c: 238: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2680  0005C8  0E14               	movlw	20
  2681  0005CA  6E37               	movwf	drawtext@y,c
  2682  0005CC  C060  F038         	movff	_txt,drawtext@_text
  2683  0005D0  C061  F039         	movff	_txt+1,drawtext@_text+1
  2684  0005D4  0E07               	movlw	7
  2685  0005D6  6E3B               	movwf	drawtext@color+1,c
  2686  0005D8  683A               	setf	drawtext@color,c
  2687  0005DA  0E00               	movlw	0
  2688  0005DC  6E3D               	movwf	drawtext@bg+1,c
  2689  0005DE  0E00               	movlw	0
  2690  0005E0  6E3C               	movwf	drawtext@bg,c
  2691  0005E2  0E01               	movlw	1
  2692  0005E4  6E3E               	movwf	drawtext@size,c
  2693  0005E6  0E03               	movlw	3
  2694  0005E8  ECD4  F009         	call	_drawtext
  2695                           
  2696                           ;Lab9.c: 241: strcpy(txt, "PNS");
  2697  0005EC  C060  F00F         	movff	_txt,strcpy@to
  2698  0005F0  C061  F010         	movff	_txt+1,strcpy@to+1
  2699  0005F4  0EF3               	movlw	low STR_11
  2700  0005F6  6E11               	movwf	strcpy@from,c
  2701  0005F8  0EFF               	movlw	high STR_11
  2702  0005FA  6E12               	movwf	strcpy@from+1,c
  2703  0005FC  EC07  F012         	call	_strcpy	;wreg free
  2704                           
  2705                           ;Lab9.c: 242: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  2706  000600  0E50               	movlw	80
  2707  000602  6E37               	movwf	drawtext@y,c
  2708  000604  C060  F038         	movff	_txt,drawtext@_text
  2709  000608  C061  F039         	movff	_txt+1,drawtext@_text+1
  2710  00060C  0E00               	movlw	0
  2711  00060E  6E3B               	movwf	drawtext@color+1,c
  2712  000610  0E1F               	movlw	31
  2713  000612  6E3A               	movwf	drawtext@color,c
  2714  000614  0E00               	movlw	0
  2715  000616  6E3D               	movwf	drawtext@bg+1,c
  2716  000618  0E00               	movlw	0
  2717  00061A  6E3C               	movwf	drawtext@bg,c
  2718  00061C  0E01               	movlw	1
  2719  00061E  6E3E               	movwf	drawtext@size,c
  2720  000620  0E03               	movlw	3
  2721  000622  ECD4  F009         	call	_drawtext
  2722                           
  2723                           ;Lab9.c: 243: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  2724  000626  0E5A               	movlw	90
  2725  000628  6E37               	movwf	drawtext@y,c
  2726  00062A  0EB5               	movlw	low _PED_NS_Count
  2727  00062C  6E38               	movwf	drawtext@_text,c
  2728  00062E  0E00               	movlw	high _PED_NS_Count
  2729  000630  6E39               	movwf	drawtext@_text+1,c
  2730  000632  0E00               	movlw	0
  2731  000634  6E3B               	movwf	drawtext@color+1,c
  2732  000636  0E1F               	movlw	31
  2733  000638  6E3A               	movwf	drawtext@color,c
  2734  00063A  0E00               	movlw	0
  2735  00063C  6E3D               	movwf	drawtext@bg+1,c
  2736  00063E  0E00               	movlw	0
  2737  000640  6E3C               	movwf	drawtext@bg,c
  2738  000642  0E02               	movlw	2
  2739  000644  6E3E               	movwf	drawtext@size,c
  2740  000646  0E02               	movlw	2
  2741  000648  ECD4  F009         	call	_drawtext
  2742                           
  2743                           ;Lab9.c: 246: strcpy(txt, "EWP EWLT NSP NSLT MD");
  2744  00064C  C060  F00F         	movff	_txt,strcpy@to
  2745  000650  C061  F010         	movff	_txt+1,strcpy@to+1
  2746  000654  0EAC               	movlw	low STR_12
  2747  000656  6E11               	movwf	strcpy@from,c
  2748  000658  0EFF               	movlw	high STR_12
  2749  00065A  6E12               	movwf	strcpy@from+1,c
  2750  00065C  EC07  F012         	call	_strcpy	;wreg free
  2751                           
  2752                           ;Lab9.c: 247: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2753  000660  0E8C               	movlw	140
  2754  000662  6E37               	movwf	drawtext@y,c
  2755  000664  C060  F038         	movff	_txt,drawtext@_text
  2756  000668  C061  F039         	movff	_txt+1,drawtext@_text+1
  2757  00066C  0EFF               	movlw	255
  2758  00066E  6E3B               	movwf	drawtext@color+1,c
  2759  000670  683A               	setf	drawtext@color,c
  2760  000672  0E00               	movlw	0
  2761  000674  6E3D               	movwf	drawtext@bg+1,c
  2762  000676  0E00               	movlw	0
  2763  000678  6E3C               	movwf	drawtext@bg,c
  2764  00067A  0E01               	movlw	1
  2765  00067C  6E3E               	movwf	drawtext@size,c
  2766  00067E  0E01               	movlw	1
  2767  000680  ECD4  F009         	call	_drawtext
  2768                           
  2769                           ;Lab9.c: 248: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2770  000684  0E95               	movlw	149
  2771  000686  6E37               	movwf	drawtext@y,c
  2772  000688  0E53               	movlw	low _SW_EWPED_Txt
  2773  00068A  6E38               	movwf	drawtext@_text,c
  2774  00068C  0E00               	movlw	high _SW_EWPED_Txt
  2775  00068E  6E39               	movwf	drawtext@_text+1,c
  2776  000690  0EFF               	movlw	255
  2777  000692  6E3B               	movwf	drawtext@color+1,c
  2778  000694  683A               	setf	drawtext@color,c
  2779  000696  0E00               	movlw	0
  2780  000698  6E3D               	movwf	drawtext@bg+1,c
  2781  00069A  0E00               	movlw	0
  2782  00069C  6E3C               	movwf	drawtext@bg,c
  2783  00069E  0E01               	movlw	1
  2784  0006A0  6E3E               	movwf	drawtext@size,c
  2785  0006A2  0E06               	movlw	6
  2786  0006A4  ECD4  F009         	call	_drawtext
  2787                           
  2788                           ;Lab9.c: 249: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2789  0006A8  0E95               	movlw	149
  2790  0006AA  6E37               	movwf	drawtext@y,c
  2791  0006AC  0E51               	movlw	low _SW_EWLT_Txt
  2792  0006AE  6E38               	movwf	drawtext@_text,c
  2793  0006B0  0E00               	movlw	high _SW_EWLT_Txt
  2794  0006B2  6E39               	movwf	drawtext@_text+1,c
  2795  0006B4  0EFF               	movlw	255
  2796  0006B6  6E3B               	movwf	drawtext@color+1,c
  2797  0006B8  683A               	setf	drawtext@color,c
  2798  0006BA  0E00               	movlw	0
  2799  0006BC  6E3D               	movwf	drawtext@bg+1,c
  2800  0006BE  0E00               	movlw	0
  2801  0006C0  6E3C               	movwf	drawtext@bg,c
  2802  0006C2  0E01               	movlw	1
  2803  0006C4  6E3E               	movwf	drawtext@size,c
  2804  0006C6  0E20               	movlw	32
  2805  0006C8  ECD4  F009         	call	_drawtext
  2806                           
  2807                           ;Lab9.c: 250: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2808  0006CC  0E95               	movlw	149
  2809  0006CE  6E37               	movwf	drawtext@y,c
  2810  0006D0  0E59               	movlw	low _SW_NSPED_Txt
  2811  0006D2  6E38               	movwf	drawtext@_text,c
  2812  0006D4  0E00               	movlw	high _SW_NSPED_Txt
  2813  0006D6  6E39               	movwf	drawtext@_text+1,c
  2814  0006D8  0EFF               	movlw	255
  2815  0006DA  6E3B               	movwf	drawtext@color+1,c
  2816  0006DC  683A               	setf	drawtext@color,c
  2817  0006DE  0E00               	movlw	0
  2818  0006E0  6E3D               	movwf	drawtext@bg+1,c
  2819  0006E2  0E00               	movlw	0
  2820  0006E4  6E3C               	movwf	drawtext@bg,c
  2821  0006E6  0E01               	movlw	1
  2822  0006E8  6E3E               	movwf	drawtext@size,c
  2823  0006EA  0E3A               	movlw	58
  2824  0006EC  ECD4  F009         	call	_drawtext
  2825                           
  2826                           ;Lab9.c: 251: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2827  0006F0  0E95               	movlw	149
  2828  0006F2  6E37               	movwf	drawtext@y,c
  2829  0006F4  0E57               	movlw	low _SW_NSLT_Txt
  2830  0006F6  6E38               	movwf	drawtext@_text,c
  2831  0006F8  0E00               	movlw	high _SW_NSLT_Txt
  2832  0006FA  6E39               	movwf	drawtext@_text+1,c
  2833  0006FC  0EFF               	movlw	255
  2834  0006FE  6E3B               	movwf	drawtext@color+1,c
  2835  000700  683A               	setf	drawtext@color,c
  2836  000702  0E00               	movlw	0
  2837  000704  6E3D               	movwf	drawtext@bg+1,c
  2838  000706  0E00               	movlw	0
  2839  000708  6E3C               	movwf	drawtext@bg,c
  2840  00070A  0E01               	movlw	1
  2841  00070C  6E3E               	movwf	drawtext@size,c
  2842  00070E  0E57               	movlw	87
  2843  000710  ECD4  F009         	call	_drawtext
  2844                           
  2845                           ;Lab9.c: 253: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  2846  000714  0E95               	movlw	149
  2847  000716  6E37               	movwf	drawtext@y,c
  2848  000718  0E55               	movlw	low _SW_MODE_Txt
  2849  00071A  6E38               	movwf	drawtext@_text,c
  2850  00071C  0E00               	movlw	high _SW_MODE_Txt
  2851  00071E  6E39               	movwf	drawtext@_text+1,c
  2852  000720  0EFF               	movlw	255
  2853  000722  6E3B               	movwf	drawtext@color+1,c
  2854  000724  683A               	setf	drawtext@color,c
  2855  000726  0E00               	movlw	0
  2856  000728  6E3D               	movwf	drawtext@bg+1,c
  2857  00072A  0E00               	movlw	0
  2858  00072C  6E3C               	movwf	drawtext@bg,c
  2859  00072E  0E01               	movlw	1
  2860  000730  6E3E               	movwf	drawtext@size,c
  2861  000732  0E70               	movlw	112
  2862  000734  ECD4  F009         	call	_drawtext
  2863  000738  0012               	return		;funcret
  2864  00073A                     __end_of_Initialize_Screen:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           intcon2	equ	0xFF1
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           postdec1	equ	0xFE5
  2874                           fsr1l	equ	0xFE1
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _fillScreen *****************
  2878 ;; Defined at:
  2879 ;;		line 652 in file "ST7735_TFT.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  color           2   33[COMRAM] unsigned int 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;		None               void
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, status,0, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2893 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;Total ram usage:        2 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    6
  2900 ;; This function calls:
  2901 ;;		_fillRectangle
  2902 ;; This function is called by:
  2903 ;;		_Initialize_Screen
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text3
  2908  00250E                     __ptext3:
  2909                           	opt stack 0
  2910  00250E                     _fillScreen:
  2911                           	opt stack 23
  2912                           
  2913                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  2914                           
  2915                           ;incstack = 0
  2916  00250E  0E00               	movlw	0
  2917  002510  6E16               	movwf	fillRectangle@y,c
  2918  002512  0E80               	movlw	128
  2919  002514  6E17               	movwf	fillRectangle@w,c
  2920  002516  0EA0               	movlw	160
  2921  002518  6E18               	movwf	fillRectangle@h,c
  2922  00251A  C022  F019         	movff	fillScreen@color,fillRectangle@color
  2923  00251E  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  2924  002522  0E00               	movlw	0
  2925  002524  EC43  F00B         	call	_fillRectangle
  2926  002528  0012               	return		;funcret
  2927  00252A                     __end_of_fillScreen:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           intcon2	equ	0xFF1
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postdec1	equ	0xFE5
  2937                           fsr1l	equ	0xFE1
  2938                           status	equ	0xFD8
  2939                           
  2940 ;; *************** function _fillRectangle *****************
  2941 ;; Defined at:
  2942 ;;		line 536 in file "ST7735_TFT.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  x               1    wreg     unsigned char 
  2945 ;;  y               1   21[COMRAM] unsigned char 
  2946 ;;  w               1   22[COMRAM] unsigned char 
  2947 ;;  h               1   23[COMRAM] unsigned char 
  2948 ;;  color           2   24[COMRAM] unsigned int 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  x               1   32[COMRAM] unsigned char 
  2951 ;;  lo              1   31[COMRAM] unsigned char 
  2952 ;;  hi              1   30[COMRAM] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;		None               void
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2962 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;Total ram usage:       12 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    5
  2969 ;; This function calls:
  2970 ;;		_setAddrWindow
  2971 ;;		_spiwrite
  2972 ;; This function is called by:
  2973 ;;		_fillScreen
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text4
  2978  001686                     __ptext4:
  2979                           	opt stack 0
  2980  001686                     _fillRectangle:
  2981                           	opt stack 23
  2982                           
  2983                           ;incstack = 0
  2984                           ;fillRectangle@x stored from wreg
  2985  001686  6E21               	movwf	fillRectangle@x,c
  2986                           
  2987                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  2988                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  2989  001688  0E80               	movlw	128
  2990  00168A  6021               	cpfslt	fillRectangle@x,c
  2991  00168C  D069               	goto	l240
  2992  00168E  0E9F               	movlw	159
  2993  001690  6416               	cpfsgt	fillRectangle@y,c
  2994  001692  D001               	goto	l4790
  2995                           
  2996                           ;ST7735_TFT.c: 540: return;
  2997  001694  D065               	goto	l240
  2998  001696                     l4790:
  2999                           
  3000                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3001  001696  0EFF               	movlw	255
  3002  001698  6E1B               	movwf	??_fillRectangle& (0+255),c
  3003  00169A  0EFF               	movlw	255
  3004  00169C  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3005  00169E  5017               	movf	fillRectangle@w,w,c
  3006  0016A0  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3007  0016A4  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3008  0016A6  261D               	addwf	??_fillRectangle+2,f,c
  3009  0016A8  0E00               	movlw	0
  3010  0016AA  221E               	addwfc	??_fillRectangle+3,f,c
  3011  0016AC  501B               	movf	??_fillRectangle,w,c
  3012  0016AE  261D               	addwf	??_fillRectangle+2,f,c
  3013  0016B0  501C               	movf	??_fillRectangle+1,w,c
  3014  0016B2  221E               	addwfc	??_fillRectangle+3,f,c
  3015  0016B4  BE1E               	btfsc	??_fillRectangle+3,7,c
  3016  0016B6  D00A               	goto	l241
  3017  0016B8  501E               	movf	??_fillRectangle+3,w,c
  3018  0016BA  E104               	bnz	u3490
  3019  0016BC  0E80               	movlw	128
  3020  0016BE  5C1D               	subwf	??_fillRectangle+2,w,c
  3021  0016C0  A0D8               	btfss	status,0,c
  3022  0016C2  D004               	goto	l241
  3023  0016C4                     u3490:
  3024                           
  3025                           ;ST7735_TFT.c: 542: w = 128 - x;
  3026  0016C4  5021               	movf	fillRectangle@x,w,c
  3027  0016C6  0800               	sublw	0
  3028  0016C8  0F80               	addlw	128
  3029  0016CA  6E17               	movwf	fillRectangle@w,c
  3030  0016CC                     l241:
  3031                           
  3032                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3033  0016CC  0EFF               	movlw	255
  3034  0016CE  6E1B               	movwf	??_fillRectangle& (0+255),c
  3035  0016D0  0EFF               	movlw	255
  3036  0016D2  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3037  0016D4  5018               	movf	fillRectangle@h,w,c
  3038  0016D6  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3039  0016DA  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3040  0016DC  261D               	addwf	??_fillRectangle+2,f,c
  3041  0016DE  0E00               	movlw	0
  3042  0016E0  221E               	addwfc	??_fillRectangle+3,f,c
  3043  0016E2  501B               	movf	??_fillRectangle,w,c
  3044  0016E4  261D               	addwf	??_fillRectangle+2,f,c
  3045  0016E6  501C               	movf	??_fillRectangle+1,w,c
  3046  0016E8  221E               	addwfc	??_fillRectangle+3,f,c
  3047  0016EA  BE1E               	btfsc	??_fillRectangle+3,7,c
  3048  0016EC  D00B               	goto	l4796
  3049  0016EE  501E               	movf	??_fillRectangle+3,w,c
  3050  0016F0  E104               	bnz	u3500
  3051  0016F2  0EA0               	movlw	160
  3052  0016F4  5C1D               	subwf	??_fillRectangle+2,w,c
  3053  0016F6  A0D8               	btfss	status,0,c
  3054  0016F8  D005               	goto	l4796
  3055  0016FA                     u3500:
  3056                           
  3057                           ;ST7735_TFT.c: 544: h = 160 - y;
  3058  0016FA  5016               	movf	fillRectangle@y,w,c
  3059  0016FC  0800               	sublw	0
  3060  0016FE  0FA0               	addlw	160
  3061  001700  6E18               	movwf	fillRectangle@h,c
  3062  001702  D000               	goto	l4796
  3063  001704                     l4796:
  3064                           
  3065                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3066  001704  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3067  001708  5021               	movf	fillRectangle@x,w,c
  3068  00170A  2417               	addwf	fillRectangle@w,w,c
  3069  00170C  6E1B               	movwf	??_fillRectangle& (0+255),c
  3070  00170E  041B               	decf	??_fillRectangle,w,c
  3071  001710  6E13               	movwf	setAddrWindow@x1,c
  3072  001712  5016               	movf	fillRectangle@y,w,c
  3073  001714  2418               	addwf	fillRectangle@h,w,c
  3074  001716  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3075  001718  041C               	decf	??_fillRectangle+1,w,c
  3076  00171A  6E14               	movwf	setAddrWindow@y1,c
  3077  00171C  5021               	movf	fillRectangle@x,w,c
  3078  00171E  EC91  F010         	call	_setAddrWindow
  3079                           
  3080                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3081  001722  501A               	movf	fillRectangle@color+1,w,c
  3082  001724  6E1F               	movwf	fillRectangle@hi,c
  3083  001726  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3084                           
  3085                           ;ST7735_TFT.c: 547: PORTDbits.RD0 = 1;
  3086  00172A  8083               	bsf	3971,0,c	;volatile
  3087                           
  3088                           ;ST7735_TFT.c: 548: PORTDbits.RD1 = 0;
  3089  00172C  9283               	bcf	3971,1,c	;volatile
  3090                           
  3091                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3092  00172E  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3093  001732                     l4808:
  3094  001732  5016               	movf	fillRectangle@y,w,c
  3095  001734  B4D8               	btfsc	status,2,c
  3096  001736  D013               	goto	l244
  3097  001738  D001               	goto	l243
  3098  00173A  D011               	goto	l244
  3099  00173C                     l243:
  3100                           
  3101                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3102  00173C  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3103  001740                     l4812:
  3104  001740  5021               	movf	fillRectangle@x,w,c
  3105  001742  B4D8               	btfsc	status,2,c
  3106  001744  D00A               	goto	l4822
  3107  001746  D001               	goto	l4816
  3108  001748  D008               	goto	l4822
  3109  00174A                     l4816:
  3110                           
  3111                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3112  00174A  501F               	movf	fillRectangle@hi,w,c
  3113  00174C  ECCF  F012         	call	_spiwrite
  3114                           
  3115                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3116  001750  5020               	movf	fillRectangle@lo,w,c
  3117  001752  ECCF  F012         	call	_spiwrite
  3118  001756  0621               	decf	fillRectangle@x,f,c
  3119  001758  D7F3               	goto	l4812
  3120  00175A                     l4822:
  3121  00175A  0616               	decf	fillRectangle@y,f,c
  3122  00175C  D7EA               	goto	l4808
  3123  00175E                     l244:
  3124                           
  3125                           ;ST7735_TFT.c: 554: }
  3126                           ;ST7735_TFT.c: 555: }
  3127                           ;ST7735_TFT.c: 556: PORTDbits.RD1 = 1;
  3128  00175E  8283               	bsf	3971,1,c	;volatile
  3129  001760                     l240:
  3130  001760  0012               	return		;funcret
  3131  001762                     __end_of_fillRectangle:
  3132                           	opt stack 0
  3133                           tblptru	equ	0xFF8
  3134                           tblptrh	equ	0xFF7
  3135                           tblptrl	equ	0xFF6
  3136                           tablat	equ	0xFF5
  3137                           intcon2	equ	0xFF1
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postdec1	equ	0xFE5
  3141                           fsr1l	equ	0xFE1
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _drawRect *****************
  3145 ;; Defined at:
  3146 ;;		line 718 in file "ST7735_TFT.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  x               2   32[COMRAM] unsigned int 
  3149 ;;  y               2   34[COMRAM] unsigned int 
  3150 ;;  w               2   36[COMRAM] unsigned int 
  3151 ;;  h               2   38[COMRAM] unsigned int 
  3152 ;;  color           2   40[COMRAM] unsigned int 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;		None               void
  3157 ;; Registers used:
  3158 ;;		wreg, status,2, status,0, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3164 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;Total ram usage:       11 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    6
  3171 ;; This function calls:
  3172 ;;		_drawFastHLine
  3173 ;;		_drawFastVLine
  3174 ;; This function is called by:
  3175 ;;		_Initialize_Screen
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text5
  3180  001F60                     __ptext5:
  3181                           	opt stack 0
  3182  001F60                     _drawRect:
  3183                           	opt stack 23
  3184                           
  3185                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3186                           
  3187                           ;incstack = 0
  3188  001F60  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3189  001F64  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3190  001F68  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3191  001F6C  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3192  001F70  5021               	movf	drawRect@x,w,c
  3193  001F72  EC2B  F00E         	call	_drawFastHLine
  3194                           
  3195                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3196  001F76  5023               	movf	drawRect@y,w,c
  3197  001F78  2427               	addwf	drawRect@h,w,c
  3198  001F7A  6E2B               	movwf	??_drawRect& (0+255),c
  3199  001F7C  042B               	decf	??_drawRect,w,c
  3200  001F7E  6E16               	movwf	drawFastHLine@y,c
  3201  001F80  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3202  001F84  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3203  001F88  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3204  001F8C  5021               	movf	drawRect@x,w,c
  3205  001F8E  EC2B  F00E         	call	_drawFastHLine
  3206                           
  3207                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3208  001F92  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3209  001F96  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3210  001F9A  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3211  001F9E  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3212  001FA2  5021               	movf	drawRect@x,w,c
  3213  001FA4  EC6F  F00E         	call	_drawFastVLine
  3214                           
  3215                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3216  001FA8  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3217  001FAC  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3218  001FB0  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3219  001FB4  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3220  001FB8  5021               	movf	drawRect@x,w,c
  3221  001FBA  2425               	addwf	drawRect@w,w,c
  3222  001FBC  6E2B               	movwf	??_drawRect& (0+255),c
  3223  001FBE  042B               	decf	??_drawRect,w,c
  3224  001FC0  EC6F  F00E         	call	_drawFastVLine
  3225  001FC4  0012               	return		;funcret
  3226  001FC6                     __end_of_drawRect:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           intcon2	equ	0xFF1
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           postdec1	equ	0xFE5
  3236                           fsr1l	equ	0xFE1
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _drawFastHLine *****************
  3240 ;; Defined at:
  3241 ;;		line 657 in file "ST7735_TFT.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  x               1    wreg     unsigned char 
  3244 ;;  y               1   21[COMRAM] unsigned char 
  3245 ;;  w               1   22[COMRAM] unsigned char 
  3246 ;;  color           2   23[COMRAM] unsigned int 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  x               1   31[COMRAM] unsigned char 
  3249 ;;  lo              1   30[COMRAM] unsigned char 
  3250 ;;  hi              1   29[COMRAM] unsigned char 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;		None               void
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;Total ram usage:       11 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:    5
  3267 ;; This function calls:
  3268 ;;		_setAddrWindow
  3269 ;;		_spiwrite
  3270 ;; This function is called by:
  3271 ;;		_drawRect
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text6
  3276  001C56                     __ptext6:
  3277                           	opt stack 0
  3278  001C56                     _drawFastHLine:
  3279                           	opt stack 23
  3280                           
  3281                           ;incstack = 0
  3282                           ;drawFastHLine@x stored from wreg
  3283  001C56  6E20               	movwf	drawFastHLine@x,c
  3284                           
  3285                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3286                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3287  001C58  0E80               	movlw	128
  3288  001C5A  6020               	cpfslt	drawFastHLine@x,c
  3289  001C5C  D03F               	goto	l285
  3290  001C5E  0E9F               	movlw	159
  3291  001C60  6416               	cpfsgt	drawFastHLine@y,c
  3292  001C62  D001               	goto	l4830
  3293                           
  3294                           ;ST7735_TFT.c: 661: return;
  3295  001C64  D03B               	goto	l285
  3296  001C66                     l4830:
  3297                           
  3298                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3299  001C66  0EFF               	movlw	255
  3300  001C68  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3301  001C6A  0EFF               	movlw	255
  3302  001C6C  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3303  001C6E  5017               	movf	drawFastHLine@w,w,c
  3304  001C70  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3305  001C74  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3306  001C76  261C               	addwf	??_drawFastHLine+2,f,c
  3307  001C78  0E00               	movlw	0
  3308  001C7A  221D               	addwfc	??_drawFastHLine+3,f,c
  3309  001C7C  501A               	movf	??_drawFastHLine,w,c
  3310  001C7E  261C               	addwf	??_drawFastHLine+2,f,c
  3311  001C80  501B               	movf	??_drawFastHLine+1,w,c
  3312  001C82  221D               	addwfc	??_drawFastHLine+3,f,c
  3313  001C84  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3314  001C86  D00B               	goto	l4834
  3315  001C88  501D               	movf	??_drawFastHLine+3,w,c
  3316  001C8A  E104               	bnz	u3570
  3317  001C8C  0E80               	movlw	128
  3318  001C8E  5C1C               	subwf	??_drawFastHLine+2,w,c
  3319  001C90  A0D8               	btfss	status,0,c
  3320  001C92  D005               	goto	l4834
  3321  001C94                     u3570:
  3322                           
  3323                           ;ST7735_TFT.c: 663: w = 128 - x;
  3324  001C94  5020               	movf	drawFastHLine@x,w,c
  3325  001C96  0800               	sublw	0
  3326  001C98  0F80               	addlw	128
  3327  001C9A  6E17               	movwf	drawFastHLine@w,c
  3328  001C9C  D000               	goto	l4834
  3329  001C9E                     l4834:
  3330                           
  3331                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3332  001C9E  5019               	movf	drawFastHLine@color+1,w,c
  3333  001CA0  6E1E               	movwf	drawFastHLine@hi,c
  3334  001CA2  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3335                           
  3336                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3337  001CA6  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3338  001CAA  5020               	movf	drawFastHLine@x,w,c
  3339  001CAC  2417               	addwf	drawFastHLine@w,w,c
  3340  001CAE  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3341  001CB0  041A               	decf	??_drawFastHLine,w,c
  3342  001CB2  6E13               	movwf	setAddrWindow@x1,c
  3343  001CB4  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3344  001CB8  5020               	movf	drawFastHLine@x,w,c
  3345  001CBA  EC91  F010         	call	_setAddrWindow
  3346                           
  3347                           ;ST7735_TFT.c: 666: PORTDbits.RD0 = 1;
  3348  001CBE  8083               	bsf	3971,0,c	;volatile
  3349                           
  3350                           ;ST7735_TFT.c: 667: PORTDbits.RD1 = 0;
  3351  001CC0  9283               	bcf	3971,1,c	;volatile
  3352                           
  3353                           ;ST7735_TFT.c: 669: while (w--) {
  3354  001CC2  D007               	goto	l4846
  3355  001CC4                     l4844:
  3356                           
  3357                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3358  001CC4  501E               	movf	drawFastHLine@hi,w,c
  3359  001CC6  ECCF  F012         	call	_spiwrite
  3360                           
  3361                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3362  001CCA  501F               	movf	drawFastHLine@lo,w,c
  3363  001CCC  ECCF  F012         	call	_spiwrite
  3364  001CD0  D000               	goto	l4846
  3365  001CD2                     l4846:
  3366  001CD2  0617               	decf	drawFastHLine@w,f,c
  3367  001CD4  2817               	incf	drawFastHLine@w,w,c
  3368  001CD6  A4D8               	btfss	status,2,c
  3369  001CD8  D7F5               	goto	l4844
  3370                           
  3371                           ;ST7735_TFT.c: 672: }
  3372                           ;ST7735_TFT.c: 673: PORTDbits.RD1 = 1;
  3373  001CDA  8283               	bsf	3971,1,c	;volatile
  3374  001CDC                     l285:
  3375  001CDC  0012               	return		;funcret
  3376  001CDE                     __end_of_drawFastHLine:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           intcon2	equ	0xFF1
  3383                           postinc0	equ	0xFEE
  3384                           wreg	equ	0xFE8
  3385                           postdec1	equ	0xFE5
  3386                           fsr1l	equ	0xFE1
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _TFT_GreenTab_Initialize *****************
  3390 ;; Defined at:
  3391 ;;		line 677 in file "ST7735_TFT.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;		None               void
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    5
  3412 ;; This function calls:
  3413 ;;		_Rcmd1
  3414 ;;		_Rcmd2red
  3415 ;;		_Rcmd3
  3416 ;;		_write_command
  3417 ;;		_write_data
  3418 ;; This function is called by:
  3419 ;;		_Initialize_Screen
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text7
  3424  002470                     __ptext7:
  3425                           	opt stack 0
  3426  002470                     _TFT_GreenTab_Initialize:
  3427                           	opt stack 24
  3428                           
  3429                           ;ST7735_TFT.c: 679: PORTDbits.RD1 = 1;
  3430                           
  3431                           ;incstack = 0
  3432  002470  8283               	bsf	3971,1,c	;volatile
  3433                           
  3434                           ;ST7735_TFT.c: 680: PORTDbits.RD0 = 0;
  3435  002472  9083               	bcf	3971,0,c	;volatile
  3436                           
  3437                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3438  002474  0E80               	movlw	128
  3439  002476  6EC7               	movwf	4039,c	;volatile
  3440                           
  3441                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3442  002478  0E30               	movlw	48
  3443  00247A  6EC6               	movwf	4038,c	;volatile
  3444                           
  3445                           ;ST7735_TFT.c: 686: Rcmd1();
  3446  00247C  EC4C  F009         	call	_Rcmd1	;wreg free
  3447                           
  3448                           ;ST7735_TFT.c: 687: Rcmd2red();
  3449  002480  EC8F  F011         	call	_Rcmd2red	;wreg free
  3450                           
  3451                           ;ST7735_TFT.c: 688: Rcmd3();
  3452  002484  EC59  F00A         	call	_Rcmd3	;wreg free
  3453                           
  3454                           ;ST7735_TFT.c: 689: write_command(0x36);
  3455  002488  0E36               	movlw	54
  3456  00248A  EC05  F013         	call	_write_command
  3457                           
  3458                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3459  00248E  0EC0               	movlw	192
  3460  002490  ECFD  F012         	call	_write_data
  3461                           
  3462                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3463  002494  0E01               	movlw	1
  3464  002496  6E6D               	movwf	__tft_type,c
  3465  002498  0012               	return		;funcret
  3466  00249A                     __end_of_TFT_GreenTab_Initialize:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           intcon2	equ	0xFF1
  3473                           postinc0	equ	0xFEE
  3474                           wreg	equ	0xFE8
  3475                           postdec1	equ	0xFE5
  3476                           fsr1l	equ	0xFE1
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function _Rcmd3 *****************
  3480 ;; Defined at:
  3481 ;;		line 371 in file "ST7735_TFT.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;		None               void
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;Total ram usage:        0 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    4
  3502 ;; This function calls:
  3503 ;;		_delay_ms
  3504 ;;		_write_command
  3505 ;;		_write_data
  3506 ;; This function is called by:
  3507 ;;		_TFT_GreenTab_Initialize
  3508 ;;		_TFT_BlackTab_Initialize
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text8
  3513  0014B2                     __ptext8:
  3514                           	opt stack 0
  3515  0014B2                     _Rcmd3:
  3516                           	opt stack 24
  3517                           
  3518                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3519                           
  3520                           ;incstack = 0
  3521  0014B2  0EE0               	movlw	224
  3522  0014B4  EC05  F013         	call	_write_command
  3523                           
  3524                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3525  0014B8  0E02               	movlw	2
  3526  0014BA  ECFD  F012         	call	_write_data
  3527  0014BE  0E1C               	movlw	28
  3528  0014C0  ECFD  F012         	call	_write_data
  3529  0014C4  0E07               	movlw	7
  3530  0014C6  ECFD  F012         	call	_write_data
  3531  0014CA  0E12               	movlw	18
  3532  0014CC  ECFD  F012         	call	_write_data
  3533                           
  3534                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3535  0014D0  0E37               	movlw	55
  3536  0014D2  ECFD  F012         	call	_write_data
  3537  0014D6  0E32               	movlw	50
  3538  0014D8  ECFD  F012         	call	_write_data
  3539  0014DC  0E29               	movlw	41
  3540  0014DE  ECFD  F012         	call	_write_data
  3541  0014E2  0E2D               	movlw	45
  3542  0014E4  ECFD  F012         	call	_write_data
  3543                           
  3544                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3545  0014E8  0E29               	movlw	41
  3546  0014EA  ECFD  F012         	call	_write_data
  3547  0014EE  0E25               	movlw	37
  3548  0014F0  ECFD  F012         	call	_write_data
  3549  0014F4  0E2B               	movlw	43
  3550  0014F6  ECFD  F012         	call	_write_data
  3551  0014FA  0E39               	movlw	57
  3552  0014FC  ECFD  F012         	call	_write_data
  3553                           
  3554                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3555  001500  0E00               	movlw	0
  3556  001502  ECFD  F012         	call	_write_data
  3557  001506  0E01               	movlw	1
  3558  001508  ECFD  F012         	call	_write_data
  3559  00150C  0E03               	movlw	3
  3560  00150E  ECFD  F012         	call	_write_data
  3561  001512  0E10               	movlw	16
  3562  001514  ECFD  F012         	call	_write_data
  3563                           
  3564                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3565  001518  0EE1               	movlw	225
  3566  00151A  EC05  F013         	call	_write_command
  3567                           
  3568                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3569  00151E  0E03               	movlw	3
  3570  001520  ECFD  F012         	call	_write_data
  3571  001524  0E1D               	movlw	29
  3572  001526  ECFD  F012         	call	_write_data
  3573  00152A  0E07               	movlw	7
  3574  00152C  ECFD  F012         	call	_write_data
  3575  001530  0E06               	movlw	6
  3576  001532  ECFD  F012         	call	_write_data
  3577                           
  3578                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3579  001536  0E2E               	movlw	46
  3580  001538  ECFD  F012         	call	_write_data
  3581  00153C  0E2C               	movlw	44
  3582  00153E  ECFD  F012         	call	_write_data
  3583  001542  0E29               	movlw	41
  3584  001544  ECFD  F012         	call	_write_data
  3585  001548  0E2D               	movlw	45
  3586  00154A  ECFD  F012         	call	_write_data
  3587                           
  3588                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3589  00154E  0E2E               	movlw	46
  3590  001550  ECFD  F012         	call	_write_data
  3591  001554  0E2E               	movlw	46
  3592  001556  ECFD  F012         	call	_write_data
  3593  00155A  0E37               	movlw	55
  3594  00155C  ECFD  F012         	call	_write_data
  3595  001560  0E3F               	movlw	63
  3596  001562  ECFD  F012         	call	_write_data
  3597                           
  3598                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3599  001566  0E00               	movlw	0
  3600  001568  ECFD  F012         	call	_write_data
  3601  00156C  0E00               	movlw	0
  3602  00156E  ECFD  F012         	call	_write_data
  3603  001572  0E02               	movlw	2
  3604  001574  ECFD  F012         	call	_write_data
  3605  001578  0E10               	movlw	16
  3606  00157A  ECFD  F012         	call	_write_data
  3607                           
  3608                           ;ST7735_TFT.c: 383: write_command(0x13);
  3609  00157E  0E13               	movlw	19
  3610  001580  EC05  F013         	call	_write_command
  3611                           
  3612                           ;ST7735_TFT.c: 384: delay_ms(10);
  3613  001584  0E00               	movlw	0
  3614  001586  6E16               	movwf	delay_ms@ms+1,c
  3615  001588  0E0A               	movlw	10
  3616  00158A  6E15               	movwf	delay_ms@ms,c
  3617  00158C  EC3F  F010         	call	_delay_ms	;wreg free
  3618                           
  3619                           ;ST7735_TFT.c: 385: write_command(0x29);
  3620  001590  0E29               	movlw	41
  3621  001592  EC05  F013         	call	_write_command
  3622                           
  3623                           ;ST7735_TFT.c: 386: delay_ms(100);
  3624  001596  0E00               	movlw	0
  3625  001598  6E16               	movwf	delay_ms@ms+1,c
  3626  00159A  0E64               	movlw	100
  3627  00159C  6E15               	movwf	delay_ms@ms,c
  3628  00159E  EC3F  F010         	call	_delay_ms	;wreg free
  3629  0015A2  0012               	return		;funcret
  3630  0015A4                     __end_of_Rcmd3:
  3631                           	opt stack 0
  3632                           tblptru	equ	0xFF8
  3633                           tblptrh	equ	0xFF7
  3634                           tblptrl	equ	0xFF6
  3635                           tablat	equ	0xFF5
  3636                           intcon2	equ	0xFF1
  3637                           postinc0	equ	0xFEE
  3638                           wreg	equ	0xFE8
  3639                           postdec1	equ	0xFE5
  3640                           fsr1l	equ	0xFE1
  3641                           status	equ	0xFD8
  3642                           
  3643 ;; *************** function _Rcmd2red *****************
  3644 ;; Defined at:
  3645 ;;		line 361 in file "ST7735_TFT.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;		None
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;		None
  3650 ;; Return value:  Size  Location     Type
  3651 ;;		None               void
  3652 ;; Registers used:
  3653 ;;		wreg, status,2, cstack
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;Total ram usage:        0 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    4
  3666 ;; This function calls:
  3667 ;;		_write_command
  3668 ;;		_write_data
  3669 ;; This function is called by:
  3670 ;;		_TFT_GreenTab_Initialize
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text9
  3675  00231E                     __ptext9:
  3676                           	opt stack 0
  3677  00231E                     _Rcmd2red:
  3678                           	opt stack 24
  3679                           
  3680                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3681                           
  3682                           ;incstack = 0
  3683  00231E  0E2A               	movlw	42
  3684  002320  EC05  F013         	call	_write_command
  3685                           
  3686                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3687  002324  0E00               	movlw	0
  3688  002326  ECFD  F012         	call	_write_data
  3689  00232A  0E00               	movlw	0
  3690  00232C  ECFD  F012         	call	_write_data
  3691                           
  3692                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3693  002330  0E00               	movlw	0
  3694  002332  ECFD  F012         	call	_write_data
  3695  002336  0E7F               	movlw	127
  3696  002338  ECFD  F012         	call	_write_data
  3697                           
  3698                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3699  00233C  0E2B               	movlw	43
  3700  00233E  EC05  F013         	call	_write_command
  3701                           
  3702                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3703  002342  0E00               	movlw	0
  3704  002344  ECFD  F012         	call	_write_data
  3705  002348  0E00               	movlw	0
  3706  00234A  ECFD  F012         	call	_write_data
  3707                           
  3708                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3709  00234E  0E00               	movlw	0
  3710  002350  ECFD  F012         	call	_write_data
  3711  002354  0E9F               	movlw	159
  3712  002356  ECFD  F012         	call	_write_data
  3713  00235A  0012               	return		;funcret
  3714  00235C                     __end_of_Rcmd2red:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           intcon2	equ	0xFF1
  3721                           postinc0	equ	0xFEE
  3722                           wreg	equ	0xFE8
  3723                           postdec1	equ	0xFE5
  3724                           fsr1l	equ	0xFE1
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _Rcmd1 *****************
  3728 ;; Defined at:
  3729 ;;		line 314 in file "ST7735_TFT.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;		None
  3734 ;; Return value:  Size  Location     Type
  3735 ;;		None               void
  3736 ;; Registers used:
  3737 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;Total ram usage:        0 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; Hardware stack levels required when called:    4
  3750 ;; This function calls:
  3751 ;;		_delay_ms
  3752 ;;		_write_command
  3753 ;;		_write_data
  3754 ;; This function is called by:
  3755 ;;		_TFT_GreenTab_Initialize
  3756 ;;		_TFT_BlackTab_Initialize
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text10
  3761  001298                     __ptext10:
  3762                           	opt stack 0
  3763  001298                     _Rcmd1:
  3764                           	opt stack 24
  3765                           
  3766                           ;ST7735_TFT.c: 316: write_command(0x01);
  3767                           
  3768                           ;incstack = 0
  3769  001298  0E01               	movlw	1
  3770  00129A  EC05  F013         	call	_write_command
  3771                           
  3772                           ;ST7735_TFT.c: 317: delay_ms(150);
  3773  00129E  0E00               	movlw	0
  3774  0012A0  6E16               	movwf	delay_ms@ms+1,c
  3775  0012A2  0E96               	movlw	150
  3776  0012A4  6E15               	movwf	delay_ms@ms,c
  3777  0012A6  EC3F  F010         	call	_delay_ms	;wreg free
  3778                           
  3779                           ;ST7735_TFT.c: 318: write_command(0x11);
  3780  0012AA  0E11               	movlw	17
  3781  0012AC  EC05  F013         	call	_write_command
  3782                           
  3783                           ;ST7735_TFT.c: 319: delay_ms(500);
  3784  0012B0  0E01               	movlw	1
  3785  0012B2  6E16               	movwf	delay_ms@ms+1,c
  3786  0012B4  0EF4               	movlw	244
  3787  0012B6  6E15               	movwf	delay_ms@ms,c
  3788  0012B8  EC3F  F010         	call	_delay_ms	;wreg free
  3789                           
  3790                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3791  0012BC  0EB1               	movlw	177
  3792  0012BE  EC05  F013         	call	_write_command
  3793                           
  3794                           ;ST7735_TFT.c: 321: write_data(0x01);
  3795  0012C2  0E01               	movlw	1
  3796  0012C4  ECFD  F012         	call	_write_data
  3797                           
  3798                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3799  0012C8  0E2C               	movlw	44
  3800  0012CA  ECFD  F012         	call	_write_data
  3801                           
  3802                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3803  0012CE  0E2D               	movlw	45
  3804  0012D0  ECFD  F012         	call	_write_data
  3805                           
  3806                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3807  0012D4  0EB2               	movlw	178
  3808  0012D6  EC05  F013         	call	_write_command
  3809                           
  3810                           ;ST7735_TFT.c: 325: write_data(0x01);
  3811  0012DA  0E01               	movlw	1
  3812  0012DC  ECFD  F012         	call	_write_data
  3813                           
  3814                           ;ST7735_TFT.c: 326: write_data(0x2C);
  3815  0012E0  0E2C               	movlw	44
  3816  0012E2  ECFD  F012         	call	_write_data
  3817                           
  3818                           ;ST7735_TFT.c: 327: write_data(0x2D);
  3819  0012E6  0E2D               	movlw	45
  3820  0012E8  ECFD  F012         	call	_write_data
  3821                           
  3822                           ;ST7735_TFT.c: 328: write_command(0xB3);
  3823  0012EC  0EB3               	movlw	179
  3824  0012EE  EC05  F013         	call	_write_command
  3825                           
  3826                           ;ST7735_TFT.c: 329: write_data(0x01);
  3827  0012F2  0E01               	movlw	1
  3828  0012F4  ECFD  F012         	call	_write_data
  3829                           
  3830                           ;ST7735_TFT.c: 330: write_data(0x2C);
  3831  0012F8  0E2C               	movlw	44
  3832  0012FA  ECFD  F012         	call	_write_data
  3833                           
  3834                           ;ST7735_TFT.c: 331: write_data(0x2D);
  3835  0012FE  0E2D               	movlw	45
  3836  001300  ECFD  F012         	call	_write_data
  3837                           
  3838                           ;ST7735_TFT.c: 332: write_data(0x01);
  3839  001304  0E01               	movlw	1
  3840  001306  ECFD  F012         	call	_write_data
  3841                           
  3842                           ;ST7735_TFT.c: 333: write_data(0x2C);
  3843  00130A  0E2C               	movlw	44
  3844  00130C  ECFD  F012         	call	_write_data
  3845                           
  3846                           ;ST7735_TFT.c: 334: write_data(0x2D);
  3847  001310  0E2D               	movlw	45
  3848  001312  ECFD  F012         	call	_write_data
  3849                           
  3850                           ;ST7735_TFT.c: 335: write_command(0xB4);
  3851  001316  0EB4               	movlw	180
  3852  001318  EC05  F013         	call	_write_command
  3853                           
  3854                           ;ST7735_TFT.c: 336: write_data(0x07);
  3855  00131C  0E07               	movlw	7
  3856  00131E  ECFD  F012         	call	_write_data
  3857                           
  3858                           ;ST7735_TFT.c: 337: write_command(0xC0);
  3859  001322  0EC0               	movlw	192
  3860  001324  EC05  F013         	call	_write_command
  3861                           
  3862                           ;ST7735_TFT.c: 338: write_data(0xA2);
  3863  001328  0EA2               	movlw	162
  3864  00132A  ECFD  F012         	call	_write_data
  3865                           
  3866                           ;ST7735_TFT.c: 339: write_data(0x02);
  3867  00132E  0E02               	movlw	2
  3868  001330  ECFD  F012         	call	_write_data
  3869                           
  3870                           ;ST7735_TFT.c: 340: write_data(0x84);
  3871  001334  0E84               	movlw	132
  3872  001336  ECFD  F012         	call	_write_data
  3873                           
  3874                           ;ST7735_TFT.c: 341: write_command(0xC1);
  3875  00133A  0EC1               	movlw	193
  3876  00133C  EC05  F013         	call	_write_command
  3877                           
  3878                           ;ST7735_TFT.c: 342: write_data(0xC5);
  3879  001340  0EC5               	movlw	197
  3880  001342  ECFD  F012         	call	_write_data
  3881                           
  3882                           ;ST7735_TFT.c: 343: write_command(0xC2);
  3883  001346  0EC2               	movlw	194
  3884  001348  EC05  F013         	call	_write_command
  3885                           
  3886                           ;ST7735_TFT.c: 344: write_data(0x0A);
  3887  00134C  0E0A               	movlw	10
  3888  00134E  ECFD  F012         	call	_write_data
  3889                           
  3890                           ;ST7735_TFT.c: 345: write_data(0x00);
  3891  001352  0E00               	movlw	0
  3892  001354  ECFD  F012         	call	_write_data
  3893                           
  3894                           ;ST7735_TFT.c: 346: write_command(0xC3);
  3895  001358  0EC3               	movlw	195
  3896  00135A  EC05  F013         	call	_write_command
  3897                           
  3898                           ;ST7735_TFT.c: 347: write_data(0x8A);
  3899  00135E  0E8A               	movlw	138
  3900  001360  ECFD  F012         	call	_write_data
  3901                           
  3902                           ;ST7735_TFT.c: 348: write_data(0x2A);
  3903  001364  0E2A               	movlw	42
  3904  001366  ECFD  F012         	call	_write_data
  3905                           
  3906                           ;ST7735_TFT.c: 349: write_command(0xC4);
  3907  00136A  0EC4               	movlw	196
  3908  00136C  EC05  F013         	call	_write_command
  3909                           
  3910                           ;ST7735_TFT.c: 350: write_data(0x8A);
  3911  001370  0E8A               	movlw	138
  3912  001372  ECFD  F012         	call	_write_data
  3913                           
  3914                           ;ST7735_TFT.c: 351: write_data(0xEE);
  3915  001376  0EEE               	movlw	238
  3916  001378  ECFD  F012         	call	_write_data
  3917                           
  3918                           ;ST7735_TFT.c: 352: write_command(0xC5);
  3919  00137C  0EC5               	movlw	197
  3920  00137E  EC05  F013         	call	_write_command
  3921                           
  3922                           ;ST7735_TFT.c: 353: write_data(0x0E);
  3923  001382  0E0E               	movlw	14
  3924  001384  ECFD  F012         	call	_write_data
  3925                           
  3926                           ;ST7735_TFT.c: 354: write_command(0x20);
  3927  001388  0E20               	movlw	32
  3928  00138A  EC05  F013         	call	_write_command
  3929                           
  3930                           ;ST7735_TFT.c: 355: write_command(0x36);
  3931  00138E  0E36               	movlw	54
  3932  001390  EC05  F013         	call	_write_command
  3933                           
  3934                           ;ST7735_TFT.c: 356: write_data(0xC8);
  3935  001394  0EC8               	movlw	200
  3936  001396  ECFD  F012         	call	_write_data
  3937                           
  3938                           ;ST7735_TFT.c: 357: write_command(0x3A);
  3939  00139A  0E3A               	movlw	58
  3940  00139C  EC05  F013         	call	_write_command
  3941                           
  3942                           ;ST7735_TFT.c: 358: write_data(0x05);
  3943  0013A0  0E05               	movlw	5
  3944  0013A2  ECFD  F012         	call	_write_data
  3945  0013A6  0012               	return		;funcret
  3946  0013A8                     __end_of_Rcmd1:
  3947                           	opt stack 0
  3948                           tblptru	equ	0xFF8
  3949                           tblptrh	equ	0xFF7
  3950                           tblptrl	equ	0xFF6
  3951                           tablat	equ	0xFF5
  3952                           intcon2	equ	0xFF1
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           postdec1	equ	0xFE5
  3956                           fsr1l	equ	0xFE1
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _LCD_Reset *****************
  3960 ;; Defined at:
  3961 ;;		line 250 in file "ST7735_TFT.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;		None               void
  3968 ;; Registers used:
  3969 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;Total ram usage:        0 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    4
  3982 ;; This function calls:
  3983 ;;		_delay_ms
  3984 ;; This function is called by:
  3985 ;;		_Initialize_Screen
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text11
  3990  0025B2                     __ptext11:
  3991                           	opt stack 0
  3992  0025B2                     _LCD_Reset:
  3993                           	opt stack 25
  3994                           
  3995                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  3996                           
  3997                           ;incstack = 0
  3998  0025B2  9483               	bcf	3971,2,c	;volatile
  3999                           
  4000                           ;ST7735_TFT.c: 253: delay_ms(100);
  4001  0025B4  0E00               	movlw	0
  4002  0025B6  6E16               	movwf	delay_ms@ms+1,c
  4003  0025B8  0E64               	movlw	100
  4004  0025BA  6E15               	movwf	delay_ms@ms,c
  4005  0025BC  EC3F  F010         	call	_delay_ms	;wreg free
  4006                           
  4007                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4008  0025C0  8483               	bsf	3971,2,c	;volatile
  4009  0025C2  0012               	return		;funcret
  4010  0025C4                     __end_of_LCD_Reset:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           intcon2	equ	0xFF1
  4017                           postinc0	equ	0xFEE
  4018                           wreg	equ	0xFE8
  4019                           postdec1	equ	0xFE5
  4020                           fsr1l	equ	0xFE1
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function _delay_ms *****************
  4024 ;; Defined at:
  4025 ;;		line 97 in file "ST7735_TFT.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  ms              2   20[COMRAM] int 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  count           2   24[COMRAM] int 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;		None               void
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4039 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;Total ram usage:        6 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    3
  4046 ;; This function calls:
  4047 ;;		___wmul
  4048 ;; This function is called by:
  4049 ;;		_LCD_Reset
  4050 ;;		_Rcmd1
  4051 ;;		_Rcmd3
  4052 ;;		_Bcmd
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text12
  4057  00207E                     __ptext12:
  4058                           	opt stack 0
  4059  00207E                     _delay_ms:
  4060                           	opt stack 24
  4061                           
  4062                           ;ST7735_TFT.c: 103: int count;
  4063                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4064                           
  4065                           ;incstack = 0
  4066  00207E  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4067  002082  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4068  002086  0E00               	movlw	0
  4069  002088  6E12               	movwf	___wmul@multiplicand+1,c
  4070  00208A  0EFA               	movlw	250
  4071  00208C  6E11               	movwf	___wmul@multiplicand,c
  4072  00208E  EC4D  F012         	call	___wmul	;wreg free
  4073  002092  C00F  F019         	movff	?___wmul,delay_ms@count
  4074  002096  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4075                           
  4076                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4077  00209A  C019  F017         	movff	delay_ms@count,??_delay_ms
  4078  00209E  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4079  0020A2  1E17               	comf	??_delay_ms,f,c
  4080  0020A4  1E18               	comf	??_delay_ms+1,f,c
  4081  0020A6  4A17               	infsnz	??_delay_ms,f,c
  4082  0020A8  2A18               	incf	??_delay_ms+1,f,c
  4083  0020AA  0EFF               	movlw	255
  4084  0020AC  2417               	addwf	??_delay_ms,w,c
  4085  0020AE  6E19               	movwf	delay_ms@count,c
  4086  0020B0  0EFF               	movlw	255
  4087  0020B2  2018               	addwfc	??_delay_ms+1,w,c
  4088  0020B4  6E1A               	movwf	delay_ms@count+1,c
  4089                           
  4090                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4091  0020B6  0EB8               	movlw	184
  4092  0020B8  6EB1               	movwf	4017,c	;volatile
  4093                           
  4094                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4095  0020BA  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4096                           
  4097                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4098  0020BE  501A               	movf	delay_ms@count+1,w,c
  4099  0020C0  6ED7               	movwf	4055,c	;volatile
  4100                           
  4101                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4102  0020C2  92A1               	bcf	4001,1,c	;volatile
  4103                           
  4104                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4105  0020C4  80B1               	bsf	4017,0,c	;volatile
  4106                           
  4107                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4108  0020C6  D000               	goto	l127
  4109  0020C8                     l127:
  4110  0020C8  A2A1               	btfss	4001,1,c	;volatile
  4111  0020CA  D7FE               	goto	l127
  4112                           
  4113                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4114  0020CC  90B1               	bcf	4017,0,c	;volatile
  4115  0020CE  0012               	return		;funcret
  4116  0020D0                     __end_of_delay_ms:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           intcon2	equ	0xFF1
  4123                           postinc0	equ	0xFEE
  4124                           wreg	equ	0xFE8
  4125                           postdec1	equ	0xFE5
  4126                           fsr1l	equ	0xFE1
  4127                           status	equ	0xFD8
  4128                           
  4129 ;; *************** function _Do_Init *****************
  4130 ;; Defined at:
  4131 ;;		line 371 in file "Lab9.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;		None
  4136 ;; Return value:  Size  Location     Type
  4137 ;;		None               void
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;Total ram usage:        0 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    4
  4152 ;; This function calls:
  4153 ;;		_Init_ADC
  4154 ;;		_init_IO
  4155 ;;		_init_UART
  4156 ;; This function is called by:
  4157 ;;		_main
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           	psect	text13
  4162  0024C2                     __ptext13:
  4163                           	opt stack 0
  4164  0024C2                     _Do_Init:
  4165                           	opt stack 26
  4166                           
  4167                           ;Lab9.c: 373: init_UART();
  4168                           
  4169                           ;incstack = 0
  4170  0024C2  ECC5  F012         	call	_init_UART	;wreg free
  4171                           
  4172                           ;Lab9.c: 374: Init_ADC();
  4173  0024C6  EC0D  F013         	call	_Init_ADC	;wreg free
  4174                           
  4175                           ;Lab9.c: 375: init_IO();
  4176  0024CA  ECAF  F012         	call	_init_IO	;wreg free
  4177                           
  4178                           ;Lab9.c: 376: OSCCON=0x70;
  4179  0024CE  0E70               	movlw	112
  4180  0024D0  6ED3               	movwf	4051,c	;volatile
  4181                           
  4182                           ;Lab9.c: 378: INTCONbits.INT0IF = 0;
  4183  0024D2  92F2               	bcf	intcon,1,c	;volatile
  4184                           
  4185                           ;Lab9.c: 379: INTCON3bits.INT1IF = 0;
  4186  0024D4  90F0               	bcf	intcon3,0,c	;volatile
  4187                           
  4188                           ;Lab9.c: 380: INTCON3bits.INT2IF = 0;
  4189  0024D6  92F0               	bcf	intcon3,1,c	;volatile
  4190                           
  4191                           ;Lab9.c: 382: INTCONbits.INT0IE = 1;
  4192  0024D8  88F2               	bsf	intcon,4,c	;volatile
  4193                           
  4194                           ;Lab9.c: 383: INTCON3bits.INT1IE = 1;
  4195  0024DA  86F0               	bsf	intcon3,3,c	;volatile
  4196                           
  4197                           ;Lab9.c: 384: INTCON3bits.INT2IE = 1;
  4198  0024DC  88F0               	bsf	intcon3,4,c	;volatile
  4199                           
  4200                           ;Lab9.c: 386: INTCON2bits.INTEDG0 = 0;
  4201  0024DE  9CF1               	bcf	intcon2,6,c	;volatile
  4202                           
  4203                           ;Lab9.c: 387: INTCON2bits.INTEDG1 = 0;
  4204  0024E0  9AF1               	bcf	intcon2,5,c	;volatile
  4205                           
  4206                           ;Lab9.c: 388: INTCON2bits.INTEDG2 = 0;
  4207  0024E2  98F1               	bcf	intcon2,4,c	;volatile
  4208                           
  4209                           ;Lab9.c: 390: INTCONbits.GIE = 1;
  4210  0024E4  8EF2               	bsf	intcon,7,c	;volatile
  4211  0024E6  0012               	return		;funcret
  4212  0024E8                     __end_of_Do_Init:
  4213                           	opt stack 0
  4214                           tblptru	equ	0xFF8
  4215                           tblptrh	equ	0xFF7
  4216                           tblptrl	equ	0xFF6
  4217                           tablat	equ	0xFF5
  4218                           intcon	equ	0xFF2
  4219                           intcon2	equ	0xFF1
  4220                           intcon3	equ	0xFF0
  4221                           postinc0	equ	0xFEE
  4222                           wreg	equ	0xFE8
  4223                           postdec1	equ	0xFE5
  4224                           fsr1l	equ	0xFE1
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _init_UART *****************
  4228 ;; Defined at:
  4229 ;;		line 256 in file "Lab9.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;		None
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;		None
  4234 ;; Return value:  Size  Location     Type
  4235 ;;		None               void
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;Total ram usage:        0 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    3
  4250 ;; This function calls:
  4251 ;;		_OpenUSART
  4252 ;; This function is called by:
  4253 ;;		_Do_Init
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text14
  4258  00258A                     __ptext14:
  4259                           	opt stack 0
  4260  00258A                     _init_UART:
  4261                           	opt stack 26
  4262                           
  4263                           ;Lab9.c: 258: OpenUSART (0b01111111 & 0b10111111 &
  4264                           ;Lab9.c: 259: 0b11111110 & 0b11111101 & 0b11111111 &
  4265                           ;Lab9.c: 260: 0b11111111, 25);
  4266                           
  4267                           ;incstack = 0
  4268  00258A  0E00               	movlw	0
  4269  00258C  6E10               	movwf	OpenUSART@spbrg+1,c
  4270  00258E  0E19               	movlw	25
  4271  002590  6E0F               	movwf	OpenUSART@spbrg,c
  4272  002592  0E3C               	movlw	60
  4273  002594  EC78  F00F         	call	_OpenUSART
  4274                           
  4275                           ;Lab9.c: 261: OSCCON = 0x60;
  4276  002598  0E60               	movlw	96
  4277  00259A  6ED3               	movwf	4051,c	;volatile
  4278  00259C  0012               	return		;funcret
  4279  00259E                     __end_of_init_UART:
  4280                           	opt stack 0
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           intcon	equ	0xFF2
  4286                           intcon2	equ	0xFF1
  4287                           intcon3	equ	0xFF0
  4288                           postinc0	equ	0xFEE
  4289                           wreg	equ	0xFE8
  4290                           postdec1	equ	0xFE5
  4291                           fsr1l	equ	0xFE1
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function _OpenUSART *****************
  4295 ;; Defined at:
  4296 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  config          1    wreg     unsigned char 
  4299 ;;  spbrg           2   14[COMRAM] unsigned int 
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  config          1   16[COMRAM] unsigned char 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;		None               void
  4304 ;; Registers used:
  4305 ;;		wreg, status,2
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:        3 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    2
  4318 ;; This function calls:
  4319 ;;		Nothing
  4320 ;; This function is called by:
  4321 ;;		_init_UART
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text15
  4326  001EF0                     __ptext15:
  4327                           	opt stack 0
  4328  001EF0                     _OpenUSART:
  4329                           	opt stack 26
  4330                           
  4331                           ;incstack = 0
  4332                           ;OpenUSART@config stored from wreg
  4333  001EF0  6E11               	movwf	OpenUSART@config,c
  4334  001EF2  0E00               	movlw	0
  4335  001EF4  6EAC               	movwf	4012,c	;volatile
  4336  001EF6  0E00               	movlw	0
  4337  001EF8  6EAB               	movwf	4011,c	;volatile
  4338  001EFA  A011               	btfss	OpenUSART@config,0,c
  4339  001EFC  D002               	goto	l4854
  4340  001EFE  88AC               	bsf	4012,4,c	;volatile
  4341  001F00  D000               	goto	l4854
  4342  001F02                     l4854:
  4343  001F02  A211               	btfss	OpenUSART@config,1,c
  4344  001F04  D003               	goto	l4858
  4345  001F06  8CAC               	bsf	4012,6,c	;volatile
  4346  001F08  8CAB               	bsf	4011,6,c	;volatile
  4347  001F0A  D000               	goto	l4858
  4348  001F0C                     l4858:
  4349  001F0C  A411               	btfss	OpenUSART@config,2,c
  4350  001F0E  D002               	goto	l4862
  4351  001F10  8EAC               	bsf	4012,7,c	;volatile
  4352  001F12  D000               	goto	l4862
  4353  001F14                     l4862:
  4354  001F14  A611               	btfss	OpenUSART@config,3,c
  4355  001F16  D002               	goto	l569
  4356  001F18  88AB               	bsf	4011,4,c	;volatile
  4357  001F1A  D002               	goto	l4866
  4358  001F1C                     l569:
  4359  001F1C  8AAB               	bsf	4011,5,c	;volatile
  4360  001F1E  D000               	goto	l4866
  4361  001F20                     l4866:
  4362  001F20  B811               	btfsc	OpenUSART@config,4,c
  4363  001F22  84AC               	bsf	4012,2,c	;volatile
  4364  001F24  989E               	bcf	3998,4,c	;volatile
  4365  001F26  AA11               	btfss	OpenUSART@config,5,c
  4366  001F28  D002               	goto	l4874
  4367  001F2A  86AB               	bsf	4011,3,c	;volatile
  4368  001F2C  D000               	goto	l4874
  4369  001F2E                     l4874:
  4370  001F2E  AC11               	btfss	OpenUSART@config,6,c
  4371  001F30  D002               	goto	l573
  4372  001F32  8A9D               	bsf	3997,5,c	;volatile
  4373  001F34  D001               	goto	l574
  4374  001F36                     l573:
  4375  001F36  9A9D               	bcf	3997,5,c	;volatile
  4376  001F38                     l574:
  4377  001F38  9A9E               	bcf	3998,5,c	;volatile
  4378  001F3A  AE11               	btfss	OpenUSART@config,7,c
  4379  001F3C  D002               	goto	l575
  4380  001F3E  889D               	bsf	3997,4,c	;volatile
  4381  001F40  D001               	goto	l576
  4382  001F42                     l575:
  4383  001F42  989D               	bcf	3997,4,c	;volatile
  4384  001F44                     l576:
  4385  001F44  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4386  001F48  5010               	movf	OpenUSART@spbrg+1,w,c
  4387  001F4A  6EB0               	movwf	4016,c	;volatile
  4388  001F4C  8AAC               	bsf	4012,5,c	;volatile
  4389  001F4E  8EAB               	bsf	4011,7,c	;volatile
  4390  001F50  9C94               	bcf	3988,6,c	;volatile
  4391  001F52  8E94               	bsf	3988,7,c	;volatile
  4392  001F54  B8AC               	btfsc	4012,4,c	;volatile
  4393  001F56  BEAC               	btfsc	4012,7,c	;volatile
  4394  001F58  D002               	goto	l578
  4395  001F5A  8C94               	bsf	3988,6,c	;volatile
  4396  001F5C  D000               	goto	l578
  4397  001F5E                     l578:
  4398  001F5E  0012               	return		;funcret
  4399  001F60                     __end_of_OpenUSART:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           intcon	equ	0xFF2
  4406                           intcon2	equ	0xFF1
  4407                           intcon3	equ	0xFF0
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           postdec1	equ	0xFE5
  4411                           fsr1l	equ	0xFE1
  4412                           status	equ	0xFD8
  4413                           
  4414 ;; *************** function _init_IO *****************
  4415 ;; Defined at:
  4416 ;;		line 356 in file "Lab9.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;		None
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;		None               void
  4423 ;; Registers used:
  4424 ;;		wreg, status,2
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;Total ram usage:        0 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    2
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_Do_Init
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text16
  4445  00255E                     __ptext16:
  4446                           	opt stack 0
  4447  00255E                     _init_IO:
  4448                           	opt stack 27
  4449                           
  4450                           ;Lab9.c: 357: TRISA = 0x21;
  4451                           
  4452                           ;incstack = 0
  4453  00255E  0E21               	movlw	33
  4454  002560  6E92               	movwf	3986,c	;volatile
  4455                           
  4456                           ;Lab9.c: 358: TRISB = 0x07;
  4457  002562  0E07               	movlw	7
  4458  002564  6E93               	movwf	3987,c	;volatile
  4459                           
  4460                           ;Lab9.c: 359: TRISC = 0x07;
  4461  002566  0E07               	movlw	7
  4462  002568  6E94               	movwf	3988,c	;volatile
  4463                           
  4464                           ;Lab9.c: 360: TRISD = 0x00;
  4465  00256A  0E00               	movlw	0
  4466  00256C  6E95               	movwf	3989,c	;volatile
  4467                           
  4468                           ;Lab9.c: 361: TRISE = 0x00;
  4469  00256E  0E00               	movlw	0
  4470  002570  6E96               	movwf	3990,c	;volatile
  4471  002572  0012               	return		;funcret
  4472  002574                     __end_of_init_IO:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           intcon	equ	0xFF2
  4479                           intcon2	equ	0xFF1
  4480                           intcon3	equ	0xFF0
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           postdec1	equ	0xFE5
  4484                           fsr1l	equ	0xFE1
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _Init_ADC *****************
  4488 ;; Defined at:
  4489 ;;		line 364 in file "Lab9.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;		None               void
  4496 ;; Registers used:
  4497 ;;		wreg, status,2
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;Total ram usage:        0 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    2
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_Do_Init
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text17
  4518  00261A                     __ptext17:
  4519                           	opt stack 0
  4520  00261A                     _Init_ADC:
  4521                           	opt stack 27
  4522                           
  4523                           ;Lab9.c: 366: ADCON0 = 0 * 4 + 1;
  4524                           
  4525                           ;incstack = 0
  4526  00261A  0E01               	movlw	1
  4527  00261C  6EC2               	movwf	4034,c	;volatile
  4528                           
  4529                           ;Lab9.c: 367: ADCON1=0x0E ;
  4530  00261E  0E0E               	movlw	14
  4531  002620  6EC1               	movwf	4033,c	;volatile
  4532                           
  4533                           ;Lab9.c: 368: ADCON2=0xA9;
  4534  002622  0EA9               	movlw	169
  4535  002624  6EC0               	movwf	4032,c	;volatile
  4536  002626  0012               	return		;funcret
  4537  002628                     __end_of_Init_ADC:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           intcon	equ	0xFF2
  4544                           intcon2	equ	0xFF1
  4545                           intcon3	equ	0xFF0
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           postdec1	equ	0xFE5
  4549                           fsr1l	equ	0xFE1
  4550                           status	equ	0xFD8
  4551                           
  4552 ;; *************** function _Do_Flashing *****************
  4553 ;; Defined at:
  4554 ;;		line 302 in file "Lab9.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;		None
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;		None               void
  4561 ;; Registers used:
  4562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;Total ram usage:        0 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:   11
  4575 ;; This function calls:
  4576 ;;		_Set_EW
  4577 ;;		_Set_EWLT
  4578 ;;		_Set_NS
  4579 ;;		_Set_NSLT
  4580 ;;		_Wait_One_Second
  4581 ;; This function is called by:
  4582 ;;		_main
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text18
  4587  002028                     __ptext18:
  4588                           	opt stack 0
  4589  002028                     _Do_Flashing:
  4590                           	opt stack 19
  4591                           
  4592                           ;Lab9.c: 303: FLASHING = 1;
  4593                           
  4594                           ;incstack = 0
  4595  002028  0E01               	movlw	1
  4596  00202A  D006               	goto	L1
  4597  00202C                     l5190:
  4598                           
  4599                           ;Lab9.c: 305: {
  4600                           ;Lab9.c: 306: if(FLASHING_REQUEST == 1)
  4601  00202C  0465               	decf	_FLASHING_REQUEST,w,c
  4602  00202E  A4D8               	btfss	status,2,c
  4603  002030  D005               	goto	l5194
  4604                           
  4605                           ;Lab9.c: 307: {
  4606                           ;Lab9.c: 308: FLASHING_REQUEST = 0;
  4607  002032  0E00               	movlw	0
  4608  002034  6E65               	movwf	_FLASHING_REQUEST,c
  4609                           
  4610                           ;Lab9.c: 309: FLASHING = 0;
  4611  002036  0E00               	movlw	0
  4612  002038                     L1:
  4613  002038  6E64               	movwf	_FLASHING,c
  4614                           
  4615                           ;Lab9.c: 310: }
  4616  00203A  D01D               	goto	l5208
  4617  00203C                     l5194:
  4618                           
  4619                           ;Lab9.c: 311: else
  4620                           ;Lab9.c: 312: {
  4621                           ;Lab9.c: 313: Set_EW(1);
  4622  00203C  0E01               	movlw	1
  4623  00203E  EC49  F011         	call	_Set_EW
  4624                           
  4625                           ;Lab9.c: 314: Set_NS(1);
  4626  002042  0E01               	movlw	1
  4627  002044  EC01  F011         	call	_Set_NS
  4628                           
  4629                           ;Lab9.c: 315: Set_NSLT(1);
  4630  002048  0E01               	movlw	1
  4631  00204A  ECDD  F010         	call	_Set_NSLT
  4632                           
  4633                           ;Lab9.c: 316: Set_EWLT(1);
  4634  00204E  0E01               	movlw	1
  4635  002050  EC25  F011         	call	_Set_EWLT
  4636                           
  4637                           ;Lab9.c: 317: Wait_One_Second();
  4638  002054  ECF6  F00E         	call	_Wait_One_Second	;wreg free
  4639                           
  4640                           ;Lab9.c: 318: Set_EW(0);
  4641  002058  0E00               	movlw	0
  4642  00205A  EC49  F011         	call	_Set_EW
  4643                           
  4644                           ;Lab9.c: 319: Set_NS(0);
  4645  00205E  0E00               	movlw	0
  4646  002060  EC01  F011         	call	_Set_NS
  4647                           
  4648                           ;Lab9.c: 320: Set_NSLT(0);
  4649  002064  0E00               	movlw	0
  4650  002066  ECDD  F010         	call	_Set_NSLT
  4651                           
  4652                           ;Lab9.c: 321: Set_EWLT(0);
  4653  00206A  0E00               	movlw	0
  4654  00206C  EC25  F011         	call	_Set_EWLT
  4655                           
  4656                           ;Lab9.c: 322: Wait_One_Second();
  4657  002070  ECF6  F00E         	call	_Wait_One_Second	;wreg free
  4658  002074  D000               	goto	l5208
  4659  002076                     l5208:
  4660  002076  0464               	decf	_FLASHING,w,c
  4661  002078  B4D8               	btfsc	status,2,c
  4662  00207A  D7D8               	goto	l5190
  4663  00207C  0012               	return		;funcret
  4664  00207E                     __end_of_Do_Flashing:
  4665                           	opt stack 0
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           intcon	equ	0xFF2
  4671                           intcon2	equ	0xFF1
  4672                           intcon3	equ	0xFF0
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           postdec1	equ	0xFE5
  4676                           fsr1l	equ	0xFE1
  4677                           status	equ	0xFD8
  4678                           
  4679 ;; *************** function _Day_Mode *****************
  4680 ;; Defined at:
  4681 ;;		line 481 in file "Lab9.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;		None               void
  4688 ;; Registers used:
  4689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:   12
  4702 ;; This function calls:
  4703 ;;		_PED_Control
  4704 ;;		_Set_EW
  4705 ;;		_Set_EWLT
  4706 ;;		_Set_NS
  4707 ;;		_Set_NSLT
  4708 ;;		_Wait_N_Seconds
  4709 ;; This function is called by:
  4710 ;;		_main
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           	psect	text19
  4715  001762                     __ptext19:
  4716                           	opt stack 0
  4717  001762                     _Day_Mode:
  4718                           	opt stack 18
  4719                           
  4720                           ;Lab9.c: 483: MODE = 1;
  4721                           
  4722                           ;incstack = 0
  4723  001762  0E00               	movlw	0
  4724  001764  6E5F               	movwf	_MODE+1,c
  4725  001766  0E01               	movlw	1
  4726  001768  6E5E               	movwf	_MODE,c
  4727                           
  4728                           ;Lab9.c: 484: PORTEbits.RE2 = 1;
  4729  00176A  8484               	bsf	3972,2,c	;volatile
  4730                           
  4731                           ;Lab9.c: 485: Act_Mode_Txt[0] = 'D';
  4732  00176C  0E44               	movlw	68
  4733  00176E  6E4B               	movwf	_Act_Mode_Txt,c
  4734                           
  4735                           ;Lab9.c: 487: Set_NSLT(1);
  4736  001770  0E01               	movlw	1
  4737  001772  ECDD  F010         	call	_Set_NSLT
  4738                           
  4739                           ;Lab9.c: 488: Set_EW(1);
  4740  001776  0E01               	movlw	1
  4741  001778  EC49  F011         	call	_Set_EW
  4742                           
  4743                           ;Lab9.c: 489: Set_EWLT(1);
  4744  00177C  0E01               	movlw	1
  4745  00177E  EC25  F011         	call	_Set_EWLT
  4746                           
  4747                           ;Lab9.c: 490: Set_NS(2);
  4748  001782  0E02               	movlw	2
  4749  001784  EC01  F011         	call	_Set_NS
  4750                           
  4751                           ;Lab9.c: 492: if(NS_PED_SW == 1)
  4752  001788  0466               	decf	_NS_PED_SW,w,c
  4753  00178A  A4D8               	btfss	status,2,c
  4754  00178C  D009               	goto	l5252
  4755                           
  4756                           ;Lab9.c: 493: {
  4757                           ;Lab9.c: 494: PED_Control(2,6);
  4758  00178E  0E06               	movlw	6
  4759  001790  0100               	movlb	0	; () banked
  4760  001792  6FAA               	movwf	PED_Control@Num_Sec& (0+255),b
  4761  001794  0E02               	movlw	2
  4762  001796  EC6D  F011         	call	_PED_Control
  4763                           
  4764                           ;Lab9.c: 495: NS_PED_SW = 0;
  4765  00179A  0E00               	movlw	0
  4766  00179C  6E66               	movwf	_NS_PED_SW,c
  4767  00179E  D000               	goto	l5252
  4768  0017A0                     l5252:
  4769                           
  4770                           ;Lab9.c: 496: }
  4771                           ;Lab9.c: 497: Wait_N_Seconds(9);
  4772  0017A0  0E09               	movlw	9
  4773  0017A2  ECEB  F011         	call	_Wait_N_Seconds
  4774                           
  4775                           ;Lab9.c: 498: Set_NS(3);
  4776  0017A6  0E03               	movlw	3
  4777  0017A8  EC01  F011         	call	_Set_NS
  4778                           
  4779                           ;Lab9.c: 499: Wait_N_Seconds(3);
  4780  0017AC  0E03               	movlw	3
  4781  0017AE  ECEB  F011         	call	_Wait_N_Seconds
  4782                           
  4783                           ;Lab9.c: 500: Set_NS(1);
  4784  0017B2  0E01               	movlw	1
  4785  0017B4  EC01  F011         	call	_Set_NS
  4786                           
  4787                           ;Lab9.c: 503: if(PORTCbits.RC2 == 1)
  4788  0017B8  A482               	btfss	3970,2,c	;volatile
  4789  0017BA  D010               	goto	l5270
  4790                           
  4791                           ;Lab9.c: 504: {
  4792                           ;Lab9.c: 505: Set_EWLT(2);
  4793  0017BC  0E02               	movlw	2
  4794  0017BE  EC25  F011         	call	_Set_EWLT
  4795                           
  4796                           ;Lab9.c: 506: Wait_N_Seconds(6);
  4797  0017C2  0E06               	movlw	6
  4798  0017C4  ECEB  F011         	call	_Wait_N_Seconds
  4799                           
  4800                           ;Lab9.c: 507: Set_EWLT(3);
  4801  0017C8  0E03               	movlw	3
  4802  0017CA  EC25  F011         	call	_Set_EWLT
  4803                           
  4804                           ;Lab9.c: 508: Wait_N_Seconds(3);
  4805  0017CE  0E03               	movlw	3
  4806  0017D0  ECEB  F011         	call	_Wait_N_Seconds
  4807                           
  4808                           ;Lab9.c: 509: Set_EWLT(1);
  4809  0017D4  0E01               	movlw	1
  4810  0017D6  EC25  F011         	call	_Set_EWLT
  4811  0017DA  D000               	goto	l5270
  4812  0017DC                     l5270:
  4813                           
  4814                           ;Lab9.c: 510: }
  4815                           ;Lab9.c: 512: Set_EW(2);
  4816  0017DC  0E02               	movlw	2
  4817  0017DE  EC49  F011         	call	_Set_EW
  4818                           
  4819                           ;Lab9.c: 513: if(EW_PED_SW == 1)
  4820  0017E2  0463               	decf	_EW_PED_SW,w,c
  4821  0017E4  A4D8               	btfss	status,2,c
  4822  0017E6  D009               	goto	l5278
  4823                           
  4824                           ;Lab9.c: 514: {
  4825                           ;Lab9.c: 515: PED_Control(0,9);
  4826  0017E8  0E09               	movlw	9
  4827  0017EA  0100               	movlb	0	; () banked
  4828  0017EC  6FAA               	movwf	PED_Control@Num_Sec& (0+255),b
  4829  0017EE  0E00               	movlw	0
  4830  0017F0  EC6D  F011         	call	_PED_Control
  4831                           
  4832                           ;Lab9.c: 516: EW_PED_SW = 0;
  4833  0017F4  0E00               	movlw	0
  4834  0017F6  6E63               	movwf	_EW_PED_SW,c
  4835  0017F8  D000               	goto	l5278
  4836  0017FA                     l5278:
  4837                           
  4838                           ;Lab9.c: 517: }
  4839                           ;Lab9.c: 518: Wait_N_Seconds(7);
  4840  0017FA  0E07               	movlw	7
  4841  0017FC  ECEB  F011         	call	_Wait_N_Seconds
  4842                           
  4843                           ;Lab9.c: 519: Set_EW(3);
  4844  001800  0E03               	movlw	3
  4845  001802  EC49  F011         	call	_Set_EW
  4846                           
  4847                           ;Lab9.c: 520: Wait_N_Seconds(3);
  4848  001806  0E03               	movlw	3
  4849  001808  ECEB  F011         	call	_Wait_N_Seconds
  4850                           
  4851                           ;Lab9.c: 521: Set_EW(1);
  4852  00180C  0E01               	movlw	1
  4853  00180E  EC49  F011         	call	_Set_EW
  4854                           
  4855                           ;Lab9.c: 523: if(PORTCbits.RC1 == 1)
  4856  001812  A282               	btfss	3970,1,c	;volatile
  4857  001814  D010               	goto	l480
  4858                           
  4859                           ;Lab9.c: 524: {
  4860                           ;Lab9.c: 525: Set_NSLT(2);
  4861  001816  0E02               	movlw	2
  4862  001818  ECDD  F010         	call	_Set_NSLT
  4863                           
  4864                           ;Lab9.c: 526: Wait_N_Seconds(6);
  4865  00181C  0E06               	movlw	6
  4866  00181E  ECEB  F011         	call	_Wait_N_Seconds
  4867                           
  4868                           ;Lab9.c: 527: Set_NSLT(3);
  4869  001822  0E03               	movlw	3
  4870  001824  ECDD  F010         	call	_Set_NSLT
  4871                           
  4872                           ;Lab9.c: 528: Wait_N_Seconds(3);
  4873  001828  0E03               	movlw	3
  4874  00182A  ECEB  F011         	call	_Wait_N_Seconds
  4875                           
  4876                           ;Lab9.c: 529: Set_NSLT(1);
  4877  00182E  0E01               	movlw	1
  4878  001830  ECDD  F010         	call	_Set_NSLT
  4879  001834  D000               	goto	l480
  4880  001836                     l480:
  4881  001836  0012               	return		;funcret
  4882  001838                     __end_of_Day_Mode:
  4883                           	opt stack 0
  4884                           tblptru	equ	0xFF8
  4885                           tblptrh	equ	0xFF7
  4886                           tblptrl	equ	0xFF6
  4887                           tablat	equ	0xFF5
  4888                           intcon	equ	0xFF2
  4889                           intcon2	equ	0xFF1
  4890                           intcon3	equ	0xFF0
  4891                           postinc0	equ	0xFEE
  4892                           wreg	equ	0xFE8
  4893                           postdec1	equ	0xFE5
  4894                           fsr1l	equ	0xFE1
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function _Wait_N_Seconds *****************
  4898 ;; Defined at:
  4899 ;;		line 617 in file "Lab9.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  seconds         1    wreg     unsigned char 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;  seconds         1   10[BANK0 ] unsigned char 
  4904 ;;  I               1   11[BANK0 ] unsigned char 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;		None               void
  4907 ;; Registers used:
  4908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;Total ram usage:        2 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:   11
  4921 ;; This function calls:
  4922 ;;		_Wait_One_Second
  4923 ;;		_update_LCD_count
  4924 ;; This function is called by:
  4925 ;;		_Day_Mode
  4926 ;;		_Night_Mode
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text20
  4931  0023D6                     __ptext20:
  4932                           	opt stack 0
  4933  0023D6                     _Wait_N_Seconds:
  4934                           	opt stack 18
  4935                           
  4936                           ;incstack = 0
  4937                           ;Wait_N_Seconds@seconds stored from wreg
  4938  0023D6  0100               	movlb	0	; () banked
  4939  0023D8  6FAB               	movwf	Wait_N_Seconds@seconds& (0+255),b
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;Lab9.c: 619: char I;
  4943                           ;Lab9.c: 620: for (I = seconds; I> 0; I--)
  4944  0023DA  C0AB  F0AC         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4945  0023DE                     l5060:
  4946                           
  4947                           ; BSR set to: 0
  4948  0023DE  0100               	movlb	0	; () banked
  4949  0023E0  51AC               	movf	Wait_N_Seconds@I& (0+255),w,b
  4950  0023E2  0100               	movlb	0	; () banked
  4951  0023E4  B4D8               	btfsc	status,2,c
  4952  0023E6  D00C               	goto	l5070
  4953  0023E8  D001               	goto	l5064
  4954                           
  4955                           ; BSR set to: 0
  4956  0023EA  D00A               	goto	l5070
  4957  0023EC                     l5064:
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;Lab9.c: 621: {
  4961                           ;Lab9.c: 622: update_LCD_count(direction, I);
  4962  0023EC  C0AC  F0A8         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4963  0023F0  5070               	movf	_direction,w,c
  4964  0023F2  EC42  F007         	call	_update_LCD_count
  4965                           
  4966                           ;Lab9.c: 623: Wait_One_Second();
  4967  0023F6  ECF6  F00E         	call	_Wait_One_Second	;wreg free
  4968  0023FA  0100               	movlb	0	; () banked
  4969  0023FC  07AC               	decf	Wait_N_Seconds@I& (0+255),f,b
  4970  0023FE  D7EF               	goto	l5060
  4971  002400                     l5070:
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;Lab9.c: 624: }
  4975                           ;Lab9.c: 625: update_LCD_count(direction, 0);
  4976  002400  0E00               	movlw	0
  4977  002402  0100               	movlb	0	; () banked
  4978  002404  6FA8               	movwf	update_LCD_count@count& (0+255),b
  4979  002406  5070               	movf	_direction,w,c
  4980  002408  EC42  F007         	call	_update_LCD_count
  4981  00240C  0012               	return		;funcret
  4982  00240E                     __end_of_Wait_N_Seconds:
  4983                           	opt stack 0
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           intcon	equ	0xFF2
  4989                           intcon2	equ	0xFF1
  4990                           intcon3	equ	0xFF0
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           postdec1	equ	0xFE5
  4994                           fsr1l	equ	0xFE1
  4995                           status	equ	0xFD8
  4996                           
  4997 ;; *************** function _update_LCD_count *****************
  4998 ;; Defined at:
  4999 ;;		line 673 in file "Lab9.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  direction       1    wreg     unsigned char 
  5002 ;;  count           1    7[BANK0 ] unsigned char 
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;  direction       1    8[BANK0 ] unsigned char 
  5005 ;; Return value:  Size  Location     Type
  5006 ;;		None               void
  5007 ;; Registers used:
  5008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5014 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;Total ram usage:        2 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    9
  5021 ;; This function calls:
  5022 ;;		___awdiv
  5023 ;;		___awmod
  5024 ;;		_drawtext
  5025 ;; This function is called by:
  5026 ;;		_Wait_N_Seconds
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           	psect	text21
  5031  000E84                     __ptext21:
  5032                           	opt stack 0
  5033  000E84                     _update_LCD_count:
  5034                           	opt stack 19
  5035                           
  5036                           ;incstack = 0
  5037                           ;update_LCD_count@direction stored from wreg
  5038  000E84  0100               	movlb	0	; () banked
  5039  000E86  6FA9               	movwf	update_LCD_count@direction& (0+255),b
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;Lab9.c: 675: switch (direction)
  5043  000E88  D0B0               	goto	l4972
  5044  000E8A                     l4954:
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;Lab9.c: 678: EW_Count[0] = count/10 + '0';
  5048  000E8A  C0A8  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5049  000E8E  6A10               	clrf	___awdiv@dividend+1,c
  5050  000E90  0E00               	movlw	0
  5051  000E92  6E12               	movwf	___awdiv@divisor+1,c
  5052  000E94  0E0A               	movlw	10
  5053  000E96  6E11               	movwf	___awdiv@divisor,c
  5054  000E98  ECE0  F00D         	call	___awdiv	;wreg free
  5055  000E9C  500F               	movf	?___awdiv,w,c
  5056  000E9E  0F30               	addlw	48
  5057  000EA0  6E45               	movwf	_EW_Count,c
  5058                           
  5059                           ;Lab9.c: 679: EW_Count[1] = count%10 + '0';
  5060  000EA2  C0A8  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5061  000EA6  6A10               	clrf	___awmod@dividend+1,c
  5062  000EA8  0E00               	movlw	0
  5063  000EAA  6E12               	movwf	___awmod@divisor+1,c
  5064  000EAC  0E0A               	movlw	10
  5065  000EAE  6E11               	movwf	___awmod@divisor,c
  5066  000EB0  EC37  F00F         	call	___awmod	;wreg free
  5067  000EB4  500F               	movf	?___awmod,w,c
  5068  000EB6  0F30               	addlw	48
  5069  000EB8  6E46               	movwf	_EW_Count+1,c
  5070                           
  5071                           ;Lab9.c: 680: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5072  000EBA  0E1E               	movlw	30
  5073  000EBC  6E37               	movwf	drawtext@y,c
  5074  000EBE  0E45               	movlw	low _EW_Count
  5075  000EC0  6E38               	movwf	drawtext@_text,c
  5076  000EC2  0E00               	movlw	high _EW_Count
  5077  000EC4  6E39               	movwf	drawtext@_text+1,c
  5078  000EC6  0E07               	movlw	7
  5079  000EC8  6E3B               	movwf	drawtext@color+1,c
  5080  000ECA  683A               	setf	drawtext@color,c
  5081  000ECC  0E00               	movlw	0
  5082  000ECE  6E3D               	movwf	drawtext@bg+1,c
  5083  000ED0  0E00               	movlw	0
  5084  000ED2  6E3C               	movwf	drawtext@bg,c
  5085  000ED4  0E02               	movlw	2
  5086  000ED6  6E3E               	movwf	drawtext@size,c
  5087  000ED8  0E64               	movlw	100
  5088  000EDA  ECD4  F009         	call	_drawtext
  5089                           
  5090                           ;Lab9.c: 681: break;
  5091  000EDE  D094               	goto	l521
  5092  000EE0                     l4958:
  5093                           
  5094                           ;Lab9.c: 684: EWLT_Count[0] = count/10 + '0';
  5095  000EE0  C0A8  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5096  000EE4  6A10               	clrf	___awdiv@dividend+1,c
  5097  000EE6  0E00               	movlw	0
  5098  000EE8  6E12               	movwf	___awdiv@divisor+1,c
  5099  000EEA  0E0A               	movlw	10
  5100  000EEC  6E11               	movwf	___awdiv@divisor,c
  5101  000EEE  ECE0  F00D         	call	___awdiv	;wreg free
  5102  000EF2  500F               	movf	?___awdiv,w,c
  5103  000EF4  0F30               	addlw	48
  5104  000EF6  6E42               	movwf	_EWLT_Count,c
  5105                           
  5106                           ;Lab9.c: 685: EWLT_Count[1] = count%10 + '0';
  5107  000EF8  C0A8  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5108  000EFC  6A10               	clrf	___awmod@dividend+1,c
  5109  000EFE  0E00               	movlw	0
  5110  000F00  6E12               	movwf	___awmod@divisor+1,c
  5111  000F02  0E0A               	movlw	10
  5112  000F04  6E11               	movwf	___awmod@divisor,c
  5113  000F06  EC37  F00F         	call	___awmod	;wreg free
  5114  000F0A  500F               	movf	?___awmod,w,c
  5115  000F0C  0F30               	addlw	48
  5116  000F0E  6E43               	movwf	_EWLT_Count+1,c
  5117                           
  5118                           ;Lab9.c: 686: drawtext(100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5119  000F10  0E3C               	movlw	60
  5120  000F12  6E37               	movwf	drawtext@y,c
  5121  000F14  0E42               	movlw	low _EWLT_Count
  5122  000F16  6E38               	movwf	drawtext@_text,c
  5123  000F18  0E00               	movlw	high _EWLT_Count
  5124  000F1A  6E39               	movwf	drawtext@_text+1,c
  5125  000F1C  0EFF               	movlw	255
  5126  000F1E  6E3B               	movwf	drawtext@color+1,c
  5127  000F20  683A               	setf	drawtext@color,c
  5128  000F22  0E00               	movlw	0
  5129  000F24  6E3D               	movwf	drawtext@bg+1,c
  5130  000F26  0E00               	movlw	0
  5131  000F28  6E3C               	movwf	drawtext@bg,c
  5132  000F2A  0E02               	movlw	2
  5133  000F2C  6E3E               	movwf	drawtext@size,c
  5134  000F2E  0E64               	movlw	100
  5135  000F30  ECD4  F009         	call	_drawtext
  5136                           
  5137                           ;Lab9.c: 687: break;
  5138  000F34  D069               	goto	l521
  5139  000F36                     l4962:
  5140                           
  5141                           ;Lab9.c: 690: NS_Count[0] = count/10 + '0';
  5142  000F36  C0A8  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5143  000F3A  6A10               	clrf	___awdiv@dividend+1,c
  5144  000F3C  0E00               	movlw	0
  5145  000F3E  6E12               	movwf	___awdiv@divisor+1,c
  5146  000F40  0E0A               	movlw	10
  5147  000F42  6E11               	movwf	___awdiv@divisor,c
  5148  000F44  ECE0  F00D         	call	___awdiv	;wreg free
  5149  000F48  500F               	movf	?___awdiv,w,c
  5150  000F4A  0F30               	addlw	48
  5151  000F4C  6E48               	movwf	_NS_Count,c
  5152                           
  5153                           ;Lab9.c: 691: NS_Count[1] = count%10 + '0';
  5154  000F4E  C0A8  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5155  000F52  6A10               	clrf	___awmod@dividend+1,c
  5156  000F54  0E00               	movlw	0
  5157  000F56  6E12               	movwf	___awmod@divisor+1,c
  5158  000F58  0E0A               	movlw	10
  5159  000F5A  6E11               	movwf	___awmod@divisor,c
  5160  000F5C  EC37  F00F         	call	___awmod	;wreg free
  5161  000F60  500F               	movf	?___awmod,w,c
  5162  000F62  0F30               	addlw	48
  5163  000F64  6E49               	movwf	_NS_Count+1,c
  5164                           
  5165                           ;Lab9.c: 692: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  5166  000F66  0E5A               	movlw	90
  5167  000F68  6E37               	movwf	drawtext@y,c
  5168  000F6A  0E48               	movlw	low _NS_Count
  5169  000F6C  6E38               	movwf	drawtext@_text,c
  5170  000F6E  0E00               	movlw	high _NS_Count
  5171  000F70  6E39               	movwf	drawtext@_text+1,c
  5172  000F72  0E00               	movlw	0
  5173  000F74  6E3B               	movwf	drawtext@color+1,c
  5174  000F76  0E1F               	movlw	31
  5175  000F78  6E3A               	movwf	drawtext@color,c
  5176  000F7A  0E00               	movlw	0
  5177  000F7C  6E3D               	movwf	drawtext@bg+1,c
  5178  000F7E  0E00               	movlw	0
  5179  000F80  6E3C               	movwf	drawtext@bg,c
  5180  000F82  0E02               	movlw	2
  5181  000F84  6E3E               	movwf	drawtext@size,c
  5182  000F86  0E64               	movlw	100
  5183  000F88  ECD4  F009         	call	_drawtext
  5184                           
  5185                           ;Lab9.c: 693: break;
  5186  000F8C  D03D               	goto	l521
  5187  000F8E                     l4966:
  5188                           
  5189                           ;Lab9.c: 696: NSLT_Count[0] = count/10 + '0';
  5190  000F8E  C0A8  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5191  000F92  6A10               	clrf	___awdiv@dividend+1,c
  5192  000F94  0E00               	movlw	0
  5193  000F96  6E12               	movwf	___awdiv@divisor+1,c
  5194  000F98  0E0A               	movlw	10
  5195  000F9A  6E11               	movwf	___awdiv@divisor,c
  5196  000F9C  ECE0  F00D         	call	___awdiv	;wreg free
  5197  000FA0  500F               	movf	?___awdiv,w,c
  5198  000FA2  0F30               	addlw	48
  5199  000FA4  0100               	movlb	0	; () banked
  5200  000FA6  6FAF               	movwf	_NSLT_Count& (0+255),b
  5201                           
  5202                           ;Lab9.c: 697: NSLT_Count[1] = count%10 + '0';
  5203  000FA8  C0A8  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5204  000FAC  6A10               	clrf	___awmod@dividend+1,c
  5205  000FAE  0E00               	movlw	0
  5206  000FB0  6E12               	movwf	___awmod@divisor+1,c
  5207  000FB2  0E0A               	movlw	10
  5208  000FB4  6E11               	movwf	___awmod@divisor,c
  5209  000FB6  EC37  F00F         	call	___awmod	;wreg free
  5210  000FBA  500F               	movf	?___awmod,w,c
  5211  000FBC  0F30               	addlw	48
  5212  000FBE  0100               	movlb	0	; () banked
  5213  000FC0  6FB0               	movwf	(_NSLT_Count+1)& (0+255),b
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;Lab9.c: 698: drawtext(100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5217  000FC2  0E78               	movlw	120
  5218  000FC4  6E37               	movwf	drawtext@y,c
  5219  000FC6  0EAF               	movlw	low _NSLT_Count
  5220  000FC8  6E38               	movwf	drawtext@_text,c
  5221  000FCA  0E00               	movlw	high _NSLT_Count
  5222  000FCC  6E39               	movwf	drawtext@_text+1,c
  5223  000FCE  0EF8               	movlw	248
  5224  000FD0  6E3B               	movwf	drawtext@color+1,c
  5225  000FD2  0E1F               	movlw	31
  5226  000FD4  6E3A               	movwf	drawtext@color,c
  5227  000FD6  0E00               	movlw	0
  5228  000FD8  6E3D               	movwf	drawtext@bg+1,c
  5229  000FDA  0E00               	movlw	0
  5230  000FDC  6E3C               	movwf	drawtext@bg,c
  5231  000FDE  0E02               	movlw	2
  5232  000FE0  6E3E               	movwf	drawtext@size,c
  5233  000FE2  0E64               	movlw	100
  5234  000FE4  ECD4  F009         	call	_drawtext
  5235                           
  5236                           ;Lab9.c: 700: }
  5237                           
  5238                           ;Lab9.c: 699: break;
  5239  000FE8  D00F               	goto	l521
  5240  000FEA                     l4972:
  5241  000FEA  0100               	movlb	0	; () banked
  5242  000FEC  51A9               	movf	update_LCD_count@direction& (0+255),w,b
  5243                           
  5244                           ; Switch size 1, requested type "space"
  5245                           ; Number of cases is 4, Range of values is 0 to 3
  5246                           ; switch strategies available:
  5247                           ; Name         Instructions Cycles
  5248                           ; simple_byte           13     7 (average)
  5249                           ;	Chosen strategy is simple_byte
  5250  000FEE  0A00               	xorlw	0	; case 0
  5251  000FF0  B4D8               	btfsc	status,2,c
  5252  000FF2  D74B               	goto	l4954
  5253  000FF4  0A01               	xorlw	1	; case 1
  5254  000FF6  B4D8               	btfsc	status,2,c
  5255  000FF8  D773               	goto	l4958
  5256  000FFA  0A03               	xorlw	3	; case 2
  5257  000FFC  B4D8               	btfsc	status,2,c
  5258  000FFE  D79B               	goto	l4962
  5259  001000  0A01               	xorlw	1	; case 3
  5260  001002  B4D8               	btfsc	status,2,c
  5261  001004  D7C4               	goto	l4966
  5262  001006  D000               	goto	l521
  5263  001008                     l521:
  5264  001008  0012               	return		;funcret
  5265  00100A                     __end_of_update_LCD_count:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           intcon	equ	0xFF2
  5272                           intcon2	equ	0xFF1
  5273                           intcon3	equ	0xFF0
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           postdec1	equ	0xFE5
  5277                           fsr1l	equ	0xFE1
  5278                           status	equ	0xFD8
  5279                           
  5280 ;; *************** function _Wait_One_Second *****************
  5281 ;; Defined at:
  5282 ;;		line 582 in file "Lab9.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;		None
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;		None
  5287 ;; Return value:  Size  Location     Type
  5288 ;;		None               void
  5289 ;; Registers used:
  5290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;Total ram usage:        0 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:   10
  5303 ;; This function calls:
  5304 ;;		_Wait_Half_Second
  5305 ;;		_drawtext
  5306 ;;		_strcpy
  5307 ;;		_update_LCD_misc
  5308 ;; This function is called by:
  5309 ;;		_Do_Flashing
  5310 ;;		_Wait_N_Seconds
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text22
  5315  001DEC                     __ptext22:
  5316                           	opt stack 0
  5317  001DEC                     _Wait_One_Second:
  5318                           	opt stack 18
  5319                           
  5320                           ;Lab9.c: 584: PORTDbits.RD7 = 1;
  5321                           
  5322                           ;incstack = 0
  5323  001DEC  8E83               	bsf	3971,7,c	;volatile
  5324                           
  5325                           ;Lab9.c: 585: strcpy(txt,"*");
  5326  001DEE  C060  F00F         	movff	_txt,strcpy@to
  5327  001DF2  C061  F010         	movff	_txt+1,strcpy@to+1
  5328  001DF6  0EFD               	movlw	low STR_5
  5329  001DF8  6E11               	movwf	strcpy@from,c
  5330  001DFA  0EFF               	movlw	high STR_5
  5331  001DFC  6E12               	movwf	strcpy@from+1,c
  5332  001DFE  EC07  F012         	call	_strcpy	;wreg free
  5333                           
  5334                           ;Lab9.c: 586: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5335  001E02  0E0A               	movlw	10
  5336  001E04  6E37               	movwf	drawtext@y,c
  5337  001E06  C060  F038         	movff	_txt,drawtext@_text
  5338  001E0A  C061  F039         	movff	_txt+1,drawtext@_text+1
  5339  001E0E  0EFF               	movlw	255
  5340  001E10  6E3B               	movwf	drawtext@color+1,c
  5341  001E12  683A               	setf	drawtext@color,c
  5342  001E14  0E00               	movlw	0
  5343  001E16  6E3D               	movwf	drawtext@bg+1,c
  5344  001E18  0E00               	movlw	0
  5345  001E1A  6E3C               	movwf	drawtext@bg,c
  5346  001E1C  0E01               	movlw	1
  5347  001E1E  6E3E               	movwf	drawtext@size,c
  5348  001E20  0E78               	movlw	120
  5349  001E22  ECD4  F009         	call	_drawtext
  5350                           
  5351                           ;Lab9.c: 587: Wait_Half_Second();
  5352  001E26  ECA2  F012         	call	_Wait_Half_Second	;wreg free
  5353                           
  5354                           ;Lab9.c: 589: PORTDbits.RD7 = 0;
  5355  001E2A  9E83               	bcf	3971,7,c	;volatile
  5356                           
  5357                           ;Lab9.c: 590: strcpy(txt," ");
  5358  001E2C  C060  F00F         	movff	_txt,strcpy@to
  5359  001E30  C061  F010         	movff	_txt+1,strcpy@to+1
  5360  001E34  0EFB               	movlw	low STR_14
  5361  001E36  6E11               	movwf	strcpy@from,c
  5362  001E38  0EFF               	movlw	high STR_14
  5363  001E3A  6E12               	movwf	strcpy@from+1,c
  5364  001E3C  EC07  F012         	call	_strcpy	;wreg free
  5365                           
  5366                           ;Lab9.c: 591: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5367  001E40  0E0A               	movlw	10
  5368  001E42  6E37               	movwf	drawtext@y,c
  5369  001E44  C060  F038         	movff	_txt,drawtext@_text
  5370  001E48  C061  F039         	movff	_txt+1,drawtext@_text+1
  5371  001E4C  0EFF               	movlw	255
  5372  001E4E  6E3B               	movwf	drawtext@color+1,c
  5373  001E50  683A               	setf	drawtext@color,c
  5374  001E52  0E00               	movlw	0
  5375  001E54  6E3D               	movwf	drawtext@bg+1,c
  5376  001E56  0E00               	movlw	0
  5377  001E58  6E3C               	movwf	drawtext@bg,c
  5378  001E5A  0E01               	movlw	1
  5379  001E5C  6E3E               	movwf	drawtext@size,c
  5380  001E5E  0E78               	movlw	120
  5381  001E60  ECD4  F009         	call	_drawtext
  5382                           
  5383                           ;Lab9.c: 592: Wait_Half_Second();
  5384  001E64  ECA2  F012         	call	_Wait_Half_Second	;wreg free
  5385                           
  5386                           ;Lab9.c: 593: update_LCD_misc();
  5387  001E68  EC56  F005         	call	_update_LCD_misc	;wreg free
  5388  001E6C  0012               	return		;funcret
  5389  001E6E                     __end_of_Wait_One_Second:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           intcon	equ	0xFF2
  5396                           intcon2	equ	0xFF1
  5397                           intcon3	equ	0xFF0
  5398                           postinc0	equ	0xFEE
  5399                           wreg	equ	0xFE8
  5400                           postdec1	equ	0xFE5
  5401                           fsr1l	equ	0xFE1
  5402                           status	equ	0xFD8
  5403                           
  5404 ;; *************** function _update_LCD_misc *****************
  5405 ;; Defined at:
  5406 ;;		line 721 in file "Lab9.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;		None
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  nStep           2    7[BANK0 ] int 
  5411 ;;  ch              1    9[BANK0 ] unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;		None               void
  5414 ;; Registers used:
  5415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;Total ram usage:        3 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    9
  5428 ;; This function calls:
  5429 ;;		___awtoft
  5430 ;;		___ftdiv
  5431 ;;		___ftge
  5432 ;;		___wmul
  5433 ;;		_drawtext
  5434 ;;		_get_full_ADC
  5435 ;; This function is called by:
  5436 ;;		_Wait_One_Second
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text23
  5441  000AAC                     __ptext23:
  5442                           	opt stack 0
  5443  000AAC                     _update_LCD_misc:
  5444                           	opt stack 18
  5445                           
  5446                           ;Lab9.c: 723: char ch = 0;
  5447                           
  5448                           ;incstack = 0
  5449  000AAC  0E00               	movlw	0
  5450  000AAE  0100               	movlb	0	; () banked
  5451  000AB0  6FAA               	movwf	update_LCD_misc@ch& (0+255),b
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;Lab9.c: 724: ADCON0 = ch*4 + 1;
  5455  000AB2  0100               	movlb	0	; () banked
  5456  000AB4  51AA               	movf	update_LCD_misc@ch& (0+255),w,b
  5457  000AB6  0D04               	mullw	4
  5458  000AB8  28F3               	incf	prodl,w,c
  5459  000ABA  6EC2               	movwf	4034,c	;volatile
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;Lab9.c: 725: int nStep = get_full_ADC();
  5463  000ABC  EC74  F012         	call	_get_full_ADC	;wreg free
  5464  000AC0  C00F  F0A8         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5465  000AC4  C010  F0A9         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5466                           
  5467                           ;Lab9.c: 726: volt = nStep * 5 /1024.0;
  5468  000AC8  C0A8  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5469  000ACC  C0A9  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5470  000AD0  0E00               	movlw	0
  5471  000AD2  6E12               	movwf	___wmul@multiplicand+1,c
  5472  000AD4  0E05               	movlw	5
  5473  000AD6  6E11               	movwf	___wmul@multiplicand,c
  5474  000AD8  EC4D  F012         	call	___wmul	;wreg free
  5475  000ADC  C00F  F017         	movff	?___wmul,___awtoft@c
  5476  000AE0  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  5477  000AE4  ECCD  F011         	call	___awtoft	;wreg free
  5478  000AE8  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  5479  000AEC  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  5480  000AF0  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  5481  000AF4  0E00               	movlw	0
  5482  000AF6  6E1E               	movwf	___ftdiv@f2,c
  5483  000AF8  0E80               	movlw	128
  5484  000AFA  6E1F               	movwf	___ftdiv@f2+1,c
  5485  000AFC  0E44               	movlw	68
  5486  000AFE  6E20               	movwf	___ftdiv@f2+2,c
  5487  000B00  ECD2  F00A         	call	___ftdiv	;wreg free
  5488  000B04  C01B  F05B         	movff	?___ftdiv,_volt
  5489  000B08  C01C  F05C         	movff	?___ftdiv+1,_volt+1
  5490  000B0C  C01D  F05D         	movff	?___ftdiv+2,_volt+2
  5491                           
  5492                           ;Lab9.c: 727: SW_MODE = volt < 2.5 ? 1:0;
  5493  000B10  C05B  F00F         	movff	_volt,___ftge@ff1
  5494  000B14  C05C  F010         	movff	_volt+1,___ftge@ff1+1
  5495  000B18  C05D  F011         	movff	_volt+2,___ftge@ff1+2
  5496  000B1C  0E00               	movlw	0
  5497  000B1E  6E12               	movwf	___ftge@ff2,c
  5498  000B20  0E20               	movlw	32
  5499  000B22  6E13               	movwf	___ftge@ff2+1,c
  5500  000B24  0E40               	movlw	64
  5501  000B26  6E14               	movwf	___ftge@ff2+2,c
  5502  000B28  EC95  F00D         	call	___ftge	;wreg free
  5503  000B2C  B0D8               	btfsc	status,0,c
  5504  000B2E  D002               	goto	u3260
  5505  000B30  0E01               	movlw	1
  5506  000B32  D001               	goto	u3270
  5507  000B34                     u3260:
  5508  000B34  0E00               	movlw	0
  5509  000B36                     u3270:
  5510  000B36  6E6A               	movwf	_SW_MODE,c
  5511                           
  5512                           ;Lab9.c: 729: SW_EWPED = EW_PED_SW;
  5513  000B38  C063  F069         	movff	_EW_PED_SW,_SW_EWPED
  5514                           
  5515                           ;Lab9.c: 730: SW_EWLT = PORTCbits.RC2;
  5516  000B3C  0E00               	movlw	0
  5517  000B3E  B482               	btfsc	3970,2,c	;volatile
  5518  000B40  0E01               	movlw	1
  5519  000B42  6E68               	movwf	_SW_EWLT,c
  5520                           
  5521                           ;Lab9.c: 731: SW_NSPED = NS_PED_SW;
  5522  000B44  C066  F06C         	movff	_NS_PED_SW,_SW_NSPED
  5523                           
  5524                           ;Lab9.c: 732: SW_NSLT = PORTCbits.RC1;
  5525  000B48  0E00               	movlw	0
  5526  000B4A  B282               	btfsc	3970,1,c	;volatile
  5527  000B4C  0E01               	movlw	1
  5528  000B4E  6E6B               	movwf	_SW_NSLT,c
  5529                           
  5530                           ;Lab9.c: 734: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5531  000B50  506A               	movf	_SW_MODE,w,c
  5532  000B52  A4D8               	btfss	status,2,c
  5533  000B54  D002               	goto	l4572
  5534  000B56  0E4E               	movlw	78
  5535  000B58  D001               	goto	L2
  5536  000B5A                     l4572:
  5537  000B5A  0E44               	movlw	68
  5538  000B5C                     L2:
  5539  000B5C  6E55               	movwf	_SW_MODE_Txt,c
  5540                           
  5541                           ;Lab9.c: 735: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5542  000B5E  5069               	movf	_SW_EWPED,w,c
  5543  000B60  A4D8               	btfss	status,2,c
  5544  000B62  D002               	goto	l4576
  5545  000B64  0E30               	movlw	48
  5546  000B66  D001               	goto	L3
  5547  000B68                     l4576:
  5548  000B68  0E31               	movlw	49
  5549  000B6A                     L3:
  5550  000B6A  6E53               	movwf	_SW_EWPED_Txt,c
  5551                           
  5552                           ;Lab9.c: 736: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5553  000B6C  5068               	movf	_SW_EWLT,w,c
  5554  000B6E  A4D8               	btfss	status,2,c
  5555  000B70  D002               	goto	l4580
  5556  000B72  0E30               	movlw	48
  5557  000B74  D001               	goto	L4
  5558  000B76                     l4580:
  5559  000B76  0E31               	movlw	49
  5560  000B78                     L4:
  5561  000B78  6E51               	movwf	_SW_EWLT_Txt,c
  5562                           
  5563                           ;Lab9.c: 737: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5564  000B7A  506C               	movf	_SW_NSPED,w,c
  5565  000B7C  A4D8               	btfss	status,2,c
  5566  000B7E  D002               	goto	l4584
  5567  000B80  0E30               	movlw	48
  5568  000B82  D001               	goto	L5
  5569  000B84                     l4584:
  5570  000B84  0E31               	movlw	49
  5571  000B86                     L5:
  5572  000B86  6E59               	movwf	_SW_NSPED_Txt,c
  5573                           
  5574                           ;Lab9.c: 738: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5575  000B88  506B               	movf	_SW_NSLT,w,c
  5576  000B8A  A4D8               	btfss	status,2,c
  5577  000B8C  D002               	goto	l4588
  5578  000B8E  0E30               	movlw	48
  5579  000B90  D001               	goto	L6
  5580  000B92                     l4588:
  5581  000B92  0E31               	movlw	49
  5582  000B94                     L6:
  5583  000B94  6E57               	movwf	_SW_NSLT_Txt,c
  5584                           
  5585                           ;Lab9.c: 740: if (FLASHING_REQUEST == 0) FlashingR_Txt[0] = '0'; else FlashingR_Txt[0] =
      +                           '1';
  5586  000B96  5065               	movf	_FLASHING_REQUEST,w,c
  5587  000B98  A4D8               	btfss	status,2,c
  5588  000B9A  D002               	goto	l4592
  5589  000B9C  0E30               	movlw	48
  5590  000B9E  D001               	goto	L7
  5591  000BA0                     l4592:
  5592  000BA0  0E31               	movlw	49
  5593  000BA2                     L7:
  5594  000BA2  6E4D               	movwf	_FlashingR_Txt,c
  5595                           
  5596                           ;Lab9.c: 741: if (FLASHING == 0) FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1';
  5597  000BA4  5064               	movf	_FLASHING,w,c
  5598  000BA6  A4D8               	btfss	status,2,c
  5599  000BA8  D002               	goto	l4596
  5600  000BAA  0E30               	movlw	48
  5601  000BAC  D001               	goto	L8
  5602  000BAE                     l4596:
  5603  000BAE  0E31               	movlw	49
  5604  000BB0                     L8:
  5605  000BB0  6E4F               	movwf	_FlashingS_Txt,c
  5606  000BB2  D000               	goto	l4598
  5607  000BB4                     l4598:
  5608                           
  5609                           ;Lab9.c: 743: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5610  000BB4  0E0A               	movlw	10
  5611  000BB6  6E37               	movwf	drawtext@y,c
  5612  000BB8  0E4B               	movlw	low _Act_Mode_Txt
  5613  000BBA  6E38               	movwf	drawtext@_text,c
  5614  000BBC  0E00               	movlw	high _Act_Mode_Txt
  5615  000BBE  6E39               	movwf	drawtext@_text+1,c
  5616  000BC0  0EFF               	movlw	255
  5617  000BC2  6E3B               	movwf	drawtext@color+1,c
  5618  000BC4  683A               	setf	drawtext@color,c
  5619  000BC6  0E00               	movlw	0
  5620  000BC8  6E3D               	movwf	drawtext@bg+1,c
  5621  000BCA  0E00               	movlw	0
  5622  000BCC  6E3C               	movwf	drawtext@bg,c
  5623  000BCE  0E01               	movlw	1
  5624  000BD0  6E3E               	movwf	drawtext@size,c
  5625  000BD2  0E23               	movlw	35
  5626  000BD4  ECD4  F009         	call	_drawtext
  5627                           
  5628                           ;Lab9.c: 744: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5629  000BD8  0E95               	movlw	149
  5630  000BDA  6E37               	movwf	drawtext@y,c
  5631  000BDC  0E53               	movlw	low _SW_EWPED_Txt
  5632  000BDE  6E38               	movwf	drawtext@_text,c
  5633  000BE0  0E00               	movlw	high _SW_EWPED_Txt
  5634  000BE2  6E39               	movwf	drawtext@_text+1,c
  5635  000BE4  0EFF               	movlw	255
  5636  000BE6  6E3B               	movwf	drawtext@color+1,c
  5637  000BE8  683A               	setf	drawtext@color,c
  5638  000BEA  0E00               	movlw	0
  5639  000BEC  6E3D               	movwf	drawtext@bg+1,c
  5640  000BEE  0E00               	movlw	0
  5641  000BF0  6E3C               	movwf	drawtext@bg,c
  5642  000BF2  0E01               	movlw	1
  5643  000BF4  6E3E               	movwf	drawtext@size,c
  5644  000BF6  0E06               	movlw	6
  5645  000BF8  ECD4  F009         	call	_drawtext
  5646                           
  5647                           ;Lab9.c: 745: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5648  000BFC  0E95               	movlw	149
  5649  000BFE  6E37               	movwf	drawtext@y,c
  5650  000C00  0E51               	movlw	low _SW_EWLT_Txt
  5651  000C02  6E38               	movwf	drawtext@_text,c
  5652  000C04  0E00               	movlw	high _SW_EWLT_Txt
  5653  000C06  6E39               	movwf	drawtext@_text+1,c
  5654  000C08  0EFF               	movlw	255
  5655  000C0A  6E3B               	movwf	drawtext@color+1,c
  5656  000C0C  683A               	setf	drawtext@color,c
  5657  000C0E  0E00               	movlw	0
  5658  000C10  6E3D               	movwf	drawtext@bg+1,c
  5659  000C12  0E00               	movlw	0
  5660  000C14  6E3C               	movwf	drawtext@bg,c
  5661  000C16  0E01               	movlw	1
  5662  000C18  6E3E               	movwf	drawtext@size,c
  5663  000C1A  0E20               	movlw	32
  5664  000C1C  ECD4  F009         	call	_drawtext
  5665                           
  5666                           ;Lab9.c: 746: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5667  000C20  0E95               	movlw	149
  5668  000C22  6E37               	movwf	drawtext@y,c
  5669  000C24  0E59               	movlw	low _SW_NSPED_Txt
  5670  000C26  6E38               	movwf	drawtext@_text,c
  5671  000C28  0E00               	movlw	high _SW_NSPED_Txt
  5672  000C2A  6E39               	movwf	drawtext@_text+1,c
  5673  000C2C  0EFF               	movlw	255
  5674  000C2E  6E3B               	movwf	drawtext@color+1,c
  5675  000C30  683A               	setf	drawtext@color,c
  5676  000C32  0E00               	movlw	0
  5677  000C34  6E3D               	movwf	drawtext@bg+1,c
  5678  000C36  0E00               	movlw	0
  5679  000C38  6E3C               	movwf	drawtext@bg,c
  5680  000C3A  0E01               	movlw	1
  5681  000C3C  6E3E               	movwf	drawtext@size,c
  5682  000C3E  0E3A               	movlw	58
  5683  000C40  ECD4  F009         	call	_drawtext
  5684                           
  5685                           ;Lab9.c: 747: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5686  000C44  0E95               	movlw	149
  5687  000C46  6E37               	movwf	drawtext@y,c
  5688  000C48  0E57               	movlw	low _SW_NSLT_Txt
  5689  000C4A  6E38               	movwf	drawtext@_text,c
  5690  000C4C  0E00               	movlw	high _SW_NSLT_Txt
  5691  000C4E  6E39               	movwf	drawtext@_text+1,c
  5692  000C50  0EFF               	movlw	255
  5693  000C52  6E3B               	movwf	drawtext@color+1,c
  5694  000C54  683A               	setf	drawtext@color,c
  5695  000C56  0E00               	movlw	0
  5696  000C58  6E3D               	movwf	drawtext@bg+1,c
  5697  000C5A  0E00               	movlw	0
  5698  000C5C  6E3C               	movwf	drawtext@bg,c
  5699  000C5E  0E01               	movlw	1
  5700  000C60  6E3E               	movwf	drawtext@size,c
  5701  000C62  0E57               	movlw	87
  5702  000C64  ECD4  F009         	call	_drawtext
  5703                           
  5704                           ;Lab9.c: 748: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5705  000C68  0E95               	movlw	149
  5706  000C6A  6E37               	movwf	drawtext@y,c
  5707  000C6C  0E55               	movlw	low _SW_MODE_Txt
  5708  000C6E  6E38               	movwf	drawtext@_text,c
  5709  000C70  0E00               	movlw	high _SW_MODE_Txt
  5710  000C72  6E39               	movwf	drawtext@_text+1,c
  5711  000C74  0EFF               	movlw	255
  5712  000C76  6E3B               	movwf	drawtext@color+1,c
  5713  000C78  683A               	setf	drawtext@color,c
  5714  000C7A  0E00               	movlw	0
  5715  000C7C  6E3D               	movwf	drawtext@bg+1,c
  5716  000C7E  0E00               	movlw	0
  5717  000C80  6E3C               	movwf	drawtext@bg,c
  5718  000C82  0E01               	movlw	1
  5719  000C84  6E3E               	movwf	drawtext@size,c
  5720  000C86  0E70               	movlw	112
  5721  000C88  ECD4  F009         	call	_drawtext
  5722                           
  5723                           ;Lab9.c: 750: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  5724  000C8C  0E0A               	movlw	10
  5725  000C8E  6E37               	movwf	drawtext@y,c
  5726  000C90  0E4D               	movlw	low _FlashingR_Txt
  5727  000C92  6E38               	movwf	drawtext@_text,c
  5728  000C94  0E00               	movlw	high _FlashingR_Txt
  5729  000C96  6E39               	movwf	drawtext@_text+1,c
  5730  000C98  0EFF               	movlw	255
  5731  000C9A  6E3B               	movwf	drawtext@color+1,c
  5732  000C9C  683A               	setf	drawtext@color,c
  5733  000C9E  0E00               	movlw	0
  5734  000CA0  6E3D               	movwf	drawtext@bg+1,c
  5735  000CA2  0E00               	movlw	0
  5736  000CA4  6E3C               	movwf	drawtext@bg,c
  5737  000CA6  0E01               	movlw	1
  5738  000CA8  6E3E               	movwf	drawtext@size,c
  5739  000CAA  0E46               	movlw	70
  5740  000CAC  ECD4  F009         	call	_drawtext
  5741                           
  5742                           ;Lab9.c: 751: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  5743  000CB0  0E0A               	movlw	10
  5744  000CB2  6E37               	movwf	drawtext@y,c
  5745  000CB4  0E4F               	movlw	low _FlashingS_Txt
  5746  000CB6  6E38               	movwf	drawtext@_text,c
  5747  000CB8  0E00               	movlw	high _FlashingS_Txt
  5748  000CBA  6E39               	movwf	drawtext@_text+1,c
  5749  000CBC  0EFF               	movlw	255
  5750  000CBE  6E3B               	movwf	drawtext@color+1,c
  5751  000CC0  683A               	setf	drawtext@color,c
  5752  000CC2  0E00               	movlw	0
  5753  000CC4  6E3D               	movwf	drawtext@bg+1,c
  5754  000CC6  0E00               	movlw	0
  5755  000CC8  6E3C               	movwf	drawtext@bg,c
  5756  000CCA  0E01               	movlw	1
  5757  000CCC  6E3E               	movwf	drawtext@size,c
  5758  000CCE  0E64               	movlw	100
  5759  000CD0  ECD4  F009         	call	_drawtext
  5760  000CD4  0012               	return		;funcret
  5761  000CD6                     __end_of_update_LCD_misc:
  5762                           	opt stack 0
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           intcon2	equ	0xFF1
  5770                           intcon3	equ	0xFF0
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           postdec1	equ	0xFE5
  5774                           fsr1l	equ	0xFE1
  5775                           status	equ	0xFD8
  5776                           
  5777 ;; *************** function _get_full_ADC *****************
  5778 ;; Defined at:
  5779 ;;		line 393 in file "Lab9.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;		None
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  result          2   18[COMRAM] unsigned int 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  2   14[COMRAM] unsigned int 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;Total ram usage:        6 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    2
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		_main
  5804 ;;		_update_LCD_misc
  5805 ;; This function uses a non-reentrant model
  5806 ;;
  5807                           
  5808                           	psect	text24
  5809  0024E8                     __ptext24:
  5810                           	opt stack 0
  5811  0024E8                     _get_full_ADC:
  5812                           	opt stack 28
  5813                           
  5814                           ;Lab9.c: 395: unsigned int result;
  5815                           ;Lab9.c: 396: ADCON0bits.GO=1;
  5816                           
  5817                           ;incstack = 0
  5818  0024E8  82C2               	bsf	4034,1,c	;volatile
  5819                           
  5820                           ;Lab9.c: 397: while(ADCON0bits.DONE==1);
  5821  0024EA  D000               	goto	l423
  5822  0024EC                     l423:
  5823  0024EC  B2C2               	btfsc	4034,1,c	;volatile
  5824  0024EE  D7FE               	goto	l423
  5825                           
  5826                           ;Lab9.c: 398: result = (ADRESH * 0x100) + ADRESL;
  5827  0024F0  50C4               	movf	4036,w,c	;volatile
  5828  0024F2  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  5829  0024F4  6A11               	clrf	??_get_full_ADC& (0+255),c
  5830  0024F6  50C3               	movf	4035,w,c	;volatile
  5831  0024F8  2411               	addwf	??_get_full_ADC,w,c
  5832  0024FA  6E13               	movwf	get_full_ADC@result,c
  5833  0024FC  0E00               	movlw	0
  5834  0024FE  2012               	addwfc	??_get_full_ADC+1,w,c
  5835  002500  6E14               	movwf	get_full_ADC@result+1,c
  5836                           
  5837                           ;Lab9.c: 400: return result;
  5838  002502  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  5839  002506  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5840  00250A  D000               	goto	l426
  5841  00250C                     l426:
  5842  00250C  0012               	return		;funcret
  5843  00250E                     __end_of_get_full_ADC:
  5844                           	opt stack 0
  5845                           tblptru	equ	0xFF8
  5846                           tblptrh	equ	0xFF7
  5847                           tblptrl	equ	0xFF6
  5848                           tablat	equ	0xFF5
  5849                           prodl	equ	0xFF3
  5850                           intcon	equ	0xFF2
  5851                           intcon2	equ	0xFF1
  5852                           intcon3	equ	0xFF0
  5853                           postinc0	equ	0xFEE
  5854                           wreg	equ	0xFE8
  5855                           postdec1	equ	0xFE5
  5856                           fsr1l	equ	0xFE1
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function ___ftge *****************
  5860 ;; Defined at:
  5861 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  ff1             3   14[COMRAM] float 
  5864 ;;  ff2             3   17[COMRAM] float 
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;		None
  5867 ;; Return value:  Size  Location     Type
  5868 ;;		None               void
  5869 ;; Registers used:
  5870 ;;		wreg, status,2, status,0
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5876 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;Total ram usage:        9 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    2
  5883 ;; This function calls:
  5884 ;;		Nothing
  5885 ;; This function is called by:
  5886 ;;		_main
  5887 ;;		_update_LCD_misc
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           	psect	text25
  5892  001B2A                     __ptext25:
  5893                           	opt stack 0
  5894  001B2A                     ___ftge:
  5895                           	opt stack 28
  5896                           
  5897                           ;incstack = 0
  5898  001B2A  AE11               	btfss	___ftge@ff1+2,7,c
  5899  001B2C  D017               	goto	l4454
  5900  001B2E  C00F  F015         	movff	___ftge@ff1,??___ftge
  5901  001B32  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  5902  001B36  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  5903  001B3A  1E15               	comf	??___ftge,f,c
  5904  001B3C  1E16               	comf	??___ftge+1,f,c
  5905  001B3E  1E17               	comf	??___ftge+2,f,c
  5906  001B40  2A15               	incf	??___ftge,f,c
  5907  001B42  0E00               	movlw	0
  5908  001B44  2216               	addwfc	??___ftge+1,f,c
  5909  001B46  2217               	addwfc	??___ftge+2,f,c
  5910  001B48  0E00               	movlw	0
  5911  001B4A  2415               	addwf	??___ftge,w,c
  5912  001B4C  6E0F               	movwf	___ftge@ff1,c
  5913  001B4E  0E00               	movlw	0
  5914  001B50  2016               	addwfc	??___ftge+1,w,c
  5915  001B52  6E10               	movwf	___ftge@ff1+1,c
  5916  001B54  0E80               	movlw	128
  5917  001B56  2017               	addwfc	??___ftge+2,w,c
  5918  001B58  6E11               	movwf	___ftge@ff1+2,c
  5919  001B5A  D000               	goto	l4454
  5920  001B5C                     l4454:
  5921  001B5C  AE14               	btfss	___ftge@ff2+2,7,c
  5922  001B5E  D017               	goto	l4458
  5923  001B60  C012  F015         	movff	___ftge@ff2,??___ftge
  5924  001B64  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  5925  001B68  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  5926  001B6C  1E15               	comf	??___ftge,f,c
  5927  001B6E  1E16               	comf	??___ftge+1,f,c
  5928  001B70  1E17               	comf	??___ftge+2,f,c
  5929  001B72  2A15               	incf	??___ftge,f,c
  5930  001B74  0E00               	movlw	0
  5931  001B76  2216               	addwfc	??___ftge+1,f,c
  5932  001B78  2217               	addwfc	??___ftge+2,f,c
  5933  001B7A  0E00               	movlw	0
  5934  001B7C  2415               	addwf	??___ftge,w,c
  5935  001B7E  6E12               	movwf	___ftge@ff2,c
  5936  001B80  0E00               	movlw	0
  5937  001B82  2016               	addwfc	??___ftge+1,w,c
  5938  001B84  6E13               	movwf	___ftge@ff2+1,c
  5939  001B86  0E80               	movlw	128
  5940  001B88  2017               	addwfc	??___ftge+2,w,c
  5941  001B8A  6E14               	movwf	___ftge@ff2+2,c
  5942  001B8C  D000               	goto	l4458
  5943  001B8E                     l4458:
  5944  001B8E  0E00               	movlw	0
  5945  001B90  1A0F               	xorwf	___ftge@ff1,f,c
  5946  001B92  0E00               	movlw	0
  5947  001B94  1A10               	xorwf	___ftge@ff1+1,f,c
  5948  001B96  0E80               	movlw	128
  5949  001B98  1A11               	xorwf	___ftge@ff1+2,f,c
  5950  001B9A  0E00               	movlw	0
  5951  001B9C  1A12               	xorwf	___ftge@ff2,f,c
  5952  001B9E  0E00               	movlw	0
  5953  001BA0  1A13               	xorwf	___ftge@ff2+1,f,c
  5954  001BA2  0E80               	movlw	128
  5955  001BA4  1A14               	xorwf	___ftge@ff2+2,f,c
  5956  001BA6  5012               	movf	___ftge@ff2,w,c
  5957  001BA8  5C0F               	subwf	___ftge@ff1,w,c
  5958  001BAA  5013               	movf	___ftge@ff2+1,w,c
  5959  001BAC  5810               	subwfb	___ftge@ff1+1,w,c
  5960  001BAE  5014               	movf	___ftge@ff2+2,w,c
  5961  001BB0  5811               	subwfb	___ftge@ff1+2,w,c
  5962  001BB2  B0D8               	btfsc	status,0,c
  5963  001BB4  D002               	goto	l4464
  5964  001BB6  90D8               	bcf	status,0,c
  5965  001BB8  D002               	goto	l970
  5966  001BBA                     l4464:
  5967  001BBA  80D8               	bsf	status,0,c
  5968  001BBC  D000               	goto	l970
  5969  001BBE                     l970:
  5970  001BBE  0012               	return		;funcret
  5971  001BC0                     __end_of___ftge:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodl	equ	0xFF3
  5978                           intcon	equ	0xFF2
  5979                           intcon2	equ	0xFF1
  5980                           intcon3	equ	0xFF0
  5981                           postinc0	equ	0xFEE
  5982                           wreg	equ	0xFE8
  5983                           postdec1	equ	0xFE5
  5984                           fsr1l	equ	0xFE1
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function ___ftdiv *****************
  5988 ;; Defined at:
  5989 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  f1              3   26[COMRAM] float 
  5992 ;;  f2              3   29[COMRAM] float 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  f3              3   36[COMRAM] float 
  5995 ;;  sign            1   40[COMRAM] unsigned char 
  5996 ;;  exp             1   39[COMRAM] unsigned char 
  5997 ;;  cntr            1   35[COMRAM] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  3   26[COMRAM] float 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6007 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;Total ram usage:       15 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    3
  6014 ;; This function calls:
  6015 ;;		___ftpack
  6016 ;; This function is called by:
  6017 ;;		_main
  6018 ;;		_update_LCD_misc
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text26
  6023  0015A4                     __ptext26:
  6024                           	opt stack 0
  6025  0015A4                     ___ftdiv:
  6026                           	opt stack 27
  6027                           
  6028                           ;incstack = 0
  6029  0015A4  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  6030  0015A8  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  6031  0015AA  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  6032  0015AC  341C               	rlcf	___ftdiv@f1+1,w,c
  6033  0015AE  3621               	rlcf	??___ftdiv& (0+255),f,c
  6034  0015B0  E301               	bnc	u3121
  6035  0015B2  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  6036  0015B4                     u3121:
  6037  0015B4  5021               	movf	??___ftdiv,w,c
  6038  0015B6  6E28               	movwf	___ftdiv@exp,c
  6039  0015B8  5028               	movf	___ftdiv@exp,w,c
  6040  0015BA  A4D8               	btfss	status,2,c
  6041  0015BC  D002               	goto	l4398
  6042  0015BE  D00E               	goto	l4400
  6043  0015C0  D061               	goto	l961
  6044  0015C2                     l4398:
  6045  0015C2  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  6046  0015C6  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  6047  0015C8  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  6048  0015CA  341F               	rlcf	___ftdiv@f2+1,w,c
  6049  0015CC  3621               	rlcf	??___ftdiv& (0+255),f,c
  6050  0015CE  E301               	bnc	u3141
  6051  0015D0  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  6052  0015D2                     u3141:
  6053  0015D2  5021               	movf	??___ftdiv,w,c
  6054  0015D4  6E29               	movwf	___ftdiv@sign,c
  6055  0015D6  5029               	movf	___ftdiv@sign,w,c
  6056  0015D8  A4D8               	btfss	status,2,c
  6057  0015DA  D007               	goto	l4404
  6058  0015DC                     l4400:
  6059  0015DC  0E00               	movlw	0
  6060  0015DE  6E1B               	movwf	?___ftdiv,c
  6061  0015E0  0E00               	movlw	0
  6062  0015E2  6E1C               	movwf	?___ftdiv+1,c
  6063  0015E4  0E00               	movlw	0
  6064  0015E6  6E1D               	movwf	?___ftdiv+2,c
  6065  0015E8  D04D               	goto	l961
  6066  0015EA                     l4404:
  6067  0015EA  0E00               	movlw	0
  6068  0015EC  6E25               	movwf	___ftdiv@f3,c
  6069  0015EE  0E00               	movlw	0
  6070  0015F0  6E26               	movwf	___ftdiv@f3+1,c
  6071  0015F2  0E00               	movlw	0
  6072  0015F4  6E27               	movwf	___ftdiv@f3+2,c
  6073  0015F6  5029               	movf	___ftdiv@sign,w,c
  6074  0015F8  0F89               	addlw	137
  6075  0015FA  5E28               	subwf	___ftdiv@exp,f,c
  6076  0015FC  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  6077  001600  5020               	movf	___ftdiv@f2+2,w,c
  6078  001602  1A29               	xorwf	___ftdiv@sign,f,c
  6079  001604  0E80               	movlw	128
  6080  001606  1629               	andwf	___ftdiv@sign,f,c
  6081  001608  8E1C               	bsf	___ftdiv@f1+1,7,c
  6082  00160A  0EFF               	movlw	255
  6083  00160C  161B               	andwf	___ftdiv@f1,f,c
  6084  00160E  0EFF               	movlw	255
  6085  001610  161C               	andwf	___ftdiv@f1+1,f,c
  6086  001612  0E00               	movlw	0
  6087  001614  161D               	andwf	___ftdiv@f1+2,f,c
  6088  001616  8E1F               	bsf	___ftdiv@f2+1,7,c
  6089  001618  0EFF               	movlw	255
  6090  00161A  161E               	andwf	___ftdiv@f2,f,c
  6091  00161C  0EFF               	movlw	255
  6092  00161E  161F               	andwf	___ftdiv@f2+1,f,c
  6093  001620  0E00               	movlw	0
  6094  001622  1620               	andwf	___ftdiv@f2+2,f,c
  6095  001624  0E18               	movlw	24
  6096  001626  6E24               	movwf	___ftdiv@cntr,c
  6097  001628  D000               	goto	l4424
  6098  00162A                     l4424:
  6099  00162A  90D8               	bcf	status,0,c
  6100  00162C  3625               	rlcf	___ftdiv@f3,f,c
  6101  00162E  3626               	rlcf	___ftdiv@f3+1,f,c
  6102  001630  3627               	rlcf	___ftdiv@f3+2,f,c
  6103  001632  501E               	movf	___ftdiv@f2,w,c
  6104  001634  5C1B               	subwf	___ftdiv@f1,w,c
  6105  001636  501F               	movf	___ftdiv@f2+1,w,c
  6106  001638  581C               	subwfb	___ftdiv@f1+1,w,c
  6107  00163A  5020               	movf	___ftdiv@f2+2,w,c
  6108  00163C  581D               	subwfb	___ftdiv@f1+2,w,c
  6109  00163E  A0D8               	btfss	status,0,c
  6110  001640  D007               	goto	l964
  6111  001642  501E               	movf	___ftdiv@f2,w,c
  6112  001644  5E1B               	subwf	___ftdiv@f1,f,c
  6113  001646  501F               	movf	___ftdiv@f2+1,w,c
  6114  001648  5A1C               	subwfb	___ftdiv@f1+1,f,c
  6115  00164A  5020               	movf	___ftdiv@f2+2,w,c
  6116  00164C  5A1D               	subwfb	___ftdiv@f1+2,f,c
  6117  00164E  8025               	bsf	___ftdiv@f3,0,c
  6118  001650                     l964:
  6119  001650  90D8               	bcf	status,0,c
  6120  001652  361B               	rlcf	___ftdiv@f1,f,c
  6121  001654  361C               	rlcf	___ftdiv@f1+1,f,c
  6122  001656  361D               	rlcf	___ftdiv@f1+2,f,c
  6123  001658  2E24               	decfsz	___ftdiv@cntr,f,c
  6124  00165A  D7E7               	goto	l4424
  6125  00165C  D000               	goto	l4434
  6126  00165E                     l4434:
  6127  00165E  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  6128  001662  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6129  001666  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6130  00166A  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  6131  00166E  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  6132  001672  EC84  F00C         	call	___ftpack	;wreg free
  6133  001676  C00F  F01B         	movff	?___ftpack,?___ftdiv
  6134  00167A  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  6135  00167E  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  6136  001682  D000               	goto	l961
  6137  001684                     l961:
  6138  001684  0012               	return		;funcret
  6139  001686                     __end_of___ftdiv:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodl	equ	0xFF3
  6146                           intcon	equ	0xFF2
  6147                           intcon2	equ	0xFF1
  6148                           intcon3	equ	0xFF0
  6149                           postinc0	equ	0xFEE
  6150                           wreg	equ	0xFE8
  6151                           postdec1	equ	0xFE5
  6152                           fsr1l	equ	0xFE1
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function ___awtoft *****************
  6156 ;; Defined at:
  6157 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  c               2   22[COMRAM] int 
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  sign            1   25[COMRAM] unsigned char 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  3   22[COMRAM] float 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6171 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;Total ram usage:        4 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    3
  6178 ;; This function calls:
  6179 ;;		___ftpack
  6180 ;; This function is called by:
  6181 ;;		_main
  6182 ;;		_update_LCD_misc
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text27
  6187  00239A                     __ptext27:
  6188                           	opt stack 0
  6189  00239A                     ___awtoft:
  6190                           	opt stack 27
  6191                           
  6192                           ;incstack = 0
  6193  00239A  0E00               	movlw	0
  6194  00239C  6E1A               	movwf	___awtoft@sign,c
  6195  00239E  AE18               	btfss	___awtoft@c+1,7,c
  6196  0023A0  D007               	goto	l4446
  6197  0023A2  6C17               	negf	___awtoft@c,c
  6198  0023A4  1E18               	comf	___awtoft@c+1,f,c
  6199  0023A6  B0D8               	btfsc	status,0,c
  6200  0023A8  2A18               	incf	___awtoft@c+1,f,c
  6201  0023AA  0E01               	movlw	1
  6202  0023AC  6E1A               	movwf	___awtoft@sign,c
  6203  0023AE  D000               	goto	l4446
  6204  0023B0                     l4446:
  6205  0023B0  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  6206  0023B4  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  6207  0023B8  6A11               	clrf	___ftpack@arg+2,c
  6208  0023BA  0E8E               	movlw	142
  6209  0023BC  6E12               	movwf	___ftpack@exp,c
  6210  0023BE  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  6211  0023C2  EC84  F00C         	call	___ftpack	;wreg free
  6212  0023C6  C00F  F017         	movff	?___ftpack,?___awtoft
  6213  0023CA  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  6214  0023CE  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  6215  0023D2  D000               	goto	l799
  6216  0023D4                     l799:
  6217  0023D4  0012               	return		;funcret
  6218  0023D6                     __end_of___awtoft:
  6219                           	opt stack 0
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodl	equ	0xFF3
  6225                           intcon	equ	0xFF2
  6226                           intcon2	equ	0xFF1
  6227                           intcon3	equ	0xFF0
  6228                           postinc0	equ	0xFEE
  6229                           wreg	equ	0xFE8
  6230                           postdec1	equ	0xFE5
  6231                           fsr1l	equ	0xFE1
  6232                           status	equ	0xFD8
  6233                           
  6234 ;; *************** function ___ftpack *****************
  6235 ;; Defined at:
  6236 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  arg             3   14[COMRAM] unsigned um
  6239 ;;  exp             1   17[COMRAM] unsigned char 
  6240 ;;  sign            1   18[COMRAM] unsigned char 
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  3   14[COMRAM] float 
  6245 ;; Registers used:
  6246 ;;		wreg, status,2, status,0
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6252 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;Total ram usage:        8 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    2
  6259 ;; This function calls:
  6260 ;;		Nothing
  6261 ;; This function is called by:
  6262 ;;		___awtoft
  6263 ;;		___ftdiv
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	text28
  6268  001908                     __ptext28:
  6269                           	opt stack 0
  6270  001908                     ___ftpack:
  6271                           	opt stack 27
  6272                           
  6273                           ;incstack = 0
  6274  001908  5012               	movf	___ftpack@exp,w,c
  6275  00190A  B4D8               	btfsc	status,2,c
  6276  00190C  D005               	goto	l4284
  6277  00190E  500F               	movf	___ftpack@arg,w,c
  6278  001910  1010               	iorwf	___ftpack@arg+1,w,c
  6279  001912  1011               	iorwf	___ftpack@arg+2,w,c
  6280  001914  A4D8               	btfss	status,2,c
  6281  001916  D00E               	goto	l4290
  6282  001918                     l4284:
  6283  001918  0E00               	movlw	0
  6284  00191A  6E0F               	movwf	?___ftpack,c
  6285  00191C  0E00               	movlw	0
  6286  00191E  6E10               	movwf	?___ftpack+1,c
  6287  001920  0E00               	movlw	0
  6288  001922  6E11               	movwf	?___ftpack+2,c
  6289  001924  D053               	goto	l889
  6290  001926  D006               	goto	l4290
  6291  001928                     l4288:
  6292  001928  2A12               	incf	___ftpack@exp,f,c
  6293  00192A  90D8               	bcf	status,0,c
  6294  00192C  3211               	rrcf	___ftpack@arg+2,f,c
  6295  00192E  3210               	rrcf	___ftpack@arg+1,f,c
  6296  001930  320F               	rrcf	___ftpack@arg,f,c
  6297  001932  D000               	goto	l4290
  6298  001934                     l4290:
  6299  001934  0E00               	movlw	0
  6300  001936  140F               	andwf	___ftpack@arg,w,c
  6301  001938  6E14               	movwf	??___ftpack& (0+255),c
  6302  00193A  0E00               	movlw	0
  6303  00193C  1410               	andwf	___ftpack@arg+1,w,c
  6304  00193E  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6305  001940  0EFE               	movlw	254
  6306  001942  1411               	andwf	___ftpack@arg+2,w,c
  6307  001944  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6308  001946  5014               	movf	??___ftpack,w,c
  6309  001948  1015               	iorwf	??___ftpack+1,w,c
  6310  00194A  1016               	iorwf	??___ftpack+2,w,c
  6311  00194C  B4D8               	btfsc	status,2,c
  6312  00194E  D00E               	goto	l4296
  6313  001950  D7EB               	goto	l4288
  6314  001952  D00C               	goto	l4296
  6315  001954                     l4292:
  6316  001954  2A12               	incf	___ftpack@exp,f,c
  6317  001956  0E01               	movlw	1
  6318  001958  260F               	addwf	___ftpack@arg,f,c
  6319  00195A  0E00               	movlw	0
  6320  00195C  2210               	addwfc	___ftpack@arg+1,f,c
  6321  00195E  0E00               	movlw	0
  6322  001960  2211               	addwfc	___ftpack@arg+2,f,c
  6323  001962  90D8               	bcf	status,0,c
  6324  001964  3211               	rrcf	___ftpack@arg+2,f,c
  6325  001966  3210               	rrcf	___ftpack@arg+1,f,c
  6326  001968  320F               	rrcf	___ftpack@arg,f,c
  6327  00196A  D000               	goto	l4296
  6328  00196C                     l4296:
  6329  00196C  0E00               	movlw	0
  6330  00196E  140F               	andwf	___ftpack@arg,w,c
  6331  001970  6E14               	movwf	??___ftpack& (0+255),c
  6332  001972  0E00               	movlw	0
  6333  001974  1410               	andwf	___ftpack@arg+1,w,c
  6334  001976  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6335  001978  0EFF               	movlw	255
  6336  00197A  1411               	andwf	___ftpack@arg+2,w,c
  6337  00197C  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6338  00197E  5014               	movf	??___ftpack,w,c
  6339  001980  1015               	iorwf	??___ftpack+1,w,c
  6340  001982  1016               	iorwf	??___ftpack+2,w,c
  6341  001984  B4D8               	btfsc	status,2,c
  6342  001986  D008               	goto	l4300
  6343  001988  D7E5               	goto	l4292
  6344  00198A  D006               	goto	l4300
  6345  00198C                     l4298:
  6346  00198C  0612               	decf	___ftpack@exp,f,c
  6347  00198E  90D8               	bcf	status,0,c
  6348  001990  360F               	rlcf	___ftpack@arg,f,c
  6349  001992  3610               	rlcf	___ftpack@arg+1,f,c
  6350  001994  3611               	rlcf	___ftpack@arg+2,f,c
  6351  001996  D000               	goto	l4300
  6352  001998                     l4300:
  6353  001998  BE10               	btfsc	___ftpack@arg+1,7,c
  6354  00199A  D004               	goto	l900
  6355  00199C  0E02               	movlw	2
  6356  00199E  6012               	cpfslt	___ftpack@exp,c
  6357  0019A0  D7F5               	goto	l4298
  6358  0019A2  D000               	goto	l900
  6359  0019A4                     l900:
  6360  0019A4  B012               	btfsc	___ftpack@exp,0,c
  6361  0019A6  D002               	goto	l4306
  6362  0019A8  9E10               	bcf	___ftpack@arg+1,7,c
  6363  0019AA  D000               	goto	l4306
  6364  0019AC                     l4306:
  6365  0019AC  90D8               	bcf	status,0,c
  6366  0019AE  3212               	rrcf	___ftpack@exp,f,c
  6367  0019B0  5012               	movf	___ftpack@exp,w,c
  6368  0019B2  1211               	iorwf	___ftpack@arg+2,f,c
  6369  0019B4  5013               	movf	___ftpack@sign,w,c
  6370  0019B6  B4D8               	btfsc	status,2,c
  6371  0019B8  D002               	goto	l4312
  6372  0019BA  8E11               	bsf	___ftpack@arg+2,7,c
  6373  0019BC  D000               	goto	l4312
  6374  0019BE                     l4312:
  6375  0019BE  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  6376  0019C2  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  6377  0019C6  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  6378  0019CA  D000               	goto	l889
  6379  0019CC                     l889:
  6380  0019CC  0012               	return		;funcret
  6381  0019CE                     __end_of___ftpack:
  6382                           	opt stack 0
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           prodl	equ	0xFF3
  6388                           intcon	equ	0xFF2
  6389                           intcon2	equ	0xFF1
  6390                           intcon3	equ	0xFF0
  6391                           postinc0	equ	0xFEE
  6392                           wreg	equ	0xFE8
  6393                           postdec1	equ	0xFE5
  6394                           fsr1l	equ	0xFE1
  6395                           status	equ	0xFD8
  6396                           
  6397 ;; *************** function _strcpy *****************
  6398 ;; Defined at:
  6399 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  to              2   14[COMRAM] PTR unsigned char 
  6402 ;;		 -> NULL(0), buffer(31), 
  6403 ;;  from            2   16[COMRAM] PTR const unsigned char 
  6404 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  6405 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
  6406 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
  6407 ;;		 -> STR_2(6), STR_1(22), 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  cp              2   18[COMRAM] PTR unsigned char 
  6410 ;;		 -> NULL(0), buffer(31), 
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  2   14[COMRAM] PTR unsigned char 
  6413 ;; Registers used:
  6414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6420 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;Total ram usage:        6 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    2
  6427 ;; This function calls:
  6428 ;;		Nothing
  6429 ;; This function is called by:
  6430 ;;		_Initialize_Screen
  6431 ;;		_Wait_One_Second
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text29
  6436  00240E                     __ptext29:
  6437                           	opt stack 0
  6438  00240E                     _strcpy:
  6439                           	opt stack 25
  6440                           
  6441                           ;incstack = 0
  6442  00240E  C00F  F013         	movff	strcpy@to,strcpy@cp
  6443  002412  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  6444  002416  D005               	goto	l4536
  6445  002418                     l4534:
  6446  002418  4A13               	infsnz	strcpy@cp,f,c
  6447  00241A  2A14               	incf	strcpy@cp+1,f,c
  6448  00241C  4A11               	infsnz	strcpy@from,f,c
  6449  00241E  2A12               	incf	strcpy@from+1,f,c
  6450  002420  D000               	goto	l4536
  6451  002422                     l4536:
  6452  002422  C011  FFF6         	movff	strcpy@from,tblptrl
  6453  002426  C012  FFF7         	movff	strcpy@from+1,tblptrh
  6454  00242A                     	if	0	;tblptru may be non-zero
  6455  00242A                     	endif
  6456  00242A                     	if	0	;tblptru may be non-zero
  6457  00242A                     	endif
  6458  00242A  C013  FFD9         	movff	strcpy@cp,fsr2l
  6459  00242E  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  6460  002432  0008               	tblrd		*
  6461  002434  CFF5 FFDF          	movff	tablat,indf2
  6462  002438  50DF               	movf	indf2,w,c
  6463  00243A  A4D8               	btfss	status,2,c
  6464  00243C  D7ED               	goto	l4534
  6465                           
  6466                           ;	Return value of _strcpy is never used
  6467  00243E  0012               	return		;funcret
  6468  002440                     __end_of_strcpy:
  6469                           	opt stack 0
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           prodl	equ	0xFF3
  6475                           intcon	equ	0xFF2
  6476                           intcon2	equ	0xFF1
  6477                           intcon3	equ	0xFF0
  6478                           postinc0	equ	0xFEE
  6479                           wreg	equ	0xFE8
  6480                           postdec1	equ	0xFE5
  6481                           fsr1l	equ	0xFE1
  6482                           indf2	equ	0xFDF
  6483                           fsr2h	equ	0xFDA
  6484                           fsr2l	equ	0xFD9
  6485                           status	equ	0xFD8
  6486                           
  6487 ;; *************** function _Set_NSLT *****************
  6488 ;; Defined at:
  6489 ;;		line 416 in file "Lab9.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;  color           1    wreg     unsigned char 
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  color           1    3[BANK0 ] unsigned char 
  6494 ;; Return value:  Size  Location     Type
  6495 ;;		None               void
  6496 ;; Registers used:
  6497 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;Total ram usage:        1 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    9
  6510 ;; This function calls:
  6511 ;;		_update_LCD_color
  6512 ;; This function is called by:
  6513 ;;		_Do_Flashing
  6514 ;;		_Day_Mode
  6515 ;;		_Night_Mode
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           	psect	text30
  6520  0021BA                     __ptext30:
  6521                           	opt stack 0
  6522  0021BA                     _Set_NSLT:
  6523                           	opt stack 20
  6524                           
  6525                           ;incstack = 0
  6526                           ;Set_NSLT@color stored from wreg
  6527  0021BA  0100               	movlb	0	; () banked
  6528  0021BC  6FA4               	movwf	Set_NSLT@color& (0+255),b
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;Lab9.c: 418: direction = 3;
  6532  0021BE  0E03               	movlw	3
  6533  0021C0  6E70               	movwf	_direction,c
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;Lab9.c: 419: update_LCD_color(direction,color);
  6537  0021C2  C0A4  F0A1         	movff	Set_NSLT@color,update_LCD_color@color
  6538  0021C6  5070               	movf	_direction,w,c
  6539  0021C8  EC9D  F003         	call	_update_LCD_color
  6540                           
  6541                           ;Lab9.c: 421: switch(color)
  6542  0021CC  D00A               	goto	l5026
  6543  0021CE                     l439:
  6544                           
  6545                           ; BSR set to: 0
  6546  0021CE  9683               	bcf	3971,3,c	;volatile
  6547  0021D0  D001               	goto	L9
  6548  0021D2                     l441:
  6549                           
  6550                           ; BSR set to: 0
  6551  0021D2  8683               	bsf	3971,3,c	;volatile
  6552  0021D4                     L9:
  6553  0021D4  9883               	bcf	3971,4,c	;volatile
  6554  0021D6  D014               	goto	l444
  6555  0021D8                     l442:
  6556                           
  6557                           ; BSR set to: 0
  6558  0021D8  9683               	bcf	3971,3,c	;volatile
  6559  0021DA  D001               	goto	L10
  6560  0021DC                     l443:
  6561                           
  6562                           ; BSR set to: 0
  6563  0021DC  8683               	bsf	3971,3,c	;volatile
  6564  0021DE                     L10:
  6565  0021DE  8883               	bsf	3971,4,c	;volatile
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;Lab9.c: 427: }
  6569  0021E0  D00F               	goto	l444
  6570  0021E2                     l5026:
  6571  0021E2  0100               	movlb	0	; () banked
  6572  0021E4  51A4               	movf	Set_NSLT@color& (0+255),w,b
  6573                           
  6574                           ; Switch size 1, requested type "space"
  6575                           ; Number of cases is 4, Range of values is 0 to 3
  6576                           ; switch strategies available:
  6577                           ; Name         Instructions Cycles
  6578                           ; simple_byte           13     7 (average)
  6579                           ;	Chosen strategy is simple_byte
  6580  0021E6  0A00               	xorlw	0	; case 0
  6581  0021E8  B4D8               	btfsc	status,2,c
  6582  0021EA  D7F1               	goto	l439
  6583  0021EC  0A01               	xorlw	1	; case 1
  6584  0021EE  B4D8               	btfsc	status,2,c
  6585  0021F0  D7F0               	goto	l441
  6586  0021F2  0A03               	xorlw	3	; case 2
  6587  0021F4  B4D8               	btfsc	status,2,c
  6588  0021F6  D7F0               	goto	l442
  6589  0021F8  0A01               	xorlw	1	; case 3
  6590  0021FA  B4D8               	btfsc	status,2,c
  6591  0021FC  D7EF               	goto	l443
  6592  0021FE  D000               	goto	l444
  6593  002200                     l444:
  6594                           
  6595                           ; BSR set to: 0
  6596  002200  0012               	return		;funcret
  6597  002202                     __end_of_Set_NSLT:
  6598                           	opt stack 0
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodl	equ	0xFF3
  6604                           intcon	equ	0xFF2
  6605                           intcon2	equ	0xFF1
  6606                           intcon3	equ	0xFF0
  6607                           postinc0	equ	0xFEE
  6608                           wreg	equ	0xFE8
  6609                           postdec1	equ	0xFE5
  6610                           fsr1l	equ	0xFE1
  6611                           indf2	equ	0xFDF
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function _Set_NS *****************
  6617 ;; Defined at:
  6618 ;;		line 403 in file "Lab9.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  color           1    wreg     unsigned char 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;  color           1    3[BANK0 ] unsigned char 
  6623 ;; Return value:  Size  Location     Type
  6624 ;;		None               void
  6625 ;; Registers used:
  6626 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;Total ram usage:        1 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    9
  6639 ;; This function calls:
  6640 ;;		_update_LCD_color
  6641 ;; This function is called by:
  6642 ;;		_Do_Flashing
  6643 ;;		_Day_Mode
  6644 ;;		_Night_Mode
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           	psect	text31
  6649  002202                     __ptext31:
  6650                           	opt stack 0
  6651  002202                     _Set_NS:
  6652                           	opt stack 20
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;incstack = 0
  6656                           ;Set_NS@color stored from wreg
  6657  002202  0100               	movlb	0	; () banked
  6658  002204  6FA4               	movwf	Set_NS@color& (0+255),b
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;Lab9.c: 405: direction = 2;
  6662  002206  0E02               	movlw	2
  6663  002208  6E70               	movwf	_direction,c
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;Lab9.c: 406: update_LCD_color(direction, color);
  6667  00220A  C0A4  F0A1         	movff	Set_NS@color,update_LCD_color@color
  6668  00220E  5070               	movf	_direction,w,c
  6669  002210  EC9D  F003         	call	_update_LCD_color
  6670                           
  6671                           ;Lab9.c: 407: switch (color)
  6672  002214  D00A               	goto	l5018
  6673  002216                     l430:
  6674                           
  6675                           ; BSR set to: 0
  6676  002216  9280               	bcf	3968,1,c	;volatile
  6677  002218  D001               	goto	L11
  6678  00221A                     l432:
  6679                           
  6680                           ; BSR set to: 0
  6681  00221A  8280               	bsf	3968,1,c	;volatile
  6682  00221C                     L11:
  6683  00221C  9480               	bcf	3968,2,c	;volatile
  6684  00221E  D014               	goto	l435
  6685  002220                     l433:
  6686                           
  6687                           ; BSR set to: 0
  6688  002220  9280               	bcf	3968,1,c	;volatile
  6689  002222  D001               	goto	L12
  6690  002224                     l434:
  6691                           
  6692                           ; BSR set to: 0
  6693  002224  8280               	bsf	3968,1,c	;volatile
  6694  002226                     L12:
  6695  002226  8480               	bsf	3968,2,c	;volatile
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;Lab9.c: 413: }
  6699  002228  D00F               	goto	l435
  6700  00222A                     l5018:
  6701  00222A  0100               	movlb	0	; () banked
  6702  00222C  51A4               	movf	Set_NS@color& (0+255),w,b
  6703                           
  6704                           ; Switch size 1, requested type "space"
  6705                           ; Number of cases is 4, Range of values is 0 to 3
  6706                           ; switch strategies available:
  6707                           ; Name         Instructions Cycles
  6708                           ; simple_byte           13     7 (average)
  6709                           ;	Chosen strategy is simple_byte
  6710  00222E  0A00               	xorlw	0	; case 0
  6711  002230  B4D8               	btfsc	status,2,c
  6712  002232  D7F1               	goto	l430
  6713  002234  0A01               	xorlw	1	; case 1
  6714  002236  B4D8               	btfsc	status,2,c
  6715  002238  D7F0               	goto	l432
  6716  00223A  0A03               	xorlw	3	; case 2
  6717  00223C  B4D8               	btfsc	status,2,c
  6718  00223E  D7F0               	goto	l433
  6719  002240  0A01               	xorlw	1	; case 3
  6720  002242  B4D8               	btfsc	status,2,c
  6721  002244  D7EF               	goto	l434
  6722  002246  D000               	goto	l435
  6723  002248                     l435:
  6724                           
  6725                           ; BSR set to: 0
  6726  002248  0012               	return		;funcret
  6727  00224A                     __end_of_Set_NS:
  6728                           	opt stack 0
  6729                           tblptru	equ	0xFF8
  6730                           tblptrh	equ	0xFF7
  6731                           tblptrl	equ	0xFF6
  6732                           tablat	equ	0xFF5
  6733                           prodl	equ	0xFF3
  6734                           intcon	equ	0xFF2
  6735                           intcon2	equ	0xFF1
  6736                           intcon3	equ	0xFF0
  6737                           postinc0	equ	0xFEE
  6738                           wreg	equ	0xFE8
  6739                           postdec1	equ	0xFE5
  6740                           fsr1l	equ	0xFE1
  6741                           indf2	equ	0xFDF
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746 ;; *************** function _Set_EWLT *****************
  6747 ;; Defined at:
  6748 ;;		line 443 in file "Lab9.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  color           1    wreg     unsigned char 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;  color           1    3[BANK0 ] unsigned char 
  6753 ;; Return value:  Size  Location     Type
  6754 ;;		None               void
  6755 ;; Registers used:
  6756 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;Total ram usage:        1 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    9
  6769 ;; This function calls:
  6770 ;;		_update_LCD_color
  6771 ;; This function is called by:
  6772 ;;		_Do_Flashing
  6773 ;;		_Day_Mode
  6774 ;;		_Night_Mode
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           	psect	text32
  6779  00224A                     __ptext32:
  6780                           	opt stack 0
  6781  00224A                     _Set_EWLT:
  6782                           	opt stack 20
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;incstack = 0
  6786                           ;Set_EWLT@color stored from wreg
  6787  00224A  0100               	movlb	0	; () banked
  6788  00224C  6FA4               	movwf	Set_EWLT@color& (0+255),b
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;Lab9.c: 445: direction = 1;
  6792  00224E  0E01               	movlw	1
  6793  002250  6E70               	movwf	_direction,c
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;Lab9.c: 446: update_LCD_color(direction,color);
  6797  002252  C0A4  F0A1         	movff	Set_EWLT@color,update_LCD_color@color
  6798  002256  5070               	movf	_direction,w,c
  6799  002258  EC9D  F003         	call	_update_LCD_color
  6800                           
  6801                           ;Lab9.c: 447: switch(color)
  6802  00225C  D00A               	goto	l5034
  6803  00225E                     l457:
  6804                           
  6805                           ; BSR set to: 0
  6806  00225E  9084               	bcf	3972,0,c	;volatile
  6807  002260  D001               	goto	L13
  6808  002262                     l459:
  6809                           
  6810                           ; BSR set to: 0
  6811  002262  8084               	bsf	3972,0,c	;volatile
  6812  002264                     L13:
  6813  002264  9284               	bcf	3972,1,c	;volatile
  6814  002266  D014               	goto	l462
  6815  002268                     l460:
  6816                           
  6817                           ; BSR set to: 0
  6818  002268  9084               	bcf	3972,0,c	;volatile
  6819  00226A  D001               	goto	L14
  6820  00226C                     l461:
  6821                           
  6822                           ; BSR set to: 0
  6823  00226C  8084               	bsf	3972,0,c	;volatile
  6824  00226E                     L14:
  6825  00226E  8284               	bsf	3972,1,c	;volatile
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;Lab9.c: 453: }
  6829  002270  D00F               	goto	l462
  6830  002272                     l5034:
  6831  002272  0100               	movlb	0	; () banked
  6832  002274  51A4               	movf	Set_EWLT@color& (0+255),w,b
  6833                           
  6834                           ; Switch size 1, requested type "space"
  6835                           ; Number of cases is 4, Range of values is 0 to 3
  6836                           ; switch strategies available:
  6837                           ; Name         Instructions Cycles
  6838                           ; simple_byte           13     7 (average)
  6839                           ;	Chosen strategy is simple_byte
  6840  002276  0A00               	xorlw	0	; case 0
  6841  002278  B4D8               	btfsc	status,2,c
  6842  00227A  D7F1               	goto	l457
  6843  00227C  0A01               	xorlw	1	; case 1
  6844  00227E  B4D8               	btfsc	status,2,c
  6845  002280  D7F0               	goto	l459
  6846  002282  0A03               	xorlw	3	; case 2
  6847  002284  B4D8               	btfsc	status,2,c
  6848  002286  D7F0               	goto	l460
  6849  002288  0A01               	xorlw	1	; case 3
  6850  00228A  B4D8               	btfsc	status,2,c
  6851  00228C  D7EF               	goto	l461
  6852  00228E  D000               	goto	l462
  6853  002290                     l462:
  6854                           
  6855                           ; BSR set to: 0
  6856  002290  0012               	return		;funcret
  6857  002292                     __end_of_Set_EWLT:
  6858                           	opt stack 0
  6859                           tblptru	equ	0xFF8
  6860                           tblptrh	equ	0xFF7
  6861                           tblptrl	equ	0xFF6
  6862                           tablat	equ	0xFF5
  6863                           prodl	equ	0xFF3
  6864                           intcon	equ	0xFF2
  6865                           intcon2	equ	0xFF1
  6866                           intcon3	equ	0xFF0
  6867                           postinc0	equ	0xFEE
  6868                           wreg	equ	0xFE8
  6869                           postdec1	equ	0xFE5
  6870                           fsr1l	equ	0xFE1
  6871                           indf2	equ	0xFDF
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function _Set_EW *****************
  6877 ;; Defined at:
  6878 ;;		line 430 in file "Lab9.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  color           1    wreg     unsigned char 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;  color           1    3[BANK0 ] unsigned char 
  6883 ;; Return value:  Size  Location     Type
  6884 ;;		None               void
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;Total ram usage:        1 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    9
  6899 ;; This function calls:
  6900 ;;		_update_LCD_color
  6901 ;; This function is called by:
  6902 ;;		_Do_Flashing
  6903 ;;		_Day_Mode
  6904 ;;		_Night_Mode
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text33
  6909  002292                     __ptext33:
  6910                           	opt stack 0
  6911  002292                     _Set_EW:
  6912                           	opt stack 20
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;incstack = 0
  6916                           ;Set_EW@color stored from wreg
  6917  002292  0100               	movlb	0	; () banked
  6918  002294  6FA4               	movwf	Set_EW@color& (0+255),b
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;Lab9.c: 432: direction = 0;
  6922  002296  0E00               	movlw	0
  6923  002298  6E70               	movwf	_direction,c
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;Lab9.c: 433: update_LCD_color(direction,color);
  6927  00229A  C0A4  F0A1         	movff	Set_EW@color,update_LCD_color@color
  6928  00229E  5070               	movf	_direction,w,c
  6929  0022A0  EC9D  F003         	call	_update_LCD_color
  6930                           
  6931                           ;Lab9.c: 434: switch(color)
  6932  0022A4  D00A               	goto	l5010
  6933  0022A6                     l448:
  6934                           
  6935                           ; BSR set to: 0
  6936  0022A6  9A83               	bcf	3971,5,c	;volatile
  6937  0022A8  D001               	goto	L15
  6938  0022AA                     l450:
  6939                           
  6940                           ; BSR set to: 0
  6941  0022AA  8A83               	bsf	3971,5,c	;volatile
  6942  0022AC                     L15:
  6943  0022AC  9C83               	bcf	3971,6,c	;volatile
  6944  0022AE  D014               	goto	l453
  6945  0022B0                     l451:
  6946                           
  6947                           ; BSR set to: 0
  6948  0022B0  9A83               	bcf	3971,5,c	;volatile
  6949  0022B2  D001               	goto	L16
  6950  0022B4                     l452:
  6951                           
  6952                           ; BSR set to: 0
  6953  0022B4  8A83               	bsf	3971,5,c	;volatile
  6954  0022B6                     L16:
  6955  0022B6  8C83               	bsf	3971,6,c	;volatile
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;Lab9.c: 440: }
  6959  0022B8  D00F               	goto	l453
  6960  0022BA                     l5010:
  6961  0022BA  0100               	movlb	0	; () banked
  6962  0022BC  51A4               	movf	Set_EW@color& (0+255),w,b
  6963                           
  6964                           ; Switch size 1, requested type "space"
  6965                           ; Number of cases is 4, Range of values is 0 to 3
  6966                           ; switch strategies available:
  6967                           ; Name         Instructions Cycles
  6968                           ; simple_byte           13     7 (average)
  6969                           ;	Chosen strategy is simple_byte
  6970  0022BE  0A00               	xorlw	0	; case 0
  6971  0022C0  B4D8               	btfsc	status,2,c
  6972  0022C2  D7F1               	goto	l448
  6973  0022C4  0A01               	xorlw	1	; case 1
  6974  0022C6  B4D8               	btfsc	status,2,c
  6975  0022C8  D7F0               	goto	l450
  6976  0022CA  0A03               	xorlw	3	; case 2
  6977  0022CC  B4D8               	btfsc	status,2,c
  6978  0022CE  D7F0               	goto	l451
  6979  0022D0  0A01               	xorlw	1	; case 3
  6980  0022D2  B4D8               	btfsc	status,2,c
  6981  0022D4  D7EF               	goto	l452
  6982  0022D6  D000               	goto	l453
  6983  0022D8                     l453:
  6984                           
  6985                           ; BSR set to: 0
  6986  0022D8  0012               	return		;funcret
  6987  0022DA                     __end_of_Set_EW:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodl	equ	0xFF3
  6994                           intcon	equ	0xFF2
  6995                           intcon2	equ	0xFF1
  6996                           intcon3	equ	0xFF0
  6997                           postinc0	equ	0xFEE
  6998                           wreg	equ	0xFE8
  6999                           postdec1	equ	0xFE5
  7000                           fsr1l	equ	0xFE1
  7001                           indf2	equ	0xFDF
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function _update_LCD_color *****************
  7007 ;; Defined at:
  7008 ;;		line 628 in file "Lab9.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  direction       1    wreg     unsigned char 
  7011 ;;  color           1    0[BANK0 ] unsigned char 
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;  direction       1    1[BANK0 ] unsigned char 
  7014 ;;  Circle_Y        1    2[BANK0 ] unsigned char 
  7015 ;; Return value:  Size  Location     Type
  7016 ;;		None               void
  7017 ;; Registers used:
  7018 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7024 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;Total ram usage:        3 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; Hardware stack levels required when called:    8
  7031 ;; This function calls:
  7032 ;;		_drawCircle
  7033 ;;		_fillCircle
  7034 ;; This function is called by:
  7035 ;;		_Set_NS
  7036 ;;		_Set_NSLT
  7037 ;;		_Set_EW
  7038 ;;		_Set_EWLT
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text34
  7043  00073A                     __ptext34:
  7044                           	opt stack 0
  7045  00073A                     _update_LCD_color:
  7046                           	opt stack 20
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;incstack = 0
  7050                           ;update_LCD_color@direction stored from wreg
  7051  00073A  0100               	movlb	0	; () banked
  7052  00073C  6FA2               	movwf	update_LCD_color@direction& (0+255),b
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;Lab9.c: 630: char Circle_Y;
  7056                           ;Lab9.c: 631: Circle_Y = 20 + 15 + direction * 30;
  7057  00073E  0100               	movlb	0	; () banked
  7058  000740  51A2               	movf	update_LCD_color@direction& (0+255),w,b
  7059  000742  0D1E               	mullw	30
  7060  000744  50F3               	movf	prodl,w,c
  7061  000746  0F23               	addlw	35
  7062  000748  0100               	movlb	0	; () banked
  7063  00074A  6FA3               	movwf	update_LCD_color@Circle_Y& (0+255),b
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;Lab9.c: 633: if (color == 0)
  7067  00074C  0100               	movlb	0	; () banked
  7068  00074E  51A1               	movf	update_LCD_color@color& (0+255),w,b
  7069  000750  0100               	movlb	0	; () banked
  7070  000752  A4D8               	btfss	status,2,c
  7071  000754  D067               	goto	l4920
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;Lab9.c: 634: {
  7075                           ;Lab9.c: 635: fillCircle(40, Circle_Y, 7, 0x0000);
  7076  000756  0E00               	movlw	0
  7077  000758  6E3A               	movwf	fillCircle@x0+1,c
  7078  00075A  0E28               	movlw	40
  7079  00075C  6E39               	movwf	fillCircle@x0,c
  7080  00075E  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7081  000762  6A3C               	clrf	fillCircle@y0+1,c
  7082  000764  0E00               	movlw	0
  7083  000766  6E3E               	movwf	fillCircle@r+1,c
  7084  000768  0E07               	movlw	7
  7085  00076A  6E3D               	movwf	fillCircle@r,c
  7086  00076C  0E00               	movlw	0
  7087  00076E  6E40               	movwf	fillCircle@color+1,c
  7088  000770  0E00               	movlw	0
  7089  000772  6E3F               	movwf	fillCircle@color,c
  7090  000774  EC68  F010         	call	_fillCircle	;wreg free
  7091                           
  7092                           ;Lab9.c: 636: fillCircle(60, Circle_Y, 7, 0x0000);
  7093  000778  0E00               	movlw	0
  7094  00077A  6E3A               	movwf	fillCircle@x0+1,c
  7095  00077C  0E3C               	movlw	60
  7096  00077E  6E39               	movwf	fillCircle@x0,c
  7097  000780  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7098  000784  6A3C               	clrf	fillCircle@y0+1,c
  7099  000786  0E00               	movlw	0
  7100  000788  6E3E               	movwf	fillCircle@r+1,c
  7101  00078A  0E07               	movlw	7
  7102  00078C  6E3D               	movwf	fillCircle@r,c
  7103  00078E  0E00               	movlw	0
  7104  000790  6E40               	movwf	fillCircle@color+1,c
  7105  000792  0E00               	movlw	0
  7106  000794  6E3F               	movwf	fillCircle@color,c
  7107  000796  EC68  F010         	call	_fillCircle	;wreg free
  7108                           
  7109                           ;Lab9.c: 637: fillCircle(80, Circle_Y, 7, 0x0000);
  7110  00079A  0E00               	movlw	0
  7111  00079C  6E3A               	movwf	fillCircle@x0+1,c
  7112  00079E  0E50               	movlw	80
  7113  0007A0  6E39               	movwf	fillCircle@x0,c
  7114  0007A2  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7115  0007A6  6A3C               	clrf	fillCircle@y0+1,c
  7116  0007A8  0E00               	movlw	0
  7117  0007AA  6E3E               	movwf	fillCircle@r+1,c
  7118  0007AC  0E07               	movlw	7
  7119  0007AE  6E3D               	movwf	fillCircle@r,c
  7120  0007B0  0E00               	movlw	0
  7121  0007B2  6E40               	movwf	fillCircle@color+1,c
  7122  0007B4  0E00               	movlw	0
  7123  0007B6  6E3F               	movwf	fillCircle@color,c
  7124  0007B8  EC68  F010         	call	_fillCircle	;wreg free
  7125                           
  7126                           ;Lab9.c: 638: drawCircle(40, Circle_Y, 7, 0xF800);
  7127  0007BC  0E00               	movlw	0
  7128  0007BE  6E1B               	movwf	drawCircle@x0+1,c
  7129  0007C0  0E28               	movlw	40
  7130  0007C2  6E1A               	movwf	drawCircle@x0,c
  7131  0007C4  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7132  0007C8  6A1D               	clrf	drawCircle@y0+1,c
  7133  0007CA  0E00               	movlw	0
  7134  0007CC  6E1F               	movwf	drawCircle@r+1,c
  7135  0007CE  0E07               	movlw	7
  7136  0007D0  6E1E               	movwf	drawCircle@r,c
  7137  0007D2  0EF8               	movlw	248
  7138  0007D4  6E21               	movwf	drawCircle@color+1,c
  7139  0007D6  0E00               	movlw	0
  7140  0007D8  6E20               	movwf	drawCircle@color,c
  7141  0007DA  EC6B  F006         	call	_drawCircle	;wreg free
  7142                           
  7143                           ;Lab9.c: 639: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7144  0007DE  0E00               	movlw	0
  7145  0007E0  6E1B               	movwf	drawCircle@x0+1,c
  7146  0007E2  0E3C               	movlw	60
  7147  0007E4  6E1A               	movwf	drawCircle@x0,c
  7148  0007E6  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7149  0007EA  6A1D               	clrf	drawCircle@y0+1,c
  7150  0007EC  0E00               	movlw	0
  7151  0007EE  6E1F               	movwf	drawCircle@r+1,c
  7152  0007F0  0E07               	movlw	7
  7153  0007F2  6E1E               	movwf	drawCircle@r,c
  7154  0007F4  0EFF               	movlw	255
  7155  0007F6  6E21               	movwf	drawCircle@color+1,c
  7156  0007F8  0EE0               	movlw	224
  7157  0007FA  6E20               	movwf	drawCircle@color,c
  7158  0007FC  EC6B  F006         	call	_drawCircle	;wreg free
  7159                           
  7160                           ;Lab9.c: 640: drawCircle(80, Circle_Y, 7, 0x07E0);
  7161  000800  0E00               	movlw	0
  7162  000802  6E1B               	movwf	drawCircle@x0+1,c
  7163  000804  0E50               	movlw	80
  7164  000806  6E1A               	movwf	drawCircle@x0,c
  7165  000808  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7166  00080C  6A1D               	clrf	drawCircle@y0+1,c
  7167  00080E  0E00               	movlw	0
  7168  000810  6E1F               	movwf	drawCircle@r+1,c
  7169  000812  0E07               	movlw	7
  7170  000814  6E1E               	movwf	drawCircle@r,c
  7171  000816  0E07               	movlw	7
  7172  000818  6E21               	movwf	drawCircle@color+1,c
  7173  00081A  0EE0               	movlw	224
  7174  00081C  6E20               	movwf	drawCircle@color,c
  7175  00081E  EC6B  F006         	call	_drawCircle	;wreg free
  7176  000822  D000               	goto	l4920
  7177  000824                     l4920:
  7178                           
  7179                           ;Lab9.c: 641: }
  7180                           ;Lab9.c: 643: if (color == 1)
  7181  000824  0100               	movlb	0	; () banked
  7182  000826  05A1               	decf	update_LCD_color@color& (0+255),w,b
  7183  000828  A4D8               	btfss	status,2,c
  7184  00082A  D067               	goto	l4924
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;Lab9.c: 644: {
  7188                           ;Lab9.c: 645: fillCircle(40, Circle_Y, 7, 0xF800);
  7189  00082C  0E00               	movlw	0
  7190  00082E  6E3A               	movwf	fillCircle@x0+1,c
  7191  000830  0E28               	movlw	40
  7192  000832  6E39               	movwf	fillCircle@x0,c
  7193  000834  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7194  000838  6A3C               	clrf	fillCircle@y0+1,c
  7195  00083A  0E00               	movlw	0
  7196  00083C  6E3E               	movwf	fillCircle@r+1,c
  7197  00083E  0E07               	movlw	7
  7198  000840  6E3D               	movwf	fillCircle@r,c
  7199  000842  0EF8               	movlw	248
  7200  000844  6E40               	movwf	fillCircle@color+1,c
  7201  000846  0E00               	movlw	0
  7202  000848  6E3F               	movwf	fillCircle@color,c
  7203  00084A  EC68  F010         	call	_fillCircle	;wreg free
  7204                           
  7205                           ;Lab9.c: 646: fillCircle(60, Circle_Y, 7, 0x0000);
  7206  00084E  0E00               	movlw	0
  7207  000850  6E3A               	movwf	fillCircle@x0+1,c
  7208  000852  0E3C               	movlw	60
  7209  000854  6E39               	movwf	fillCircle@x0,c
  7210  000856  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7211  00085A  6A3C               	clrf	fillCircle@y0+1,c
  7212  00085C  0E00               	movlw	0
  7213  00085E  6E3E               	movwf	fillCircle@r+1,c
  7214  000860  0E07               	movlw	7
  7215  000862  6E3D               	movwf	fillCircle@r,c
  7216  000864  0E00               	movlw	0
  7217  000866  6E40               	movwf	fillCircle@color+1,c
  7218  000868  0E00               	movlw	0
  7219  00086A  6E3F               	movwf	fillCircle@color,c
  7220  00086C  EC68  F010         	call	_fillCircle	;wreg free
  7221                           
  7222                           ;Lab9.c: 647: fillCircle(80, Circle_Y, 7, 0x0000);
  7223  000870  0E00               	movlw	0
  7224  000872  6E3A               	movwf	fillCircle@x0+1,c
  7225  000874  0E50               	movlw	80
  7226  000876  6E39               	movwf	fillCircle@x0,c
  7227  000878  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7228  00087C  6A3C               	clrf	fillCircle@y0+1,c
  7229  00087E  0E00               	movlw	0
  7230  000880  6E3E               	movwf	fillCircle@r+1,c
  7231  000882  0E07               	movlw	7
  7232  000884  6E3D               	movwf	fillCircle@r,c
  7233  000886  0E00               	movlw	0
  7234  000888  6E40               	movwf	fillCircle@color+1,c
  7235  00088A  0E00               	movlw	0
  7236  00088C  6E3F               	movwf	fillCircle@color,c
  7237  00088E  EC68  F010         	call	_fillCircle	;wreg free
  7238                           
  7239                           ;Lab9.c: 648: drawCircle(40, Circle_Y, 7, 0xF800);
  7240  000892  0E00               	movlw	0
  7241  000894  6E1B               	movwf	drawCircle@x0+1,c
  7242  000896  0E28               	movlw	40
  7243  000898  6E1A               	movwf	drawCircle@x0,c
  7244  00089A  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7245  00089E  6A1D               	clrf	drawCircle@y0+1,c
  7246  0008A0  0E00               	movlw	0
  7247  0008A2  6E1F               	movwf	drawCircle@r+1,c
  7248  0008A4  0E07               	movlw	7
  7249  0008A6  6E1E               	movwf	drawCircle@r,c
  7250  0008A8  0EF8               	movlw	248
  7251  0008AA  6E21               	movwf	drawCircle@color+1,c
  7252  0008AC  0E00               	movlw	0
  7253  0008AE  6E20               	movwf	drawCircle@color,c
  7254  0008B0  EC6B  F006         	call	_drawCircle	;wreg free
  7255                           
  7256                           ;Lab9.c: 649: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7257  0008B4  0E00               	movlw	0
  7258  0008B6  6E1B               	movwf	drawCircle@x0+1,c
  7259  0008B8  0E3C               	movlw	60
  7260  0008BA  6E1A               	movwf	drawCircle@x0,c
  7261  0008BC  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7262  0008C0  6A1D               	clrf	drawCircle@y0+1,c
  7263  0008C2  0E00               	movlw	0
  7264  0008C4  6E1F               	movwf	drawCircle@r+1,c
  7265  0008C6  0E07               	movlw	7
  7266  0008C8  6E1E               	movwf	drawCircle@r,c
  7267  0008CA  0EFF               	movlw	255
  7268  0008CC  6E21               	movwf	drawCircle@color+1,c
  7269  0008CE  0EE0               	movlw	224
  7270  0008D0  6E20               	movwf	drawCircle@color,c
  7271  0008D2  EC6B  F006         	call	_drawCircle	;wreg free
  7272                           
  7273                           ;Lab9.c: 650: drawCircle(80, Circle_Y, 7, 0x07E0);
  7274  0008D6  0E00               	movlw	0
  7275  0008D8  6E1B               	movwf	drawCircle@x0+1,c
  7276  0008DA  0E50               	movlw	80
  7277  0008DC  6E1A               	movwf	drawCircle@x0,c
  7278  0008DE  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7279  0008E2  6A1D               	clrf	drawCircle@y0+1,c
  7280  0008E4  0E00               	movlw	0
  7281  0008E6  6E1F               	movwf	drawCircle@r+1,c
  7282  0008E8  0E07               	movlw	7
  7283  0008EA  6E1E               	movwf	drawCircle@r,c
  7284  0008EC  0E07               	movlw	7
  7285  0008EE  6E21               	movwf	drawCircle@color+1,c
  7286  0008F0  0EE0               	movlw	224
  7287  0008F2  6E20               	movwf	drawCircle@color,c
  7288  0008F4  EC6B  F006         	call	_drawCircle	;wreg free
  7289  0008F8  D000               	goto	l4924
  7290  0008FA                     l4924:
  7291                           
  7292                           ;Lab9.c: 651: }
  7293                           ;Lab9.c: 653: if (color == 3)
  7294  0008FA  0E03               	movlw	3
  7295  0008FC  0100               	movlb	0	; () banked
  7296  0008FE  19A1               	xorwf	update_LCD_color@color& (0+255),w,b
  7297  000900  A4D8               	btfss	status,2,c
  7298  000902  D067               	goto	l4928
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;Lab9.c: 654: {
  7302                           ;Lab9.c: 655: fillCircle(40, Circle_Y, 7, 0x0000);
  7303  000904  0E00               	movlw	0
  7304  000906  6E3A               	movwf	fillCircle@x0+1,c
  7305  000908  0E28               	movlw	40
  7306  00090A  6E39               	movwf	fillCircle@x0,c
  7307  00090C  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7308  000910  6A3C               	clrf	fillCircle@y0+1,c
  7309  000912  0E00               	movlw	0
  7310  000914  6E3E               	movwf	fillCircle@r+1,c
  7311  000916  0E07               	movlw	7
  7312  000918  6E3D               	movwf	fillCircle@r,c
  7313  00091A  0E00               	movlw	0
  7314  00091C  6E40               	movwf	fillCircle@color+1,c
  7315  00091E  0E00               	movlw	0
  7316  000920  6E3F               	movwf	fillCircle@color,c
  7317  000922  EC68  F010         	call	_fillCircle	;wreg free
  7318                           
  7319                           ;Lab9.c: 656: fillCircle(60, Circle_Y, 7, 0xFFE0);
  7320  000926  0E00               	movlw	0
  7321  000928  6E3A               	movwf	fillCircle@x0+1,c
  7322  00092A  0E3C               	movlw	60
  7323  00092C  6E39               	movwf	fillCircle@x0,c
  7324  00092E  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7325  000932  6A3C               	clrf	fillCircle@y0+1,c
  7326  000934  0E00               	movlw	0
  7327  000936  6E3E               	movwf	fillCircle@r+1,c
  7328  000938  0E07               	movlw	7
  7329  00093A  6E3D               	movwf	fillCircle@r,c
  7330  00093C  0EFF               	movlw	255
  7331  00093E  6E40               	movwf	fillCircle@color+1,c
  7332  000940  0EE0               	movlw	224
  7333  000942  6E3F               	movwf	fillCircle@color,c
  7334  000944  EC68  F010         	call	_fillCircle	;wreg free
  7335                           
  7336                           ;Lab9.c: 657: fillCircle(80, Circle_Y, 7, 0x0000);
  7337  000948  0E00               	movlw	0
  7338  00094A  6E3A               	movwf	fillCircle@x0+1,c
  7339  00094C  0E50               	movlw	80
  7340  00094E  6E39               	movwf	fillCircle@x0,c
  7341  000950  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7342  000954  6A3C               	clrf	fillCircle@y0+1,c
  7343  000956  0E00               	movlw	0
  7344  000958  6E3E               	movwf	fillCircle@r+1,c
  7345  00095A  0E07               	movlw	7
  7346  00095C  6E3D               	movwf	fillCircle@r,c
  7347  00095E  0E00               	movlw	0
  7348  000960  6E40               	movwf	fillCircle@color+1,c
  7349  000962  0E00               	movlw	0
  7350  000964  6E3F               	movwf	fillCircle@color,c
  7351  000966  EC68  F010         	call	_fillCircle	;wreg free
  7352                           
  7353                           ;Lab9.c: 658: drawCircle(40, Circle_Y, 7, 0xF800);
  7354  00096A  0E00               	movlw	0
  7355  00096C  6E1B               	movwf	drawCircle@x0+1,c
  7356  00096E  0E28               	movlw	40
  7357  000970  6E1A               	movwf	drawCircle@x0,c
  7358  000972  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7359  000976  6A1D               	clrf	drawCircle@y0+1,c
  7360  000978  0E00               	movlw	0
  7361  00097A  6E1F               	movwf	drawCircle@r+1,c
  7362  00097C  0E07               	movlw	7
  7363  00097E  6E1E               	movwf	drawCircle@r,c
  7364  000980  0EF8               	movlw	248
  7365  000982  6E21               	movwf	drawCircle@color+1,c
  7366  000984  0E00               	movlw	0
  7367  000986  6E20               	movwf	drawCircle@color,c
  7368  000988  EC6B  F006         	call	_drawCircle	;wreg free
  7369                           
  7370                           ;Lab9.c: 659: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7371  00098C  0E00               	movlw	0
  7372  00098E  6E1B               	movwf	drawCircle@x0+1,c
  7373  000990  0E3C               	movlw	60
  7374  000992  6E1A               	movwf	drawCircle@x0,c
  7375  000994  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7376  000998  6A1D               	clrf	drawCircle@y0+1,c
  7377  00099A  0E00               	movlw	0
  7378  00099C  6E1F               	movwf	drawCircle@r+1,c
  7379  00099E  0E07               	movlw	7
  7380  0009A0  6E1E               	movwf	drawCircle@r,c
  7381  0009A2  0EFF               	movlw	255
  7382  0009A4  6E21               	movwf	drawCircle@color+1,c
  7383  0009A6  0EE0               	movlw	224
  7384  0009A8  6E20               	movwf	drawCircle@color,c
  7385  0009AA  EC6B  F006         	call	_drawCircle	;wreg free
  7386                           
  7387                           ;Lab9.c: 660: drawCircle(80, Circle_Y, 7, 0x07E0);
  7388  0009AE  0E00               	movlw	0
  7389  0009B0  6E1B               	movwf	drawCircle@x0+1,c
  7390  0009B2  0E50               	movlw	80
  7391  0009B4  6E1A               	movwf	drawCircle@x0,c
  7392  0009B6  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7393  0009BA  6A1D               	clrf	drawCircle@y0+1,c
  7394  0009BC  0E00               	movlw	0
  7395  0009BE  6E1F               	movwf	drawCircle@r+1,c
  7396  0009C0  0E07               	movlw	7
  7397  0009C2  6E1E               	movwf	drawCircle@r,c
  7398  0009C4  0E07               	movlw	7
  7399  0009C6  6E21               	movwf	drawCircle@color+1,c
  7400  0009C8  0EE0               	movlw	224
  7401  0009CA  6E20               	movwf	drawCircle@color,c
  7402  0009CC  EC6B  F006         	call	_drawCircle	;wreg free
  7403  0009D0  D000               	goto	l4928
  7404  0009D2                     l4928:
  7405                           
  7406                           ;Lab9.c: 661: }
  7407                           ;Lab9.c: 662: if (color == 2)
  7408  0009D2  0E02               	movlw	2
  7409  0009D4  0100               	movlb	0	; () banked
  7410  0009D6  19A1               	xorwf	update_LCD_color@color& (0+255),w,b
  7411  0009D8  A4D8               	btfss	status,2,c
  7412  0009DA  D067               	goto	l512
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;Lab9.c: 663: {
  7416                           ;Lab9.c: 664: fillCircle(40, Circle_Y, 7, 0x0000);
  7417  0009DC  0E00               	movlw	0
  7418  0009DE  6E3A               	movwf	fillCircle@x0+1,c
  7419  0009E0  0E28               	movlw	40
  7420  0009E2  6E39               	movwf	fillCircle@x0,c
  7421  0009E4  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7422  0009E8  6A3C               	clrf	fillCircle@y0+1,c
  7423  0009EA  0E00               	movlw	0
  7424  0009EC  6E3E               	movwf	fillCircle@r+1,c
  7425  0009EE  0E07               	movlw	7
  7426  0009F0  6E3D               	movwf	fillCircle@r,c
  7427  0009F2  0E00               	movlw	0
  7428  0009F4  6E40               	movwf	fillCircle@color+1,c
  7429  0009F6  0E00               	movlw	0
  7430  0009F8  6E3F               	movwf	fillCircle@color,c
  7431  0009FA  EC68  F010         	call	_fillCircle	;wreg free
  7432                           
  7433                           ;Lab9.c: 665: fillCircle(60, Circle_Y, 7, 0x0000);
  7434  0009FE  0E00               	movlw	0
  7435  000A00  6E3A               	movwf	fillCircle@x0+1,c
  7436  000A02  0E3C               	movlw	60
  7437  000A04  6E39               	movwf	fillCircle@x0,c
  7438  000A06  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7439  000A0A  6A3C               	clrf	fillCircle@y0+1,c
  7440  000A0C  0E00               	movlw	0
  7441  000A0E  6E3E               	movwf	fillCircle@r+1,c
  7442  000A10  0E07               	movlw	7
  7443  000A12  6E3D               	movwf	fillCircle@r,c
  7444  000A14  0E00               	movlw	0
  7445  000A16  6E40               	movwf	fillCircle@color+1,c
  7446  000A18  0E00               	movlw	0
  7447  000A1A  6E3F               	movwf	fillCircle@color,c
  7448  000A1C  EC68  F010         	call	_fillCircle	;wreg free
  7449                           
  7450                           ;Lab9.c: 666: fillCircle(80, Circle_Y, 7, 0x07E0);
  7451  000A20  0E00               	movlw	0
  7452  000A22  6E3A               	movwf	fillCircle@x0+1,c
  7453  000A24  0E50               	movlw	80
  7454  000A26  6E39               	movwf	fillCircle@x0,c
  7455  000A28  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7456  000A2C  6A3C               	clrf	fillCircle@y0+1,c
  7457  000A2E  0E00               	movlw	0
  7458  000A30  6E3E               	movwf	fillCircle@r+1,c
  7459  000A32  0E07               	movlw	7
  7460  000A34  6E3D               	movwf	fillCircle@r,c
  7461  000A36  0E07               	movlw	7
  7462  000A38  6E40               	movwf	fillCircle@color+1,c
  7463  000A3A  0EE0               	movlw	224
  7464  000A3C  6E3F               	movwf	fillCircle@color,c
  7465  000A3E  EC68  F010         	call	_fillCircle	;wreg free
  7466                           
  7467                           ;Lab9.c: 667: drawCircle(40, Circle_Y, 7, 0xF800);
  7468  000A42  0E00               	movlw	0
  7469  000A44  6E1B               	movwf	drawCircle@x0+1,c
  7470  000A46  0E28               	movlw	40
  7471  000A48  6E1A               	movwf	drawCircle@x0,c
  7472  000A4A  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7473  000A4E  6A1D               	clrf	drawCircle@y0+1,c
  7474  000A50  0E00               	movlw	0
  7475  000A52  6E1F               	movwf	drawCircle@r+1,c
  7476  000A54  0E07               	movlw	7
  7477  000A56  6E1E               	movwf	drawCircle@r,c
  7478  000A58  0EF8               	movlw	248
  7479  000A5A  6E21               	movwf	drawCircle@color+1,c
  7480  000A5C  0E00               	movlw	0
  7481  000A5E  6E20               	movwf	drawCircle@color,c
  7482  000A60  EC6B  F006         	call	_drawCircle	;wreg free
  7483                           
  7484                           ;Lab9.c: 668: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7485  000A64  0E00               	movlw	0
  7486  000A66  6E1B               	movwf	drawCircle@x0+1,c
  7487  000A68  0E3C               	movlw	60
  7488  000A6A  6E1A               	movwf	drawCircle@x0,c
  7489  000A6C  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7490  000A70  6A1D               	clrf	drawCircle@y0+1,c
  7491  000A72  0E00               	movlw	0
  7492  000A74  6E1F               	movwf	drawCircle@r+1,c
  7493  000A76  0E07               	movlw	7
  7494  000A78  6E1E               	movwf	drawCircle@r,c
  7495  000A7A  0EFF               	movlw	255
  7496  000A7C  6E21               	movwf	drawCircle@color+1,c
  7497  000A7E  0EE0               	movlw	224
  7498  000A80  6E20               	movwf	drawCircle@color,c
  7499  000A82  EC6B  F006         	call	_drawCircle	;wreg free
  7500                           
  7501                           ;Lab9.c: 669: drawCircle(80, Circle_Y, 7, 0x07E0);
  7502  000A86  0E00               	movlw	0
  7503  000A88  6E1B               	movwf	drawCircle@x0+1,c
  7504  000A8A  0E50               	movlw	80
  7505  000A8C  6E1A               	movwf	drawCircle@x0,c
  7506  000A8E  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7507  000A92  6A1D               	clrf	drawCircle@y0+1,c
  7508  000A94  0E00               	movlw	0
  7509  000A96  6E1F               	movwf	drawCircle@r+1,c
  7510  000A98  0E07               	movlw	7
  7511  000A9A  6E1E               	movwf	drawCircle@r,c
  7512  000A9C  0E07               	movlw	7
  7513  000A9E  6E21               	movwf	drawCircle@color+1,c
  7514  000AA0  0EE0               	movlw	224
  7515  000AA2  6E20               	movwf	drawCircle@color,c
  7516  000AA4  EC6B  F006         	call	_drawCircle	;wreg free
  7517  000AA8  D000               	goto	l512
  7518  000AAA                     l512:
  7519  000AAA  0012               	return		;funcret
  7520  000AAC                     __end_of_update_LCD_color:
  7521                           	opt stack 0
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           prodl	equ	0xFF3
  7527                           intcon	equ	0xFF2
  7528                           intcon2	equ	0xFF1
  7529                           intcon3	equ	0xFF0
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           postdec1	equ	0xFE5
  7533                           fsr1l	equ	0xFE1
  7534                           indf2	equ	0xFDF
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _fillCircle *****************
  7540 ;; Defined at:
  7541 ;;		line 647 in file "ST7735_TFT.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  x0              2   56[COMRAM] int 
  7544 ;;  y0              2   58[COMRAM] int 
  7545 ;;  r               2   60[COMRAM] int 
  7546 ;;  color           2   62[COMRAM] unsigned int 
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;		None
  7549 ;; Return value:  Size  Location     Type
  7550 ;;		None               void
  7551 ;; Registers used:
  7552 ;;		wreg, status,2, status,0, cstack
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7558 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;Total ram usage:        8 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:    7
  7565 ;; This function calls:
  7566 ;;		_drawFastVLine
  7567 ;;		_fillCircleHelper
  7568 ;; This function is called by:
  7569 ;;		_Initialize_Screen
  7570 ;;		_update_LCD_color
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	text35
  7575  0020D0                     __ptext35:
  7576                           	opt stack 0
  7577  0020D0                     _fillCircle:
  7578                           	opt stack 20
  7579                           
  7580                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7581                           
  7582                           ;incstack = 0
  7583  0020D0  503D               	movf	fillCircle@r,w,c
  7584  0020D2  0800               	sublw	0
  7585  0020D4  243B               	addwf	fillCircle@y0,w,c
  7586  0020D6  6E16               	movwf	drawFastVLine@y,c
  7587  0020D8  80D8               	bsf	status,0,c
  7588  0020DA  343D               	rlcf	fillCircle@r,w,c
  7589  0020DC  6E17               	movwf	drawFastVLine@h,c
  7590  0020DE  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  7591  0020E2  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  7592  0020E6  5039               	movf	fillCircle@x0,w,c
  7593  0020E8  EC6F  F00E         	call	_drawFastVLine
  7594                           
  7595                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  7596  0020EC  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  7597  0020F0  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7598  0020F4  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  7599  0020F8  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7600  0020FC  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  7601  002100  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7602  002104  0E00               	movlw	0
  7603  002106  6E28               	movwf	fillCircleHelper@cornername+1,c
  7604  002108  0E03               	movlw	3
  7605  00210A  6E27               	movwf	fillCircleHelper@cornername,c
  7606  00210C  0E00               	movlw	0
  7607  00210E  6E2A               	movwf	fillCircleHelper@delta+1,c
  7608  002110  0E00               	movlw	0
  7609  002112  6E29               	movwf	fillCircleHelper@delta,c
  7610  002114  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  7611  002118  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7612  00211C  ECB0  F008         	call	_fillCircleHelper	;wreg free
  7613  002120  0012               	return		;funcret
  7614  002122                     __end_of_fillCircle:
  7615                           	opt stack 0
  7616                           tblptru	equ	0xFF8
  7617                           tblptrh	equ	0xFF7
  7618                           tblptrl	equ	0xFF6
  7619                           tablat	equ	0xFF5
  7620                           prodl	equ	0xFF3
  7621                           intcon	equ	0xFF2
  7622                           intcon2	equ	0xFF1
  7623                           intcon3	equ	0xFF0
  7624                           postinc0	equ	0xFEE
  7625                           wreg	equ	0xFE8
  7626                           postdec1	equ	0xFE5
  7627                           fsr1l	equ	0xFE1
  7628                           indf2	equ	0xFDF
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8
  7632                           
  7633 ;; *************** function _fillCircleHelper *****************
  7634 ;; Defined at:
  7635 ;;		line 622 in file "ST7735_TFT.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  x0              2   32[COMRAM] int 
  7638 ;;  y0              2   34[COMRAM] int 
  7639 ;;  r               2   36[COMRAM] int 
  7640 ;;  cornername      2   38[COMRAM] unsigned int 
  7641 ;;  delta           2   40[COMRAM] int 
  7642 ;;  color           2   42[COMRAM] unsigned int 
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;  y               2   54[COMRAM] int 
  7645 ;;  x               2   52[COMRAM] int 
  7646 ;;  f               2   50[COMRAM] int 
  7647 ;;  ddF_y           2   48[COMRAM] int 
  7648 ;;  ddF_x           2   46[COMRAM] int 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;		None               void
  7651 ;; Registers used:
  7652 ;;		wreg, status,2, status,0, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7658 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;Total ram usage:       24 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    6
  7665 ;; This function calls:
  7666 ;;		_drawFastVLine
  7667 ;; This function is called by:
  7668 ;;		_fillCircle
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	text36
  7673  001160                     __ptext36:
  7674                           	opt stack 0
  7675  001160                     _fillCircleHelper:
  7676                           	opt stack 20
  7677                           
  7678                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  7679                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7680                           
  7681                           ;incstack = 0
  7682  001160  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7683  001164  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7684  001168  1E2D               	comf	??_fillCircleHelper,f,c
  7685  00116A  1E2E               	comf	??_fillCircleHelper+1,f,c
  7686  00116C  4A2D               	infsnz	??_fillCircleHelper,f,c
  7687  00116E  2A2E               	incf	??_fillCircleHelper+1,f,c
  7688  001170  0E01               	movlw	1
  7689  001172  242D               	addwf	??_fillCircleHelper,w,c
  7690  001174  6E33               	movwf	fillCircleHelper@f,c
  7691  001176  0E00               	movlw	0
  7692  001178  202E               	addwfc	??_fillCircleHelper+1,w,c
  7693  00117A  6E34               	movwf	fillCircleHelper@f+1,c
  7694  00117C  0E00               	movlw	0
  7695  00117E  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  7696  001180  0E01               	movlw	1
  7697  001182  6E2F               	movwf	fillCircleHelper@ddF_x,c
  7698  001184  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7699  001188  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7700  00118C  90D8               	bcf	status,0,c
  7701  00118E  362D               	rlcf	??_fillCircleHelper,f,c
  7702  001190  362E               	rlcf	??_fillCircleHelper+1,f,c
  7703  001192  1E2D               	comf	??_fillCircleHelper,f,c
  7704  001194  1E2E               	comf	??_fillCircleHelper+1,f,c
  7705  001196  4A2D               	infsnz	??_fillCircleHelper,f,c
  7706  001198  2A2E               	incf	??_fillCircleHelper+1,f,c
  7707  00119A  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7708  00119E  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7709  0011A2  0E00               	movlw	0
  7710  0011A4  6E36               	movwf	fillCircleHelper@x+1,c
  7711  0011A6  0E00               	movlw	0
  7712  0011A8  6E35               	movwf	fillCircleHelper@x,c
  7713  0011AA  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  7714  0011AE  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7715                           
  7716                           ;ST7735_TFT.c: 626: while (x<y) {
  7717  0011B2  D067               	goto	l4382
  7718  0011B4                     l4362:
  7719                           
  7720                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7721  0011B4  BE34               	btfsc	fillCircleHelper@f+1,7,c
  7722  0011B6  D00B               	goto	l269
  7723                           
  7724                           ;ST7735_TFT.c: 628: y--;
  7725  0011B8  0637               	decf	fillCircleHelper@y,f,c
  7726  0011BA  A0D8               	btfss	status,0,c
  7727  0011BC  0638               	decf	fillCircleHelper@y+1,f,c
  7728                           
  7729                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7730  0011BE  0E02               	movlw	2
  7731  0011C0  2631               	addwf	fillCircleHelper@ddF_y,f,c
  7732  0011C2  0E00               	movlw	0
  7733  0011C4  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7734                           
  7735                           ;ST7735_TFT.c: 630: f += ddF_y;
  7736  0011C6  5031               	movf	fillCircleHelper@ddF_y,w,c
  7737  0011C8  2633               	addwf	fillCircleHelper@f,f,c
  7738  0011CA  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  7739  0011CC  2234               	addwfc	fillCircleHelper@f+1,f,c
  7740  0011CE                     l269:
  7741                           
  7742                           ;ST7735_TFT.c: 631: }
  7743                           ;ST7735_TFT.c: 632: x++;
  7744  0011CE  4A35               	infsnz	fillCircleHelper@x,f,c
  7745  0011D0  2A36               	incf	fillCircleHelper@x+1,f,c
  7746                           
  7747                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7748  0011D2  0E02               	movlw	2
  7749  0011D4  262F               	addwf	fillCircleHelper@ddF_x,f,c
  7750  0011D6  0E00               	movlw	0
  7751  0011D8  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7752                           
  7753                           ;ST7735_TFT.c: 634: f += ddF_x;
  7754  0011DA  502F               	movf	fillCircleHelper@ddF_x,w,c
  7755  0011DC  2633               	addwf	fillCircleHelper@f,f,c
  7756  0011DE  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  7757  0011E0  2234               	addwfc	fillCircleHelper@f+1,f,c
  7758                           
  7759                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7760  0011E2  A027               	btfss	fillCircleHelper@cornername,0,c
  7761  0011E4  D025               	goto	l4378
  7762                           
  7763                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7764  0011E6  5037               	movf	fillCircleHelper@y,w,c
  7765  0011E8  0800               	sublw	0
  7766  0011EA  2423               	addwf	fillCircleHelper@y0,w,c
  7767  0011EC  6E16               	movwf	drawFastVLine@y,c
  7768  0011EE  5037               	movf	fillCircleHelper@y,w,c
  7769  0011F0  2437               	addwf	fillCircleHelper@y,w,c
  7770  0011F2  2429               	addwf	fillCircleHelper@delta,w,c
  7771  0011F4  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7772  0011F6  282D               	incf	??_fillCircleHelper,w,c
  7773  0011F8  6E17               	movwf	drawFastVLine@h,c
  7774  0011FA  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7775  0011FE  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7776  001202  5021               	movf	fillCircleHelper@x0,w,c
  7777  001204  2435               	addwf	fillCircleHelper@x,w,c
  7778  001206  EC6F  F00E         	call	_drawFastVLine
  7779                           
  7780                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7781  00120A  5035               	movf	fillCircleHelper@x,w,c
  7782  00120C  0800               	sublw	0
  7783  00120E  2423               	addwf	fillCircleHelper@y0,w,c
  7784  001210  6E16               	movwf	drawFastVLine@y,c
  7785  001212  5035               	movf	fillCircleHelper@x,w,c
  7786  001214  2435               	addwf	fillCircleHelper@x,w,c
  7787  001216  2429               	addwf	fillCircleHelper@delta,w,c
  7788  001218  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7789  00121A  282D               	incf	??_fillCircleHelper,w,c
  7790  00121C  6E17               	movwf	drawFastVLine@h,c
  7791  00121E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7792  001222  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7793  001226  5021               	movf	fillCircleHelper@x0,w,c
  7794  001228  2437               	addwf	fillCircleHelper@y,w,c
  7795  00122A  EC6F  F00E         	call	_drawFastVLine
  7796  00122E  D000               	goto	l4378
  7797  001230                     l4378:
  7798                           
  7799                           ;ST7735_TFT.c: 639: }
  7800                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7801  001230  A227               	btfss	fillCircleHelper@cornername,1,c
  7802  001232  D027               	goto	l4382
  7803                           
  7804                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7805  001234  5037               	movf	fillCircleHelper@y,w,c
  7806  001236  0800               	sublw	0
  7807  001238  2423               	addwf	fillCircleHelper@y0,w,c
  7808  00123A  6E16               	movwf	drawFastVLine@y,c
  7809  00123C  5037               	movf	fillCircleHelper@y,w,c
  7810  00123E  2437               	addwf	fillCircleHelper@y,w,c
  7811  001240  2429               	addwf	fillCircleHelper@delta,w,c
  7812  001242  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7813  001244  282D               	incf	??_fillCircleHelper,w,c
  7814  001246  6E17               	movwf	drawFastVLine@h,c
  7815  001248  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7816  00124C  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7817  001250  5035               	movf	fillCircleHelper@x,w,c
  7818  001252  0800               	sublw	0
  7819  001254  2421               	addwf	fillCircleHelper@x0,w,c
  7820  001256  EC6F  F00E         	call	_drawFastVLine
  7821                           
  7822                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7823  00125A  5035               	movf	fillCircleHelper@x,w,c
  7824  00125C  0800               	sublw	0
  7825  00125E  2423               	addwf	fillCircleHelper@y0,w,c
  7826  001260  6E16               	movwf	drawFastVLine@y,c
  7827  001262  5035               	movf	fillCircleHelper@x,w,c
  7828  001264  2435               	addwf	fillCircleHelper@x,w,c
  7829  001266  2429               	addwf	fillCircleHelper@delta,w,c
  7830  001268  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7831  00126A  282D               	incf	??_fillCircleHelper,w,c
  7832  00126C  6E17               	movwf	drawFastVLine@h,c
  7833  00126E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7834  001272  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7835  001276  5037               	movf	fillCircleHelper@y,w,c
  7836  001278  0800               	sublw	0
  7837  00127A  2421               	addwf	fillCircleHelper@x0,w,c
  7838  00127C  EC6F  F00E         	call	_drawFastVLine
  7839  001280  D000               	goto	l4382
  7840  001282                     l4382:
  7841  001282  5037               	movf	fillCircleHelper@y,w,c
  7842  001284  5C35               	subwf	fillCircleHelper@x,w,c
  7843  001286  5036               	movf	fillCircleHelper@x+1,w,c
  7844  001288  0A80               	xorlw	128
  7845  00128A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7846  00128C  5038               	movf	fillCircleHelper@y+1,w,c
  7847  00128E  0A80               	xorlw	128
  7848  001290  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  7849  001292  A0D8               	btfss	status,0,c
  7850  001294  D78F               	goto	l4362
  7851  001296  0012               	return		;funcret
  7852  001298                     __end_of_fillCircleHelper:
  7853                           	opt stack 0
  7854                           tblptru	equ	0xFF8
  7855                           tblptrh	equ	0xFF7
  7856                           tblptrl	equ	0xFF6
  7857                           tablat	equ	0xFF5
  7858                           prodl	equ	0xFF3
  7859                           intcon	equ	0xFF2
  7860                           intcon2	equ	0xFF1
  7861                           intcon3	equ	0xFF0
  7862                           postinc0	equ	0xFEE
  7863                           wreg	equ	0xFE8
  7864                           postdec1	equ	0xFE5
  7865                           fsr1l	equ	0xFE1
  7866                           indf2	equ	0xFDF
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _drawCircle *****************
  7872 ;; Defined at:
  7873 ;;		line 561 in file "ST7735_TFT.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  x0              2   25[COMRAM] int 
  7876 ;;  y0              2   27[COMRAM] int 
  7877 ;;  r               2   29[COMRAM] int 
  7878 ;;  color           2   31[COMRAM] unsigned int 
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;  y               2   43[COMRAM] int 
  7881 ;;  x               2   41[COMRAM] int 
  7882 ;;  f               2   39[COMRAM] int 
  7883 ;;  ddF_y           2   37[COMRAM] int 
  7884 ;;  ddF_x           2   35[COMRAM] int 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;		None               void
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7894 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;Total ram usage:       20 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    6
  7901 ;; This function calls:
  7902 ;;		_drawPixel
  7903 ;; This function is called by:
  7904 ;;		_Initialize_Screen
  7905 ;;		_update_LCD_color
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           	psect	text37
  7910  000CD6                     __ptext37:
  7911                           	opt stack 0
  7912  000CD6                     _drawCircle:
  7913                           	opt stack 21
  7914                           
  7915                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7916                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7917                           
  7918                           ;incstack = 0
  7919  000CD6  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7920  000CDA  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7921  000CDE  1E22               	comf	??_drawCircle,f,c
  7922  000CE0  1E23               	comf	??_drawCircle+1,f,c
  7923  000CE2  4A22               	infsnz	??_drawCircle,f,c
  7924  000CE4  2A23               	incf	??_drawCircle+1,f,c
  7925  000CE6  0E01               	movlw	1
  7926  000CE8  2422               	addwf	??_drawCircle,w,c
  7927  000CEA  6E28               	movwf	drawCircle@f,c
  7928  000CEC  0E00               	movlw	0
  7929  000CEE  2023               	addwfc	??_drawCircle+1,w,c
  7930  000CF0  6E29               	movwf	drawCircle@f+1,c
  7931  000CF2  0E00               	movlw	0
  7932  000CF4  6E25               	movwf	drawCircle@ddF_x+1,c
  7933  000CF6  0E01               	movlw	1
  7934  000CF8  6E24               	movwf	drawCircle@ddF_x,c
  7935  000CFA  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7936  000CFE  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7937  000D02  90D8               	bcf	status,0,c
  7938  000D04  3622               	rlcf	??_drawCircle,f,c
  7939  000D06  3623               	rlcf	??_drawCircle+1,f,c
  7940  000D08  1E22               	comf	??_drawCircle,f,c
  7941  000D0A  1E23               	comf	??_drawCircle+1,f,c
  7942  000D0C  4A22               	infsnz	??_drawCircle,f,c
  7943  000D0E  2A23               	incf	??_drawCircle+1,f,c
  7944  000D10  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  7945  000D14  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7946  000D18  0E00               	movlw	0
  7947  000D1A  6E2B               	movwf	drawCircle@x+1,c
  7948  000D1C  0E00               	movlw	0
  7949  000D1E  6E2A               	movwf	drawCircle@x,c
  7950  000D20  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  7951  000D24  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  7952                           
  7953                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7954  000D28  501C               	movf	drawCircle@y0,w,c
  7955  000D2A  241E               	addwf	drawCircle@r,w,c
  7956  000D2C  6E16               	movwf	drawPixel@y,c
  7957  000D2E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7958  000D32  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7959  000D36  501A               	movf	drawCircle@x0,w,c
  7960  000D38  EC20  F012         	call	_drawPixel
  7961                           
  7962                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7963  000D3C  501E               	movf	drawCircle@r,w,c
  7964  000D3E  0800               	sublw	0
  7965  000D40  241C               	addwf	drawCircle@y0,w,c
  7966  000D42  6E16               	movwf	drawPixel@y,c
  7967  000D44  C020  F017         	movff	drawCircle@color,drawPixel@color
  7968  000D48  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7969  000D4C  501A               	movf	drawCircle@x0,w,c
  7970  000D4E  EC20  F012         	call	_drawPixel
  7971                           
  7972                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7973  000D52  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7974  000D56  C020  F017         	movff	drawCircle@color,drawPixel@color
  7975  000D5A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7976  000D5E  501A               	movf	drawCircle@x0,w,c
  7977  000D60  241E               	addwf	drawCircle@r,w,c
  7978  000D62  EC20  F012         	call	_drawPixel
  7979                           
  7980                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7981  000D66  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7982  000D6A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7983  000D6E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7984  000D72  501E               	movf	drawCircle@r,w,c
  7985  000D74  0800               	sublw	0
  7986  000D76  241A               	addwf	drawCircle@x0,w,c
  7987  000D78  EC20  F012         	call	_drawPixel
  7988                           
  7989                           ;ST7735_TFT.c: 569: while (x < y) {
  7990  000D7C  D078               	goto	l4528
  7991  000D7E                     l4500:
  7992                           
  7993                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7994  000D7E  BE29               	btfsc	drawCircle@f+1,7,c
  7995  000D80  D00B               	goto	l251
  7996                           
  7997                           ;ST7735_TFT.c: 571: y--;
  7998  000D82  062C               	decf	drawCircle@y,f,c
  7999  000D84  A0D8               	btfss	status,0,c
  8000  000D86  062D               	decf	drawCircle@y+1,f,c
  8001                           
  8002                           ;ST7735_TFT.c: 572: ddF_y += 2;
  8003  000D88  0E02               	movlw	2
  8004  000D8A  2626               	addwf	drawCircle@ddF_y,f,c
  8005  000D8C  0E00               	movlw	0
  8006  000D8E  2227               	addwfc	drawCircle@ddF_y+1,f,c
  8007                           
  8008                           ;ST7735_TFT.c: 573: f += ddF_y;
  8009  000D90  5026               	movf	drawCircle@ddF_y,w,c
  8010  000D92  2628               	addwf	drawCircle@f,f,c
  8011  000D94  5027               	movf	drawCircle@ddF_y+1,w,c
  8012  000D96  2229               	addwfc	drawCircle@f+1,f,c
  8013  000D98                     l251:
  8014                           
  8015                           ;ST7735_TFT.c: 574: }
  8016                           ;ST7735_TFT.c: 575: x++;
  8017  000D98  4A2A               	infsnz	drawCircle@x,f,c
  8018  000D9A  2A2B               	incf	drawCircle@x+1,f,c
  8019                           
  8020                           ;ST7735_TFT.c: 576: ddF_x += 2;
  8021  000D9C  0E02               	movlw	2
  8022  000D9E  2624               	addwf	drawCircle@ddF_x,f,c
  8023  000DA0  0E00               	movlw	0
  8024  000DA2  2225               	addwfc	drawCircle@ddF_x+1,f,c
  8025                           
  8026                           ;ST7735_TFT.c: 577: f += ddF_x;
  8027  000DA4  5024               	movf	drawCircle@ddF_x,w,c
  8028  000DA6  2628               	addwf	drawCircle@f,f,c
  8029  000DA8  5025               	movf	drawCircle@ddF_x+1,w,c
  8030  000DAA  2229               	addwfc	drawCircle@f+1,f,c
  8031                           
  8032                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  8033  000DAC  501C               	movf	drawCircle@y0,w,c
  8034  000DAE  242C               	addwf	drawCircle@y,w,c
  8035  000DB0  6E16               	movwf	drawPixel@y,c
  8036  000DB2  C020  F017         	movff	drawCircle@color,drawPixel@color
  8037  000DB6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8038  000DBA  501A               	movf	drawCircle@x0,w,c
  8039  000DBC  242A               	addwf	drawCircle@x,w,c
  8040  000DBE  EC20  F012         	call	_drawPixel
  8041                           
  8042                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  8043  000DC2  501C               	movf	drawCircle@y0,w,c
  8044  000DC4  242C               	addwf	drawCircle@y,w,c
  8045  000DC6  6E16               	movwf	drawPixel@y,c
  8046  000DC8  C020  F017         	movff	drawCircle@color,drawPixel@color
  8047  000DCC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8048  000DD0  502A               	movf	drawCircle@x,w,c
  8049  000DD2  0800               	sublw	0
  8050  000DD4  241A               	addwf	drawCircle@x0,w,c
  8051  000DD6  EC20  F012         	call	_drawPixel
  8052                           
  8053                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  8054  000DDA  502C               	movf	drawCircle@y,w,c
  8055  000DDC  0800               	sublw	0
  8056  000DDE  241C               	addwf	drawCircle@y0,w,c
  8057  000DE0  6E16               	movwf	drawPixel@y,c
  8058  000DE2  C020  F017         	movff	drawCircle@color,drawPixel@color
  8059  000DE6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8060  000DEA  501A               	movf	drawCircle@x0,w,c
  8061  000DEC  242A               	addwf	drawCircle@x,w,c
  8062  000DEE  EC20  F012         	call	_drawPixel
  8063                           
  8064                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  8065  000DF2  502C               	movf	drawCircle@y,w,c
  8066  000DF4  0800               	sublw	0
  8067  000DF6  241C               	addwf	drawCircle@y0,w,c
  8068  000DF8  6E16               	movwf	drawPixel@y,c
  8069  000DFA  C020  F017         	movff	drawCircle@color,drawPixel@color
  8070  000DFE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8071  000E02  502A               	movf	drawCircle@x,w,c
  8072  000E04  0800               	sublw	0
  8073  000E06  241A               	addwf	drawCircle@x0,w,c
  8074  000E08  EC20  F012         	call	_drawPixel
  8075                           
  8076                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  8077  000E0C  501C               	movf	drawCircle@y0,w,c
  8078  000E0E  242A               	addwf	drawCircle@x,w,c
  8079  000E10  6E16               	movwf	drawPixel@y,c
  8080  000E12  C020  F017         	movff	drawCircle@color,drawPixel@color
  8081  000E16  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8082  000E1A  501A               	movf	drawCircle@x0,w,c
  8083  000E1C  242C               	addwf	drawCircle@y,w,c
  8084  000E1E  EC20  F012         	call	_drawPixel
  8085                           
  8086                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  8087  000E22  501C               	movf	drawCircle@y0,w,c
  8088  000E24  242A               	addwf	drawCircle@x,w,c
  8089  000E26  6E16               	movwf	drawPixel@y,c
  8090  000E28  C020  F017         	movff	drawCircle@color,drawPixel@color
  8091  000E2C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8092  000E30  502C               	movf	drawCircle@y,w,c
  8093  000E32  0800               	sublw	0
  8094  000E34  241A               	addwf	drawCircle@x0,w,c
  8095  000E36  EC20  F012         	call	_drawPixel
  8096                           
  8097                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  8098  000E3A  502A               	movf	drawCircle@x,w,c
  8099  000E3C  0800               	sublw	0
  8100  000E3E  241C               	addwf	drawCircle@y0,w,c
  8101  000E40  6E16               	movwf	drawPixel@y,c
  8102  000E42  C020  F017         	movff	drawCircle@color,drawPixel@color
  8103  000E46  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8104  000E4A  501A               	movf	drawCircle@x0,w,c
  8105  000E4C  242C               	addwf	drawCircle@y,w,c
  8106  000E4E  EC20  F012         	call	_drawPixel
  8107                           
  8108                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  8109  000E52  502A               	movf	drawCircle@x,w,c
  8110  000E54  0800               	sublw	0
  8111  000E56  241C               	addwf	drawCircle@y0,w,c
  8112  000E58  6E16               	movwf	drawPixel@y,c
  8113  000E5A  C020  F017         	movff	drawCircle@color,drawPixel@color
  8114  000E5E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8115  000E62  502C               	movf	drawCircle@y,w,c
  8116  000E64  0800               	sublw	0
  8117  000E66  241A               	addwf	drawCircle@x0,w,c
  8118  000E68  EC20  F012         	call	_drawPixel
  8119  000E6C  D000               	goto	l4528
  8120  000E6E                     l4528:
  8121  000E6E  502C               	movf	drawCircle@y,w,c
  8122  000E70  5C2A               	subwf	drawCircle@x,w,c
  8123  000E72  502B               	movf	drawCircle@x+1,w,c
  8124  000E74  0A80               	xorlw	128
  8125  000E76  6E22               	movwf	??_drawCircle& (0+255),c
  8126  000E78  502D               	movf	drawCircle@y+1,w,c
  8127  000E7A  0A80               	xorlw	128
  8128  000E7C  5822               	subwfb	??_drawCircle& (0+255),w,c
  8129  000E7E  A0D8               	btfss	status,0,c
  8130  000E80  D77E               	goto	l4500
  8131  000E82  0012               	return		;funcret
  8132  000E84                     __end_of_drawCircle:
  8133                           	opt stack 0
  8134                           tblptru	equ	0xFF8
  8135                           tblptrh	equ	0xFF7
  8136                           tblptrl	equ	0xFF6
  8137                           tablat	equ	0xFF5
  8138                           prodl	equ	0xFF3
  8139                           intcon	equ	0xFF2
  8140                           intcon2	equ	0xFF1
  8141                           intcon3	equ	0xFF0
  8142                           postinc0	equ	0xFEE
  8143                           wreg	equ	0xFE8
  8144                           postdec1	equ	0xFE5
  8145                           fsr1l	equ	0xFE1
  8146                           indf2	equ	0xFDF
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function _PED_Control *****************
  8152 ;; Defined at:
  8153 ;;		line 470 in file "Lab9.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  direction       1    wreg     unsigned char 
  8156 ;;  Num_Sec         1    9[BANK0 ] unsigned char 
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;  direction       1   10[BANK0 ] unsigned char 
  8159 ;;  i               1   11[BANK0 ] unsigned char 
  8160 ;; Return value:  Size  Location     Type
  8161 ;;		None               void
  8162 ;; Registers used:
  8163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8169 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;Total ram usage:        3 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:   10
  8176 ;; This function calls:
  8177 ;;		_Wait_One_Second_With_Beep
  8178 ;;		_update_LCD_PED_Count
  8179 ;; This function is called by:
  8180 ;;		_Day_Mode
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text38
  8185  0022DA                     __ptext38:
  8186                           	opt stack 0
  8187  0022DA                     _PED_Control:
  8188                           	opt stack 19
  8189                           
  8190                           ;incstack = 0
  8191                           ;PED_Control@direction stored from wreg
  8192  0022DA  0100               	movlb	0	; () banked
  8193  0022DC  6FAB               	movwf	PED_Control@direction& (0+255),b
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;Lab9.c: 472: for(char i = Num_Sec-1;i>0; i--)
  8197  0022DE  0100               	movlb	0	; () banked
  8198  0022E0  05AA               	decf	PED_Control@Num_Sec& (0+255),w,b
  8199  0022E2  0100               	movlb	0	; () banked
  8200  0022E4  6FAC               	movwf	PED_Control@i& (0+255),b
  8201  0022E6                     l5042:
  8202                           
  8203                           ; BSR set to: 0
  8204  0022E6  0100               	movlb	0	; () banked
  8205  0022E8  51AC               	movf	PED_Control@i& (0+255),w,b
  8206  0022EA  0100               	movlb	0	; () banked
  8207  0022EC  B4D8               	btfsc	status,2,c
  8208  0022EE  D00D               	goto	l5054
  8209  0022F0  D001               	goto	l5046
  8210                           
  8211                           ; BSR set to: 0
  8212  0022F2  D00B               	goto	l5054
  8213  0022F4                     l5046:
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;Lab9.c: 473: {
  8217                           ;Lab9.c: 474: update_LCD_PED_Count(direction, i);
  8218  0022F4  C0AC  F0A8         	movff	PED_Control@i,update_LCD_PED_Count@count
  8219  0022F8  0100               	movlb	0	; () banked
  8220  0022FA  51AB               	movf	PED_Control@direction& (0+255),w,b
  8221  0022FC  EC1C  F00C         	call	_update_LCD_PED_Count
  8222                           
  8223                           ;Lab9.c: 475: Wait_One_Second_With_Beep();
  8224  002300  ECBA  F012         	call	_Wait_One_Second_With_Beep	;wreg free
  8225  002304  0100               	movlb	0	; () banked
  8226  002306  07AC               	decf	PED_Control@i& (0+255),f,b
  8227  002308  D7EE               	goto	l5042
  8228  00230A                     l5054:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;Lab9.c: 476: }
  8232                           ;Lab9.c: 477: update_LCD_PED_Count(direction, 0);
  8233  00230A  0E00               	movlw	0
  8234  00230C  0100               	movlb	0	; () banked
  8235  00230E  6FA8               	movwf	update_LCD_PED_Count@count& (0+255),b
  8236  002310  0100               	movlb	0	; () banked
  8237  002312  51AB               	movf	PED_Control@direction& (0+255),w,b
  8238  002314  EC1C  F00C         	call	_update_LCD_PED_Count
  8239                           
  8240                           ;Lab9.c: 478: Wait_One_Second_With_Beep();
  8241  002318  ECBA  F012         	call	_Wait_One_Second_With_Beep	;wreg free
  8242  00231C  0012               	return		;funcret
  8243  00231E                     __end_of_PED_Control:
  8244                           	opt stack 0
  8245                           tblptru	equ	0xFF8
  8246                           tblptrh	equ	0xFF7
  8247                           tblptrl	equ	0xFF6
  8248                           tablat	equ	0xFF5
  8249                           prodl	equ	0xFF3
  8250                           intcon	equ	0xFF2
  8251                           intcon2	equ	0xFF1
  8252                           intcon3	equ	0xFF0
  8253                           postinc0	equ	0xFEE
  8254                           wreg	equ	0xFE8
  8255                           postdec1	equ	0xFE5
  8256                           fsr1l	equ	0xFE1
  8257                           indf2	equ	0xFDF
  8258                           fsr2h	equ	0xFDA
  8259                           fsr2l	equ	0xFD9
  8260                           status	equ	0xFD8
  8261                           
  8262 ;; *************** function _update_LCD_PED_Count *****************
  8263 ;; Defined at:
  8264 ;;		line 703 in file "Lab9.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  direction       1    wreg     unsigned char 
  8267 ;;  count           1    7[BANK0 ] unsigned char 
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;  direction       1    8[BANK0 ] unsigned char 
  8270 ;; Return value:  Size  Location     Type
  8271 ;;		None               void
  8272 ;; Registers used:
  8273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8279 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;Total ram usage:        2 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    9
  8286 ;; This function calls:
  8287 ;;		___awdiv
  8288 ;;		___awmod
  8289 ;;		_drawtext
  8290 ;; This function is called by:
  8291 ;;		_PED_Control
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           	psect	text39
  8296  001838                     __ptext39:
  8297                           	opt stack 0
  8298  001838                     _update_LCD_PED_Count:
  8299                           	opt stack 19
  8300                           
  8301                           ;incstack = 0
  8302                           ;update_LCD_PED_Count@direction stored from wreg
  8303  001838  0100               	movlb	0	; () banked
  8304  00183A  6FA9               	movwf	update_LCD_PED_Count@direction& (0+255),b
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;Lab9.c: 705: switch (direction)
  8308  00183C  D05B               	goto	l4944
  8309  00183E                     l4934:
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;Lab9.c: 708: PED_EW_Count[0] = count/10 + '0';
  8313  00183E  C0A8  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8314  001842  6A10               	clrf	___awdiv@dividend+1,c
  8315  001844  0E00               	movlw	0
  8316  001846  6E12               	movwf	___awdiv@divisor+1,c
  8317  001848  0E0A               	movlw	10
  8318  00184A  6E11               	movwf	___awdiv@divisor,c
  8319  00184C  ECE0  F00D         	call	___awdiv	;wreg free
  8320  001850  500F               	movf	?___awdiv,w,c
  8321  001852  0F30               	addlw	48
  8322  001854  0100               	movlb	0	; () banked
  8323  001856  6FB2               	movwf	_PED_EW_Count& (0+255),b
  8324                           
  8325                           ;Lab9.c: 709: PED_EW_Count[1] = count%10 + '0';
  8326  001858  C0A8  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8327  00185C  6A10               	clrf	___awmod@dividend+1,c
  8328  00185E  0E00               	movlw	0
  8329  001860  6E12               	movwf	___awmod@divisor+1,c
  8330  001862  0E0A               	movlw	10
  8331  001864  6E11               	movwf	___awmod@divisor,c
  8332  001866  EC37  F00F         	call	___awmod	;wreg free
  8333  00186A  500F               	movf	?___awmod,w,c
  8334  00186C  0F30               	addlw	48
  8335  00186E  0100               	movlb	0	; () banked
  8336  001870  6FB3               	movwf	(_PED_EW_Count+1)& (0+255),b
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;Lab9.c: 710: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  8340  001872  0E1E               	movlw	30
  8341  001874  6E37               	movwf	drawtext@y,c
  8342  001876  0EB2               	movlw	low _PED_EW_Count
  8343  001878  6E38               	movwf	drawtext@_text,c
  8344  00187A  0E00               	movlw	high _PED_EW_Count
  8345  00187C  6E39               	movwf	drawtext@_text+1,c
  8346  00187E  0E07               	movlw	7
  8347  001880  6E3B               	movwf	drawtext@color+1,c
  8348  001882  683A               	setf	drawtext@color,c
  8349  001884  0E00               	movlw	0
  8350  001886  6E3D               	movwf	drawtext@bg+1,c
  8351  001888  0E00               	movlw	0
  8352  00188A  6E3C               	movwf	drawtext@bg,c
  8353  00188C  0E02               	movlw	2
  8354  00188E  6E3E               	movwf	drawtext@size,c
  8355  001890  0E02               	movlw	2
  8356  001892  ECD4  F009         	call	_drawtext
  8357                           
  8358                           ;Lab9.c: 711: break;
  8359  001896  D037               	goto	l528
  8360  001898                     l4938:
  8361                           
  8362                           ;Lab9.c: 714: PED_NS_Count[0] = count/10 + '0';
  8363  001898  C0A8  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8364  00189C  6A10               	clrf	___awdiv@dividend+1,c
  8365  00189E  0E00               	movlw	0
  8366  0018A0  6E12               	movwf	___awdiv@divisor+1,c
  8367  0018A2  0E0A               	movlw	10
  8368  0018A4  6E11               	movwf	___awdiv@divisor,c
  8369  0018A6  ECE0  F00D         	call	___awdiv	;wreg free
  8370  0018AA  500F               	movf	?___awdiv,w,c
  8371  0018AC  0F30               	addlw	48
  8372  0018AE  0100               	movlb	0	; () banked
  8373  0018B0  6FB5               	movwf	_PED_NS_Count& (0+255),b
  8374                           
  8375                           ;Lab9.c: 715: PED_NS_Count[1] = count%10 + '0';
  8376  0018B2  C0A8  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8377  0018B6  6A10               	clrf	___awmod@dividend+1,c
  8378  0018B8  0E00               	movlw	0
  8379  0018BA  6E12               	movwf	___awmod@divisor+1,c
  8380  0018BC  0E0A               	movlw	10
  8381  0018BE  6E11               	movwf	___awmod@divisor,c
  8382  0018C0  EC37  F00F         	call	___awmod	;wreg free
  8383  0018C4  500F               	movf	?___awmod,w,c
  8384  0018C6  0F30               	addlw	48
  8385  0018C8  0100               	movlb	0	; () banked
  8386  0018CA  6FB6               	movwf	(_PED_NS_Count+1)& (0+255),b
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;Lab9.c: 716: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  8390  0018CC  0E5A               	movlw	90
  8391  0018CE  6E37               	movwf	drawtext@y,c
  8392  0018D0  0EB5               	movlw	low _PED_NS_Count
  8393  0018D2  6E38               	movwf	drawtext@_text,c
  8394  0018D4  0E00               	movlw	high _PED_NS_Count
  8395  0018D6  6E39               	movwf	drawtext@_text+1,c
  8396  0018D8  0E00               	movlw	0
  8397  0018DA  6E3B               	movwf	drawtext@color+1,c
  8398  0018DC  0E1F               	movlw	31
  8399  0018DE  6E3A               	movwf	drawtext@color,c
  8400  0018E0  0E00               	movlw	0
  8401  0018E2  6E3D               	movwf	drawtext@bg+1,c
  8402  0018E4  0E00               	movlw	0
  8403  0018E6  6E3C               	movwf	drawtext@bg,c
  8404  0018E8  0E02               	movlw	2
  8405  0018EA  6E3E               	movwf	drawtext@size,c
  8406  0018EC  0E02               	movlw	2
  8407  0018EE  ECD4  F009         	call	_drawtext
  8408                           
  8409                           ;Lab9.c: 718: }
  8410                           
  8411                           ;Lab9.c: 717: break;
  8412  0018F2  D009               	goto	l528
  8413  0018F4                     l4944:
  8414  0018F4  0100               	movlb	0	; () banked
  8415  0018F6  51A9               	movf	update_LCD_PED_Count@direction& (0+255),w,b
  8416                           
  8417                           ; Switch size 1, requested type "space"
  8418                           ; Number of cases is 2, Range of values is 0 to 2
  8419                           ; switch strategies available:
  8420                           ; Name         Instructions Cycles
  8421                           ; simple_byte            7     4 (average)
  8422                           ;	Chosen strategy is simple_byte
  8423  0018F8  0A00               	xorlw	0	; case 0
  8424  0018FA  B4D8               	btfsc	status,2,c
  8425  0018FC  D7A0               	goto	l4934
  8426  0018FE  0A02               	xorlw	2	; case 2
  8427  001900  B4D8               	btfsc	status,2,c
  8428  001902  D7CA               	goto	l4938
  8429  001904  D000               	goto	l528
  8430  001906                     l528:
  8431  001906  0012               	return		;funcret
  8432  001908                     __end_of_update_LCD_PED_Count:
  8433                           	opt stack 0
  8434                           tblptru	equ	0xFF8
  8435                           tblptrh	equ	0xFF7
  8436                           tblptrl	equ	0xFF6
  8437                           tablat	equ	0xFF5
  8438                           prodl	equ	0xFF3
  8439                           intcon	equ	0xFF2
  8440                           intcon2	equ	0xFF1
  8441                           intcon3	equ	0xFF0
  8442                           postinc0	equ	0xFEE
  8443                           wreg	equ	0xFE8
  8444                           postdec1	equ	0xFE5
  8445                           fsr1l	equ	0xFE1
  8446                           indf2	equ	0xFDF
  8447                           fsr2h	equ	0xFDA
  8448                           fsr2l	equ	0xFD9
  8449                           status	equ	0xFD8
  8450                           
  8451 ;; *************** function _drawtext *****************
  8452 ;; Defined at:
  8453 ;;		line 507 in file "ST7735_TFT.c"
  8454 ;; Parameters:    Size  Location     Type
  8455 ;;  x               1    wreg     unsigned char 
  8456 ;;  y               1   54[COMRAM] unsigned char 
  8457 ;;  _text           2   55[COMRAM] PTR unsigned char 
  8458 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8459 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8460 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8461 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8462 ;;  color           2   57[COMRAM] unsigned int 
  8463 ;;  bg              2   59[COMRAM] unsigned int 
  8464 ;;  size            1   61[COMRAM] unsigned char 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  x               1    0[BANK0 ] unsigned char 
  8467 ;;  i               2    3[BANK0 ] unsigned int 
  8468 ;;  textsize        2    1[BANK0 ] unsigned int 
  8469 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  8470 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;		None               void
  8473 ;; Registers used:
  8474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8480 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;Total ram usage:       17 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    8
  8487 ;; This function calls:
  8488 ;;		_drawChar
  8489 ;;		_strlen
  8490 ;; This function is called by:
  8491 ;;		_Initialize_Screen
  8492 ;;		_Wait_One_Second
  8493 ;;		_update_LCD_count
  8494 ;;		_update_LCD_PED_Count
  8495 ;;		_update_LCD_misc
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           	psect	text40
  8500  0013A8                     __ptext40:
  8501                           	opt stack 0
  8502  0013A8                     _drawtext:
  8503                           	opt stack 19
  8504                           
  8505                           ;incstack = 0
  8506                           ;drawtext@x stored from wreg
  8507  0013A8  0100               	movlb	0	; () banked
  8508  0013AA  6FA1               	movwf	drawtext@x& (0+255),b
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  8512                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  8513                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  8514  0013AC  C0A1  F0A7         	movff	drawtext@x,drawtext@cursor_x
  8515                           
  8516                           ; BSR set to: 0
  8517  0013B0  C037  F0A6         	movff	drawtext@y,drawtext@cursor_y
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  8521  0013B4  C038  F00F         	movff	drawtext@_text,strlen@s
  8522  0013B8  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  8523  0013BC  ECAE  F011         	call	_strlen	;wreg free
  8524  0013C0  C00F  F0A2         	movff	?_strlen,drawtext@textsize
  8525  0013C4  C010  F0A3         	movff	?_strlen+1,drawtext@textsize+1
  8526                           
  8527                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  8528  0013C8  0E00               	movlw	0
  8529  0013CA  0100               	movlb	0	; () banked
  8530  0013CC  6FA5               	movwf	(drawtext@i+1)& (0+255),b
  8531  0013CE  0E00               	movlw	0
  8532  0013D0  6FA4               	movwf	drawtext@i& (0+255),b
  8533  0013D2  D064               	goto	l4350
  8534  0013D4                     l4324:
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  8538  0013D4  5041               	movf	_wrap,w,c
  8539  0013D6  B4D8               	btfsc	status,2,c
  8540  0013D8  D034               	goto	l4340
  8541                           
  8542                           ; BSR set to: 0
  8543  0013DA  503E               	movf	drawtext@size,w,c
  8544  0013DC  0D05               	mullw	5
  8545  0013DE  0100               	movlb	0	; () banked
  8546  0013E0  51A7               	movf	drawtext@cursor_x& (0+255),w,b
  8547  0013E2  6E3F               	movwf	??_drawtext& (0+255),c
  8548  0013E4  6A40               	clrf	(??_drawtext+1)& (0+255),c
  8549  0013E6  50F3               	movf	prodl,w,c
  8550  0013E8  263F               	addwf	??_drawtext,f,c
  8551  0013EA  50F4               	movf	prodh,w,c
  8552  0013EC  2240               	addwfc	??_drawtext+1,f,c
  8553  0013EE  BE40               	btfsc	??_drawtext+1,7,c
  8554  0013F0  D028               	goto	l4340
  8555  0013F2  5040               	movf	??_drawtext+1,w,c
  8556  0013F4  E104               	bnz	u3020
  8557  0013F6  0E81               	movlw	129
  8558  0013F8  5C3F               	subwf	??_drawtext,w,c
  8559  0013FA  A0D8               	btfss	status,0,c
  8560  0013FC  D022               	goto	l4340
  8561  0013FE                     u3020:
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;ST7735_TFT.c: 515: cursor_x = 0;
  8565  0013FE  0E00               	movlw	0
  8566  001400  0100               	movlb	0	; () banked
  8567  001402  6FA7               	movwf	drawtext@cursor_x& (0+255),b
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  8571  001404  503E               	movf	drawtext@size,w,c
  8572  001406  0D07               	mullw	7
  8573  001408  50F3               	movf	prodl,w,c
  8574  00140A  0100               	movlb	0	; () banked
  8575  00140C  25A6               	addwf	drawtext@cursor_y& (0+255),w,b
  8576  00140E  0F03               	addlw	3
  8577  001410  0100               	movlb	0	; () banked
  8578  001412  6FA6               	movwf	drawtext@cursor_y& (0+255),b
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  8582  001414  0EA0               	movlw	160
  8583  001416  0100               	movlb	0	; () banked
  8584  001418  65A6               	cpfsgt	drawtext@cursor_y& (0+255),b
  8585  00141A  D004               	goto	l4336
  8586                           
  8587                           ; BSR set to: 0
  8588  00141C  0EA0               	movlw	160
  8589  00141E  0100               	movlb	0	; () banked
  8590  001420  6FA6               	movwf	drawtext@cursor_y& (0+255),b
  8591  001422  D000               	goto	l4336
  8592  001424                     l4336:
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  8596  001424  0100               	movlb	0	; () banked
  8597  001426  51A4               	movf	drawtext@i& (0+255),w,b
  8598  001428  2438               	addwf	drawtext@_text,w,c
  8599  00142A  6ED9               	movwf	fsr2l,c
  8600  00142C  0100               	movlb	0	; () banked
  8601  00142E  51A5               	movf	(drawtext@i+1)& (0+255),w,b
  8602  001430  2039               	addwfc	drawtext@_text+1,w,c
  8603  001432  6EDA               	movwf	fsr2h,c
  8604  001434  0E20               	movlw	32
  8605  001436  18DE               	xorwf	postinc2,w,c
  8606  001438  B4D8               	btfsc	status,2,c
  8607  00143A  D02C               	goto	l4348
  8608  00143C  D002               	goto	l4340
  8609                           
  8610                           ; BSR set to: 0
  8611  00143E  D02A               	goto	l4348
  8612                           
  8613                           ; BSR set to: 0
  8614  001440  D000               	goto	l4340
  8615  001442                     l4340:
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8619  001442  C0A6  F02C         	movff	drawtext@cursor_y,drawChar@y
  8620  001446  0100               	movlb	0	; () banked
  8621  001448  51A4               	movf	drawtext@i& (0+255),w,b
  8622  00144A  2438               	addwf	drawtext@_text,w,c
  8623  00144C  6ED9               	movwf	fsr2l,c
  8624  00144E  0100               	movlb	0	; () banked
  8625  001450  51A5               	movf	(drawtext@i+1)& (0+255),w,b
  8626  001452  2039               	addwfc	drawtext@_text+1,w,c
  8627  001454  6EDA               	movwf	fsr2h,c
  8628  001456  50DF               	movf	indf2,w,c
  8629  001458  6E2D               	movwf	drawChar@c,c
  8630  00145A  C03A  F02E         	movff	drawtext@color,drawChar@color
  8631  00145E  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  8632  001462  C03C  F030         	movff	drawtext@bg,drawChar@bg
  8633  001466  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  8634  00146A  C03E  F032         	movff	drawtext@size,drawChar@size
  8635  00146E  0100               	movlb	0	; () banked
  8636  001470  51A7               	movf	drawtext@cursor_x& (0+255),w,b
  8637  001472  EC05  F008         	call	_drawChar
  8638                           
  8639                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  8640  001476  503E               	movf	drawtext@size,w,c
  8641  001478  0D06               	mullw	6
  8642  00147A  50F3               	movf	prodl,w,c
  8643  00147C  0100               	movlb	0	; () banked
  8644  00147E  25A7               	addwf	drawtext@cursor_x& (0+255),w,b
  8645  001480  0100               	movlb	0	; () banked
  8646  001482  6FA7               	movwf	drawtext@cursor_x& (0+255),b
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  8650  001484  0E80               	movlw	128
  8651  001486  0100               	movlb	0	; () banked
  8652  001488  65A7               	cpfsgt	drawtext@cursor_x& (0+255),b
  8653  00148A  D004               	goto	l4348
  8654                           
  8655                           ; BSR set to: 0
  8656  00148C  0E80               	movlw	128
  8657  00148E  0100               	movlb	0	; () banked
  8658  001490  6FA7               	movwf	drawtext@cursor_x& (0+255),b
  8659                           
  8660                           ; BSR set to: 0
  8661  001492  D000               	goto	l4348
  8662  001494                     l4348:
  8663                           
  8664                           ; BSR set to: 0
  8665  001494  0100               	movlb	0	; () banked
  8666  001496  4BA4               	infsnz	drawtext@i& (0+255),f,b
  8667  001498  2BA5               	incf	(drawtext@i+1)& (0+255),f,b
  8668  00149A  D000               	goto	l4350
  8669  00149C                     l4350:
  8670                           
  8671                           ; BSR set to: 0
  8672  00149C  0100               	movlb	0	; () banked
  8673  00149E  51A2               	movf	drawtext@textsize& (0+255),w,b
  8674  0014A0  0100               	movlb	0	; () banked
  8675  0014A2  5DA4               	subwf	drawtext@i& (0+255),w,b
  8676  0014A4  0100               	movlb	0	; () banked
  8677  0014A6  51A3               	movf	(drawtext@textsize+1)& (0+255),w,b
  8678  0014A8  0100               	movlb	0	; () banked
  8679  0014AA  59A5               	subwfb	(drawtext@i+1)& (0+255),w,b
  8680  0014AC  A0D8               	btfss	status,0,c
  8681  0014AE  D792               	goto	l4324
  8682                           
  8683                           ; BSR set to: 0
  8684                           
  8685                           ; BSR set to: 0
  8686  0014B0  0012               	return		;funcret
  8687  0014B2                     __end_of_drawtext:
  8688                           	opt stack 0
  8689                           tblptru	equ	0xFF8
  8690                           tblptrh	equ	0xFF7
  8691                           tblptrl	equ	0xFF6
  8692                           tablat	equ	0xFF5
  8693                           prodh	equ	0xFF4
  8694                           prodl	equ	0xFF3
  8695                           intcon	equ	0xFF2
  8696                           intcon2	equ	0xFF1
  8697                           intcon3	equ	0xFF0
  8698                           postinc0	equ	0xFEE
  8699                           wreg	equ	0xFE8
  8700                           postdec1	equ	0xFE5
  8701                           fsr1l	equ	0xFE1
  8702                           indf2	equ	0xFDF
  8703                           postinc2	equ	0xFDE
  8704                           fsr2h	equ	0xFDA
  8705                           fsr2l	equ	0xFD9
  8706                           status	equ	0xFD8
  8707                           
  8708 ;; *************** function _strlen *****************
  8709 ;; Defined at:
  8710 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;  s               2   14[COMRAM] PTR const unsigned char 
  8713 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8714 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8715 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8716 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8717 ;; Auto vars:     Size  Location     Type
  8718 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  8719 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8720 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8721 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8722 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  2   14[COMRAM] unsigned int 
  8725 ;; Registers used:
  8726 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;Total ram usage:        6 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    2
  8739 ;; This function calls:
  8740 ;;		Nothing
  8741 ;; This function is called by:
  8742 ;;		_drawtext
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           	psect	text41
  8747  00235C                     __ptext41:
  8748                           	opt stack 0
  8749  00235C                     _strlen:
  8750                           	opt stack 24
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;incstack = 0
  8754  00235C  C00F  F013         	movff	strlen@s,strlen@cp
  8755  002360  C010  F014         	movff	strlen@s+1,strlen@cp+1
  8756  002364  D003               	goto	l4274
  8757  002366                     l4272:
  8758  002366  4A13               	infsnz	strlen@cp,f,c
  8759  002368  2A14               	incf	strlen@cp+1,f,c
  8760  00236A  D000               	goto	l4274
  8761  00236C                     l4274:
  8762  00236C  C013  FFD9         	movff	strlen@cp,fsr2l
  8763  002370  C014  FFDA         	movff	strlen@cp+1,fsr2h
  8764  002374  50DF               	movf	indf2,w,c
  8765  002376  A4D8               	btfss	status,2,c
  8766  002378  D7F6               	goto	l4272
  8767  00237A  C00F  F011         	movff	strlen@s,??_strlen
  8768  00237E  C010  F012         	movff	strlen@s+1,??_strlen+1
  8769  002382  1E11               	comf	??_strlen,f,c
  8770  002384  1E12               	comf	??_strlen+1,f,c
  8771  002386  4A11               	infsnz	??_strlen,f,c
  8772  002388  2A12               	incf	??_strlen+1,f,c
  8773  00238A  5013               	movf	strlen@cp,w,c
  8774  00238C  2411               	addwf	??_strlen,w,c
  8775  00238E  6E0F               	movwf	?_strlen,c
  8776  002390  5014               	movf	strlen@cp+1,w,c
  8777  002392  2012               	addwfc	??_strlen+1,w,c
  8778  002394  6E10               	movwf	?_strlen+1,c
  8779  002396  D000               	goto	l1138
  8780  002398                     l1138:
  8781  002398  0012               	return		;funcret
  8782  00239A                     __end_of_strlen:
  8783                           	opt stack 0
  8784                           tblptru	equ	0xFF8
  8785                           tblptrh	equ	0xFF7
  8786                           tblptrl	equ	0xFF6
  8787                           tablat	equ	0xFF5
  8788                           prodh	equ	0xFF4
  8789                           prodl	equ	0xFF3
  8790                           intcon	equ	0xFF2
  8791                           intcon2	equ	0xFF1
  8792                           intcon3	equ	0xFF0
  8793                           postinc0	equ	0xFEE
  8794                           wreg	equ	0xFE8
  8795                           postdec1	equ	0xFE5
  8796                           fsr1l	equ	0xFE1
  8797                           indf2	equ	0xFDF
  8798                           postinc2	equ	0xFDE
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _drawChar *****************
  8804 ;; Defined at:
  8805 ;;		line 480 in file "ST7735_TFT.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  x               1    wreg     unsigned char 
  8808 ;;  y               1   43[COMRAM] unsigned char 
  8809 ;;  c               1   44[COMRAM] unsigned char 
  8810 ;;  color           2   45[COMRAM] unsigned int 
  8811 ;;  bg              2   47[COMRAM] unsigned int 
  8812 ;;  size            1   49[COMRAM] unsigned char 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  x               1   51[COMRAM] unsigned char 
  8815 ;;  line            1   50[COMRAM] unsigned char 
  8816 ;;  i               1   53[COMRAM] unsigned char 
  8817 ;;  j               1   52[COMRAM] unsigned char 
  8818 ;; Return value:  Size  Location     Type
  8819 ;;		None               void
  8820 ;; Registers used:
  8821 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8827 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8830 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8831 ;;Total ram usage:       11 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    7
  8834 ;; This function calls:
  8835 ;;		___wmul
  8836 ;;		_drawPixel
  8837 ;;		_fillRect
  8838 ;; This function is called by:
  8839 ;;		_drawtext
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           	psect	text42
  8844  00100A                     __ptext42:
  8845                           	opt stack 0
  8846  00100A                     _drawChar:
  8847                           	opt stack 19
  8848                           
  8849                           ;incstack = 0
  8850                           ;drawChar@x stored from wreg
  8851  00100A  6E34               	movwf	drawChar@x,c
  8852                           
  8853                           ;ST7735_TFT.c: 482: char i, j;
  8854                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  8855  00100C  0E80               	movlw	128
  8856  00100E  6034               	cpfslt	drawChar@x,c
  8857  001010  D0A6               	goto	l203
  8858  001012  0E9F               	movlw	159
  8859  001014  642C               	cpfsgt	drawChar@y,c
  8860  001016  D001               	goto	l4220
  8861                           
  8862                           ;ST7735_TFT.c: 484: return;
  8863  001018  D0A2               	goto	l203
  8864  00101A                     l4220:
  8865                           
  8866                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  8867  00101A  5032               	movf	drawChar@size,w,c
  8868  00101C  A4D8               	btfss	status,2,c
  8869  00101E  D003               	goto	l4224
  8870  001020  0E01               	movlw	1
  8871  001022  6E32               	movwf	drawChar@size,c
  8872  001024  D000               	goto	l4224
  8873  001026                     l4224:
  8874                           
  8875                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8876  001026  0E1F               	movlw	31
  8877  001028  642D               	cpfsgt	drawChar@c,c
  8878  00102A  D004               	goto	l4228
  8879  00102C  0E7E               	movlw	126
  8880  00102E  642D               	cpfsgt	drawChar@c,c
  8881  001030  D003               	goto	l205
  8882  001032  D000               	goto	l4228
  8883  001034                     l4228:
  8884                           
  8885                           ;ST7735_TFT.c: 487: c = '?';
  8886  001034  0E3F               	movlw	63
  8887  001036  6E2D               	movwf	drawChar@c,c
  8888  001038                     l205:
  8889                           
  8890                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8891  001038  0E00               	movlw	0
  8892  00103A  6E36               	movwf	drawChar@i,c
  8893  00103C                     l4230:
  8894  00103C  0E04               	movlw	4
  8895  00103E  6436               	cpfsgt	drawChar@i,c
  8896  001040  D001               	goto	l4234
  8897  001042  D08D               	goto	l203
  8898  001044                     l4234:
  8899                           
  8900                           ;ST7735_TFT.c: 489: unsigned char line;
  8901                           ;ST7735_TFT.c: 490: if(c < 'S')
  8902  001044  0E53               	movlw	83
  8903  001046  602D               	cpfslt	drawChar@c,c
  8904  001048  D015               	goto	l4238
  8905                           
  8906                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8907  00104A  0EE0               	movlw	224
  8908  00104C  242D               	addwf	drawChar@c,w,c
  8909  00104E  6E0F               	movwf	___wmul@multiplier,c
  8910  001050  6A10               	clrf	___wmul@multiplier+1,c
  8911  001052  0EFF               	movlw	255
  8912  001054  2210               	addwfc	___wmul@multiplier+1,f,c
  8913  001056  0E00               	movlw	0
  8914  001058  6E12               	movwf	___wmul@multiplicand+1,c
  8915  00105A  0E05               	movlw	5
  8916  00105C  6E11               	movwf	___wmul@multiplicand,c
  8917  00105E  EC4D  F012         	call	___wmul	;wreg free
  8918  001062  5036               	movf	drawChar@i,w,c
  8919  001064  260F               	addwf	?___wmul,f,c
  8920  001066  0E00               	movlw	0
  8921  001068  2210               	addwfc	?___wmul+1,f,c
  8922  00106A  0EBB               	movlw	low _font
  8923  00106C  240F               	addwf	?___wmul,w,c
  8924  00106E  6EF6               	movwf	tblptrl,c
  8925  001070  0EFD               	movlw	high _font
  8926  001072  D014               	goto	L17
  8927  001074                     l4238:
  8928                           
  8929                           ;ST7735_TFT.c: 492: else
  8930                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8931  001074  0EAD               	movlw	173
  8932  001076  242D               	addwf	drawChar@c,w,c
  8933  001078  6E0F               	movwf	___wmul@multiplier,c
  8934  00107A  6A10               	clrf	___wmul@multiplier+1,c
  8935  00107C  0EFF               	movlw	255
  8936  00107E  2210               	addwfc	___wmul@multiplier+1,f,c
  8937  001080  0E00               	movlw	0
  8938  001082  6E12               	movwf	___wmul@multiplicand+1,c
  8939  001084  0E05               	movlw	5
  8940  001086  6E11               	movwf	___wmul@multiplicand,c
  8941  001088  EC4D  F012         	call	___wmul	;wreg free
  8942  00108C  5036               	movf	drawChar@i,w,c
  8943  00108E  260F               	addwf	?___wmul,f,c
  8944  001090  0E00               	movlw	0
  8945  001092  2210               	addwfc	?___wmul+1,f,c
  8946  001094  0EBA               	movlw	low _font2
  8947  001096  240F               	addwf	?___wmul,w,c
  8948  001098  6EF6               	movwf	tblptrl,c
  8949  00109A  0EFE               	movlw	high _font2
  8950  00109C                     L17:
  8951  00109C  2010               	addwfc	?___wmul+1,w,c
  8952  00109E  6EF7               	movwf	tblptrh,c
  8953  0010A0                     	if	0	;There are less than 3 active tblptr bytes
  8954  0010A0                     	endif
  8955  0010A0  0008               	tblrd		*
  8956  0010A2  CFF5 F033          	movff	tablat,drawChar@line
  8957  0010A6  D000               	goto	l4240
  8958  0010A8                     l4240:
  8959                           
  8960                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8961  0010A8  0E00               	movlw	0
  8962  0010AA  6E35               	movwf	drawChar@j,c
  8963  0010AC                     l4242:
  8964  0010AC  0E06               	movlw	6
  8965  0010AE  6435               	cpfsgt	drawChar@j,c
  8966  0010B0  D001               	goto	l212
  8967  0010B2  D053               	goto	l4266
  8968  0010B4                     l212:
  8969                           
  8970                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8971  0010B4  A033               	btfss	drawChar@line,0,c
  8972  0010B6  D023               	goto	l4252
  8973                           
  8974                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8975  0010B8  0432               	decf	drawChar@size,w,c
  8976  0010BA  A4D8               	btfss	status,2,c
  8977  0010BC  D00C               	goto	l4250
  8978  0010BE  502C               	movf	drawChar@y,w,c
  8979  0010C0  2435               	addwf	drawChar@j,w,c
  8980  0010C2  6E16               	movwf	drawPixel@y,c
  8981  0010C4  C02E  F017         	movff	drawChar@color,drawPixel@color
  8982  0010C8  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  8983  0010CC  5034               	movf	drawChar@x,w,c
  8984  0010CE  2436               	addwf	drawChar@i,w,c
  8985  0010D0  EC20  F012         	call	_drawPixel
  8986  0010D4  D03E               	goto	l4260
  8987  0010D6                     l4250:
  8988                           
  8989                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8990  0010D6  5035               	movf	drawChar@j,w,c
  8991  0010D8  0232               	mulwf	drawChar@size,c
  8992  0010DA  50F3               	movf	prodl,w,c
  8993  0010DC  242C               	addwf	drawChar@y,w,c
  8994  0010DE  6E21               	movwf	fillRect@y,c
  8995  0010E0  C032  F022         	movff	drawChar@size,fillRect@w
  8996  0010E4  C032  F023         	movff	drawChar@size,fillRect@h
  8997  0010E8  C02E  F024         	movff	drawChar@color,fillRect@color
  8998  0010EC  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  8999  0010F0  5036               	movf	drawChar@i,w,c
  9000  0010F2  0232               	mulwf	drawChar@size,c
  9001  0010F4  50F3               	movf	prodl,w,c
  9002  0010F6  2434               	addwf	drawChar@x,w,c
  9003  0010F8  ECB8  F010         	call	_fillRect
  9004                           
  9005                           ;ST7735_TFT.c: 498: }
  9006  0010FC  D02A               	goto	l4260
  9007  0010FE                     l4252:
  9008                           
  9009                           ;ST7735_TFT.c: 499: else if(bg != color) {
  9010  0010FE  502E               	movf	drawChar@color,w,c
  9011  001100  1830               	xorwf	drawChar@bg,w,c
  9012  001102  E104               	bnz	u2880
  9013  001104  502F               	movf	drawChar@color+1,w,c
  9014  001106  1831               	xorwf	drawChar@bg+1,w,c
  9015  001108  B4D8               	btfsc	status,2,c
  9016  00110A  D023               	goto	l4260
  9017  00110C                     u2880:
  9018                           
  9019                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  9020  00110C  0432               	decf	drawChar@size,w,c
  9021  00110E  A4D8               	btfss	status,2,c
  9022  001110  D00C               	goto	l4258
  9023  001112  502C               	movf	drawChar@y,w,c
  9024  001114  2435               	addwf	drawChar@j,w,c
  9025  001116  6E16               	movwf	drawPixel@y,c
  9026  001118  C030  F017         	movff	drawChar@bg,drawPixel@color
  9027  00111C  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  9028  001120  5034               	movf	drawChar@x,w,c
  9029  001122  2436               	addwf	drawChar@i,w,c
  9030  001124  EC20  F012         	call	_drawPixel
  9031  001128  D014               	goto	l4260
  9032  00112A                     l4258:
  9033                           
  9034                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  9035  00112A  5035               	movf	drawChar@j,w,c
  9036  00112C  0232               	mulwf	drawChar@size,c
  9037  00112E  50F3               	movf	prodl,w,c
  9038  001130  242C               	addwf	drawChar@y,w,c
  9039  001132  6E21               	movwf	fillRect@y,c
  9040  001134  C032  F022         	movff	drawChar@size,fillRect@w
  9041  001138  C032  F023         	movff	drawChar@size,fillRect@h
  9042  00113C  C030  F024         	movff	drawChar@bg,fillRect@color
  9043  001140  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  9044  001144  5036               	movf	drawChar@i,w,c
  9045  001146  0232               	mulwf	drawChar@size,c
  9046  001148  50F3               	movf	prodl,w,c
  9047  00114A  2434               	addwf	drawChar@x,w,c
  9048  00114C  ECB8  F010         	call	_fillRect
  9049  001150  D000               	goto	l4260
  9050  001152                     l4260:
  9051  001152  2A35               	incf	drawChar@j,f,c
  9052  001154  90D8               	bcf	status,0,c
  9053  001156  3233               	rrcf	drawChar@line,f,c
  9054  001158  D7A9               	goto	l4242
  9055  00115A                     l4266:
  9056  00115A  2A36               	incf	drawChar@i,f,c
  9057  00115C  D76F               	goto	l4230
  9058  00115E                     l203:
  9059  00115E  0012               	return		;funcret
  9060  001160                     __end_of_drawChar:
  9061                           	opt stack 0
  9062                           tblptru	equ	0xFF8
  9063                           tblptrh	equ	0xFF7
  9064                           tblptrl	equ	0xFF6
  9065                           tablat	equ	0xFF5
  9066                           prodh	equ	0xFF4
  9067                           prodl	equ	0xFF3
  9068                           intcon	equ	0xFF2
  9069                           intcon2	equ	0xFF1
  9070                           intcon3	equ	0xFF0
  9071                           postinc0	equ	0xFEE
  9072                           wreg	equ	0xFE8
  9073                           postdec1	equ	0xFE5
  9074                           fsr1l	equ	0xFE1
  9075                           indf2	equ	0xFDF
  9076                           postinc2	equ	0xFDE
  9077                           fsr2h	equ	0xFDA
  9078                           fsr2l	equ	0xFD9
  9079                           status	equ	0xFD8
  9080                           
  9081 ;; *************** function _fillRect *****************
  9082 ;; Defined at:
  9083 ;;		line 470 in file "ST7735_TFT.c"
  9084 ;; Parameters:    Size  Location     Type
  9085 ;;  x               1    wreg     unsigned char 
  9086 ;;  y               1   32[COMRAM] unsigned char 
  9087 ;;  w               1   33[COMRAM] unsigned char 
  9088 ;;  h               1   34[COMRAM] unsigned char 
  9089 ;;  color           2   35[COMRAM] unsigned int 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  x               1   40[COMRAM] unsigned char 
  9092 ;;  i               2   41[COMRAM] int 
  9093 ;; Return value:  Size  Location     Type
  9094 ;;		None               void
  9095 ;; Registers used:
  9096 ;;		wreg, status,2, status,0, cstack
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9102 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;Total ram usage:       11 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    6
  9109 ;; This function calls:
  9110 ;;		_drawFastVLine
  9111 ;; This function is called by:
  9112 ;;		_drawChar
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           	psect	text43
  9117  002170                     __ptext43:
  9118                           	opt stack 0
  9119  002170                     _fillRect:
  9120                           	opt stack 19
  9121                           
  9122                           ;incstack = 0
  9123                           ;fillRect@x stored from wreg
  9124  002170  6E29               	movwf	fillRect@x,c
  9125                           
  9126                           ;ST7735_TFT.c: 472: signed int i;
  9127                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  9128  002172  C029  F02A         	movff	fillRect@x,fillRect@i
  9129  002176  6A2B               	clrf	fillRect@i+1,c
  9130  002178  D00E               	goto	l4208
  9131  00217A                     l4204:
  9132                           
  9133                           ;ST7735_TFT.c: 475: {
  9134                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  9135  00217A  C021  F016         	movff	fillRect@y,drawFastVLine@y
  9136  00217E  C023  F017         	movff	fillRect@h,drawFastVLine@h
  9137  002182  C024  F018         	movff	fillRect@color,drawFastVLine@color
  9138  002186  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  9139  00218A  502A               	movf	fillRect@i,w,c
  9140  00218C  EC6F  F00E         	call	_drawFastVLine
  9141  002190  4A2A               	infsnz	fillRect@i,f,c
  9142  002192  2A2B               	incf	fillRect@i+1,f,c
  9143  002194  D000               	goto	l4208
  9144  002196                     l4208:
  9145  002196  5022               	movf	fillRect@w,w,c
  9146  002198  C029  F026         	movff	fillRect@x,??_fillRect
  9147  00219C  6A27               	clrf	(??_fillRect+1)& (0+255),c
  9148  00219E  2626               	addwf	??_fillRect,f,c
  9149  0021A0  0E00               	movlw	0
  9150  0021A2  2227               	addwfc	??_fillRect+1,f,c
  9151  0021A4  5026               	movf	??_fillRect,w,c
  9152  0021A6  5C2A               	subwf	fillRect@i,w,c
  9153  0021A8  502B               	movf	fillRect@i+1,w,c
  9154  0021AA  0A80               	xorlw	128
  9155  0021AC  6E28               	movwf	(??_fillRect+2)& (0+255),c
  9156  0021AE  5027               	movf	??_fillRect+1,w,c
  9157  0021B0  0A80               	xorlw	128
  9158  0021B2  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  9159  0021B4  A0D8               	btfss	status,0,c
  9160  0021B6  D7E1               	goto	l4204
  9161  0021B8  0012               	return		;funcret
  9162  0021BA                     __end_of_fillRect:
  9163                           	opt stack 0
  9164                           tblptru	equ	0xFF8
  9165                           tblptrh	equ	0xFF7
  9166                           tblptrl	equ	0xFF6
  9167                           tablat	equ	0xFF5
  9168                           prodh	equ	0xFF4
  9169                           prodl	equ	0xFF3
  9170                           intcon	equ	0xFF2
  9171                           intcon2	equ	0xFF1
  9172                           intcon3	equ	0xFF0
  9173                           postinc0	equ	0xFEE
  9174                           wreg	equ	0xFE8
  9175                           postdec1	equ	0xFE5
  9176                           fsr1l	equ	0xFE1
  9177                           indf2	equ	0xFDF
  9178                           postinc2	equ	0xFDE
  9179                           fsr2h	equ	0xFDA
  9180                           fsr2l	equ	0xFD9
  9181                           status	equ	0xFD8
  9182                           
  9183 ;; *************** function _drawFastVLine *****************
  9184 ;; Defined at:
  9185 ;;		line 449 in file "ST7735_TFT.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;  x               1    wreg     unsigned char 
  9188 ;;  y               1   21[COMRAM] unsigned char 
  9189 ;;  h               1   22[COMRAM] unsigned char 
  9190 ;;  color           2   23[COMRAM] unsigned int 
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;  x               1   31[COMRAM] unsigned char 
  9193 ;;  lo              1   30[COMRAM] unsigned char 
  9194 ;;  hi              1   29[COMRAM] unsigned char 
  9195 ;; Return value:  Size  Location     Type
  9196 ;;		None               void
  9197 ;; Registers used:
  9198 ;;		wreg, status,2, status,0, cstack
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;Total ram usage:       11 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    5
  9211 ;; This function calls:
  9212 ;;		_setAddrWindow
  9213 ;;		_spiwrite
  9214 ;; This function is called by:
  9215 ;;		_fillRect
  9216 ;;		_fillCircleHelper
  9217 ;;		_fillCircle
  9218 ;;		_drawRect
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           	psect	text44
  9223  001CDE                     __ptext44:
  9224                           	opt stack 0
  9225  001CDE                     _drawFastVLine:
  9226                           	opt stack 19
  9227                           
  9228                           ;incstack = 0
  9229                           ;drawFastVLine@x stored from wreg
  9230  001CDE  6E20               	movwf	drawFastVLine@x,c
  9231                           
  9232                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  9233                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  9234  001CE0  0E80               	movlw	128
  9235  001CE2  6020               	cpfslt	drawFastVLine@x,c
  9236  001CE4  D03F               	goto	l187
  9237  001CE6  0E9F               	movlw	159
  9238  001CE8  6416               	cpfsgt	drawFastVLine@y,c
  9239  001CEA  D001               	goto	l4174
  9240                           
  9241                           ;ST7735_TFT.c: 453: return;
  9242  001CEC  D03B               	goto	l187
  9243  001CEE                     l4174:
  9244                           
  9245                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  9246  001CEE  0EFF               	movlw	255
  9247  001CF0  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9248  001CF2  0EFF               	movlw	255
  9249  001CF4  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  9250  001CF6  5017               	movf	drawFastVLine@h,w,c
  9251  001CF8  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  9252  001CFC  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  9253  001CFE  261C               	addwf	??_drawFastVLine+2,f,c
  9254  001D00  0E00               	movlw	0
  9255  001D02  221D               	addwfc	??_drawFastVLine+3,f,c
  9256  001D04  501A               	movf	??_drawFastVLine,w,c
  9257  001D06  261C               	addwf	??_drawFastVLine+2,f,c
  9258  001D08  501B               	movf	??_drawFastVLine+1,w,c
  9259  001D0A  221D               	addwfc	??_drawFastVLine+3,f,c
  9260  001D0C  BE1D               	btfsc	??_drawFastVLine+3,7,c
  9261  001D0E  D00B               	goto	l4178
  9262  001D10  501D               	movf	??_drawFastVLine+3,w,c
  9263  001D12  E104               	bnz	u2730
  9264  001D14  0EA0               	movlw	160
  9265  001D16  5C1C               	subwf	??_drawFastVLine+2,w,c
  9266  001D18  A0D8               	btfss	status,0,c
  9267  001D1A  D005               	goto	l4178
  9268  001D1C                     u2730:
  9269                           
  9270                           ;ST7735_TFT.c: 455: h = 160 - y;
  9271  001D1C  5016               	movf	drawFastVLine@y,w,c
  9272  001D1E  0800               	sublw	0
  9273  001D20  0FA0               	addlw	160
  9274  001D22  6E17               	movwf	drawFastVLine@h,c
  9275  001D24  D000               	goto	l4178
  9276  001D26                     l4178:
  9277                           
  9278                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  9279  001D26  5019               	movf	drawFastVLine@color+1,w,c
  9280  001D28  6E1E               	movwf	drawFastVLine@hi,c
  9281  001D2A  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  9282                           
  9283                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  9284  001D2E  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  9285  001D32  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  9286  001D36  5016               	movf	drawFastVLine@y,w,c
  9287  001D38  2417               	addwf	drawFastVLine@h,w,c
  9288  001D3A  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9289  001D3C  041A               	decf	??_drawFastVLine,w,c
  9290  001D3E  6E14               	movwf	setAddrWindow@y1,c
  9291  001D40  5020               	movf	drawFastVLine@x,w,c
  9292  001D42  EC91  F010         	call	_setAddrWindow
  9293                           
  9294                           ;ST7735_TFT.c: 458: PORTDbits.RD0 = 1;
  9295  001D46  8083               	bsf	3971,0,c	;volatile
  9296                           
  9297                           ;ST7735_TFT.c: 459: PORTDbits.RD1 = 0;
  9298  001D48  9283               	bcf	3971,1,c	;volatile
  9299                           
  9300                           ;ST7735_TFT.c: 461: while (h--) {
  9301  001D4A  D007               	goto	l4190
  9302  001D4C                     l4188:
  9303                           
  9304                           ;ST7735_TFT.c: 462: spiwrite(hi);
  9305  001D4C  501E               	movf	drawFastVLine@hi,w,c
  9306  001D4E  ECCF  F012         	call	_spiwrite
  9307                           
  9308                           ;ST7735_TFT.c: 463: spiwrite(lo);
  9309  001D52  501F               	movf	drawFastVLine@lo,w,c
  9310  001D54  ECCF  F012         	call	_spiwrite
  9311  001D58  D000               	goto	l4190
  9312  001D5A                     l4190:
  9313  001D5A  0617               	decf	drawFastVLine@h,f,c
  9314  001D5C  2817               	incf	drawFastVLine@h,w,c
  9315  001D5E  A4D8               	btfss	status,2,c
  9316  001D60  D7F5               	goto	l4188
  9317                           
  9318                           ;ST7735_TFT.c: 464: }
  9319                           ;ST7735_TFT.c: 465: PORTDbits.RD1 = 1;
  9320  001D62  8283               	bsf	3971,1,c	;volatile
  9321  001D64                     l187:
  9322  001D64  0012               	return		;funcret
  9323  001D66                     __end_of_drawFastVLine:
  9324                           	opt stack 0
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           intcon	equ	0xFF2
  9332                           intcon2	equ	0xFF1
  9333                           intcon3	equ	0xFF0
  9334                           postinc0	equ	0xFEE
  9335                           wreg	equ	0xFE8
  9336                           postdec1	equ	0xFE5
  9337                           fsr1l	equ	0xFE1
  9338                           indf2	equ	0xFDF
  9339                           postinc2	equ	0xFDE
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _drawPixel *****************
  9345 ;; Defined at:
  9346 ;;		line 440 in file "ST7735_TFT.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  x               1    wreg     unsigned char 
  9349 ;;  y               1   21[COMRAM] unsigned char 
  9350 ;;  color           2   22[COMRAM] unsigned int 
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;  x               1   24[COMRAM] unsigned char 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;		None               void
  9355 ;; Registers used:
  9356 ;;		wreg, status,2, status,0, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9362 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;Total ram usage:        4 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    5
  9369 ;; This function calls:
  9370 ;;		_setAddrWindow
  9371 ;;		_write_data
  9372 ;; This function is called by:
  9373 ;;		_drawChar
  9374 ;;		_drawCircle
  9375 ;;		_drawCircleHelper
  9376 ;; This function uses a non-reentrant model
  9377 ;;
  9378                           
  9379                           	psect	text45
  9380  002440                     __ptext45:
  9381                           	opt stack 0
  9382  002440                     _drawPixel:
  9383                           	opt stack 20
  9384                           
  9385                           ;incstack = 0
  9386                           ;drawPixel@x stored from wreg
  9387  002440  6E19               	movwf	drawPixel@x,c
  9388                           
  9389                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  9390  002442  0E80               	movlw	128
  9391  002444  6019               	cpfslt	drawPixel@x,c
  9392  002446  D013               	goto	l181
  9393  002448  0E9F               	movlw	159
  9394  00244A  6416               	cpfsgt	drawPixel@y,c
  9395  00244C  D001               	goto	l4196
  9396                           
  9397                           ;ST7735_TFT.c: 443: return;
  9398  00244E  D00F               	goto	l181
  9399  002450                     l4196:
  9400                           
  9401                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  9402  002450  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  9403  002454  2819               	incf	drawPixel@x,w,c
  9404  002456  6E13               	movwf	setAddrWindow@x1,c
  9405  002458  2816               	incf	drawPixel@y,w,c
  9406  00245A  6E14               	movwf	setAddrWindow@y1,c
  9407  00245C  5019               	movf	drawPixel@x,w,c
  9408  00245E  EC91  F010         	call	_setAddrWindow
  9409                           
  9410                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  9411  002462  5018               	movf	drawPixel@color+1,w,c
  9412  002464  ECFD  F012         	call	_write_data
  9413                           
  9414                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  9415  002468  5017               	movf	drawPixel@color,w,c
  9416  00246A  ECFD  F012         	call	_write_data
  9417  00246E                     l181:
  9418  00246E  0012               	return		;funcret
  9419  002470                     __end_of_drawPixel:
  9420                           	opt stack 0
  9421                           tblptru	equ	0xFF8
  9422                           tblptrh	equ	0xFF7
  9423                           tblptrl	equ	0xFF6
  9424                           tablat	equ	0xFF5
  9425                           prodh	equ	0xFF4
  9426                           prodl	equ	0xFF3
  9427                           intcon	equ	0xFF2
  9428                           intcon2	equ	0xFF1
  9429                           intcon3	equ	0xFF0
  9430                           postinc0	equ	0xFEE
  9431                           wreg	equ	0xFE8
  9432                           postdec1	equ	0xFE5
  9433                           fsr1l	equ	0xFE1
  9434                           indf2	equ	0xFDF
  9435                           postinc2	equ	0xFDE
  9436                           fsr2h	equ	0xFDA
  9437                           fsr2l	equ	0xFD9
  9438                           status	equ	0xFD8
  9439                           
  9440 ;; *************** function _setAddrWindow *****************
  9441 ;; Defined at:
  9442 ;;		line 425 in file "ST7735_TFT.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;  x0              1    wreg     unsigned char 
  9445 ;;  y0              1   17[COMRAM] unsigned char 
  9446 ;;  x1              1   18[COMRAM] unsigned char 
  9447 ;;  y1              1   19[COMRAM] unsigned char 
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;  x0              1   20[COMRAM] unsigned char 
  9450 ;; Return value:  Size  Location     Type
  9451 ;;		None               void
  9452 ;; Registers used:
  9453 ;;		wreg, status,2, status,0, cstack
  9454 ;; Tracked objects:
  9455 ;;		On entry : 0/0
  9456 ;;		On exit  : 0/0
  9457 ;;		Unchanged: 0/0
  9458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9459 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;Total ram usage:        4 bytes
  9464 ;; Hardware stack levels used:    1
  9465 ;; Hardware stack levels required when called:    4
  9466 ;; This function calls:
  9467 ;;		_write_command
  9468 ;;		_write_data
  9469 ;; This function is called by:
  9470 ;;		_drawPixel
  9471 ;;		_drawFastVLine
  9472 ;;		_fillRectangle
  9473 ;;		_drawFastHLine
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           	psect	text46
  9478  002122                     __ptext46:
  9479                           	opt stack 0
  9480  002122                     _setAddrWindow:
  9481                           	opt stack 19
  9482                           
  9483                           ;incstack = 0
  9484                           ;setAddrWindow@x0 stored from wreg
  9485  002122  6E15               	movwf	setAddrWindow@x0,c
  9486                           
  9487                           ;ST7735_TFT.c: 427: write_command(0x2A);
  9488  002124  0E2A               	movlw	42
  9489  002126  EC05  F013         	call	_write_command
  9490                           
  9491                           ;ST7735_TFT.c: 428: write_data(0);
  9492  00212A  0E00               	movlw	0
  9493  00212C  ECFD  F012         	call	_write_data
  9494                           
  9495                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  9496  002130  5015               	movf	setAddrWindow@x0,w,c
  9497  002132  246E               	addwf	_colstart,w,c
  9498  002134  ECFD  F012         	call	_write_data
  9499                           
  9500                           ;ST7735_TFT.c: 430: write_data(0);
  9501  002138  0E00               	movlw	0
  9502  00213A  ECFD  F012         	call	_write_data
  9503                           
  9504                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  9505  00213E  5013               	movf	setAddrWindow@x1,w,c
  9506  002140  246E               	addwf	_colstart,w,c
  9507  002142  ECFD  F012         	call	_write_data
  9508                           
  9509                           ;ST7735_TFT.c: 432: write_command(0x2B);
  9510  002146  0E2B               	movlw	43
  9511  002148  EC05  F013         	call	_write_command
  9512                           
  9513                           ;ST7735_TFT.c: 433: write_data(0);
  9514  00214C  0E00               	movlw	0
  9515  00214E  ECFD  F012         	call	_write_data
  9516                           
  9517                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  9518  002152  5012               	movf	setAddrWindow@y0,w,c
  9519  002154  2471               	addwf	_rowstart,w,c
  9520  002156  ECFD  F012         	call	_write_data
  9521                           
  9522                           ;ST7735_TFT.c: 435: write_data(0);
  9523  00215A  0E00               	movlw	0
  9524  00215C  ECFD  F012         	call	_write_data
  9525                           
  9526                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  9527  002160  5014               	movf	setAddrWindow@y1,w,c
  9528  002162  2471               	addwf	_rowstart,w,c
  9529  002164  ECFD  F012         	call	_write_data
  9530                           
  9531                           ;ST7735_TFT.c: 437: write_command(0x2C);
  9532  002168  0E2C               	movlw	44
  9533  00216A  EC05  F013         	call	_write_command
  9534  00216E  0012               	return		;funcret
  9535  002170                     __end_of_setAddrWindow:
  9536                           	opt stack 0
  9537                           tblptru	equ	0xFF8
  9538                           tblptrh	equ	0xFF7
  9539                           tblptrl	equ	0xFF6
  9540                           tablat	equ	0xFF5
  9541                           prodh	equ	0xFF4
  9542                           prodl	equ	0xFF3
  9543                           intcon	equ	0xFF2
  9544                           intcon2	equ	0xFF1
  9545                           intcon3	equ	0xFF0
  9546                           postinc0	equ	0xFEE
  9547                           wreg	equ	0xFE8
  9548                           postdec1	equ	0xFE5
  9549                           fsr1l	equ	0xFE1
  9550                           indf2	equ	0xFDF
  9551                           postinc2	equ	0xFDE
  9552                           fsr2h	equ	0xFDA
  9553                           fsr2l	equ	0xFD9
  9554                           status	equ	0xFD8
  9555                           
  9556 ;; *************** function _write_data *****************
  9557 ;; Defined at:
  9558 ;;		line 242 in file "ST7735_TFT.c"
  9559 ;; Parameters:    Size  Location     Type
  9560 ;;  data_           1    wreg     unsigned char 
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;  data_           1   16[COMRAM] unsigned char 
  9563 ;; Return value:  Size  Location     Type
  9564 ;;		None               void
  9565 ;; Registers used:
  9566 ;;		wreg, status,2, cstack
  9567 ;; Tracked objects:
  9568 ;;		On entry : 0/0
  9569 ;;		On exit  : 0/0
  9570 ;;		Unchanged: 0/0
  9571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9573 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;Total ram usage:        1 bytes
  9577 ;; Hardware stack levels used:    1
  9578 ;; Hardware stack levels required when called:    3
  9579 ;; This function calls:
  9580 ;;		_spiwrite
  9581 ;; This function is called by:
  9582 ;;		_Rcmd1
  9583 ;;		_Rcmd2red
  9584 ;;		_Rcmd3
  9585 ;;		_setAddrWindow
  9586 ;;		_drawPixel
  9587 ;;		_TFT_GreenTab_Initialize
  9588 ;;		_Bcmd
  9589 ;;		_setScrollDefinition
  9590 ;;		_Rcmd2green
  9591 ;;		_VerticalScroll
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           	psect	text47
  9596  0025FA                     __ptext47:
  9597                           	opt stack 0
  9598  0025FA                     _write_data:
  9599                           	opt stack 19
  9600                           
  9601                           ;incstack = 0
  9602                           ;write_data@data_ stored from wreg
  9603  0025FA  6E11               	movwf	write_data@data_,c
  9604                           
  9605                           ;ST7735_TFT.c: 244: PORTDbits.RD1 = 0;
  9606  0025FC  9283               	bcf	3971,1,c	;volatile
  9607                           
  9608                           ;ST7735_TFT.c: 245: PORTDbits.RD0 = 1;
  9609  0025FE  8083               	bsf	3971,0,c	;volatile
  9610                           
  9611                           ;ST7735_TFT.c: 246: spiwrite(data_);
  9612  002600  5011               	movf	write_data@data_,w,c
  9613  002602  ECCF  F012         	call	_spiwrite
  9614                           
  9615                           ;ST7735_TFT.c: 247: PORTDbits.RD1 = 1;
  9616  002606  8283               	bsf	3971,1,c	;volatile
  9617  002608  0012               	return		;funcret
  9618  00260A                     __end_of_write_data:
  9619                           	opt stack 0
  9620                           tblptru	equ	0xFF8
  9621                           tblptrh	equ	0xFF7
  9622                           tblptrl	equ	0xFF6
  9623                           tablat	equ	0xFF5
  9624                           prodh	equ	0xFF4
  9625                           prodl	equ	0xFF3
  9626                           intcon	equ	0xFF2
  9627                           intcon2	equ	0xFF1
  9628                           intcon3	equ	0xFF0
  9629                           postinc0	equ	0xFEE
  9630                           wreg	equ	0xFE8
  9631                           postdec1	equ	0xFE5
  9632                           fsr1l	equ	0xFE1
  9633                           indf2	equ	0xFDF
  9634                           postinc2	equ	0xFDE
  9635                           fsr2h	equ	0xFDA
  9636                           fsr2l	equ	0xFD9
  9637                           status	equ	0xFD8
  9638                           
  9639 ;; *************** function _write_command *****************
  9640 ;; Defined at:
  9641 ;;		line 231 in file "ST7735_TFT.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;  cmd_            1    wreg     unsigned char 
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;  cmd_            1   16[COMRAM] unsigned char 
  9646 ;; Return value:  Size  Location     Type
  9647 ;;		None               void
  9648 ;; Registers used:
  9649 ;;		wreg, status,2, cstack
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;Total ram usage:        1 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; Hardware stack levels required when called:    3
  9662 ;; This function calls:
  9663 ;;		_spiwrite
  9664 ;; This function is called by:
  9665 ;;		_Rcmd1
  9666 ;;		_Rcmd2red
  9667 ;;		_Rcmd3
  9668 ;;		_setAddrWindow
  9669 ;;		_TFT_GreenTab_Initialize
  9670 ;;		_Bcmd
  9671 ;;		_setScrollDefinition
  9672 ;;		_Rcmd2green
  9673 ;;		_VerticalScroll
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text48
  9678  00260A                     __ptext48:
  9679                           	opt stack 0
  9680  00260A                     _write_command:
  9681                           	opt stack 19
  9682                           
  9683                           ;incstack = 0
  9684                           ;write_command@cmd_ stored from wreg
  9685  00260A  6E11               	movwf	write_command@cmd_,c
  9686                           
  9687                           ;ST7735_TFT.c: 233: PORTDbits.RD1 = 0;
  9688  00260C  9283               	bcf	3971,1,c	;volatile
  9689                           
  9690                           ;ST7735_TFT.c: 235: PORTDbits.RD0 = 0;
  9691  00260E  9083               	bcf	3971,0,c	;volatile
  9692                           
  9693                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  9694  002610  5011               	movf	write_command@cmd_,w,c
  9695  002612  ECCF  F012         	call	_spiwrite
  9696                           
  9697                           ;ST7735_TFT.c: 238: PORTDbits.RD1 = 1;
  9698  002616  8283               	bsf	3971,1,c	;volatile
  9699  002618  0012               	return		;funcret
  9700  00261A                     __end_of_write_command:
  9701                           	opt stack 0
  9702                           tblptru	equ	0xFF8
  9703                           tblptrh	equ	0xFF7
  9704                           tblptrl	equ	0xFF6
  9705                           tablat	equ	0xFF5
  9706                           prodh	equ	0xFF4
  9707                           prodl	equ	0xFF3
  9708                           intcon	equ	0xFF2
  9709                           intcon2	equ	0xFF1
  9710                           intcon3	equ	0xFF0
  9711                           postinc0	equ	0xFEE
  9712                           wreg	equ	0xFE8
  9713                           postdec1	equ	0xFE5
  9714                           fsr1l	equ	0xFE1
  9715                           indf2	equ	0xFDF
  9716                           postinc2	equ	0xFDE
  9717                           fsr2h	equ	0xFDA
  9718                           fsr2l	equ	0xFD9
  9719                           status	equ	0xFD8
  9720                           
  9721 ;; *************** function _spiwrite *****************
  9722 ;; Defined at:
  9723 ;;		line 222 in file "ST7735_TFT.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;  spidata         1    wreg     unsigned char 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  spidata         1   15[COMRAM] unsigned char 
  9728 ;;  x               1   14[COMRAM] unsigned char 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;		None               void
  9731 ;; Registers used:
  9732 ;;		wreg
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;Total ram usage:        2 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:    2
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_write_command
  9749 ;;		_write_data
  9750 ;;		_drawFastVLine
  9751 ;;		_fillRectangle
  9752 ;;		_drawFastHLine
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           	psect	text49
  9757  00259E                     __ptext49:
  9758                           	opt stack 0
  9759  00259E                     _spiwrite:
  9760                           	opt stack 21
  9761                           
  9762                           ;incstack = 0
  9763                           ;spiwrite@spidata stored from wreg
  9764  00259E  6E10               	movwf	spiwrite@spidata,c
  9765                           
  9766                           ;ST7735_TFT.c: 224: char x;
  9767                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  9768  0025A0  969E               	bcf	3998,3,c	;volatile
  9769                           
  9770                           ;ST7735_TFT.c: 226: x = SSPBUF;
  9771  0025A2  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  9772                           
  9773                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  9774  0025A6  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9775                           
  9776                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  9777  0025AA  D000               	goto	l137
  9778  0025AC                     l137:
  9779  0025AC  A0C7               	btfss	4039,0,c	;volatile
  9780  0025AE  D7FE               	goto	l137
  9781  0025B0  0012               	return		;funcret
  9782  0025B2                     __end_of_spiwrite:
  9783                           	opt stack 0
  9784                           tblptru	equ	0xFF8
  9785                           tblptrh	equ	0xFF7
  9786                           tblptrl	equ	0xFF6
  9787                           tablat	equ	0xFF5
  9788                           prodh	equ	0xFF4
  9789                           prodl	equ	0xFF3
  9790                           intcon	equ	0xFF2
  9791                           intcon2	equ	0xFF1
  9792                           intcon3	equ	0xFF0
  9793                           postinc0	equ	0xFEE
  9794                           wreg	equ	0xFE8
  9795                           postdec1	equ	0xFE5
  9796                           fsr1l	equ	0xFE1
  9797                           indf2	equ	0xFDF
  9798                           postinc2	equ	0xFDE
  9799                           fsr2h	equ	0xFDA
  9800                           fsr2l	equ	0xFD9
  9801                           status	equ	0xFD8
  9802                           
  9803 ;; *************** function ___wmul *****************
  9804 ;; Defined at:
  9805 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  multiplier      2   14[COMRAM] unsigned int 
  9808 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;  product         2   18[COMRAM] unsigned int 
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  2   14[COMRAM] unsigned int 
  9813 ;; Registers used:
  9814 ;;		wreg, status,2, status,0, prodl, prodh
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;Total ram usage:        6 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; Hardware stack levels required when called:    2
  9827 ;; This function calls:
  9828 ;;		Nothing
  9829 ;; This function is called by:
  9830 ;;		_delay_ms
  9831 ;;		_drawChar
  9832 ;;		_main
  9833 ;;		_update_LCD_misc
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           	psect	text50
  9838  00249A                     __ptext50:
  9839                           	opt stack 0
  9840  00249A                     ___wmul:
  9841                           	opt stack 28
  9842                           
  9843                           ;incstack = 0
  9844  00249A  500F               	movf	___wmul@multiplier,w,c
  9845  00249C  0211               	mulwf	___wmul@multiplicand,c
  9846  00249E  CFF3 F013          	movff	prodl,___wmul@product
  9847  0024A2  CFF4 F014          	movff	prodh,___wmul@product+1
  9848  0024A6  500F               	movf	___wmul@multiplier,w,c
  9849  0024A8  0212               	mulwf	___wmul@multiplicand+1,c
  9850  0024AA  50F3               	movf	prodl,w,c
  9851  0024AC  2614               	addwf	___wmul@product+1,f,c
  9852  0024AE  5010               	movf	___wmul@multiplier+1,w,c
  9853  0024B0  0211               	mulwf	___wmul@multiplicand,c
  9854  0024B2  50F3               	movf	prodl,w,c
  9855  0024B4  2614               	addwf	___wmul@product+1,f,c
  9856  0024B6  C013  F00F         	movff	___wmul@product,?___wmul
  9857  0024BA  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9858  0024BE  D000               	goto	l581
  9859  0024C0                     l581:
  9860  0024C0  0012               	return		;funcret
  9861  0024C2                     __end_of___wmul:
  9862                           	opt stack 0
  9863                           tblptru	equ	0xFF8
  9864                           tblptrh	equ	0xFF7
  9865                           tblptrl	equ	0xFF6
  9866                           tablat	equ	0xFF5
  9867                           prodh	equ	0xFF4
  9868                           prodl	equ	0xFF3
  9869                           intcon	equ	0xFF2
  9870                           intcon2	equ	0xFF1
  9871                           intcon3	equ	0xFF0
  9872                           postinc0	equ	0xFEE
  9873                           wreg	equ	0xFE8
  9874                           postdec1	equ	0xFE5
  9875                           fsr1l	equ	0xFE1
  9876                           indf2	equ	0xFDF
  9877                           postinc2	equ	0xFDE
  9878                           fsr2h	equ	0xFDA
  9879                           fsr2l	equ	0xFD9
  9880                           status	equ	0xFD8
  9881                           
  9882 ;; *************** function ___awmod *****************
  9883 ;; Defined at:
  9884 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  9885 ;; Parameters:    Size  Location     Type
  9886 ;;  dividend        2   14[COMRAM] int 
  9887 ;;  divisor         2   16[COMRAM] int 
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;  sign            1   19[COMRAM] unsigned char 
  9890 ;;  counter         1   18[COMRAM] unsigned char 
  9891 ;; Return value:  Size  Location     Type
  9892 ;;                  2   14[COMRAM] int 
  9893 ;; Registers used:
  9894 ;;		wreg, status,2, status,0
  9895 ;; Tracked objects:
  9896 ;;		On entry : 0/0
  9897 ;;		On exit  : 0/0
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9903 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;Total ram usage:        6 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; Hardware stack levels required when called:    2
  9907 ;; This function calls:
  9908 ;;		Nothing
  9909 ;; This function is called by:
  9910 ;;		_update_LCD_count
  9911 ;;		_update_LCD_PED_Count
  9912 ;; This function uses a non-reentrant model
  9913 ;;
  9914                           
  9915                           	psect	text51
  9916  001E6E                     __ptext51:
  9917                           	opt stack 0
  9918  001E6E                     ___awmod:
  9919                           	opt stack 25
  9920                           
  9921                           ;incstack = 0
  9922  001E6E  0E00               	movlw	0
  9923  001E70  6E14               	movwf	___awmod@sign,c
  9924  001E72  AE10               	btfss	___awmod@dividend+1,7,c
  9925  001E74  D007               	goto	l4666
  9926  001E76  6C0F               	negf	___awmod@dividend,c
  9927  001E78  1E10               	comf	___awmod@dividend+1,f,c
  9928  001E7A  B0D8               	btfsc	status,0,c
  9929  001E7C  2A10               	incf	___awmod@dividend+1,f,c
  9930  001E7E  0E01               	movlw	1
  9931  001E80  6E14               	movwf	___awmod@sign,c
  9932  001E82  D000               	goto	l4666
  9933  001E84                     l4666:
  9934  001E84  AE12               	btfss	___awmod@divisor+1,7,c
  9935  001E86  D005               	goto	l4670
  9936  001E88  6C11               	negf	___awmod@divisor,c
  9937  001E8A  1E12               	comf	___awmod@divisor+1,f,c
  9938  001E8C  B0D8               	btfsc	status,0,c
  9939  001E8E  2A12               	incf	___awmod@divisor+1,f,c
  9940  001E90  D000               	goto	l4670
  9941  001E92                     l4670:
  9942  001E92  5011               	movf	___awmod@divisor,w,c
  9943  001E94  1012               	iorwf	___awmod@divisor+1,w,c
  9944  001E96  B4D8               	btfsc	status,2,c
  9945  001E98  D01D               	goto	l4686
  9946  001E9A  0E01               	movlw	1
  9947  001E9C  6E13               	movwf	___awmod@counter,c
  9948  001E9E  D005               	goto	l4676
  9949  001EA0                     l4674:
  9950  001EA0  90D8               	bcf	status,0,c
  9951  001EA2  3611               	rlcf	___awmod@divisor,f,c
  9952  001EA4  3612               	rlcf	___awmod@divisor+1,f,c
  9953  001EA6  2A13               	incf	___awmod@counter,f,c
  9954  001EA8  D000               	goto	l4676
  9955  001EAA                     l4676:
  9956  001EAA  BE12               	btfsc	___awmod@divisor+1,7,c
  9957  001EAC  D002               	goto	l4678
  9958  001EAE  D7F8               	goto	l4674
  9959  001EB0  D000               	goto	l4678
  9960  001EB2                     l4678:
  9961  001EB2  5011               	movf	___awmod@divisor,w,c
  9962  001EB4  5C0F               	subwf	___awmod@dividend,w,c
  9963  001EB6  5012               	movf	___awmod@divisor+1,w,c
  9964  001EB8  5810               	subwfb	___awmod@dividend+1,w,c
  9965  001EBA  A0D8               	btfss	status,0,c
  9966  001EBC  D005               	goto	l4682
  9967  001EBE  5011               	movf	___awmod@divisor,w,c
  9968  001EC0  5E0F               	subwf	___awmod@dividend,f,c
  9969  001EC2  5012               	movf	___awmod@divisor+1,w,c
  9970  001EC4  5A10               	subwfb	___awmod@dividend+1,f,c
  9971  001EC6  D000               	goto	l4682
  9972  001EC8                     l4682:
  9973  001EC8  90D8               	bcf	status,0,c
  9974  001ECA  3212               	rrcf	___awmod@divisor+1,f,c
  9975  001ECC  3211               	rrcf	___awmod@divisor,f,c
  9976  001ECE  2E13               	decfsz	___awmod@counter,f,c
  9977  001ED0  D7F0               	goto	l4678
  9978  001ED2  D000               	goto	l4686
  9979  001ED4                     l4686:
  9980  001ED4  5014               	movf	___awmod@sign,w,c
  9981  001ED6  B4D8               	btfsc	status,2,c
  9982  001ED8  D005               	goto	l4690
  9983  001EDA  6C0F               	negf	___awmod@dividend,c
  9984  001EDC  1E10               	comf	___awmod@dividend+1,f,c
  9985  001EDE  B0D8               	btfsc	status,0,c
  9986  001EE0  2A10               	incf	___awmod@dividend+1,f,c
  9987  001EE2  D000               	goto	l4690
  9988  001EE4                     l4690:
  9989  001EE4  C00F  F00F         	movff	___awmod@dividend,?___awmod
  9990  001EE8  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  9991  001EEC  D000               	goto	l787
  9992  001EEE                     l787:
  9993  001EEE  0012               	return		;funcret
  9994  001EF0                     __end_of___awmod:
  9995                           	opt stack 0
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           intcon	equ	0xFF2
 10003                           intcon2	equ	0xFF1
 10004                           intcon3	equ	0xFF0
 10005                           postinc0	equ	0xFEE
 10006                           wreg	equ	0xFE8
 10007                           postdec1	equ	0xFE5
 10008                           fsr1l	equ	0xFE1
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           fsr2h	equ	0xFDA
 10012                           fsr2l	equ	0xFD9
 10013                           status	equ	0xFD8
 10014                           
 10015 ;; *************** function ___awdiv *****************
 10016 ;; Defined at:
 10017 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;  dividend        2   14[COMRAM] int 
 10020 ;;  divisor         2   16[COMRAM] int 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  quotient        2   20[COMRAM] int 
 10023 ;;  sign            1   19[COMRAM] unsigned char 
 10024 ;;  counter         1   18[COMRAM] unsigned char 
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  2   14[COMRAM] int 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10034 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;Total ram usage:        8 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    2
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_update_LCD_count
 10045 ;;		_update_LCD_PED_Count
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text52
 10050  001BC0                     __ptext52:
 10051                           	opt stack 0
 10052  001BC0                     ___awdiv:
 10053                           	opt stack 25
 10054                           
 10055                           ;incstack = 0
 10056  001BC0  0E00               	movlw	0
 10057  001BC2  6E14               	movwf	___awdiv@sign,c
 10058  001BC4  AE12               	btfss	___awdiv@divisor+1,7,c
 10059  001BC6  D007               	goto	l4622
 10060  001BC8  6C11               	negf	___awdiv@divisor,c
 10061  001BCA  1E12               	comf	___awdiv@divisor+1,f,c
 10062  001BCC  B0D8               	btfsc	status,0,c
 10063  001BCE  2A12               	incf	___awdiv@divisor+1,f,c
 10064  001BD0  0E01               	movlw	1
 10065  001BD2  6E14               	movwf	___awdiv@sign,c
 10066  001BD4  D000               	goto	l4622
 10067  001BD6                     l4622:
 10068  001BD6  AE10               	btfss	___awdiv@dividend+1,7,c
 10069  001BD8  D007               	goto	l4628
 10070  001BDA  6C0F               	negf	___awdiv@dividend,c
 10071  001BDC  1E10               	comf	___awdiv@dividend+1,f,c
 10072  001BDE  B0D8               	btfsc	status,0,c
 10073  001BE0  2A10               	incf	___awdiv@dividend+1,f,c
 10074  001BE2  0E01               	movlw	1
 10075  001BE4  1A14               	xorwf	___awdiv@sign,f,c
 10076  001BE6  D000               	goto	l4628
 10077  001BE8                     l4628:
 10078  001BE8  0E00               	movlw	0
 10079  001BEA  6E16               	movwf	___awdiv@quotient+1,c
 10080  001BEC  0E00               	movlw	0
 10081  001BEE  6E15               	movwf	___awdiv@quotient,c
 10082  001BF0  5011               	movf	___awdiv@divisor,w,c
 10083  001BF2  1012               	iorwf	___awdiv@divisor+1,w,c
 10084  001BF4  B4D8               	btfsc	status,2,c
 10085  001BF6  D021               	goto	l4650
 10086  001BF8  0E01               	movlw	1
 10087  001BFA  6E13               	movwf	___awdiv@counter,c
 10088  001BFC  D005               	goto	l4636
 10089  001BFE                     l4634:
 10090  001BFE  90D8               	bcf	status,0,c
 10091  001C00  3611               	rlcf	___awdiv@divisor,f,c
 10092  001C02  3612               	rlcf	___awdiv@divisor+1,f,c
 10093  001C04  2A13               	incf	___awdiv@counter,f,c
 10094  001C06  D000               	goto	l4636
 10095  001C08                     l4636:
 10096  001C08  BE12               	btfsc	___awdiv@divisor+1,7,c
 10097  001C0A  D002               	goto	l4638
 10098  001C0C  D7F8               	goto	l4634
 10099  001C0E  D000               	goto	l4638
 10100  001C10                     l4638:
 10101  001C10  90D8               	bcf	status,0,c
 10102  001C12  3615               	rlcf	___awdiv@quotient,f,c
 10103  001C14  3616               	rlcf	___awdiv@quotient+1,f,c
 10104  001C16  5011               	movf	___awdiv@divisor,w,c
 10105  001C18  5C0F               	subwf	___awdiv@dividend,w,c
 10106  001C1A  5012               	movf	___awdiv@divisor+1,w,c
 10107  001C1C  5810               	subwfb	___awdiv@dividend+1,w,c
 10108  001C1E  A0D8               	btfss	status,0,c
 10109  001C20  D006               	goto	l4646
 10110  001C22  5011               	movf	___awdiv@divisor,w,c
 10111  001C24  5E0F               	subwf	___awdiv@dividend,f,c
 10112  001C26  5012               	movf	___awdiv@divisor+1,w,c
 10113  001C28  5A10               	subwfb	___awdiv@dividend+1,f,c
 10114  001C2A  8015               	bsf	___awdiv@quotient,0,c
 10115  001C2C  D000               	goto	l4646
 10116  001C2E                     l4646:
 10117  001C2E  90D8               	bcf	status,0,c
 10118  001C30  3212               	rrcf	___awdiv@divisor+1,f,c
 10119  001C32  3211               	rrcf	___awdiv@divisor,f,c
 10120  001C34  2E13               	decfsz	___awdiv@counter,f,c
 10121  001C36  D7EC               	goto	l4638
 10122  001C38  D000               	goto	l4650
 10123  001C3A                     l4650:
 10124  001C3A  5014               	movf	___awdiv@sign,w,c
 10125  001C3C  B4D8               	btfsc	status,2,c
 10126  001C3E  D005               	goto	l4654
 10127  001C40  6C15               	negf	___awdiv@quotient,c
 10128  001C42  1E16               	comf	___awdiv@quotient+1,f,c
 10129  001C44  B0D8               	btfsc	status,0,c
 10130  001C46  2A16               	incf	___awdiv@quotient+1,f,c
 10131  001C48  D000               	goto	l4654
 10132  001C4A                     l4654:
 10133  001C4A  C015  F00F         	movff	___awdiv@quotient,?___awdiv
 10134  001C4E  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
 10135  001C52  D000               	goto	l774
 10136  001C54                     l774:
 10137  001C54  0012               	return		;funcret
 10138  001C56                     __end_of___awdiv:
 10139                           	opt stack 0
 10140                           tblptru	equ	0xFF8
 10141                           tblptrh	equ	0xFF7
 10142                           tblptrl	equ	0xFF6
 10143                           tablat	equ	0xFF5
 10144                           prodh	equ	0xFF4
 10145                           prodl	equ	0xFF3
 10146                           intcon	equ	0xFF2
 10147                           intcon2	equ	0xFF1
 10148                           intcon3	equ	0xFF0
 10149                           postinc0	equ	0xFEE
 10150                           wreg	equ	0xFE8
 10151                           postdec1	equ	0xFE5
 10152                           fsr1l	equ	0xFE1
 10153                           indf2	equ	0xFDF
 10154                           postinc2	equ	0xFDE
 10155                           fsr2h	equ	0xFDA
 10156                           fsr2l	equ	0xFD9
 10157                           status	equ	0xFD8
 10158                           
 10159 ;; *************** function _Wait_One_Second_With_Beep *****************
 10160 ;; Defined at:
 10161 ;;		line 596 in file "Lab9.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;		None
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;		None
 10166 ;; Return value:  Size  Location     Type
 10167 ;;		None               void
 10168 ;; Registers used:
 10169 ;;		wreg, status,2, cstack
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10179 ;;Total ram usage:        0 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; Hardware stack levels required when called:    3
 10182 ;; This function calls:
 10183 ;;		_Activate_Buzzer
 10184 ;;		_Deactivate_Buzzer
 10185 ;;		_Wait_Half_Second
 10186 ;; This function is called by:
 10187 ;;		_PED_Control
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           	psect	text53
 10192  002574                     __ptext53:
 10193                           	opt stack 0
 10194  002574                     _Wait_One_Second_With_Beep:
 10195                           	opt stack 25
 10196                           
 10197                           ;Lab9.c: 598: PORTDbits.RD7 = 1;
 10198                           
 10199                           ;incstack = 0
 10200  002574  8E83               	bsf	3971,7,c	;volatile
 10201                           
 10202                           ;Lab9.c: 599: Activate_Buzzer();
 10203  002576  ECE2  F012         	call	_Activate_Buzzer	;wreg free
 10204                           
 10205                           ;Lab9.c: 600: Wait_Half_Second();
 10206  00257A  ECA2  F012         	call	_Wait_Half_Second	;wreg free
 10207                           
 10208                           ;Lab9.c: 601: PORTDbits.RD7 = 0;
 10209  00257E  9E83               	bcf	3971,7,c	;volatile
 10210                           
 10211                           ;Lab9.c: 602: Deactivate_Buzzer();
 10212  002580  EC19  F013         	call	_Deactivate_Buzzer	;wreg free
 10213                           
 10214                           ;Lab9.c: 603: Wait_Half_Second();
 10215  002584  ECA2  F012         	call	_Wait_Half_Second	;wreg free
 10216  002588  0012               	return		;funcret
 10217  00258A                     __end_of_Wait_One_Second_With_Beep:
 10218                           	opt stack 0
 10219                           tblptru	equ	0xFF8
 10220                           tblptrh	equ	0xFF7
 10221                           tblptrl	equ	0xFF6
 10222                           tablat	equ	0xFF5
 10223                           prodh	equ	0xFF4
 10224                           prodl	equ	0xFF3
 10225                           intcon	equ	0xFF2
 10226                           intcon2	equ	0xFF1
 10227                           intcon3	equ	0xFF0
 10228                           postinc0	equ	0xFEE
 10229                           wreg	equ	0xFE8
 10230                           postdec1	equ	0xFE5
 10231                           fsr1l	equ	0xFE1
 10232                           indf2	equ	0xFDF
 10233                           postinc2	equ	0xFDE
 10234                           fsr2h	equ	0xFDA
 10235                           fsr2l	equ	0xFD9
 10236                           status	equ	0xFD8
 10237                           
 10238 ;; *************** function _Wait_Half_Second *****************
 10239 ;; Defined at:
 10240 ;;		line 606 in file "Lab9.c"
 10241 ;; Parameters:    Size  Location     Type
 10242 ;;		None
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;		None
 10245 ;; Return value:  Size  Location     Type
 10246 ;;		None               void
 10247 ;; Registers used:
 10248 ;;		wreg, status,2
 10249 ;; Tracked objects:
 10250 ;;		On entry : 0/0
 10251 ;;		On exit  : 0/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;Total ram usage:        0 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    2
 10261 ;; This function calls:
 10262 ;;		Nothing
 10263 ;; This function is called by:
 10264 ;;		_Wait_One_Second
 10265 ;;		_Wait_One_Second_With_Beep
 10266 ;;		_Old_Wait_One_Second
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           	psect	text54
 10271  002544                     __ptext54:
 10272                           	opt stack 0
 10273  002544                     _Wait_Half_Second:
 10274                           	opt stack 25
 10275                           
 10276                           ;Lab9.c: 608: T0CON = 0x03;
 10277                           
 10278                           ;incstack = 0
 10279  002544  0E03               	movlw	3
 10280  002546  6ED5               	movwf	4053,c	;volatile
 10281                           
 10282                           ;Lab9.c: 609: TMR0L = 0xDB;
 10283  002548  0EDB               	movlw	219
 10284  00254A  6ED6               	movwf	4054,c	;volatile
 10285                           
 10286                           ;Lab9.c: 610: TMR0H = 0x0B;
 10287  00254C  0E0B               	movlw	11
 10288  00254E  6ED7               	movwf	4055,c	;volatile
 10289                           
 10290                           ;Lab9.c: 611: INTCONbits.TMR0IF = 0;
 10291  002550  94F2               	bcf	intcon,2,c	;volatile
 10292                           
 10293                           ;Lab9.c: 612: T0CONbits.TMR0ON = 1;
 10294  002552  8ED5               	bsf	4053,7,c	;volatile
 10295                           
 10296                           ;Lab9.c: 613: while (INTCONbits.TMR0IF == 0);
 10297  002554  D000               	goto	l497
 10298  002556                     l497:
 10299  002556  A4F2               	btfss	intcon,2,c	;volatile
 10300  002558  D7FE               	goto	l497
 10301                           
 10302                           ;Lab9.c: 614: T0CONbits.TMR0ON = 0;
 10303  00255A  9ED5               	bcf	4053,7,c	;volatile
 10304  00255C  0012               	return		;funcret
 10305  00255E                     __end_of_Wait_Half_Second:
 10306                           	opt stack 0
 10307                           tblptru	equ	0xFF8
 10308                           tblptrh	equ	0xFF7
 10309                           tblptrl	equ	0xFF6
 10310                           tablat	equ	0xFF5
 10311                           prodh	equ	0xFF4
 10312                           prodl	equ	0xFF3
 10313                           intcon	equ	0xFF2
 10314                           intcon2	equ	0xFF1
 10315                           intcon3	equ	0xFF0
 10316                           postinc0	equ	0xFEE
 10317                           wreg	equ	0xFE8
 10318                           postdec1	equ	0xFE5
 10319                           fsr1l	equ	0xFE1
 10320                           indf2	equ	0xFDF
 10321                           postinc2	equ	0xFDE
 10322                           fsr2h	equ	0xFDA
 10323                           fsr2l	equ	0xFD9
 10324                           status	equ	0xFD8
 10325                           
 10326 ;; *************** function _Deactivate_Buzzer *****************
 10327 ;; Defined at:
 10328 ;;		line 464 in file "Lab9.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;		None
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;		None
 10333 ;; Return value:  Size  Location     Type
 10334 ;;		None               void
 10335 ;; Registers used:
 10336 ;;		wreg, status,2
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;Total ram usage:        0 bytes
 10347 ;; Hardware stack levels used:    1
 10348 ;; Hardware stack levels required when called:    2
 10349 ;; This function calls:
 10350 ;;		Nothing
 10351 ;; This function is called by:
 10352 ;;		_Wait_One_Second_With_Beep
 10353 ;; This function uses a non-reentrant model
 10354 ;;
 10355                           
 10356                           	psect	text55
 10357  002632                     __ptext55:
 10358                           	opt stack 0
 10359  002632                     _Deactivate_Buzzer:
 10360                           	opt stack 25
 10361                           
 10362                           ;Lab9.c: 466: CCP2CON = 0x0;
 10363                           
 10364                           ;incstack = 0
 10365  002632  0E00               	movlw	0
 10366  002634  6EBA               	movwf	4026,c	;volatile
 10367                           
 10368                           ;Lab9.c: 467: PORTBbits.RB3 = 0;
 10369  002636  9681               	bcf	3969,3,c	;volatile
 10370  002638  0012               	return		;funcret
 10371  00263A                     __end_of_Deactivate_Buzzer:
 10372                           	opt stack 0
 10373                           tblptru	equ	0xFF8
 10374                           tblptrh	equ	0xFF7
 10375                           tblptrl	equ	0xFF6
 10376                           tablat	equ	0xFF5
 10377                           prodh	equ	0xFF4
 10378                           prodl	equ	0xFF3
 10379                           intcon	equ	0xFF2
 10380                           intcon2	equ	0xFF1
 10381                           intcon3	equ	0xFF0
 10382                           postinc0	equ	0xFEE
 10383                           wreg	equ	0xFE8
 10384                           postdec1	equ	0xFE5
 10385                           fsr1l	equ	0xFE1
 10386                           indf2	equ	0xFDF
 10387                           postinc2	equ	0xFDE
 10388                           fsr2h	equ	0xFDA
 10389                           fsr2l	equ	0xFD9
 10390                           status	equ	0xFD8
 10391                           
 10392 ;; *************** function _Activate_Buzzer *****************
 10393 ;; Defined at:
 10394 ;;		line 456 in file "Lab9.c"
 10395 ;; Parameters:    Size  Location     Type
 10396 ;;		None
 10397 ;; Auto vars:     Size  Location     Type
 10398 ;;		None
 10399 ;; Return value:  Size  Location     Type
 10400 ;;		None               void
 10401 ;; Registers used:
 10402 ;;		wreg, status,2
 10403 ;; Tracked objects:
 10404 ;;		On entry : 0/0
 10405 ;;		On exit  : 0/0
 10406 ;;		Unchanged: 0/0
 10407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;Total ram usage:        0 bytes
 10413 ;; Hardware stack levels used:    1
 10414 ;; Hardware stack levels required when called:    2
 10415 ;; This function calls:
 10416 ;;		Nothing
 10417 ;; This function is called by:
 10418 ;;		_Wait_One_Second_With_Beep
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           	psect	text56
 10423  0025C4                     __ptext56:
 10424                           	opt stack 0
 10425  0025C4                     _Activate_Buzzer:
 10426                           	opt stack 25
 10427                           
 10428                           ;Lab9.c: 458: PR2 = 0b11111001;
 10429                           
 10430                           ;incstack = 0
 10431  0025C4  0EF9               	movlw	249
 10432  0025C6  6ECB               	movwf	4043,c	;volatile
 10433                           
 10434                           ;Lab9.c: 459: T2CON = 0b00000101;
 10435  0025C8  0E05               	movlw	5
 10436  0025CA  6ECA               	movwf	4042,c	;volatile
 10437                           
 10438                           ;Lab9.c: 460: CCPR2L = 0b01001010;
 10439  0025CC  0E4A               	movlw	74
 10440  0025CE  6EBB               	movwf	4027,c	;volatile
 10441                           
 10442                           ;Lab9.c: 461: CCP2CON = 0b00111100;
 10443  0025D0  0E3C               	movlw	60
 10444  0025D2  6EBA               	movwf	4026,c	;volatile
 10445  0025D4  0012               	return		;funcret
 10446  0025D6                     __end_of_Activate_Buzzer:
 10447                           	opt stack 0
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           prodh	equ	0xFF4
 10453                           prodl	equ	0xFF3
 10454                           intcon	equ	0xFF2
 10455                           intcon2	equ	0xFF1
 10456                           intcon3	equ	0xFF0
 10457                           postinc0	equ	0xFEE
 10458                           wreg	equ	0xFE8
 10459                           postdec1	equ	0xFE5
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           fsr2h	equ	0xFDA
 10464                           fsr2l	equ	0xFD9
 10465                           status	equ	0xFD8
 10466                           
 10467 ;; *************** function _chkisr *****************
 10468 ;; Defined at:
 10469 ;;		line 295 in file "Lab9.c"
 10470 ;; Parameters:    Size  Location     Type
 10471 ;;		None
 10472 ;; Auto vars:     Size  Location     Type
 10473 ;;		None
 10474 ;; Return value:  Size  Location     Type
 10475 ;;		None               void
 10476 ;; Registers used:
 10477 ;;		wreg, status,2, status,0, cstack
 10478 ;; Tracked objects:
 10479 ;;		On entry : 0/0
 10480 ;;		On exit  : 0/0
 10481 ;;		Unchanged: 0/0
 10482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10485 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10486 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;Total ram usage:       14 bytes
 10488 ;; Hardware stack levels used:    1
 10489 ;; Hardware stack levels required when called:    1
 10490 ;; This function calls:
 10491 ;;		_INT0_ISR
 10492 ;;		_INT1_ISR
 10493 ;;		_INT2_ISR
 10494 ;; This function is called by:
 10495 ;;		Interrupt level 2
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           	psect	intcode
 10500  000008                     __pintcode:
 10501                           	opt stack 0
 10502  000008                     _chkisr:
 10503                           	opt stack 18
 10504                           
 10505                           ;incstack = 0
 10506  000008  CFFA F001          	movff	pclath,??_chkisr
 10507  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 10508  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 10509  000014  EDB3  F00E         	call	int_func,f	;refresh shadow registers
 10510                           pclatu	equ	0xFFB
 10511                           pclath	equ	0xFFA
 10512                           tblptru	equ	0xFF8
 10513                           tblptrh	equ	0xFF7
 10514                           tblptrl	equ	0xFF6
 10515                           tablat	equ	0xFF5
 10516                           prodh	equ	0xFF4
 10517                           prodl	equ	0xFF3
 10518                           intcon	equ	0xFF2
 10519                           intcon2	equ	0xFF1
 10520                           intcon3	equ	0xFF0
 10521                           postinc0	equ	0xFEE
 10522                           fsr0l	equ	0xFE9
 10523                           wreg	equ	0xFE8
 10524                           postdec1	equ	0xFE5
 10525                           fsr1l	equ	0xFE1
 10526                           indf2	equ	0xFDF
 10527                           postinc2	equ	0xFDE
 10528                           fsr2h	equ	0xFDA
 10529                           fsr2l	equ	0xFD9
 10530                           status	equ	0xFD8
 10531                           
 10532                           	psect	intcode_body
 10533  001D66                     __pintcode_body:
 10534                           	opt stack 18
 10535  001D66                     int_func:
 10536                           	opt stack 18
 10537  001D66  0006               	pop		; remove dummy address from shadow register refresh
 10538  001D68  CFEA F004          	movff	fsr0h,??_chkisr+3
 10539  001D6C  CFE1 F005          	movff	fsr1l,??_chkisr+4
 10540  001D70  CFE2 F006          	movff	fsr1h,??_chkisr+5
 10541  001D74  CFD9 F007          	movff	fsr2l,??_chkisr+6
 10542  001D78  CFDA F008          	movff	fsr2h,??_chkisr+7
 10543  001D7C  CFF3 F009          	movff	prodl,??_chkisr+8
 10544  001D80  CFF4 F00A          	movff	prodh,??_chkisr+9
 10545  001D84  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 10546  001D88  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 10547  001D8C  CFF8 F00D          	movff	tblptru,??_chkisr+12
 10548  001D90  CFF5 F00E          	movff	tablat,??_chkisr+13
 10549                           
 10550                           ;Lab9.c: 297: if (INTCONbits.INT0IF == 1) INT0_ISR();
 10551  001D94  A2F2               	btfss	intcon,1,c	;volatile
 10552  001D96  D003               	goto	i2l2654
 10553  001D98  ECF4  F012         	call	_INT0_ISR	;wreg free
 10554  001D9C  D000               	goto	i2l2654
 10555  001D9E                     i2l2654:
 10556                           
 10557                           ;Lab9.c: 298: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 10558  001D9E  A0F0               	btfss	intcon3,0,c	;volatile
 10559  001DA0  D003               	goto	i2l2658
 10560  001DA2  ECEB  F012         	call	_INT1_ISR	;wreg free
 10561  001DA6  D000               	goto	i2l2658
 10562  001DA8                     i2l2658:
 10563                           
 10564                           ;Lab9.c: 299: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 10565  001DA8  A2F0               	btfss	intcon3,1,c	;volatile
 10566  001DAA  D003               	goto	i2l394
 10567  001DAC  EC1D  F013         	call	_INT2_ISR	;wreg free
 10568  001DB0  D000               	goto	i2l394
 10569  001DB2                     i2l394:
 10570  001DB2  C00E  FFF5         	movff	??_chkisr+13,tablat
 10571  001DB6  C00D  FFF8         	movff	??_chkisr+12,tblptru
 10572  001DBA  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 10573  001DBE  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 10574  001DC2  C00A  FFF4         	movff	??_chkisr+9,prodh
 10575  001DC6  C009  FFF3         	movff	??_chkisr+8,prodl
 10576  001DCA  C008  FFDA         	movff	??_chkisr+7,fsr2h
 10577  001DCE  C007  FFD9         	movff	??_chkisr+6,fsr2l
 10578  001DD2  C006  FFE2         	movff	??_chkisr+5,fsr1h
 10579  001DD6  C005  FFE1         	movff	??_chkisr+4,fsr1l
 10580  001DDA  C004  FFEA         	movff	??_chkisr+3,fsr0h
 10581  001DDE  C003  FFE9         	movff	??_chkisr+2,fsr0l
 10582  001DE2  C002  FFFB         	movff	??_chkisr+1,pclatu
 10583  001DE6  C001  FFFA         	movff	??_chkisr,pclath
 10584  001DEA  0011               	retfie		f
 10585  001DEC                     __end_of_chkisr:
 10586                           	opt stack 0
 10587                           pclatu	equ	0xFFB
 10588                           pclath	equ	0xFFA
 10589                           tblptru	equ	0xFF8
 10590                           tblptrh	equ	0xFF7
 10591                           tblptrl	equ	0xFF6
 10592                           tablat	equ	0xFF5
 10593                           prodh	equ	0xFF4
 10594                           prodl	equ	0xFF3
 10595                           intcon	equ	0xFF2
 10596                           intcon2	equ	0xFF1
 10597                           intcon3	equ	0xFF0
 10598                           postinc0	equ	0xFEE
 10599                           fsr0h	equ	0xFEA
 10600                           fsr0l	equ	0xFE9
 10601                           wreg	equ	0xFE8
 10602                           postdec1	equ	0xFE5
 10603                           fsr1h	equ	0xFE2
 10604                           fsr1l	equ	0xFE1
 10605                           indf2	equ	0xFDF
 10606                           postinc2	equ	0xFDE
 10607                           fsr2h	equ	0xFDA
 10608                           fsr2l	equ	0xFD9
 10609                           status	equ	0xFD8
 10610                           
 10611 ;; *************** function _INT2_ISR *****************
 10612 ;; Defined at:
 10613 ;;		line 289 in file "Lab9.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;		None
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;		None
 10618 ;; Return value:  Size  Location     Type
 10619 ;;		None               void
 10620 ;; Registers used:
 10621 ;;		wreg, status,2
 10622 ;; Tracked objects:
 10623 ;;		On entry : 0/0
 10624 ;;		On exit  : 0/0
 10625 ;;		Unchanged: 0/0
 10626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10631 ;;Total ram usage:        0 bytes
 10632 ;; Hardware stack levels used:    1
 10633 ;; This function calls:
 10634 ;;		Nothing
 10635 ;; This function is called by:
 10636 ;;		_chkisr
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           	psect	text58
 10641  00263A                     __ptext58:
 10642                           	opt stack 0
 10643  00263A                     _INT2_ISR:
 10644                           	opt stack 18
 10645                           
 10646                           ;Lab9.c: 291: INTCON3bits.INT2IF=0;
 10647                           
 10648                           ;incstack = 0
 10649  00263A  92F0               	bcf	intcon3,1,c	;volatile
 10650                           
 10651                           ;Lab9.c: 292: FLASHING_REQUEST = 1;
 10652  00263C  0E01               	movlw	1
 10653  00263E  6E65               	movwf	_FLASHING_REQUEST,c
 10654  002640  0012               	return		;funcret
 10655  002642                     __end_of_INT2_ISR:
 10656                           	opt stack 0
 10657                           pclatu	equ	0xFFB
 10658                           pclath	equ	0xFFA
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           intcon2	equ	0xFF1
 10667                           intcon3	equ	0xFF0
 10668                           postinc0	equ	0xFEE
 10669                           fsr0h	equ	0xFEA
 10670                           fsr0l	equ	0xFE9
 10671                           wreg	equ	0xFE8
 10672                           postdec1	equ	0xFE5
 10673                           fsr1h	equ	0xFE2
 10674                           fsr1l	equ	0xFE1
 10675                           indf2	equ	0xFDF
 10676                           postinc2	equ	0xFDE
 10677                           fsr2h	equ	0xFDA
 10678                           fsr2l	equ	0xFD9
 10679                           status	equ	0xFD8
 10680                           
 10681 ;; *************** function _INT1_ISR *****************
 10682 ;; Defined at:
 10683 ;;		line 280 in file "Lab9.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; This function calls:
 10704 ;;		Nothing
 10705 ;; This function is called by:
 10706 ;;		_chkisr
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           	psect	text59
 10711  0025D6                     __ptext59:
 10712                           	opt stack 0
 10713  0025D6                     _INT1_ISR:
 10714                           	opt stack 18
 10715                           
 10716                           ;Lab9.c: 282: INTCON3bits.INT1IF=0;
 10717                           
 10718                           ;incstack = 0
 10719  0025D6  90F0               	bcf	intcon3,0,c	;volatile
 10720                           
 10721                           ;Lab9.c: 284: if(MODE == 1){
 10722  0025D8  045E               	decf	_MODE,w,c
 10723  0025DA  105F               	iorwf	_MODE+1,w,c
 10724  0025DC  A4D8               	btfss	status,2,c
 10725  0025DE  D003               	goto	i2l385
 10726                           
 10727                           ;Lab9.c: 285: EW_PED_SW = 1;
 10728  0025E0  0E01               	movlw	1
 10729  0025E2  6E63               	movwf	_EW_PED_SW,c
 10730  0025E4  D000               	goto	i2l385
 10731  0025E6                     i2l385:
 10732  0025E6  0012               	return		;funcret
 10733  0025E8                     __end_of_INT1_ISR:
 10734                           	opt stack 0
 10735                           pclatu	equ	0xFFB
 10736                           pclath	equ	0xFFA
 10737                           tblptru	equ	0xFF8
 10738                           tblptrh	equ	0xFF7
 10739                           tblptrl	equ	0xFF6
 10740                           tablat	equ	0xFF5
 10741                           prodh	equ	0xFF4
 10742                           prodl	equ	0xFF3
 10743                           intcon	equ	0xFF2
 10744                           intcon2	equ	0xFF1
 10745                           intcon3	equ	0xFF0
 10746                           postinc0	equ	0xFEE
 10747                           fsr0h	equ	0xFEA
 10748                           fsr0l	equ	0xFE9
 10749                           wreg	equ	0xFE8
 10750                           postdec1	equ	0xFE5
 10751                           fsr1h	equ	0xFE2
 10752                           fsr1l	equ	0xFE1
 10753                           indf2	equ	0xFDF
 10754                           postinc2	equ	0xFDE
 10755                           fsr2h	equ	0xFDA
 10756                           fsr2l	equ	0xFD9
 10757                           status	equ	0xFD8
 10758                           
 10759 ;; *************** function _INT0_ISR *****************
 10760 ;; Defined at:
 10761 ;;		line 271 in file "Lab9.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;		None
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;		None
 10766 ;; Return value:  Size  Location     Type
 10767 ;;		None               void
 10768 ;; Registers used:
 10769 ;;		wreg, status,2, status,0
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;Total ram usage:        0 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_chkisr
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           	psect	text60
 10789  0025E8                     __ptext60:
 10790                           	opt stack 0
 10791  0025E8                     _INT0_ISR:
 10792                           	opt stack 18
 10793                           
 10794                           ;Lab9.c: 273: INTCONbits.INT0IF=0;
 10795                           
 10796                           ;incstack = 0
 10797  0025E8  92F2               	bcf	intcon,1,c	;volatile
 10798                           
 10799                           ;Lab9.c: 275: if(MODE == 1){
 10800  0025EA  045E               	decf	_MODE,w,c
 10801  0025EC  105F               	iorwf	_MODE+1,w,c
 10802  0025EE  A4D8               	btfss	status,2,c
 10803  0025F0  D003               	goto	i2l381
 10804                           
 10805                           ;Lab9.c: 276: NS_PED_SW = 1;
 10806  0025F2  0E01               	movlw	1
 10807  0025F4  6E66               	movwf	_NS_PED_SW,c
 10808  0025F6  D000               	goto	i2l381
 10809  0025F8                     i2l381:
 10810  0025F8  0012               	return		;funcret
 10811  0025FA                     __end_of_INT0_ISR:
 10812                           	opt stack 0
 10813                           pclatu	equ	0xFFB
 10814                           pclath	equ	0xFFA
 10815                           tblptru	equ	0xFF8
 10816                           tblptrh	equ	0xFF7
 10817                           tblptrl	equ	0xFF6
 10818                           tablat	equ	0xFF5
 10819                           prodh	equ	0xFF4
 10820                           prodl	equ	0xFF3
 10821                           intcon	equ	0xFF2
 10822                           intcon2	equ	0xFF1
 10823                           intcon3	equ	0xFF0
 10824                           postinc0	equ	0xFEE
 10825                           fsr0h	equ	0xFEA
 10826                           fsr0l	equ	0xFE9
 10827                           wreg	equ	0xFE8
 10828                           postdec1	equ	0xFE5
 10829                           fsr1h	equ	0xFE2
 10830                           fsr1l	equ	0xFE1
 10831                           indf2	equ	0xFDF
 10832                           postinc2	equ	0xFDE
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           pclatu	equ	0xFFB
 10837                           pclath	equ	0xFFA
 10838                           tblptru	equ	0xFF8
 10839                           tblptrh	equ	0xFF7
 10840                           tblptrl	equ	0xFF6
 10841                           tablat	equ	0xFF5
 10842                           prodh	equ	0xFF4
 10843                           prodl	equ	0xFF3
 10844                           intcon	equ	0xFF2
 10845                           intcon2	equ	0xFF1
 10846                           intcon3	equ	0xFF0
 10847                           postinc0	equ	0xFEE
 10848                           fsr0h	equ	0xFEA
 10849                           fsr0l	equ	0xFE9
 10850                           wreg	equ	0xFE8
 10851                           postdec1	equ	0xFE5
 10852                           fsr1h	equ	0xFE2
 10853                           fsr1l	equ	0xFE1
 10854                           indf2	equ	0xFDF
 10855                           postinc2	equ	0xFDE
 10856                           fsr2h	equ	0xFDA
 10857                           fsr2l	equ	0xFD9
 10858                           status	equ	0xFD8
 10859                           
 10860                           	psect	rparam
 10861  0000                     pclatu	equ	0xFFB
 10862                           pclath	equ	0xFFA
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           intcon2	equ	0xFF1
 10871                           intcon3	equ	0xFF0
 10872                           postinc0	equ	0xFEE
 10873                           fsr0h	equ	0xFEA
 10874                           fsr0l	equ	0xFE9
 10875                           wreg	equ	0xFE8
 10876                           postdec1	equ	0xFE5
 10877                           fsr1h	equ	0xFE2
 10878                           fsr1l	equ	0xFE1
 10879                           indf2	equ	0xFDF
 10880                           postinc2	equ	0xFDE
 10881                           fsr2h	equ	0xFDA
 10882                           fsr2l	equ	0xFD9
 10883                           status	equ	0xFD8


Data Sizes:
    Strings     105
    Constant    475
    Data        35
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     113
    BANK0           128     14      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Initialize_Screen->_drawtext
    _Initialize_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _init_UART->_OpenUSART
    _update_LCD_count->_drawtext
    _Wait_One_Second->_drawtext
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _Day_Mode->_PED_Control
    _Day_Mode->_Wait_N_Seconds
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  633592
                                             12 BANK0      2     2      0
                           _Day_Mode
                        _Do_Flashing
                            _Do_Init
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  186838
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   66298
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     375
                           _Init_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  158530
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  215214
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   87270
                                             10 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28178
                                              7 BANK0      2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   58962
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   31702
                                              7 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2718
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1929
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                              0 BANK0      3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   28376
                                              9 BANK0      3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28054
                                              7 BANK0      2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25331
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10774
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     882
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1213
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1225
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Wait_Half_Second
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___wmul
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Do_Init
     _Init_ADC
     _init_IO
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      38       5       43.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      34        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Apr 11 14:48:11 2021

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 2574                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 00A3                                 l203 115E  
                               l212 10B4                                 l205 1038  
                               l127 20C8                                 l240 1760  
                               l137 25AC                                 l241 16CC  
                               l251 0D98                                 l243 173C  
                               l244 175E                                 l181 246E  
                               l430 2216                                 l423 24EC  
                               l512 0AAA                                 l432 221A  
                               l433 2220                                 l441 21D2  
                               l521 1008                                 l450 22AA  
                               l434 2224                                 l442 21D8  
                               l426 250C                                 l187 1D64  
                               l451 22B0                                 l435 2248  
                               l443 21DC                                 l452 22B4  
                               l460 2268                                 l444 2200  
                               l269 11CE                                 l453 22D8  
                               l461 226C                                 l285 1CDC  
                               l462 2290                                 l439 21CE  
                               l528 1906                                 l448 22A6  
                               l480 1836                                 l457 225E  
                               l459 2262                                 l900 19A4  
                               l581 24C0                                 l573 1F36  
                               l485 1B28                                 l574 1F38  
                               l575 1F42                                 l576 1F44  
                               l497 2556                                 l569 1F1C  
                               l578 1F5E                                 l774 1C54  
                               l961 1684                                 l970 1BBE  
                               l787 1EEE                                 l964 1650  
                               l799 23D4                                 l889 19CC  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 00A9  
                               _PR2 000FCB                   _Deactivate_Buzzer 2632  
                               _dir 006F                                 _nbr 0080  
                               _txt 0060                      drawFastHLine@w 0017  
                    drawFastHLine@x 0020                      drawFastHLine@y 0016  
                      ___awmod@sign 0014             __end_of_update_LCD_misc 0CD6  
                               wreg 000FE8                  ??_Wait_Half_Second 000F  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 001B  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize 2470  
                      ___ftdiv@cntr 0024                        ___ftdiv@sign 0029  
                      __CFG_WDT$OFF 000000                      drawFastVLine@h 0017  
                              l1138 2398                      drawFastVLine@x 0020  
                    drawFastVLine@y 0016                                l5010 22BA  
                              l4204 217A                                l4220 101A  
                              l4300 1998                                l4230 103C  
                              l4208 2196                                l4240 10A8  
                              l4224 1026                                l4312 19BE  
                              l4400 15DC                                l4250 10D6  
                              l4242 10AC                                l4234 1044  
                              l5042 22E6                                l5034 2272  
                              l5018 222A                                l5026 21E2  
                              l4306 19AC                                l4260 1152  
                              l4252 10FE                                l4228 1034  
                              l4340 1442                                l4324 13D4  
                              l4500 0D7E                                l4404 15EA  
                              l5060 23DE                                l4190 1D5A  
                              l4174 1CEE                                l4238 1074  
                              l4350 149C                                l5054 230A  
                              l5046 22F4                                l5070 2400  
                              l4272 2366                                l4336 1424  
                              l4424 162A                                l5064 23EC  
                              l5208 2076                                l4178 1D26  
                              l4258 112A                                l4266 115A  
                              l4274 236C                                l4362 11B4  
                              l4290 1934                                l4434 165E  
                              l4196 2450                                l4188 1D4C  
                              l4348 1494                                l4292 1954  
                              l4284 1918                                l5252 17A0  
                              l4622 1BD6                                l4382 1282  
                              l4534 2418                                l4446 23B0  
                              l4454 1B5C                                l5270 17DC  
                              l5190 202C                                l5326 1AE6  
                              l4528 0E6E                                l4536 2422  
                              l4296 196C                                l4288 1928  
                              l4464 1BBA                                l4634 1BFE  
                              l4650 1C3A                                l4378 1230  
                              l4298 198C                                l4458 1B8E  
                              l5194 203C                                l4636 1C08  
                              l4628 1BE8                                l4580 0B76  
                              l4572 0B5A                                l4812 1740  
                              l4654 1C4A                                l4646 1C2E  
                              l4638 1C10                                l4670 1E92  
                              l4398 15C2                                l5278 17FA  
                              l4830 1C66                                l4822 175A  
                              l4920 0824                                l4592 0BA0  
                              l4584 0B84                                l4576 0B68  
                              l4816 174A                                l4808 1732  
                              l4690 1EE4                                l4682 1EC8  
                              l4674 1EA0                                l4666 1E84  
                              l4834 1C9E                                l4676 1EAA  
                              l4924 08FA                                l4596 0BAE  
                              l4588 0B92                                l4844 1CC4  
                              l4678 1EB2                                l4686 1ED4  
                              l4934 183E                                l4598 0BB4  
                              l4862 1F14                                l4854 1F02  
                              l4846 1CD2                                l4790 1696  
                              l5590 1A56                                l4944 18F4  
                              l4928 09D2                                l4938 1898  
                              l4962 0F36                                l4954 0E8A  
                              l4874 1F2E                                l4866 1F20  
                              l4858 1F0C                                l5594 1A62  
                              l4972 0FEA                                l4796 1704  
                              l5596 1A68                                l4966 0F8E  
                              l4958 0EE0                                STR_1 FF96  
                              STR_2 FFE5                                STR_3 FFEB  
                              STR_4 FFEF                                STR_5 FFFD  
                              STR_6 FFCD                                STR_7 FFDE  
                              STR_8 FFC1                                STR_9 FFD7  
                              u3020 13FE                                u3121 15B4  
                              u3141 15D2                                u3260 0B34  
                              u3500 16FA                                u3270 0B36  
                              u2730 1D1C                                u3570 1C94  
                              u3490 16C4                                u2880 110C  
                              _MODE 005E                                u3980 1A50  
                              u3990 1A52                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 19CE                                _font FDBB  
                      ___ftpack@arg 000F                        ___ftpack@exp 0012  
                              fsr0h 000FEA                                fsr1h 000FE2  
                    ??_get_full_ADC 0011                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 0041                                _volt 005B  
                   drawFastHLine@hi 001E                     drawFastHLine@lo 001F  
          __end_of_update_LCD_color 0AAC                                pclat 000FFA  
          __end_of_update_LCD_count 100A                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0018                     __end_of_Do_Init 24E8  
                   ??_drawFastHLine 001A                     ??_drawFastVLine 001A  
                      ___param_bank 000010                        _Act_Mode_Txt 004B  
                  __end_of_INT0_ISR 25FA                    __end_of_INT1_ISR 25E8  
                  __end_of_INT2_ISR 2642                         _Do_Flashing 2028  
         __end_of_Deactivate_Buzzer 263A                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                         _SW_EWLT_Txt 0051  
                       _SW_MODE_Txt 0055                               ?_main 0001  
                   __end_of___awdiv 1C56                     drawCircle@ddF_x 0024  
                             STR_10 FFF7                     drawCircle@ddF_y 0026  
                             STR_11 FFF3                               STR_12 FFAC  
                             STR_13 FFFD                               STR_14 FFFB  
                   __end_of___awmod 1EF0                     __end_of___ftdiv 1686  
                             _T0CON 000FD5                     ___awdiv@divisor 0011  
                             _T2CON 000FCA                               _T3CON 000FB1  
                             i2l381 25F8                               i2l385 25E6  
                             i2l394 1DB2                     ___awdiv@counter 0013  
                   drawCircle@color 0020                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _SPBRG 000FAF                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 0062                        ?_PED_Control 00AA  
                             _Rcmd1 1298                               _Rcmd3 14B2  
                       _SW_NSLT_Txt 0057                       drawRect@color 0029  
                     ___awtoft@sign 001A                     __end_of_init_IO 2574  
                             _font2 FEBA               fillCircleHelper@ddF_x 002F  
             fillCircleHelper@ddF_y 0031                   ??_Wait_One_Second 0041  
                     ___ftpack@sign 0013               fillCircleHelper@delta 0029  
             fillCircleHelper@color 002B                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 0041                    __end_of_Day_Mode 1838  
                    _Wait_N_Seconds 23D6                     write_data@data_ 0011  
                   __initialization 1FC6                        __end_of_main 1A7C  
                      __end_of_font FEBA                    __end_of_Init_ADC 2628  
                  __end_of_Rcmd2red 235C                          _Night_Mode 1A7C  
                  __end_of_Set_EWLT 2292                    __end_of_Set_NSLT 2202  
                            ??_main 0041                       __activetblptr 000002  
             Wait_N_Seconds@seconds 00AB                   __end_of_LCD_Reset 25C4  
                      _SW_EWPED_Txt 0053           ??_TFT_GreenTab_Initialize 001B  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 00AB  
                  ___awdiv@dividend 000F                    __end_of___awtoft 23D6  
                  __end_of___ftpack 19CE                              i2l2654 1D9E  
                         ??_Do_Init 0012                              i2l2658 1DA8  
                            _OSCCON 000FD3                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds 240E  
                      _SW_NSPED_Txt 0059                    __end_of_delay_ms 20D0  
                            _Set_EW 2292                              _Set_NS 2202  
                  __end_of_fillRect 21BA                    __end_of_drawChar 1160  
                  __end_of_drawRect 1FC6                  __size_of_OpenUSART 0070  
                            ___ftge 1B2A            __size_of_Activate_Buzzer 0012  
                            ___wmul 249A                           ??___awdiv 0013  
         __size_of_fillCircleHelper 0138                    __end_of_drawtext 14B2  
                         ??___awmod 0013                           ??___ftdiv 0021  
                            _chkisr 0008                              _buffer 0082  
                            clear_0 1FCC                              clear_1 1FD8  
                  ___awdiv@quotient 0015                     ___awmod@divisor 0011  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0013  
                      drawtext@size 003E                              _strcpy 240E  
                            _strlen 235C                __end_of_get_full_ADC 250E  
                         ??_init_IO 000F                        __pdataCOMRAM 0041  
__size_of_Wait_One_Second_With_Beep 0016                         Set_EW@color 00A4  
                      __mediumconst FDBA                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                  __end_of_spiwrite 25B2                         Set_NS@color 00A4  
                        __accesstop 0080             __end_of__initialization 201E  
                         ?_INT0_ISR 0001                           ?_INT1_ISR 0001  
                         ?_INT2_ISR 0001                          ___ftge@ff1 000F  
                        ___ftge@ff2 0012                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 001B  
                        ___ftdiv@f2 001E                          ___ftdiv@f3 0025  
                        ___awtoft@c 0017                       __end_of_Rcmd1 13A8  
                     __end_of_Rcmd3 15A4                      __pcstackCOMRAM 0001  
                      __pidataBANK0 2628                       __end_of_font2 FF96  
                       ?_Night_Mode 0001                      drawPixel@color 0017  
            __size_of_write_command 0010                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_OpenUSART 1F60                __size_of_PED_Control 0044  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
                        ??_INT0_ISR 0001                          ??_INT1_ISR 0001  
         __size_of_Wait_Half_Second 001A                          ??_INT2_ISR 0001  
                   spiwrite@spidata 0010                           ?_Set_EWLT 0001  
                         ?_Set_NSLT 0001                   ?_update_LCD_color 00A1  
                 ?_update_LCD_count 00A8                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0041                  ??_update_LCD_count 0041  
                           ?___ftge 000F                             ?___wmul 000F  
                           ?_chkisr 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA                        ?_Do_Flashing 0001  
         update_LCD_PED_Count@count 00A8                           ?___awtoft 0017  
                         ?___ftpack 000F                     _Wait_One_Second 1DEC  
                        _fillCircle 20D0                             ?_strcpy 000F  
                           ?_strlen 000F                   ??_Activate_Buzzer 000F  
                        _fillScreen 250E                          _drawCircle 0CD6  
                        ??_Day_Mode 0041                           ?_delay_ms 0015  
                         ?_fillRect 0021           update_LCD_count@direction 00A9  
                         ?_drawChar 002C                             _SSPCON1 000FC6  
                         ?_drawRect 0021                             _SSPSTAT 000FC7  
             __end_of_fillRectangle 1762                           ?_drawtext 0037  
                           _SW_EWLT 0068                             _SW_MODE 006A  
                        ??_Init_ADC 000F                             _Do_Init 24C2  
                           _SW_NSLT 006B                          ??_Rcmd2red 0012  
               __size_of_Night_Mode 00AE                       _write_command 260A  
                        ??_Set_EWLT 0041                          ??_Set_NSLT 0041  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0048                     __size_of_Set_NS 0048  
             __end_of_drawFastHLine 1CDE                   __end_of_drawPixel 2470  
             __end_of_drawFastVLine 1D66                    _fillCircleHelper 1160  
                   __size_of___ftge 0096                             ___awdiv 1BC0  
                           ___awmod 1E6E                             ___ftdiv 15A4  
                   __size_of___wmul 0028               __size_of_get_full_ADC 0026  
                   __size_of_chkisr 1DE4                           ?_spiwrite 0001  
                           __pcinit 1FC6                          ??___awtoft 001A  
                        ??___ftpack 0014                             __ramtop 1000  
                           __ptext0 19CE                             __ptext1 1A7C  
                           __ptext2 001C                             __ptext3 250E  
                           __ptext4 1686                             __ptext5 1F60  
                           __ptext6 1C56                             __ptext7 2470  
                           __ptext8 14B2                             __ptext9 231E  
                 __end_of_init_UART 259E                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO 255E                           _T3CONbits 000FB1  
                  ___awmod@dividend 000F                          ??_delay_ms 0017  
                     drawtext@_text 0038                       drawtext@color 003A  
                        ??_fillRect 0026                          ??_drawChar 0033  
                         _LCD_Reset 25B2                          ??_drawRect 002B  
                     _setAddrWindow 2122                      __pintcode_body 1D66  
                drawFastHLine@color 0018                          delay_ms@ms 0015  
              end_of_initialization 201E                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FDBA  
                           int_func 1D66                           _PED_Count 0067  
                      _get_full_ADC 24E8                        PED_Control@i 00AC  
                         _EW_PED_SW 0063       __size_of_update_LCD_PED_Count 00D0  
           __end_of_Wait_One_Second 1E6E                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 000F  
                           strlen@s 000F                     fillCircle@color 003F  
                       ?_fillCircle 0039                           _PORTAbits 000F80  
                  drawtext@cursor_x 00A7                    drawtext@cursor_y 00A6  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0022                           _NS_PED_SW 0066  
                       ?_drawCircle 001A                          drawChar@bg 0030  
                         _TRISCbits 000F94                      ?_setAddrWindow 0012  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 0041  
                  drawtext@textsize 00A2            __size_of_update_LCD_misc 022A  
                        drawPixel@x 0019                          drawPixel@y 0016  
                  _Wait_Half_Second 2544                         ___ftdiv@exp 0028  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 00AA  
                get_full_ADC@result 0013                   __size_of_INT0_ISR 0012  
                 __size_of_INT1_ISR 0012                   __size_of_INT2_ISR 0008  
                    __end_of_Set_EW 22DA                      __end_of_Set_NS 224A  
                    __end_of___ftge 1BC0                      __end_of___wmul 24C2  
                     delay_ms@count 0019                          _write_data 25FA  
                     __pidataCOMRAM 252A                      __end_of_chkisr 1DEC  
                      ??_Night_Mode 0041            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 003C                __size_of_Do_Flashing 0056  
                    __end_of_strcpy 2440                      __end_of_strlen 239A  
               start_initialization 1FC6                   __size_of_Day_Mode 00D6  
                   ??_write_command 0011                           _OpenUSART 1EF0  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode 1B2A  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 00AC                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0041                            ??_Set_NS 0041  
                 __size_of_Set_EWLT 0048                     _Activate_Buzzer 25C4  
                 __size_of_Set_NSLT 0048                    ?_Wait_One_Second 0001  
                          ??___ftge 0015                            ??___wmul 0013  
                          ??_chkisr 0001                         __pdataBANK0 00AF  
                 update_LCD_misc@ch 00AA                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00B2  
         __size_of_update_LCD_color 0372           __size_of_update_LCD_count 0186  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 005B                       ??_PED_Control 0041  
                   ??_setAddrWindow 0015                       __pcstackBANK0 00A1  
                      _PED_NS_Count 00B5                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 1298                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                            ?_Do_Init 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_OpenUSART 000F                   __size_of_drawRect 0066  
                 __size_of_drawtext 010A                   ??_update_LCD_misc 0041  
                         __pintcode 0008     __end_of_TFT_GreenTab_Initialize 249A  
                     __pmediumconst FDBA                            ?___awdiv 000F  
                          ?___awmod 000F                            ?___ftdiv 001B  
                         __tft_type 006D                           _direction 0070  
                drawFastVLine@color 0018                         ?_write_data 0001  
                         _drawPixel 2440                   __size_of_spiwrite 0014  
                          ?_init_IO 0001                   _Initialize_Screen 001C  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
                         _init_UART 258A                  ?_Initialize_Screen 0001  
                          _FLASHING 0064   __end_of_Wait_One_Second_With_Beep 258A  
               __end_of_PED_Control 231E             __end_of_Activate_Buzzer 25D6  
                          _INT0_ISR 25E8                            _INT1_ISR 25D6  
                          _INT2_ISR 263A                      ___wmul@product 0013  
               ??_Initialize_Screen 0041                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 0045                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                         drawChar@c 002D                           drawChar@i 0036  
                         drawChar@j 0035                        ??_fillCircle 0041  
                         drawChar@x 0034                           drawChar@y 002C  
                        ?_drawPixel 0016              __size_of_fillRectangle 00DC  
                          _NS_Count 0048                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second 255E                   ___wmul@multiplier 000F  
         __end_of_Initialize_Screen 073A                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 004D                       _FlashingS_Txt 004F  
                      ??_drawCircle 0022        __end_of_update_LCD_PED_Count 1908  
                         main@nStep 00AD                            _SW_EWPED 0069  
             update_LCD_color@color 00A1                            _Day_Mode 1762  
                          _SW_NSPED 006C           update_LCD_color@direction 00A2  
                        ?_init_UART 0001              __size_of_drawFastHLine 0088  
                       _INTCON2bits 000FF1                         _INTCON3bits 000FF0  
                         copy_data0 1FF2                           copy_data1 2012  
                         drawtext@i 00A4              __size_of_drawFastVLine 0088  
                         drawtext@x 00A1                           drawtext@y 0037  
                          _Init_ADC 261A                   write_command@cmd_ 0011  
                       ??_OpenUSART 0011                            _Rcmd2red 231E  
                  __size_of_Do_Init 0026                 __size_of_write_data 0010  
                   OpenUSART@config 0011                            _Set_EWLT 224A  
                __end_of_fillCircle 2122                            _Set_NSLT 21BA  
                          __Hrparam 0000                  __end_of_fillScreen 252A  
             update_LCD_count@count 00A8                            __Lrparam 0000  
                __end_of_drawCircle 0E84                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                          ___awtoft 239A                            ___ftpack 1908  
                  _update_LCD_color 073A                    _update_LCD_count 0E84  
                  __size_of_init_IO 0016                         _PED_Control 22DA  
                          _delay_ms 207E                            __ptext10 1298  
                          __ptext11 25B2                            __ptext20 23D6  
                          __ptext12 207E                            __ptext21 0E84  
                          __ptext13 24C2                            __ptext30 21BA  
                          __ptext22 1DEC                            __ptext14 258A  
                          __ptext31 2202                            __ptext23 0AAC  
                          __ptext15 1EF0                            __ptext40 13A8  
                          __ptext32 224A                            __ptext24 24E8  
                          __ptext16 255E                            __ptext41 235C  
                          __ptext33 2292                            __ptext25 1B2A  
                          __ptext17 261A                            __ptext50 249A  
                          __ptext42 100A                            __ptext34 073A  
                          __ptext26 15A4                            __ptext18 2028  
                          __ptext51 1E6E                            __ptext43 2170  
                          __ptext35 20D0                            __ptext27 239A  
                          __ptext19 1762                            __ptext60 25E8  
                          __ptext52 1BC0                            __ptext44 1CDE  
                          __ptext36 1160                            __ptext28 1908  
                          __ptext53 2574                            __ptext45 2440  
                          __ptext37 0CD6                            __ptext29 240E  
                          __ptext54 2544                            __ptext46 2122  
                          __ptext38 22DA                            __ptext55 2632  
                          __ptext47 25FA                            __ptext39 1838  
                          __ptext56 25C4                            __ptext48 260A  
                          __ptext49 259E                            __ptext58 263A  
                          __ptext59 25D6                            _fillRect 2170  
                          _drawChar 100A                            _drawRect 1F60  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 0065  
                          _colstart 006E                            _drawtext 13A8  
                        strcpy@from 0011                       _fillRectangle 1686  
                  ?_Activate_Buzzer 0001                       __size_of_main 00AE  
                   fillRectangle@hi 001F                     fillRectangle@lo 0020  
                     _drawFastHLine 1C56                       _drawFastVLine 1CDE  
                     ??_Do_Flashing 0041                            _spiwrite 259E  
                       ??_drawPixel 0019                            _rowstart 0071  
                fillCircleHelper@x0 0021                  fillCircleHelper@y0 0023  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 000F                         ??_init_UART 0012  
                     Set_EWLT@color 00A4                          _EWLT_Count 0042  
                 ?_fillCircleHelper 0021                           spiwrite@x 000F  
       ??_Wait_One_Second_With_Beep 000F                            intlevel2 0000  
                   _update_LCD_misc 0AAC                      ?_fillRectangle 0016  
                ??_fillCircleHelper 002D               __end_of_write_command 261A  
                   fillScreen@color 0022                update_LCD_misc@nStep 00A8  
              _update_LCD_PED_Count 1838             __size_of_Wait_N_Seconds 0038  
                      fillCircle@x0 0039                        fillCircle@y0 003B  
                    ?_drawFastHLine 0016                      fillRectangle@h 0018  
                    fillRectangle@w 0017                      fillRectangle@x 0021  
                    fillRectangle@y 0016                      ?_drawFastVLine 0016  
                 fillCircleHelper@f 0033                   fillCircleHelper@r 0025  
                 fillCircleHelper@x 0035                   fillCircleHelper@y 0037  
                      ??_write_data 0011                       fillRect@color 0024  
          __size_of_Wait_One_Second 0082                            strcpy@cp 0013  
                          strlen@cp 0013                            strcpy@to 000F  
               __end_of_Do_Flashing 207E                       Set_NSLT@color 00A4  
                        _NSLT_Count 00AF                         fillCircle@r 003D  
             __end_of_setAddrWindow 2170                  fillRectangle@color 0019  
                     drawChar@color 002E                  __end_of_write_data 260A  
                      drawChar@line 0033                       ?_get_full_ADC 000F  
                      drawChar@size 0032               ?_update_LCD_PED_Count 00A8  
