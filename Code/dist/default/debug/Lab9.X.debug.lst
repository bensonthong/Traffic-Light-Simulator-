

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 08 20:41:32 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  00252E                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _wrap
    85  00252E  01                 	db	1
    86                           
    87                           ;initializer for _EWLT_Count
    88  00252F  30                 	db	48
    89  002530  30                 	db	48
    90  002531  00                 	db	0
    91                           
    92                           ;initializer for _EW_Count
    93  002532  30                 	db	48
    94  002533  30                 	db	48
    95  002534  00                 	db	0
    96                           
    97                           ;initializer for _NS_Count
    98  002535  30                 	db	48
    99  002536  30                 	db	48
   100  002537  00                 	db	0
   101                           
   102                           ;initializer for _Act_Mode_Txt
   103  002538  44                 	db	68
   104  002539  00                 	db	0
   105                           
   106                           ;initializer for _FlashingR_Txt
   107  00253A  30                 	db	48
   108  00253B  00                 	db	0
   109                           
   110                           ;initializer for _FlashingS_Txt
   111  00253C  30                 	db	48
   112  00253D  00                 	db	0
   113                           
   114                           ;initializer for _SW_EWLT_Txt
   115  00253E  30                 	db	48
   116  00253F  00                 	db	0
   117                           
   118                           ;initializer for _SW_EWPED_Txt
   119  002540  30                 	db	48
   120  002541  00                 	db	0
   121                           
   122                           ;initializer for _SW_MODE_Txt
   123  002542  44                 	db	68
   124  002543  00                 	db	0
   125                           
   126                           ;initializer for _SW_NSLT_Txt
   127  002544  30                 	db	48
   128  002545  00                 	db	0
   129                           
   130                           ;initializer for _SW_NSPED_Txt
   131  002546  30                 	db	48
   132  002547  00                 	db	0
   133                           
   134                           	psect	idataBANK0
   135  00262C                     __pidataBANK0:
   136                           	opt stack 0
   137                           
   138                           ;initializer for _NSLT_Count
   139  00262C  30                 	db	48
   140  00262D  30                 	db	48
   141  00262E  00                 	db	0
   142                           
   143                           ;initializer for _PED_EW_Count
   144  00262F  30                 	db	48
   145  002630  30                 	db	48
   146  002631  00                 	db	0
   147                           
   148                           ;initializer for _PED_NS_Count
   149  002632  30                 	db	48
   150  002633  30                 	db	48
   151  002634  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  00FDBA                     __pmediumconst:
   155                           	opt stack 0
   156  00FDBA  00                 	db	0
   157  00FDBB                     _font:
   158                           	opt stack 0
   159  00FDBB  00                 	db	0
   160  00FDBC  00                 	db	0
   161  00FDBD  00                 	db	0
   162  00FDBE  00                 	db	0
   163  00FDBF  00                 	db	0
   164  00FDC0  00                 	db	0
   165  00FDC1  00                 	db	0
   166  00FDC2  5F                 	db	95
   167  00FDC3  00                 	db	0
   168  00FDC4  00                 	db	0
   169  00FDC5  00                 	db	0
   170  00FDC6  07                 	db	7
   171  00FDC7  00                 	db	0
   172  00FDC8  07                 	db	7
   173  00FDC9  00                 	db	0
   174  00FDCA  14                 	db	20
   175  00FDCB  7F                 	db	127
   176  00FDCC  14                 	db	20
   177  00FDCD  7F                 	db	127
   178  00FDCE  14                 	db	20
   179  00FDCF  24                 	db	36
   180  00FDD0  2A                 	db	42
   181  00FDD1  7F                 	db	127
   182  00FDD2  2A                 	db	42
   183  00FDD3  12                 	db	18
   184  00FDD4  23                 	db	35
   185  00FDD5  13                 	db	19
   186  00FDD6  08                 	db	8
   187  00FDD7  64                 	db	100
   188  00FDD8  62                 	db	98
   189  00FDD9  36                 	db	54
   190  00FDDA  49                 	db	73
   191  00FDDB  56                 	db	86
   192  00FDDC  20                 	db	32
   193  00FDDD  50                 	db	80
   194  00FDDE  00                 	db	0
   195  00FDDF  08                 	db	8
   196  00FDE0  07                 	db	7
   197  00FDE1  03                 	db	3
   198  00FDE2  00                 	db	0
   199  00FDE3  00                 	db	0
   200  00FDE4  1C                 	db	28
   201  00FDE5  22                 	db	34
   202  00FDE6  41                 	db	65
   203  00FDE7  00                 	db	0
   204  00FDE8  00                 	db	0
   205  00FDE9  41                 	db	65
   206  00FDEA  22                 	db	34
   207  00FDEB  1C                 	db	28
   208  00FDEC  00                 	db	0
   209  00FDED  2A                 	db	42
   210  00FDEE  1C                 	db	28
   211  00FDEF  7F                 	db	127
   212  00FDF0  1C                 	db	28
   213  00FDF1  2A                 	db	42
   214  00FDF2  08                 	db	8
   215  00FDF3  08                 	db	8
   216  00FDF4  3E                 	db	62
   217  00FDF5  08                 	db	8
   218  00FDF6  08                 	db	8
   219  00FDF7  00                 	db	0
   220  00FDF8  80                 	db	128
   221  00FDF9  70                 	db	112
   222  00FDFA  30                 	db	48
   223  00FDFB  00                 	db	0
   224  00FDFC  08                 	db	8
   225  00FDFD  08                 	db	8
   226  00FDFE  08                 	db	8
   227  00FDFF  08                 	db	8
   228  00FE00  08                 	db	8
   229  00FE01  00                 	db	0
   230  00FE02  00                 	db	0
   231  00FE03  60                 	db	96
   232  00FE04  60                 	db	96
   233  00FE05  00                 	db	0
   234  00FE06  20                 	db	32
   235  00FE07  10                 	db	16
   236  00FE08  08                 	db	8
   237  00FE09  04                 	db	4
   238  00FE0A  02                 	db	2
   239  00FE0B  3E                 	db	62
   240  00FE0C  51                 	db	81
   241  00FE0D  49                 	db	73
   242  00FE0E  45                 	db	69
   243  00FE0F  3E                 	db	62
   244  00FE10  00                 	db	0
   245  00FE11  42                 	db	66
   246  00FE12  7F                 	db	127
   247  00FE13  40                 	db	64
   248  00FE14  00                 	db	0
   249  00FE15  72                 	db	114
   250  00FE16  49                 	db	73
   251  00FE17  49                 	db	73
   252  00FE18  49                 	db	73
   253  00FE19  46                 	db	70
   254  00FE1A  21                 	db	33
   255  00FE1B  41                 	db	65
   256  00FE1C  49                 	db	73
   257  00FE1D  4D                 	db	77
   258  00FE1E  33                 	db	51
   259  00FE1F  18                 	db	24
   260  00FE20  14                 	db	20
   261  00FE21  12                 	db	18
   262  00FE22  7F                 	db	127
   263  00FE23  10                 	db	16
   264  00FE24  27                 	db	39
   265  00FE25  45                 	db	69
   266  00FE26  45                 	db	69
   267  00FE27  45                 	db	69
   268  00FE28  39                 	db	57
   269  00FE29  3C                 	db	60
   270  00FE2A  4A                 	db	74
   271  00FE2B  49                 	db	73
   272  00FE2C  49                 	db	73
   273  00FE2D  31                 	db	49
   274  00FE2E  41                 	db	65
   275  00FE2F  21                 	db	33
   276  00FE30  11                 	db	17
   277  00FE31  09                 	db	9
   278  00FE32  07                 	db	7
   279  00FE33  36                 	db	54
   280  00FE34  49                 	db	73
   281  00FE35  49                 	db	73
   282  00FE36  49                 	db	73
   283  00FE37  36                 	db	54
   284  00FE38  46                 	db	70
   285  00FE39  49                 	db	73
   286  00FE3A  49                 	db	73
   287  00FE3B  29                 	db	41
   288  00FE3C  1E                 	db	30
   289  00FE3D  00                 	db	0
   290  00FE3E  00                 	db	0
   291  00FE3F  14                 	db	20
   292  00FE40  00                 	db	0
   293  00FE41  00                 	db	0
   294  00FE42  00                 	db	0
   295  00FE43  40                 	db	64
   296  00FE44  34                 	db	52
   297  00FE45  00                 	db	0
   298  00FE46  00                 	db	0
   299  00FE47  00                 	db	0
   300  00FE48  08                 	db	8
   301  00FE49  14                 	db	20
   302  00FE4A  22                 	db	34
   303  00FE4B  41                 	db	65
   304  00FE4C  14                 	db	20
   305  00FE4D  14                 	db	20
   306  00FE4E  14                 	db	20
   307  00FE4F  14                 	db	20
   308  00FE50  14                 	db	20
   309  00FE51  00                 	db	0
   310  00FE52  41                 	db	65
   311  00FE53  22                 	db	34
   312  00FE54  14                 	db	20
   313  00FE55  08                 	db	8
   314  00FE56  02                 	db	2
   315  00FE57  01                 	db	1
   316  00FE58  59                 	db	89
   317  00FE59  09                 	db	9
   318  00FE5A  06                 	db	6
   319  00FE5B  3E                 	db	62
   320  00FE5C  41                 	db	65
   321  00FE5D  5D                 	db	93
   322  00FE5E  59                 	db	89
   323  00FE5F  4E                 	db	78
   324  00FE60  7C                 	db	124
   325  00FE61  12                 	db	18
   326  00FE62  11                 	db	17
   327  00FE63  12                 	db	18
   328  00FE64  7C                 	db	124
   329  00FE65  7F                 	db	127
   330  00FE66  49                 	db	73
   331  00FE67  49                 	db	73
   332  00FE68  49                 	db	73
   333  00FE69  36                 	db	54
   334  00FE6A  3E                 	db	62
   335  00FE6B  41                 	db	65
   336  00FE6C  41                 	db	65
   337  00FE6D  41                 	db	65
   338  00FE6E  22                 	db	34
   339  00FE6F  7F                 	db	127
   340  00FE70  41                 	db	65
   341  00FE71  41                 	db	65
   342  00FE72  41                 	db	65
   343  00FE73  3E                 	db	62
   344  00FE74  7F                 	db	127
   345  00FE75  49                 	db	73
   346  00FE76  49                 	db	73
   347  00FE77  49                 	db	73
   348  00FE78  41                 	db	65
   349  00FE79  7F                 	db	127
   350  00FE7A  09                 	db	9
   351  00FE7B  09                 	db	9
   352  00FE7C  09                 	db	9
   353  00FE7D  01                 	db	1
   354  00FE7E  3E                 	db	62
   355  00FE7F  41                 	db	65
   356  00FE80  41                 	db	65
   357  00FE81  51                 	db	81
   358  00FE82  73                 	db	115
   359  00FE83  7F                 	db	127
   360  00FE84  08                 	db	8
   361  00FE85  08                 	db	8
   362  00FE86  08                 	db	8
   363  00FE87  7F                 	db	127
   364  00FE88  00                 	db	0
   365  00FE89  41                 	db	65
   366  00FE8A  7F                 	db	127
   367  00FE8B  41                 	db	65
   368  00FE8C  00                 	db	0
   369  00FE8D  20                 	db	32
   370  00FE8E  40                 	db	64
   371  00FE8F  41                 	db	65
   372  00FE90  3F                 	db	63
   373  00FE91  01                 	db	1
   374  00FE92  7F                 	db	127
   375  00FE93  08                 	db	8
   376  00FE94  14                 	db	20
   377  00FE95  22                 	db	34
   378  00FE96  41                 	db	65
   379  00FE97  7F                 	db	127
   380  00FE98  40                 	db	64
   381  00FE99  40                 	db	64
   382  00FE9A  40                 	db	64
   383  00FE9B  40                 	db	64
   384  00FE9C  7F                 	db	127
   385  00FE9D  02                 	db	2
   386  00FE9E  1C                 	db	28
   387  00FE9F  02                 	db	2
   388  00FEA0  7F                 	db	127
   389  00FEA1  7F                 	db	127
   390  00FEA2  04                 	db	4
   391  00FEA3  08                 	db	8
   392  00FEA4  10                 	db	16
   393  00FEA5  7F                 	db	127
   394  00FEA6  3E                 	db	62
   395  00FEA7  41                 	db	65
   396  00FEA8  41                 	db	65
   397  00FEA9  41                 	db	65
   398  00FEAA  3E                 	db	62
   399  00FEAB  7F                 	db	127
   400  00FEAC  09                 	db	9
   401  00FEAD  09                 	db	9
   402  00FEAE  09                 	db	9
   403  00FEAF  06                 	db	6
   404  00FEB0  3E                 	db	62
   405  00FEB1  41                 	db	65
   406  00FEB2  51                 	db	81
   407  00FEB3  21                 	db	33
   408  00FEB4  5E                 	db	94
   409  00FEB5  7F                 	db	127
   410  00FEB6  09                 	db	9
   411  00FEB7  19                 	db	25
   412  00FEB8  29                 	db	41
   413  00FEB9  46                 	db	70
   414  00FEBA                     __end_of_font:
   415                           	opt stack 0
   416  00FEBA                     _font2:
   417                           	opt stack 0
   418  00FEBA  26                 	db	38
   419  00FEBB  49                 	db	73
   420  00FEBC  49                 	db	73
   421  00FEBD  49                 	db	73
   422  00FEBE  32                 	db	50
   423  00FEBF  03                 	db	3
   424  00FEC0  01                 	db	1
   425  00FEC1  7F                 	db	127
   426  00FEC2  01                 	db	1
   427  00FEC3  03                 	db	3
   428  00FEC4  3F                 	db	63
   429  00FEC5  40                 	db	64
   430  00FEC6  40                 	db	64
   431  00FEC7  40                 	db	64
   432  00FEC8  3F                 	db	63
   433  00FEC9  1F                 	db	31
   434  00FECA  20                 	db	32
   435  00FECB  40                 	db	64
   436  00FECC  20                 	db	32
   437  00FECD  1F                 	db	31
   438  00FECE  3F                 	db	63
   439  00FECF  40                 	db	64
   440  00FED0  38                 	db	56
   441  00FED1  40                 	db	64
   442  00FED2  3F                 	db	63
   443  00FED3  63                 	db	99
   444  00FED4  14                 	db	20
   445  00FED5  08                 	db	8
   446  00FED6  14                 	db	20
   447  00FED7  63                 	db	99
   448  00FED8  03                 	db	3
   449  00FED9  04                 	db	4
   450  00FEDA  78                 	db	120
   451  00FEDB  04                 	db	4
   452  00FEDC  03                 	db	3
   453  00FEDD  61                 	db	97
   454  00FEDE  59                 	db	89
   455  00FEDF  49                 	db	73
   456  00FEE0  4D                 	db	77
   457  00FEE1  43                 	db	67
   458  00FEE2  00                 	db	0
   459  00FEE3  7F                 	db	127
   460  00FEE4  41                 	db	65
   461  00FEE5  41                 	db	65
   462  00FEE6  41                 	db	65
   463  00FEE7  02                 	db	2
   464  00FEE8  04                 	db	4
   465  00FEE9  08                 	db	8
   466  00FEEA  10                 	db	16
   467  00FEEB  20                 	db	32
   468  00FEEC  00                 	db	0
   469  00FEED  41                 	db	65
   470  00FEEE  41                 	db	65
   471  00FEEF  41                 	db	65
   472  00FEF0  7F                 	db	127
   473  00FEF1  04                 	db	4
   474  00FEF2  02                 	db	2
   475  00FEF3  01                 	db	1
   476  00FEF4  02                 	db	2
   477  00FEF5  04                 	db	4
   478  00FEF6  40                 	db	64
   479  00FEF7  40                 	db	64
   480  00FEF8  40                 	db	64
   481  00FEF9  40                 	db	64
   482  00FEFA  40                 	db	64
   483  00FEFB  00                 	db	0
   484  00FEFC  03                 	db	3
   485  00FEFD  07                 	db	7
   486  00FEFE  08                 	db	8
   487  00FEFF  00                 	db	0
   488  00FF00  20                 	db	32
   489  00FF01  54                 	db	84
   490  00FF02  54                 	db	84
   491  00FF03  78                 	db	120
   492  00FF04  40                 	db	64
   493  00FF05  7F                 	db	127
   494  00FF06  28                 	db	40
   495  00FF07  44                 	db	68
   496  00FF08  44                 	db	68
   497  00FF09  38                 	db	56
   498  00FF0A  38                 	db	56
   499  00FF0B  44                 	db	68
   500  00FF0C  44                 	db	68
   501  00FF0D  44                 	db	68
   502  00FF0E  28                 	db	40
   503  00FF0F  38                 	db	56
   504  00FF10  44                 	db	68
   505  00FF11  44                 	db	68
   506  00FF12  28                 	db	40
   507  00FF13  7F                 	db	127
   508  00FF14  38                 	db	56
   509  00FF15  54                 	db	84
   510  00FF16  54                 	db	84
   511  00FF17  54                 	db	84
   512  00FF18  18                 	db	24
   513  00FF19  00                 	db	0
   514  00FF1A  08                 	db	8
   515  00FF1B  7E                 	db	126
   516  00FF1C  09                 	db	9
   517  00FF1D  02                 	db	2
   518  00FF1E  18                 	db	24
   519  00FF1F  A4                 	db	164
   520  00FF20  A4                 	db	164
   521  00FF21  9C                 	db	156
   522  00FF22  78                 	db	120
   523  00FF23  7F                 	db	127
   524  00FF24  08                 	db	8
   525  00FF25  04                 	db	4
   526  00FF26  04                 	db	4
   527  00FF27  78                 	db	120
   528  00FF28  00                 	db	0
   529  00FF29  44                 	db	68
   530  00FF2A  7D                 	db	125
   531  00FF2B  40                 	db	64
   532  00FF2C  00                 	db	0
   533  00FF2D  20                 	db	32
   534  00FF2E  40                 	db	64
   535  00FF2F  40                 	db	64
   536  00FF30  3D                 	db	61
   537  00FF31  00                 	db	0
   538  00FF32  7F                 	db	127
   539  00FF33  10                 	db	16
   540  00FF34  28                 	db	40
   541  00FF35  44                 	db	68
   542  00FF36  00                 	db	0
   543  00FF37  00                 	db	0
   544  00FF38  41                 	db	65
   545  00FF39  7F                 	db	127
   546  00FF3A  40                 	db	64
   547  00FF3B  00                 	db	0
   548  00FF3C  7C                 	db	124
   549  00FF3D  04                 	db	4
   550  00FF3E  78                 	db	120
   551  00FF3F  04                 	db	4
   552  00FF40  78                 	db	120
   553  00FF41  7C                 	db	124
   554  00FF42  08                 	db	8
   555  00FF43  04                 	db	4
   556  00FF44  04                 	db	4
   557  00FF45  78                 	db	120
   558  00FF46  38                 	db	56
   559  00FF47  44                 	db	68
   560  00FF48  44                 	db	68
   561  00FF49  44                 	db	68
   562  00FF4A  38                 	db	56
   563  00FF4B  FC                 	db	252
   564  00FF4C  18                 	db	24
   565  00FF4D  24                 	db	36
   566  00FF4E  24                 	db	36
   567  00FF4F  18                 	db	24
   568  00FF50  18                 	db	24
   569  00FF51  24                 	db	36
   570  00FF52  24                 	db	36
   571  00FF53  18                 	db	24
   572  00FF54  FC                 	db	252
   573  00FF55  7C                 	db	124
   574  00FF56  08                 	db	8
   575  00FF57  04                 	db	4
   576  00FF58  04                 	db	4
   577  00FF59  08                 	db	8
   578  00FF5A  48                 	db	72
   579  00FF5B  54                 	db	84
   580  00FF5C  54                 	db	84
   581  00FF5D  54                 	db	84
   582  00FF5E  24                 	db	36
   583  00FF5F  04                 	db	4
   584  00FF60  04                 	db	4
   585  00FF61  3F                 	db	63
   586  00FF62  44                 	db	68
   587  00FF63  24                 	db	36
   588  00FF64  3C                 	db	60
   589  00FF65  40                 	db	64
   590  00FF66  40                 	db	64
   591  00FF67  20                 	db	32
   592  00FF68  7C                 	db	124
   593  00FF69  1C                 	db	28
   594  00FF6A  20                 	db	32
   595  00FF6B  40                 	db	64
   596  00FF6C  20                 	db	32
   597  00FF6D  1C                 	db	28
   598  00FF6E  3C                 	db	60
   599  00FF6F  40                 	db	64
   600  00FF70  30                 	db	48
   601  00FF71  40                 	db	64
   602  00FF72  3C                 	db	60
   603  00FF73  44                 	db	68
   604  00FF74  28                 	db	40
   605  00FF75  10                 	db	16
   606  00FF76  28                 	db	40
   607  00FF77  44                 	db	68
   608  00FF78  4C                 	db	76
   609  00FF79  90                 	db	144
   610  00FF7A  90                 	db	144
   611  00FF7B  90                 	db	144
   612  00FF7C  7C                 	db	124
   613  00FF7D  44                 	db	68
   614  00FF7E  64                 	db	100
   615  00FF7F  54                 	db	84
   616  00FF80  4C                 	db	76
   617  00FF81  44                 	db	68
   618  00FF82  00                 	db	0
   619  00FF83  08                 	db	8
   620  00FF84  36                 	db	54
   621  00FF85  41                 	db	65
   622  00FF86  00                 	db	0
   623  00FF87  00                 	db	0
   624  00FF88  00                 	db	0
   625  00FF89  77                 	db	119
   626  00FF8A  00                 	db	0
   627  00FF8B  00                 	db	0
   628  00FF8C  00                 	db	0
   629  00FF8D  41                 	db	65
   630  00FF8E  36                 	db	54
   631  00FF8F  08                 	db	8
   632  00FF90  00                 	db	0
   633  00FF91  02                 	db	2
   634  00FF92  01                 	db	1
   635  00FF93  02                 	db	2
   636  00FF94  04                 	db	4
   637  00FF95  02                 	db	2
   638  00FF96                     __end_of_font2:
   639                           	opt stack 0
   640  0000                     _ADCON0	set	4034
   641  0000                     _ADCON0bits	set	4034
   642  0000                     _ADCON1	set	4033
   643  0000                     _ADCON2	set	4032
   644  0000                     _ADRESH	set	4036
   645  0000                     _ADRESL	set	4035
   646  0000                     _CCP2CON	set	4026
   647  0000                     _CCPR2L	set	4027
   648  0000                     _INTCON2bits	set	4081
   649  0000                     _INTCON3bits	set	4080
   650  0000                     _INTCONbits	set	4082
   651  0000                     _OSCCON	set	4051
   652  0000                     _PIE1bits	set	3997
   653  0000                     _PIR1bits	set	3998
   654  0000                     _PIR2bits	set	4001
   655  0000                     _PORTAbits	set	3968
   656  0000                     _PORTBbits	set	3969
   657  0000                     _PORTCbits	set	3970
   658  0000                     _PORTDbits	set	3971
   659  0000                     _PORTEbits	set	3972
   660  0000                     _PR2	set	4043
   661  0000                     _RCSTA	set	4011
   662  0000                     _RCSTAbits	set	4011
   663  0000                     _SPBRG	set	4015
   664  0000                     _SPBRGH	set	4016
   665  0000                     _SSPBUF	set	4041
   666  0000                     _SSPCON1	set	4038
   667  0000                     _SSPSTAT	set	4039
   668  0000                     _SSPSTATbits	set	4039
   669  0000                     _T0CON	set	4053
   670  0000                     _T0CONbits	set	4053
   671  0000                     _T2CON	set	4042
   672  0000                     _T3CON	set	4017
   673  0000                     _T3CONbits	set	4017
   674  0000                     _TMR0H	set	4055
   675  0000                     _TMR0L	set	4054
   676  0000                     _TRISA	set	3986
   677  0000                     _TRISB	set	3987
   678  0000                     _TRISC	set	3988
   679  0000                     _TRISCbits	set	3988
   680  0000                     _TRISD	set	3989
   681  0000                     _TRISE	set	3990
   682  0000                     _TXREG	set	4013
   683  0000                     _TXSTA	set	4012
   684  0000                     _TXSTAbits	set	4012
   685  0000                     _RBPU	set	32655
   686  0000                     _TRMT	set	32097
   687  00FF96                     STR_1:
   688  00FF96  45                 	db	69	;'E'
   689  00FF97  43                 	db	67	;'C'
   690  00FF98  45                 	db	69	;'E'
   691  00FF99  33                 	db	51	;'3'
   692  00FF9A  33                 	db	51	;'3'
   693  00FF9B  30                 	db	48	;'0'
   694  00FF9C  31                 	db	49	;'1'
   695  00FF9D  4C                 	db	76	;'L'
   696  00FF9E  20                 	db	32
   697  00FF9F  53                 	db	83	;'S'
   698  00FFA0  70                 	db	112	;'p'
   699  00FFA1  72                 	db	114	;'r'
   700  00FFA2  69                 	db	105	;'i'
   701  00FFA3  6E                 	db	110	;'n'
   702  00FFA4  67                 	db	103	;'g'
   703  00FFA5  20                 	db	32
   704  00FFA6  32                 	db	50	;'2'
   705  00FFA7  31                 	db	49	;'1'
   706  00FFA8  2D                 	db	45
   707  00FFA9  53                 	db	83	;'S'
   708  00FFAA  31                 	db	49	;'1'
   709  00FFAB  00                 	db	0
   710  00FFAC                     STR_12:
   711  00FFAC  45                 	db	69	;'E'
   712  00FFAD  57                 	db	87	;'W'
   713  00FFAE  50                 	db	80	;'P'
   714  00FFAF  20                 	db	32
   715  00FFB0  45                 	db	69	;'E'
   716  00FFB1  57                 	db	87	;'W'
   717  00FFB2  4C                 	db	76	;'L'
   718  00FFB3  54                 	db	84	;'T'
   719  00FFB4  20                 	db	32
   720  00FFB5  4E                 	db	78	;'N'
   721  00FFB6  53                 	db	83	;'S'
   722  00FFB7  50                 	db	80	;'P'
   723  00FFB8  20                 	db	32
   724  00FFB9  4E                 	db	78	;'N'
   725  00FFBA  53                 	db	83	;'S'
   726  00FFBB  4C                 	db	76	;'L'
   727  00FFBC  54                 	db	84	;'T'
   728  00FFBD  20                 	db	32
   729  00FFBE  4D                 	db	77	;'M'
   730  00FFBF  44                 	db	68	;'D'
   731  00FFC0  00                 	db	0
   732  00FFC1                     STR_8:
   733  00FFC1  4E                 	db	78	;'N'
   734  00FFC2  4F                 	db	79	;'O'
   735  00FFC3  52                 	db	82	;'R'
   736  00FFC4  54                 	db	84	;'T'
   737  00FFC5  48                 	db	72	;'H'
   738  00FFC6  2F                 	db	47
   739  00FFC7  53                 	db	83	;'S'
   740  00FFC8  4F                 	db	79	;'O'
   741  00FFC9  55                 	db	85	;'U'
   742  00FFCA  54                 	db	84	;'T'
   743  00FFCB  48                 	db	72	;'H'
   744  00FFCC  00                 	db	0
   745  00FFCD                     STR_6:
   746  00FFCD  45                 	db	69	;'E'
   747  00FFCE  41                 	db	65	;'A'
   748  00FFCF  53                 	db	83	;'S'
   749  00FFD0  54                 	db	84	;'T'
   750  00FFD1  2F                 	db	47
   751  00FFD2  57                 	db	87	;'W'
   752  00FFD3  45                 	db	69	;'E'
   753  00FFD4  53                 	db	83	;'S'
   754  00FFD5  54                 	db	84	;'T'
   755  00FFD6  00                 	db	0
   756  00FFD7                     STR_9:
   757  00FFD7  4E                 	db	78	;'N'
   758  00FFD8  2F                 	db	47
   759  00FFD9  53                 	db	83	;'S'
   760  00FFDA  20                 	db	32
   761  00FFDB  4C                 	db	76	;'L'
   762  00FFDC  54                 	db	84	;'T'
   763  00FFDD  00                 	db	0
   764  00FFDE                     STR_7:
   765  00FFDE  45                 	db	69	;'E'
   766  00FFDF  2F                 	db	47
   767  00FFE0  57                 	db	87	;'W'
   768  00FFE1  20                 	db	32
   769  00FFE2  4C                 	db	76	;'L'
   770  00FFE3  54                 	db	84	;'T'
   771  00FFE4  00                 	db	0
   772  00FFE5                     STR_2:
   773  00FFE5  4D                 	db	77	;'M'
   774  00FFE6  6F                 	db	111	;'o'
   775  00FFE7  64                 	db	100	;'d'
   776  00FFE8  65                 	db	101	;'e'
   777  00FFE9  3A                 	db	58	;':'
   778  00FFEA  00                 	db	0
   779  00FFEB                     STR_3:
   780  00FFEB  46                 	db	70	;'F'
   781  00FFEC  52                 	db	82	;'R'
   782  00FFED  3A                 	db	58	;':'
   783  00FFEE  00                 	db	0
   784  00FFEF                     STR_4:
   785  00FFEF  46                 	db	70	;'F'
   786  00FFF0  53                 	db	83	;'S'
   787  00FFF1  3A                 	db	58	;':'
   788  00FFF2  00                 	db	0
   789  00FFF3                     STR_11:
   790  00FFF3  50                 	db	80	;'P'
   791  00FFF4  4E                 	db	78	;'N'
   792  00FFF5  53                 	db	83	;'S'
   793  00FFF6  00                 	db	0
   794  00FFF7                     STR_10:
   795  00FFF7  50                 	db	80	;'P'
   796  00FFF8  45                 	db	69	;'E'
   797  00FFF9  57                 	db	87	;'W'
   798  00FFFA  00                 	db	0
   799  00FFFB                     STR_14:
   800  00FFFB  20                 	db	32
   801  00FFFC  00                 	db	0
   802  00FFFD                     STR_5:
   803  00FFFD  2A                 	db	42
   804  00FFFE  00                 	db	0
   805  0000                     
   806                           ; #config settings
   807  00FFFF  00                 	db	0	; dummy byte at the end
   808  0000                     
   809                           	psect	cinit
   810  001FC6                     __pcinit:
   811                           	opt stack 0
   812  001FC6                     start_initialization:
   813                           	opt stack 0
   814  001FC6                     __initialization:
   815                           	opt stack 0
   816                           
   817                           ; Clear objects allocated to BANK0 (33 bytes)
   818  001FC6  EE00  F080         	lfsr	0,__pbssBANK0
   819  001FCA  0E21               	movlw	33
   820  001FCC                     clear_0:
   821  001FCC  6AEE               	clrf	postinc0,c
   822  001FCE  06E8               	decf	wreg,f,c
   823  001FD0  E1FD               	bnz	clear_0
   824                           
   825                           ; Clear objects allocated to COMRAM (23 bytes)
   826  001FD2  EE00  F05B         	lfsr	0,__pbssCOMRAM
   827  001FD6  0E17               	movlw	23
   828  001FD8                     clear_1:
   829  001FD8  6AEE               	clrf	postinc0,c
   830  001FDA  06E8               	decf	wreg,f,c
   831  001FDC  E1FD               	bnz	clear_1
   832                           
   833                           ; Initialize objects allocated to BANK0 (9 bytes)
   834                           ; load TBLPTR registers with __pidataBANK0
   835  001FDE  0E2C               	movlw	low __pidataBANK0
   836  001FE0  6EF6               	movwf	tblptrl,c
   837  001FE2  0E26               	movlw	high __pidataBANK0
   838  001FE4  6EF7               	movwf	tblptrh,c
   839  001FE6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   840  001FE8  6EF8               	movwf	tblptru,c
   841  001FEA  EE00  F0AF         	lfsr	0,__pdataBANK0
   842  001FEE  EE10 F009          	lfsr	1,9
   843  001FF2                     copy_data0:
   844  001FF2  0009               	tblrd		*+
   845  001FF4  CFF5 FFEE          	movff	tablat,postinc0
   846  001FF8  50E5               	movf	postdec1,w,c
   847  001FFA  50E1               	movf	fsr1l,w,c
   848  001FFC  E1FA               	bnz	copy_data0
   849                           
   850                           ; Initialize objects allocated to COMRAM (26 bytes)
   851                           ; load TBLPTR registers with __pidataCOMRAM
   852  001FFE  0E2E               	movlw	low __pidataCOMRAM
   853  002000  6EF6               	movwf	tblptrl,c
   854  002002  0E25               	movlw	high __pidataCOMRAM
   855  002004  6EF7               	movwf	tblptrh,c
   856  002006  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   857  002008  6EF8               	movwf	tblptru,c
   858  00200A  EE00  F041         	lfsr	0,__pdataCOMRAM
   859  00200E  EE10 F01A          	lfsr	1,26
   860  002012                     copy_data1:
   861  002012  0009               	tblrd		*+
   862  002014  CFF5 FFEE          	movff	tablat,postinc0
   863  002018  50E5               	movf	postdec1,w,c
   864  00201A  50E1               	movf	fsr1l,w,c
   865  00201C  E1FA               	bnz	copy_data1
   866  00201E                     end_of_initialization:
   867                           	opt stack 0
   868  00201E                     __end_of__initialization:
   869                           	opt stack 0
   870  00201E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   871  002020  6EF8               	movwf	tblptru,c
   872  002022  0100               	movlb	0
   873  002024  EFE7  F00C         	goto	_main	;jump to C main() function
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           postinc0	equ	0xFEE
   879                           wreg	equ	0xFE8
   880                           postdec1	equ	0xFE5
   881                           fsr1l	equ	0xFE1
   882                           
   883                           	psect	bssCOMRAM
   884  00005B                     __pbssCOMRAM:
   885                           	opt stack 0
   886  00005B                     _volt:
   887                           	opt stack 0
   888  00005B                     	ds	3
   889  00005E                     _MODE:
   890                           	opt stack 0
   891  00005E                     	ds	2
   892  000060                     _txt:
   893                           	opt stack 0
   894  000060                     	ds	2
   895  000062                     _Count:
   896                           	opt stack 0
   897  000062                     	ds	1
   898  000063                     _EW_PED_SW:
   899                           	opt stack 0
   900  000063                     	ds	1
   901  000064                     _FLASHING:
   902                           	opt stack 0
   903  000064                     	ds	1
   904  000065                     _FLASHING_REQUEST:
   905                           	opt stack 0
   906  000065                     	ds	1
   907  000066                     _NS_PED_SW:
   908                           	opt stack 0
   909  000066                     	ds	1
   910  000067                     _PED_Count:
   911                           	opt stack 0
   912  000067                     	ds	1
   913  000068                     _SW_EWLT:
   914                           	opt stack 0
   915  000068                     	ds	1
   916  000069                     _SW_EWPED:
   917                           	opt stack 0
   918  000069                     	ds	1
   919  00006A                     _SW_MODE:
   920                           	opt stack 0
   921  00006A                     	ds	1
   922  00006B                     _SW_NSLT:
   923                           	opt stack 0
   924  00006B                     	ds	1
   925  00006C                     _SW_NSPED:
   926                           	opt stack 0
   927  00006C                     	ds	1
   928  00006D                     __tft_type:
   929                           	opt stack 0
   930  00006D                     	ds	1
   931  00006E                     _colstart:
   932                           	opt stack 0
   933  00006E                     	ds	1
   934  00006F                     _dir:
   935                           	opt stack 0
   936  00006F                     	ds	1
   937  000070                     _direction:
   938                           	opt stack 0
   939  000070                     	ds	1
   940  000071                     _rowstart:
   941                           	opt stack 0
   942  000071                     	ds	1
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952                           	psect	dataCOMRAM
   953  000041                     __pdataCOMRAM:
   954                           	opt stack 0
   955  000041                     _wrap:
   956                           	opt stack 0
   957  000041                     	ds	1
   958  000042                     _EWLT_Count:
   959                           	opt stack 0
   960  000042                     	ds	3
   961  000045                     _EW_Count:
   962                           	opt stack 0
   963  000045                     	ds	3
   964  000048                     _NS_Count:
   965                           	opt stack 0
   966  000048                     	ds	3
   967  00004B                     _Act_Mode_Txt:
   968                           	opt stack 0
   969  00004B                     	ds	2
   970  00004D                     _FlashingR_Txt:
   971                           	opt stack 0
   972  00004D                     	ds	2
   973  00004F                     _FlashingS_Txt:
   974                           	opt stack 0
   975  00004F                     	ds	2
   976  000051                     _SW_EWLT_Txt:
   977                           	opt stack 0
   978  000051                     	ds	2
   979  000053                     _SW_EWPED_Txt:
   980                           	opt stack 0
   981  000053                     	ds	2
   982  000055                     _SW_MODE_Txt:
   983                           	opt stack 0
   984  000055                     	ds	2
   985  000057                     _SW_NSLT_Txt:
   986                           	opt stack 0
   987  000057                     	ds	2
   988  000059                     _SW_NSPED_Txt:
   989                           	opt stack 0
   990  000059                     	ds	2
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           postinc0	equ	0xFEE
   996                           wreg	equ	0xFE8
   997                           postdec1	equ	0xFE5
   998                           fsr1l	equ	0xFE1
   999                           
  1000                           	psect	bssBANK0
  1001  000080                     __pbssBANK0:
  1002                           	opt stack 0
  1003  000080                     _nbr:
  1004                           	opt stack 0
  1005  000080                     	ds	2
  1006  000082                     _buffer:
  1007                           	opt stack 0
  1008  000082                     	ds	31
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           postdec1	equ	0xFE5
  1016                           fsr1l	equ	0xFE1
  1017                           
  1018                           	psect	dataBANK0
  1019  0000AF                     __pdataBANK0:
  1020                           	opt stack 0
  1021  0000AF                     _NSLT_Count:
  1022                           	opt stack 0
  1023  0000AF                     	ds	3
  1024  0000B2                     _PED_EW_Count:
  1025                           	opt stack 0
  1026  0000B2                     	ds	3
  1027  0000B5                     _PED_NS_Count:
  1028                           	opt stack 0
  1029  0000B5                     	ds	3
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  0000A1                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  0000A1                     drawtext@x:
  1043                           	opt stack 0
  1044  0000A1                     update_LCD_color@color:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x0
  1048  0000A1                     	ds	1
  1049  0000A2                     update_LCD_color@direction:
  1050                           	opt stack 0
  1051  0000A2                     drawtext@textsize:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x1
  1055  0000A2                     	ds	1
  1056  0000A3                     update_LCD_color@Circle_Y:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x2
  1060  0000A3                     	ds	1
  1061  0000A4                     Set_NS@color:
  1062                           	opt stack 0
  1063  0000A4                     Set_NSLT@color:
  1064                           	opt stack 0
  1065  0000A4                     Set_EW@color:
  1066                           	opt stack 0
  1067  0000A4                     Set_EWLT@color:
  1068                           	opt stack 0
  1069  0000A4                     drawtext@i:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x3
  1073  0000A4                     	ds	2
  1074  0000A6                     drawtext@cursor_y:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x5
  1078  0000A6                     	ds	1
  1079  0000A7                     drawtext@cursor_x:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x6
  1083  0000A7                     	ds	1
  1084  0000A8                     update_LCD_count@count:
  1085                           	opt stack 0
  1086  0000A8                     update_LCD_PED_Count@count:
  1087                           	opt stack 0
  1088  0000A8                     update_LCD_misc@nStep:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x7
  1092  0000A8                     	ds	1
  1093  0000A9                     update_LCD_count@direction:
  1094                           	opt stack 0
  1095  0000A9                     update_LCD_PED_Count@direction:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x8
  1099  0000A9                     	ds	1
  1100  0000AA                     PED_Control@Num_Sec:
  1101                           	opt stack 0
  1102  0000AA                     update_LCD_misc@ch:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x9
  1106  0000AA                     	ds	1
  1107  0000AB                     PED_Control@direction:
  1108                           	opt stack 0
  1109  0000AB                     Wait_N_Seconds@seconds:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0xA
  1113  0000AB                     	ds	1
  1114  0000AC                     PED_Control@i:
  1115                           	opt stack 0
  1116  0000AC                     Wait_N_Seconds@I:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0xB
  1120  0000AC                     	ds	1
  1121  0000AD                     main@nStep:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0xC
  1125  0000AD                     	ds	2
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           postdec1	equ	0xFE5
  1133                           fsr1l	equ	0xFE1
  1134                           
  1135                           	psect	cstackCOMRAM
  1136  000001                     __pcstackCOMRAM:
  1137                           	opt stack 0
  1138  000001                     ??_chkisr:
  1139  000001                     
  1140                           ; 0 bytes @ 0x0
  1141  000001                     	ds	14
  1142  00000F                     ?_strlen:
  1143                           	opt stack 0
  1144  00000F                     ?_get_full_ADC:
  1145                           	opt stack 0
  1146  00000F                     ?___wmul:
  1147                           	opt stack 0
  1148  00000F                     ?___awdiv:
  1149                           	opt stack 0
  1150  00000F                     ?___awmod:
  1151                           	opt stack 0
  1152  00000F                     ?___ftpack:
  1153                           	opt stack 0
  1154  00000F                     spiwrite@x:
  1155                           	opt stack 0
  1156  00000F                     OpenUSART@spbrg:
  1157                           	opt stack 0
  1158  00000F                     ___wmul@multiplier:
  1159                           	opt stack 0
  1160  00000F                     ___awdiv@dividend:
  1161                           	opt stack 0
  1162  00000F                     ___awmod@dividend:
  1163                           	opt stack 0
  1164  00000F                     strcpy@to:
  1165                           	opt stack 0
  1166  00000F                     strlen@s:
  1167                           	opt stack 0
  1168  00000F                     ___ftpack@arg:
  1169                           	opt stack 0
  1170  00000F                     ___ftge@ff1:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0xE
  1174  00000F                     	ds	1
  1175  000010                     spiwrite@spidata:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0xF
  1179  000010                     	ds	1
  1180  000011                     ??_strlen:
  1181  000011                     ??_get_full_ADC:
  1182  000011                     write_command@cmd_:
  1183                           	opt stack 0
  1184  000011                     write_data@data_:
  1185                           	opt stack 0
  1186  000011                     OpenUSART@config:
  1187                           	opt stack 0
  1188  000011                     ___wmul@multiplicand:
  1189                           	opt stack 0
  1190  000011                     ___awdiv@divisor:
  1191                           	opt stack 0
  1192  000011                     ___awmod@divisor:
  1193                           	opt stack 0
  1194  000011                     strcpy@from:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x10
  1198  000011                     	ds	1
  1199  000012                     setAddrWindow@y0:
  1200                           	opt stack 0
  1201  000012                     ___ftpack@exp:
  1202                           	opt stack 0
  1203  000012                     ___ftge@ff2:
  1204                           	opt stack 0
  1205                           
  1206                           ; 3 bytes @ 0x11
  1207  000012                     	ds	1
  1208  000013                     setAddrWindow@x1:
  1209                           	opt stack 0
  1210  000013                     ___awdiv@counter:
  1211                           	opt stack 0
  1212  000013                     ___awmod@counter:
  1213                           	opt stack 0
  1214  000013                     ___ftpack@sign:
  1215                           	opt stack 0
  1216  000013                     get_full_ADC@result:
  1217                           	opt stack 0
  1218  000013                     ___wmul@product:
  1219                           	opt stack 0
  1220  000013                     strcpy@cp:
  1221                           	opt stack 0
  1222  000013                     strlen@cp:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x12
  1226  000013                     	ds	1
  1227  000014                     ??___ftpack:
  1228  000014                     setAddrWindow@y1:
  1229                           	opt stack 0
  1230  000014                     ___awdiv@sign:
  1231                           	opt stack 0
  1232  000014                     ___awmod@sign:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x13
  1236  000014                     	ds	1
  1237  000015                     ??___ftge:
  1238  000015                     setAddrWindow@x0:
  1239                           	opt stack 0
  1240  000015                     delay_ms@ms:
  1241                           	opt stack 0
  1242  000015                     ___awdiv@quotient:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x14
  1246  000015                     	ds	1
  1247  000016                     drawPixel@y:
  1248                           	opt stack 0
  1249  000016                     drawFastVLine@y:
  1250                           	opt stack 0
  1251  000016                     fillRectangle@y:
  1252                           	opt stack 0
  1253  000016                     drawFastHLine@y:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x15
  1257  000016                     	ds	1
  1258  000017                     ??_delay_ms:
  1259  000017                     ?___awtoft:
  1260                           	opt stack 0
  1261  000017                     drawFastVLine@h:
  1262                           	opt stack 0
  1263  000017                     fillRectangle@w:
  1264                           	opt stack 0
  1265  000017                     drawFastHLine@w:
  1266                           	opt stack 0
  1267  000017                     drawPixel@color:
  1268                           	opt stack 0
  1269  000017                     ___awtoft@c:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x16
  1273  000017                     	ds	1
  1274  000018                     fillRectangle@h:
  1275                           	opt stack 0
  1276  000018                     drawFastVLine@color:
  1277                           	opt stack 0
  1278  000018                     drawFastHLine@color:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x17
  1282  000018                     	ds	1
  1283  000019                     drawPixel@x:
  1284                           	opt stack 0
  1285  000019                     delay_ms@count:
  1286                           	opt stack 0
  1287  000019                     fillRectangle@color:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x18
  1291  000019                     	ds	1
  1292  00001A                     ??_drawFastVLine:
  1293  00001A                     ??_drawFastHLine:
  1294  00001A                     ___awtoft@sign:
  1295                           	opt stack 0
  1296  00001A                     drawCircle@x0:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x19
  1300  00001A                     	ds	1
  1301  00001B                     ??_fillRectangle:
  1302  00001B                     ?___ftdiv:
  1303                           	opt stack 0
  1304  00001B                     ___ftdiv@f1:
  1305                           	opt stack 0
  1306                           
  1307                           ; 3 bytes @ 0x1A
  1308  00001B                     	ds	1
  1309  00001C                     drawCircle@y0:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x1B
  1313  00001C                     	ds	2
  1314  00001E                     drawFastVLine@hi:
  1315                           	opt stack 0
  1316  00001E                     drawFastHLine@hi:
  1317                           	opt stack 0
  1318  00001E                     drawCircle@r:
  1319                           	opt stack 0
  1320  00001E                     ___ftdiv@f2:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x1D
  1324  00001E                     	ds	1
  1325  00001F                     drawFastVLine@lo:
  1326                           	opt stack 0
  1327  00001F                     fillRectangle@hi:
  1328                           	opt stack 0
  1329  00001F                     drawFastHLine@lo:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x1E
  1333  00001F                     	ds	1
  1334  000020                     drawFastVLine@x:
  1335                           	opt stack 0
  1336  000020                     fillRectangle@lo:
  1337                           	opt stack 0
  1338  000020                     drawFastHLine@x:
  1339                           	opt stack 0
  1340  000020                     drawCircle@color:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x1F
  1344  000020                     	ds	1
  1345  000021                     ??___ftdiv:
  1346  000021                     fillRect@y:
  1347                           	opt stack 0
  1348  000021                     fillRectangle@x:
  1349                           	opt stack 0
  1350  000021                     fillCircleHelper@x0:
  1351                           	opt stack 0
  1352  000021                     drawRect@x:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x20
  1356  000021                     	ds	1
  1357  000022                     ??_drawCircle:
  1358  000022                     fillRect@w:
  1359                           	opt stack 0
  1360  000022                     fillScreen@color:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x21
  1364  000022                     	ds	1
  1365  000023                     fillRect@h:
  1366                           	opt stack 0
  1367  000023                     fillCircleHelper@y0:
  1368                           	opt stack 0
  1369  000023                     drawRect@y:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x22
  1373  000023                     	ds	1
  1374  000024                     ___ftdiv@cntr:
  1375                           	opt stack 0
  1376  000024                     fillRect@color:
  1377                           	opt stack 0
  1378  000024                     drawCircle@ddF_x:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x23
  1382  000024                     	ds	1
  1383  000025                     fillCircleHelper@r:
  1384                           	opt stack 0
  1385  000025                     drawRect@w:
  1386                           	opt stack 0
  1387  000025                     ___ftdiv@f3:
  1388                           	opt stack 0
  1389                           
  1390                           ; 3 bytes @ 0x24
  1391  000025                     	ds	1
  1392  000026                     ??_fillRect:
  1393  000026                     drawCircle@ddF_y:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x25
  1397  000026                     	ds	1
  1398  000027                     fillCircleHelper@cornername:
  1399                           	opt stack 0
  1400  000027                     drawRect@h:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x26
  1404  000027                     	ds	1
  1405  000028                     ___ftdiv@exp:
  1406                           	opt stack 0
  1407  000028                     drawCircle@f:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x27
  1411  000028                     	ds	1
  1412  000029                     fillRect@x:
  1413                           	opt stack 0
  1414  000029                     ___ftdiv@sign:
  1415                           	opt stack 0
  1416  000029                     fillCircleHelper@delta:
  1417                           	opt stack 0
  1418  000029                     drawRect@color:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x28
  1422  000029                     	ds	1
  1423  00002A                     fillRect@i:
  1424                           	opt stack 0
  1425  00002A                     drawCircle@x:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x29
  1429  00002A                     	ds	1
  1430  00002B                     ??_drawRect:
  1431  00002B                     fillCircleHelper@color:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x2A
  1435  00002B                     	ds	1
  1436  00002C                     drawChar@y:
  1437                           	opt stack 0
  1438  00002C                     drawCircle@y:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x2B
  1442  00002C                     	ds	1
  1443  00002D                     ??_fillCircleHelper:
  1444  00002D                     drawChar@c:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x2C
  1448  00002D                     	ds	1
  1449  00002E                     drawChar@color:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x2D
  1453  00002E                     	ds	1
  1454  00002F                     fillCircleHelper@ddF_x:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x2E
  1458  00002F                     	ds	1
  1459  000030                     drawChar@bg:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x2F
  1463  000030                     	ds	1
  1464  000031                     fillCircleHelper@ddF_y:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x30
  1468  000031                     	ds	1
  1469  000032                     drawChar@size:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x31
  1473  000032                     	ds	1
  1474  000033                     drawChar@line:
  1475                           	opt stack 0
  1476  000033                     fillCircleHelper@f:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x32
  1480  000033                     	ds	1
  1481  000034                     drawChar@x:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x33
  1485  000034                     	ds	1
  1486  000035                     drawChar@j:
  1487                           	opt stack 0
  1488  000035                     fillCircleHelper@x:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x34
  1492  000035                     	ds	1
  1493  000036                     drawChar@i:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x35
  1497  000036                     	ds	1
  1498  000037                     drawtext@y:
  1499                           	opt stack 0
  1500  000037                     fillCircleHelper@y:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x36
  1504  000037                     	ds	1
  1505  000038                     drawtext@_text:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x37
  1509  000038                     	ds	1
  1510  000039                     fillCircle@x0:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x38
  1514  000039                     	ds	1
  1515  00003A                     drawtext@color:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x39
  1519  00003A                     	ds	1
  1520  00003B                     fillCircle@y0:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x3A
  1524  00003B                     	ds	1
  1525  00003C                     drawtext@bg:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x3B
  1529  00003C                     	ds	1
  1530  00003D                     fillCircle@r:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x3C
  1534  00003D                     	ds	1
  1535  00003E                     drawtext@size:
  1536                           	opt stack 0
  1537                           
  1538                           ; 1 bytes @ 0x3D
  1539  00003E                     	ds	1
  1540  00003F                     ??_drawtext:
  1541  00003F                     fillCircle@color:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x3E
  1545  00003F                     	ds	2
  1546  000041                     tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           fsr1l	equ	0xFE1
  1554                           
  1555                           ; 0 bytes @ 0x40
  1556 ;;
  1557 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1558 ;;
  1559 ;; *************** function _main *****************
  1560 ;; Defined at:
  1561 ;;		line 325 in file "Lab9.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;		None
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  nStep           2   12[BANK0 ] int 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;		None               void
  1568 ;; Registers used:
  1569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;Total ram usage:        2 bytes
  1580 ;; Hardware stack levels required when called:   13
  1581 ;; This function calls:
  1582 ;;		_Day_Mode
  1583 ;;		_Do_Flashing
  1584 ;;		_Do_Init
  1585 ;;		_Initialize_Screen
  1586 ;;		_Night_Mode
  1587 ;;		___awtoft
  1588 ;;		___ftdiv
  1589 ;;		___ftge
  1590 ;;		___wmul
  1591 ;;		_get_full_ADC
  1592 ;; This function is called by:
  1593 ;;		Startup code after reset
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           	psect	text0
  1598  0019CE                     __ptext0:
  1599                           	opt stack 0
  1600  0019CE                     _main:
  1601                           	opt stack 18
  1602                           
  1603                           ;Lab9.c: 327: Do_Init();
  1604                           
  1605                           ;incstack = 0
  1606  0019CE  EC63  F012         	call	_Do_Init	;wreg free
  1607                           
  1608                           ;Lab9.c: 328: RBPU = 0;
  1609  0019D2  9EF1               	bcf	intcon2,7,c	;volatile
  1610                           
  1611                           ;Lab9.c: 330: Initialize_Screen();
  1612  0019D4  EC0E  F000         	call	_Initialize_Screen	;wreg free
  1613                           
  1614                           ;Lab9.c: 333: int nStep = get_full_ADC();
  1615  0019D8  EC76  F012         	call	_get_full_ADC	;wreg free
  1616  0019DC  C00F  F0AD         	movff	?_get_full_ADC,main@nStep
  1617  0019E0  C010  F0AE         	movff	?_get_full_ADC+1,main@nStep+1
  1618                           
  1619                           ;Lab9.c: 334: volt = nStep * 5 /1024.0;
  1620  0019E4  C0AD  F00F         	movff	main@nStep,___wmul@multiplier
  1621  0019E8  C0AE  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1622  0019EC  0E00               	movlw	0
  1623  0019EE  6E12               	movwf	___wmul@multiplicand+1,c
  1624  0019F0  0E05               	movlw	5
  1625  0019F2  6E11               	movwf	___wmul@multiplicand,c
  1626  0019F4  EC4F  F012         	call	___wmul	;wreg free
  1627  0019F8  C00F  F017         	movff	?___wmul,___awtoft@c
  1628  0019FC  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1629  001A00  ECCF  F011         	call	___awtoft	;wreg free
  1630  001A04  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  1631  001A08  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  1632  001A0C  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  1633  001A10  0E00               	movlw	0
  1634  001A12  6E1E               	movwf	___ftdiv@f2,c
  1635  001A14  0E80               	movlw	128
  1636  001A16  6E1F               	movwf	___ftdiv@f2+1,c
  1637  001A18  0E44               	movlw	68
  1638  001A1A  6E20               	movwf	___ftdiv@f2+2,c
  1639  001A1C  ECD2  F00A         	call	___ftdiv	;wreg free
  1640  001A20  C01B  F05B         	movff	?___ftdiv,_volt
  1641  001A24  C01C  F05C         	movff	?___ftdiv+1,_volt+1
  1642  001A28  C01D  F05D         	movff	?___ftdiv+2,_volt+2
  1643                           
  1644                           ;Lab9.c: 335: SW_MODE = volt < 2.5 ? 1:0;
  1645  001A2C  C05B  F00F         	movff	_volt,___ftge@ff1
  1646  001A30  C05C  F010         	movff	_volt+1,___ftge@ff1+1
  1647  001A34  C05D  F011         	movff	_volt+2,___ftge@ff1+2
  1648  001A38  0E00               	movlw	0
  1649  001A3A  6E12               	movwf	___ftge@ff2,c
  1650  001A3C  0E20               	movlw	32
  1651  001A3E  6E13               	movwf	___ftge@ff2+1,c
  1652  001A40  0E40               	movlw	64
  1653  001A42  6E14               	movwf	___ftge@ff2+2,c
  1654  001A44  EC95  F00D         	call	___ftge	;wreg free
  1655  001A48  B0D8               	btfsc	status,0,c
  1656  001A4A  D002               	goto	u3980
  1657  001A4C  0E01               	movlw	1
  1658  001A4E  D001               	goto	u3990
  1659  001A50                     u3980:
  1660  001A50  0E00               	movlw	0
  1661  001A52                     u3990:
  1662  001A52  6E6A               	movwf	_SW_MODE,c
  1663  001A54  D000               	goto	l5614
  1664  001A56                     l5614:
  1665                           
  1666                           ;Lab9.c: 338: {
  1667                           ;Lab9.c: 339: if (SW_MODE)
  1668  001A56  506A               	movf	_SW_MODE,w,c
  1669  001A58  B4D8               	btfsc	status,2,c
  1670  001A5A  D003               	goto	l5618
  1671                           
  1672                           ;Lab9.c: 340: {
  1673                           ;Lab9.c: 341: Day_Mode();
  1674  001A5C  ECB1  F00B         	call	_Day_Mode	;wreg free
  1675                           
  1676                           ;Lab9.c: 343: }
  1677  001A60  D003               	goto	l5620
  1678  001A62                     l5618:
  1679                           
  1680                           ;Lab9.c: 344: else
  1681                           ;Lab9.c: 345: {
  1682                           ;Lab9.c: 346: Night_Mode();
  1683  001A62  EC3E  F00D         	call	_Night_Mode	;wreg free
  1684  001A66  D000               	goto	l5620
  1685  001A68                     l5620:
  1686                           
  1687                           ;Lab9.c: 347: }
  1688                           ;Lab9.c: 348: if(FLASHING_REQUEST == 1){
  1689  001A68  0465               	decf	_FLASHING_REQUEST,w,c
  1690  001A6A  A4D8               	btfss	status,2,c
  1691  001A6C  D7F4               	goto	l5614
  1692                           
  1693                           ;Lab9.c: 349: FLASHING_REQUEST = 0;
  1694  001A6E  0E00               	movlw	0
  1695  001A70  6E65               	movwf	_FLASHING_REQUEST,c
  1696                           
  1697                           ;Lab9.c: 350: Do_Flashing();
  1698  001A72  EC14  F010         	call	_Do_Flashing	;wreg free
  1699  001A76  D7EF               	goto	l5614
  1700  001A78  EF0C  F000         	goto	start
  1701  001A7C                     __end_of_main:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           intcon2	equ	0xFF1
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           postdec1	equ	0xFE5
  1711                           fsr1l	equ	0xFE1
  1712                           status	equ	0xFD8
  1713                           
  1714 ;; *************** function _Night_Mode *****************
  1715 ;; Defined at:
  1716 ;;		line 541 in file "Lab9.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;		None
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;		None               void
  1723 ;; Registers used:
  1724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;Total ram usage:        0 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:   12
  1737 ;; This function calls:
  1738 ;;		_Set_EW
  1739 ;;		_Set_EWLT
  1740 ;;		_Set_NS
  1741 ;;		_Set_NSLT
  1742 ;;		_Wait_N_Seconds
  1743 ;; This function is called by:
  1744 ;;		_main
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text1
  1749  001A7C                     __ptext1:
  1750                           	opt stack 0
  1751  001A7C                     _Night_Mode:
  1752                           	opt stack 18
  1753                           
  1754                           ;Lab9.c: 543: MODE = 0;
  1755                           
  1756                           ;incstack = 0
  1757  001A7C  0E00               	movlw	0
  1758  001A7E  6E5F               	movwf	_MODE+1,c
  1759  001A80  0E00               	movlw	0
  1760  001A82  6E5E               	movwf	_MODE,c
  1761                           
  1762                           ;Lab9.c: 544: PORTEbits.RE2 = 0;
  1763  001A84  9484               	bcf	3972,2,c	;volatile
  1764                           
  1765                           ;Lab9.c: 545: Act_Mode_Txt[0] = 'N';
  1766  001A86  0E4E               	movlw	78
  1767  001A88  6E4B               	movwf	_Act_Mode_Txt,c
  1768                           
  1769                           ;Lab9.c: 546: EW_PED_SW = 0;
  1770  001A8A  0E00               	movlw	0
  1771  001A8C  6E63               	movwf	_EW_PED_SW,c
  1772                           
  1773                           ;Lab9.c: 547: NS_PED_SW = 0;
  1774  001A8E  0E00               	movlw	0
  1775  001A90  6E66               	movwf	_NS_PED_SW,c
  1776                           
  1777                           ;Lab9.c: 548: Set_NSLT(1);
  1778  001A92  0E01               	movlw	1
  1779  001A94  ECDF  F010         	call	_Set_NSLT
  1780                           
  1781                           ;Lab9.c: 549: Set_EW(1);
  1782  001A98  0E01               	movlw	1
  1783  001A9A  EC4B  F011         	call	_Set_EW
  1784                           
  1785                           ;Lab9.c: 550: Set_EWLT(1);
  1786  001A9E  0E01               	movlw	1
  1787  001AA0  EC27  F011         	call	_Set_EWLT
  1788                           
  1789                           ;Lab9.c: 551: Set_NS(2);
  1790  001AA4  0E02               	movlw	2
  1791  001AA6  EC03  F011         	call	_Set_NS
  1792                           
  1793                           ;Lab9.c: 552: Wait_N_Seconds(8);
  1794  001AAA  0E08               	movlw	8
  1795  001AAC  ECED  F011         	call	_Wait_N_Seconds
  1796                           
  1797                           ;Lab9.c: 553: Set_NS(3);
  1798  001AB0  0E03               	movlw	3
  1799  001AB2  EC03  F011         	call	_Set_NS
  1800                           
  1801                           ;Lab9.c: 554: Wait_N_Seconds(3);
  1802  001AB6  0E03               	movlw	3
  1803  001AB8  ECED  F011         	call	_Wait_N_Seconds
  1804                           
  1805                           ;Lab9.c: 555: Set_NS(1);
  1806  001ABC  0E01               	movlw	1
  1807  001ABE  EC03  F011         	call	_Set_NS
  1808                           
  1809                           ;Lab9.c: 557: if(PORTCbits.RC2 == 1)
  1810  001AC2  A482               	btfss	3970,2,c	;volatile
  1811  001AC4  D010               	goto	l5350
  1812                           
  1813                           ;Lab9.c: 558: {
  1814                           ;Lab9.c: 559: Set_EWLT(2);
  1815  001AC6  0E02               	movlw	2
  1816  001AC8  EC27  F011         	call	_Set_EWLT
  1817                           
  1818                           ;Lab9.c: 560: Wait_N_Seconds(6);
  1819  001ACC  0E06               	movlw	6
  1820  001ACE  ECED  F011         	call	_Wait_N_Seconds
  1821                           
  1822                           ;Lab9.c: 561: Set_EWLT(3);
  1823  001AD2  0E03               	movlw	3
  1824  001AD4  EC27  F011         	call	_Set_EWLT
  1825                           
  1826                           ;Lab9.c: 562: Wait_N_Seconds(3);
  1827  001AD8  0E03               	movlw	3
  1828  001ADA  ECED  F011         	call	_Wait_N_Seconds
  1829                           
  1830                           ;Lab9.c: 563: Set_EWLT(1);
  1831  001ADE  0E01               	movlw	1
  1832  001AE0  EC27  F011         	call	_Set_EWLT
  1833  001AE4  D000               	goto	l5350
  1834  001AE6                     l5350:
  1835                           
  1836                           ;Lab9.c: 565: }
  1837                           ;Lab9.c: 566: Set_EW(2);
  1838  001AE6  0E02               	movlw	2
  1839  001AE8  EC4B  F011         	call	_Set_EW
  1840                           
  1841                           ;Lab9.c: 567: Wait_N_Seconds(8);
  1842  001AEC  0E08               	movlw	8
  1843  001AEE  ECED  F011         	call	_Wait_N_Seconds
  1844                           
  1845                           ;Lab9.c: 568: Set_EW(3);
  1846  001AF2  0E03               	movlw	3
  1847  001AF4  EC4B  F011         	call	_Set_EW
  1848                           
  1849                           ;Lab9.c: 569: Wait_N_Seconds(3);
  1850  001AF8  0E03               	movlw	3
  1851  001AFA  ECED  F011         	call	_Wait_N_Seconds
  1852                           
  1853                           ;Lab9.c: 570: Set_EW(1);
  1854  001AFE  0E01               	movlw	1
  1855  001B00  EC4B  F011         	call	_Set_EW
  1856                           
  1857                           ;Lab9.c: 572: if(PORTCbits.RC1 == 1)
  1858  001B04  A282               	btfss	3970,1,c	;volatile
  1859  001B06  D010               	goto	l485
  1860                           
  1861                           ;Lab9.c: 573: {
  1862                           ;Lab9.c: 574: Set_NSLT(2);
  1863  001B08  0E02               	movlw	2
  1864  001B0A  ECDF  F010         	call	_Set_NSLT
  1865                           
  1866                           ;Lab9.c: 575: Wait_N_Seconds(6);
  1867  001B0E  0E06               	movlw	6
  1868  001B10  ECED  F011         	call	_Wait_N_Seconds
  1869                           
  1870                           ;Lab9.c: 576: Set_NSLT(3);
  1871  001B14  0E03               	movlw	3
  1872  001B16  ECDF  F010         	call	_Set_NSLT
  1873                           
  1874                           ;Lab9.c: 577: Wait_N_Seconds(3);
  1875  001B1A  0E03               	movlw	3
  1876  001B1C  ECED  F011         	call	_Wait_N_Seconds
  1877                           
  1878                           ;Lab9.c: 578: Set_NSLT(1);
  1879  001B20  0E01               	movlw	1
  1880  001B22  ECDF  F010         	call	_Set_NSLT
  1881  001B26  D000               	goto	l485
  1882  001B28                     l485:
  1883  001B28  0012               	return		;funcret
  1884  001B2A                     __end_of_Night_Mode:
  1885                           	opt stack 0
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           intcon2	equ	0xFF1
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           postdec1	equ	0xFE5
  1894                           fsr1l	equ	0xFE1
  1895                           status	equ	0xFD8
  1896                           
  1897 ;; *************** function _Initialize_Screen *****************
  1898 ;; Defined at:
  1899 ;;		line 165 in file "Lab9.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;		None               void
  1906 ;; Registers used:
  1907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;Total ram usage:        0 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    9
  1920 ;; This function calls:
  1921 ;;		_LCD_Reset
  1922 ;;		_TFT_GreenTab_Initialize
  1923 ;;		_drawCircle
  1924 ;;		_drawRect
  1925 ;;		_drawtext
  1926 ;;		_fillCircle
  1927 ;;		_fillScreen
  1928 ;;		_strcpy
  1929 ;; This function is called by:
  1930 ;;		_main
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text2
  1935  00001C                     __ptext2:
  1936                           	opt stack 0
  1937  00001C                     _Initialize_Screen:
  1938                           	opt stack 21
  1939                           
  1940                           ;Lab9.c: 167: LCD_Reset();
  1941                           
  1942                           ;incstack = 0
  1943  00001C  ECDB  F012         	call	_LCD_Reset	;wreg free
  1944                           
  1945                           ;Lab9.c: 168: TFT_GreenTab_Initialize();
  1946  000020  EC3A  F012         	call	_TFT_GreenTab_Initialize	;wreg free
  1947                           
  1948                           ;Lab9.c: 169: fillScreen(0x0000);
  1949  000024  0E00               	movlw	0
  1950  000026  6E23               	movwf	fillScreen@color+1,c
  1951  000028  0E00               	movlw	0
  1952  00002A  6E22               	movwf	fillScreen@color,c
  1953  00002C  EC89  F012         	call	_fillScreen	;wreg free
  1954                           
  1955                           ;Lab9.c: 172: txt = buffer;
  1956  000030  0E82               	movlw	low _buffer
  1957  000032  6E60               	movwf	_txt,c
  1958  000034  0E00               	movlw	high _buffer
  1959  000036  6E61               	movwf	_txt+1,c
  1960                           
  1961                           ;Lab9.c: 173: strcpy(txt, "ECE3301L Spring 21-S1");
  1962  000038  C060  F00F         	movff	_txt,strcpy@to
  1963  00003C  C061  F010         	movff	_txt+1,strcpy@to+1
  1964  000040  0E96               	movlw	low STR_1
  1965  000042  6E11               	movwf	strcpy@from,c
  1966  000044  0EFF               	movlw	high STR_1
  1967  000046  6E12               	movwf	strcpy@from+1,c
  1968  000048  EC09  F012         	call	_strcpy	;wreg free
  1969                           
  1970                           ;Lab9.c: 174: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  1971  00004C  0E02               	movlw	2
  1972  00004E  6E37               	movwf	drawtext@y,c
  1973  000050  C060  F038         	movff	_txt,drawtext@_text
  1974  000054  C061  F039         	movff	_txt+1,drawtext@_text+1
  1975  000058  0EFF               	movlw	255
  1976  00005A  6E3B               	movwf	drawtext@color+1,c
  1977  00005C  683A               	setf	drawtext@color,c
  1978  00005E  0E00               	movlw	0
  1979  000060  6E3D               	movwf	drawtext@bg+1,c
  1980  000062  0E00               	movlw	0
  1981  000064  6E3C               	movwf	drawtext@bg,c
  1982  000066  0E01               	movlw	1
  1983  000068  6E3E               	movwf	drawtext@size,c
  1984  00006A  0E02               	movlw	2
  1985  00006C  ECD4  F009         	call	_drawtext
  1986                           
  1987                           ;Lab9.c: 177: strcpy(txt, "Mode:");
  1988  000070  C060  F00F         	movff	_txt,strcpy@to
  1989  000074  C061  F010         	movff	_txt+1,strcpy@to+1
  1990  000078  0EE5               	movlw	low STR_2
  1991  00007A  6E11               	movwf	strcpy@from,c
  1992  00007C  0EFF               	movlw	high STR_2
  1993  00007E  6E12               	movwf	strcpy@from+1,c
  1994  000080  EC09  F012         	call	_strcpy	;wreg free
  1995                           
  1996                           ;Lab9.c: 178: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  1997  000084  0E0A               	movlw	10
  1998  000086  6E37               	movwf	drawtext@y,c
  1999  000088  C060  F038         	movff	_txt,drawtext@_text
  2000  00008C  C061  F039         	movff	_txt+1,drawtext@_text+1
  2001  000090  0EFF               	movlw	255
  2002  000092  6E3B               	movwf	drawtext@color+1,c
  2003  000094  683A               	setf	drawtext@color,c
  2004  000096  0E00               	movlw	0
  2005  000098  6E3D               	movwf	drawtext@bg+1,c
  2006  00009A  0E00               	movlw	0
  2007  00009C  6E3C               	movwf	drawtext@bg,c
  2008  00009E  0E01               	movlw	1
  2009  0000A0  6E3E               	movwf	drawtext@size,c
  2010  0000A2  0E02               	movlw	2
  2011  0000A4  ECD4  F009         	call	_drawtext
  2012                           
  2013                           ;Lab9.c: 179: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2014  0000A8  0E0A               	movlw	10
  2015  0000AA  6E37               	movwf	drawtext@y,c
  2016  0000AC  0E4B               	movlw	low _Act_Mode_Txt
  2017  0000AE  6E38               	movwf	drawtext@_text,c
  2018  0000B0  0E00               	movlw	high _Act_Mode_Txt
  2019  0000B2  6E39               	movwf	drawtext@_text+1,c
  2020  0000B4  0EFF               	movlw	255
  2021  0000B6  6E3B               	movwf	drawtext@color+1,c
  2022  0000B8  683A               	setf	drawtext@color,c
  2023  0000BA  0E00               	movlw	0
  2024  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2025  0000BE  0E00               	movlw	0
  2026  0000C0  6E3C               	movwf	drawtext@bg,c
  2027  0000C2  0E01               	movlw	1
  2028  0000C4  6E3E               	movwf	drawtext@size,c
  2029  0000C6  0E23               	movlw	35
  2030  0000C8  ECD4  F009         	call	_drawtext
  2031                           
  2032                           ;Lab9.c: 182: strcpy(txt, "FR:");
  2033  0000CC  C060  F00F         	movff	_txt,strcpy@to
  2034  0000D0  C061  F010         	movff	_txt+1,strcpy@to+1
  2035  0000D4  0EEB               	movlw	low STR_3
  2036  0000D6  6E11               	movwf	strcpy@from,c
  2037  0000D8  0EFF               	movlw	high STR_3
  2038  0000DA  6E12               	movwf	strcpy@from+1,c
  2039  0000DC  EC09  F012         	call	_strcpy	;wreg free
  2040                           
  2041                           ;Lab9.c: 183: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2042  0000E0  0E0A               	movlw	10
  2043  0000E2  6E37               	movwf	drawtext@y,c
  2044  0000E4  C060  F038         	movff	_txt,drawtext@_text
  2045  0000E8  C061  F039         	movff	_txt+1,drawtext@_text+1
  2046  0000EC  0EFF               	movlw	255
  2047  0000EE  6E3B               	movwf	drawtext@color+1,c
  2048  0000F0  683A               	setf	drawtext@color,c
  2049  0000F2  0E00               	movlw	0
  2050  0000F4  6E3D               	movwf	drawtext@bg+1,c
  2051  0000F6  0E00               	movlw	0
  2052  0000F8  6E3C               	movwf	drawtext@bg,c
  2053  0000FA  0E01               	movlw	1
  2054  0000FC  6E3E               	movwf	drawtext@size,c
  2055  0000FE  0E32               	movlw	50
  2056  000100  ECD4  F009         	call	_drawtext
  2057                           
  2058                           ;Lab9.c: 184: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2059  000104  0E0A               	movlw	10
  2060  000106  6E37               	movwf	drawtext@y,c
  2061  000108  0E4D               	movlw	low _FlashingR_Txt
  2062  00010A  6E38               	movwf	drawtext@_text,c
  2063  00010C  0E00               	movlw	high _FlashingR_Txt
  2064  00010E  6E39               	movwf	drawtext@_text+1,c
  2065  000110  0EFF               	movlw	255
  2066  000112  6E3B               	movwf	drawtext@color+1,c
  2067  000114  683A               	setf	drawtext@color,c
  2068  000116  0E00               	movlw	0
  2069  000118  6E3D               	movwf	drawtext@bg+1,c
  2070  00011A  0E00               	movlw	0
  2071  00011C  6E3C               	movwf	drawtext@bg,c
  2072  00011E  0E01               	movlw	1
  2073  000120  6E3E               	movwf	drawtext@size,c
  2074  000122  0E46               	movlw	70
  2075  000124  ECD4  F009         	call	_drawtext
  2076                           
  2077                           ;Lab9.c: 187: strcpy(txt, "FS:");
  2078  000128  C060  F00F         	movff	_txt,strcpy@to
  2079  00012C  C061  F010         	movff	_txt+1,strcpy@to+1
  2080  000130  0EEF               	movlw	low STR_4
  2081  000132  6E11               	movwf	strcpy@from,c
  2082  000134  0EFF               	movlw	high STR_4
  2083  000136  6E12               	movwf	strcpy@from+1,c
  2084  000138  EC09  F012         	call	_strcpy	;wreg free
  2085                           
  2086                           ;Lab9.c: 188: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2087  00013C  0E0A               	movlw	10
  2088  00013E  6E37               	movwf	drawtext@y,c
  2089  000140  C060  F038         	movff	_txt,drawtext@_text
  2090  000144  C061  F039         	movff	_txt+1,drawtext@_text+1
  2091  000148  0EFF               	movlw	255
  2092  00014A  6E3B               	movwf	drawtext@color+1,c
  2093  00014C  683A               	setf	drawtext@color,c
  2094  00014E  0E00               	movlw	0
  2095  000150  6E3D               	movwf	drawtext@bg+1,c
  2096  000152  0E00               	movlw	0
  2097  000154  6E3C               	movwf	drawtext@bg,c
  2098  000156  0E01               	movlw	1
  2099  000158  6E3E               	movwf	drawtext@size,c
  2100  00015A  0E50               	movlw	80
  2101  00015C  ECD4  F009         	call	_drawtext
  2102                           
  2103                           ;Lab9.c: 189: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2104  000160  0E0A               	movlw	10
  2105  000162  6E37               	movwf	drawtext@y,c
  2106  000164  0E4F               	movlw	low _FlashingS_Txt
  2107  000166  6E38               	movwf	drawtext@_text,c
  2108  000168  0E00               	movlw	high _FlashingS_Txt
  2109  00016A  6E39               	movwf	drawtext@_text+1,c
  2110  00016C  0EFF               	movlw	255
  2111  00016E  6E3B               	movwf	drawtext@color+1,c
  2112  000170  683A               	setf	drawtext@color,c
  2113  000172  0E00               	movlw	0
  2114  000174  6E3D               	movwf	drawtext@bg+1,c
  2115  000176  0E00               	movlw	0
  2116  000178  6E3C               	movwf	drawtext@bg,c
  2117  00017A  0E01               	movlw	1
  2118  00017C  6E3E               	movwf	drawtext@size,c
  2119  00017E  0E64               	movlw	100
  2120  000180  ECD4  F009         	call	_drawtext
  2121                           
  2122                           ;Lab9.c: 192: strcpy(txt, "*");
  2123  000184  C060  F00F         	movff	_txt,strcpy@to
  2124  000188  C061  F010         	movff	_txt+1,strcpy@to+1
  2125  00018C  0EFD               	movlw	low STR_5
  2126  00018E  6E11               	movwf	strcpy@from,c
  2127  000190  0EFF               	movlw	high STR_5
  2128  000192  6E12               	movwf	strcpy@from+1,c
  2129  000194  EC09  F012         	call	_strcpy	;wreg free
  2130                           
  2131                           ;Lab9.c: 193: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2132  000198  0E0A               	movlw	10
  2133  00019A  6E37               	movwf	drawtext@y,c
  2134  00019C  C060  F038         	movff	_txt,drawtext@_text
  2135  0001A0  C061  F039         	movff	_txt+1,drawtext@_text+1
  2136  0001A4  0EFF               	movlw	255
  2137  0001A6  6E3B               	movwf	drawtext@color+1,c
  2138  0001A8  683A               	setf	drawtext@color,c
  2139  0001AA  0E00               	movlw	0
  2140  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2141  0001AE  0E00               	movlw	0
  2142  0001B0  6E3C               	movwf	drawtext@bg,c
  2143  0001B2  0E01               	movlw	1
  2144  0001B4  6E3E               	movwf	drawtext@size,c
  2145  0001B6  0E78               	movlw	120
  2146  0001B8  ECD4  F009         	call	_drawtext
  2147                           
  2148                           ;Lab9.c: 196: strcpy(txt, "EAST/WEST");
  2149  0001BC  C060  F00F         	movff	_txt,strcpy@to
  2150  0001C0  C061  F010         	movff	_txt+1,strcpy@to+1
  2151  0001C4  0ECD               	movlw	low STR_6
  2152  0001C6  6E11               	movwf	strcpy@from,c
  2153  0001C8  0EFF               	movlw	high STR_6
  2154  0001CA  6E12               	movwf	strcpy@from+1,c
  2155  0001CC  EC09  F012         	call	_strcpy	;wreg free
  2156                           
  2157                           ;Lab9.c: 197: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2158  0001D0  0E14               	movlw	20
  2159  0001D2  6E37               	movwf	drawtext@y,c
  2160  0001D4  C060  F038         	movff	_txt,drawtext@_text
  2161  0001D8  C061  F039         	movff	_txt+1,drawtext@_text+1
  2162  0001DC  0E07               	movlw	7
  2163  0001DE  6E3B               	movwf	drawtext@color+1,c
  2164  0001E0  683A               	setf	drawtext@color,c
  2165  0001E2  0E00               	movlw	0
  2166  0001E4  6E3D               	movwf	drawtext@bg+1,c
  2167  0001E6  0E00               	movlw	0
  2168  0001E8  6E3C               	movwf	drawtext@bg,c
  2169  0001EA  0E01               	movlw	1
  2170  0001EC  6E3E               	movwf	drawtext@size,c
  2171  0001EE  0E1E               	movlw	30
  2172  0001F0  ECD4  F009         	call	_drawtext
  2173                           
  2174                           ;Lab9.c: 198: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2175  0001F4  0E00               	movlw	0
  2176  0001F6  6E22               	movwf	drawRect@x+1,c
  2177  0001F8  0E1E               	movlw	30
  2178  0001FA  6E21               	movwf	drawRect@x,c
  2179  0001FC  0E00               	movlw	0
  2180  0001FE  6E24               	movwf	drawRect@y+1,c
  2181  000200  0E1B               	movlw	27
  2182  000202  6E23               	movwf	drawRect@y,c
  2183  000204  0E00               	movlw	0
  2184  000206  6E26               	movwf	drawRect@w+1,c
  2185  000208  0E3C               	movlw	60
  2186  00020A  6E25               	movwf	drawRect@w,c
  2187  00020C  0E00               	movlw	0
  2188  00020E  6E28               	movwf	drawRect@h+1,c
  2189  000210  0E12               	movlw	18
  2190  000212  6E27               	movwf	drawRect@h,c
  2191  000214  0E07               	movlw	7
  2192  000216  6E2A               	movwf	drawRect@color+1,c
  2193  000218  6829               	setf	drawRect@color,c
  2194  00021A  ECB0  F00F         	call	_drawRect	;wreg free
  2195                           
  2196                           ;Lab9.c: 199: fillCircle(40, 20 + 15, 7, 0xF800);
  2197  00021E  0E00               	movlw	0
  2198  000220  6E3A               	movwf	fillCircle@x0+1,c
  2199  000222  0E28               	movlw	40
  2200  000224  6E39               	movwf	fillCircle@x0,c
  2201  000226  0E00               	movlw	0
  2202  000228  6E3C               	movwf	fillCircle@y0+1,c
  2203  00022A  0E23               	movlw	35
  2204  00022C  6E3B               	movwf	fillCircle@y0,c
  2205  00022E  0E00               	movlw	0
  2206  000230  6E3E               	movwf	fillCircle@r+1,c
  2207  000232  0E07               	movlw	7
  2208  000234  6E3D               	movwf	fillCircle@r,c
  2209  000236  0EF8               	movlw	248
  2210  000238  6E40               	movwf	fillCircle@color+1,c
  2211  00023A  0E00               	movlw	0
  2212  00023C  6E3F               	movwf	fillCircle@color,c
  2213  00023E  EC6A  F010         	call	_fillCircle	;wreg free
  2214                           
  2215                           ;Lab9.c: 200: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2216  000242  0E00               	movlw	0
  2217  000244  6E1B               	movwf	drawCircle@x0+1,c
  2218  000246  0E3C               	movlw	60
  2219  000248  6E1A               	movwf	drawCircle@x0,c
  2220  00024A  0E00               	movlw	0
  2221  00024C  6E1D               	movwf	drawCircle@y0+1,c
  2222  00024E  0E23               	movlw	35
  2223  000250  6E1C               	movwf	drawCircle@y0,c
  2224  000252  0E00               	movlw	0
  2225  000254  6E1F               	movwf	drawCircle@r+1,c
  2226  000256  0E07               	movlw	7
  2227  000258  6E1E               	movwf	drawCircle@r,c
  2228  00025A  0EFF               	movlw	255
  2229  00025C  6E21               	movwf	drawCircle@color+1,c
  2230  00025E  0EE0               	movlw	224
  2231  000260  6E20               	movwf	drawCircle@color,c
  2232  000262  EC6B  F006         	call	_drawCircle	;wreg free
  2233                           
  2234                           ;Lab9.c: 201: drawCircle(80, 20 + 15, 7, 0x07E0);
  2235  000266  0E00               	movlw	0
  2236  000268  6E1B               	movwf	drawCircle@x0+1,c
  2237  00026A  0E50               	movlw	80
  2238  00026C  6E1A               	movwf	drawCircle@x0,c
  2239  00026E  0E00               	movlw	0
  2240  000270  6E1D               	movwf	drawCircle@y0+1,c
  2241  000272  0E23               	movlw	35
  2242  000274  6E1C               	movwf	drawCircle@y0,c
  2243  000276  0E00               	movlw	0
  2244  000278  6E1F               	movwf	drawCircle@r+1,c
  2245  00027A  0E07               	movlw	7
  2246  00027C  6E1E               	movwf	drawCircle@r,c
  2247  00027E  0E07               	movlw	7
  2248  000280  6E21               	movwf	drawCircle@color+1,c
  2249  000282  0EE0               	movlw	224
  2250  000284  6E20               	movwf	drawCircle@color,c
  2251  000286  EC6B  F006         	call	_drawCircle	;wreg free
  2252                           
  2253                           ;Lab9.c: 202: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2254  00028A  0E1E               	movlw	30
  2255  00028C  6E37               	movwf	drawtext@y,c
  2256  00028E  0E45               	movlw	low _EW_Count
  2257  000290  6E38               	movwf	drawtext@_text,c
  2258  000292  0E00               	movlw	high _EW_Count
  2259  000294  6E39               	movwf	drawtext@_text+1,c
  2260  000296  0E07               	movlw	7
  2261  000298  6E3B               	movwf	drawtext@color+1,c
  2262  00029A  683A               	setf	drawtext@color,c
  2263  00029C  0E00               	movlw	0
  2264  00029E  6E3D               	movwf	drawtext@bg+1,c
  2265  0002A0  0E00               	movlw	0
  2266  0002A2  6E3C               	movwf	drawtext@bg,c
  2267  0002A4  0E02               	movlw	2
  2268  0002A6  6E3E               	movwf	drawtext@size,c
  2269  0002A8  0E64               	movlw	100
  2270  0002AA  ECD4  F009         	call	_drawtext
  2271                           
  2272                           ;Lab9.c: 205: strcpy(txt, "E/W LT");
  2273  0002AE  C060  F00F         	movff	_txt,strcpy@to
  2274  0002B2  C061  F010         	movff	_txt+1,strcpy@to+1
  2275  0002B6  0EDE               	movlw	low STR_7
  2276  0002B8  6E11               	movwf	strcpy@from,c
  2277  0002BA  0EFF               	movlw	high STR_7
  2278  0002BC  6E12               	movwf	strcpy@from+1,c
  2279  0002BE  EC09  F012         	call	_strcpy	;wreg free
  2280                           
  2281                           ;Lab9.c: 206: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2282  0002C2  0E32               	movlw	50
  2283  0002C4  6E37               	movwf	drawtext@y,c
  2284  0002C6  C060  F038         	movff	_txt,drawtext@_text
  2285  0002CA  C061  F039         	movff	_txt+1,drawtext@_text+1
  2286  0002CE  0EFF               	movlw	255
  2287  0002D0  6E3B               	movwf	drawtext@color+1,c
  2288  0002D2  683A               	setf	drawtext@color,c
  2289  0002D4  0E00               	movlw	0
  2290  0002D6  6E3D               	movwf	drawtext@bg+1,c
  2291  0002D8  0E00               	movlw	0
  2292  0002DA  6E3C               	movwf	drawtext@bg,c
  2293  0002DC  0E01               	movlw	1
  2294  0002DE  6E3E               	movwf	drawtext@size,c
  2295  0002E0  0E1E               	movlw	30
  2296  0002E2  ECD4  F009         	call	_drawtext
  2297                           
  2298                           ;Lab9.c: 207: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2299  0002E6  0E00               	movlw	0
  2300  0002E8  6E22               	movwf	drawRect@x+1,c
  2301  0002EA  0E1E               	movlw	30
  2302  0002EC  6E21               	movwf	drawRect@x,c
  2303  0002EE  0E00               	movlw	0
  2304  0002F0  6E24               	movwf	drawRect@y+1,c
  2305  0002F2  0E39               	movlw	57
  2306  0002F4  6E23               	movwf	drawRect@y,c
  2307  0002F6  0E00               	movlw	0
  2308  0002F8  6E26               	movwf	drawRect@w+1,c
  2309  0002FA  0E3C               	movlw	60
  2310  0002FC  6E25               	movwf	drawRect@w,c
  2311  0002FE  0E00               	movlw	0
  2312  000300  6E28               	movwf	drawRect@h+1,c
  2313  000302  0E12               	movlw	18
  2314  000304  6E27               	movwf	drawRect@h,c
  2315  000306  0EFF               	movlw	255
  2316  000308  6E2A               	movwf	drawRect@color+1,c
  2317  00030A  6829               	setf	drawRect@color,c
  2318  00030C  ECB0  F00F         	call	_drawRect	;wreg free
  2319                           
  2320                           ;Lab9.c: 208: fillCircle(40, 50 + 15, 7, 0xF800);
  2321  000310  0E00               	movlw	0
  2322  000312  6E3A               	movwf	fillCircle@x0+1,c
  2323  000314  0E28               	movlw	40
  2324  000316  6E39               	movwf	fillCircle@x0,c
  2325  000318  0E00               	movlw	0
  2326  00031A  6E3C               	movwf	fillCircle@y0+1,c
  2327  00031C  0E41               	movlw	65
  2328  00031E  6E3B               	movwf	fillCircle@y0,c
  2329  000320  0E00               	movlw	0
  2330  000322  6E3E               	movwf	fillCircle@r+1,c
  2331  000324  0E07               	movlw	7
  2332  000326  6E3D               	movwf	fillCircle@r,c
  2333  000328  0EF8               	movlw	248
  2334  00032A  6E40               	movwf	fillCircle@color+1,c
  2335  00032C  0E00               	movlw	0
  2336  00032E  6E3F               	movwf	fillCircle@color,c
  2337  000330  EC6A  F010         	call	_fillCircle	;wreg free
  2338                           
  2339                           ;Lab9.c: 209: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2340  000334  0E00               	movlw	0
  2341  000336  6E1B               	movwf	drawCircle@x0+1,c
  2342  000338  0E3C               	movlw	60
  2343  00033A  6E1A               	movwf	drawCircle@x0,c
  2344  00033C  0E00               	movlw	0
  2345  00033E  6E1D               	movwf	drawCircle@y0+1,c
  2346  000340  0E41               	movlw	65
  2347  000342  6E1C               	movwf	drawCircle@y0,c
  2348  000344  0E00               	movlw	0
  2349  000346  6E1F               	movwf	drawCircle@r+1,c
  2350  000348  0E07               	movlw	7
  2351  00034A  6E1E               	movwf	drawCircle@r,c
  2352  00034C  0EFF               	movlw	255
  2353  00034E  6E21               	movwf	drawCircle@color+1,c
  2354  000350  0EE0               	movlw	224
  2355  000352  6E20               	movwf	drawCircle@color,c
  2356  000354  EC6B  F006         	call	_drawCircle	;wreg free
  2357                           
  2358                           ;Lab9.c: 210: drawCircle(80, 50 + 15, 7, 0x07E0);
  2359  000358  0E00               	movlw	0
  2360  00035A  6E1B               	movwf	drawCircle@x0+1,c
  2361  00035C  0E50               	movlw	80
  2362  00035E  6E1A               	movwf	drawCircle@x0,c
  2363  000360  0E00               	movlw	0
  2364  000362  6E1D               	movwf	drawCircle@y0+1,c
  2365  000364  0E41               	movlw	65
  2366  000366  6E1C               	movwf	drawCircle@y0,c
  2367  000368  0E00               	movlw	0
  2368  00036A  6E1F               	movwf	drawCircle@r+1,c
  2369  00036C  0E07               	movlw	7
  2370  00036E  6E1E               	movwf	drawCircle@r,c
  2371  000370  0E07               	movlw	7
  2372  000372  6E21               	movwf	drawCircle@color+1,c
  2373  000374  0EE0               	movlw	224
  2374  000376  6E20               	movwf	drawCircle@color,c
  2375  000378  EC6B  F006         	call	_drawCircle	;wreg free
  2376                           
  2377                           ;Lab9.c: 211: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2378  00037C  0E3C               	movlw	60
  2379  00037E  6E37               	movwf	drawtext@y,c
  2380  000380  0E42               	movlw	low _EWLT_Count
  2381  000382  6E38               	movwf	drawtext@_text,c
  2382  000384  0E00               	movlw	high _EWLT_Count
  2383  000386  6E39               	movwf	drawtext@_text+1,c
  2384  000388  0EFF               	movlw	255
  2385  00038A  6E3B               	movwf	drawtext@color+1,c
  2386  00038C  683A               	setf	drawtext@color,c
  2387  00038E  0E00               	movlw	0
  2388  000390  6E3D               	movwf	drawtext@bg+1,c
  2389  000392  0E00               	movlw	0
  2390  000394  6E3C               	movwf	drawtext@bg,c
  2391  000396  0E02               	movlw	2
  2392  000398  6E3E               	movwf	drawtext@size,c
  2393  00039A  0E64               	movlw	100
  2394  00039C  ECD4  F009         	call	_drawtext
  2395                           
  2396                           ;Lab9.c: 214: strcpy(txt, "NORTH/SOUTH");
  2397  0003A0  C060  F00F         	movff	_txt,strcpy@to
  2398  0003A4  C061  F010         	movff	_txt+1,strcpy@to+1
  2399  0003A8  0EC1               	movlw	low STR_8
  2400  0003AA  6E11               	movwf	strcpy@from,c
  2401  0003AC  0EFF               	movlw	high STR_8
  2402  0003AE  6E12               	movwf	strcpy@from+1,c
  2403  0003B0  EC09  F012         	call	_strcpy	;wreg free
  2404                           
  2405                           ;Lab9.c: 215: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2406  0003B4  0E50               	movlw	80
  2407  0003B6  6E37               	movwf	drawtext@y,c
  2408  0003B8  C060  F038         	movff	_txt,drawtext@_text
  2409  0003BC  C061  F039         	movff	_txt+1,drawtext@_text+1
  2410  0003C0  0E00               	movlw	0
  2411  0003C2  6E3B               	movwf	drawtext@color+1,c
  2412  0003C4  0E1F               	movlw	31
  2413  0003C6  6E3A               	movwf	drawtext@color,c
  2414  0003C8  0E00               	movlw	0
  2415  0003CA  6E3D               	movwf	drawtext@bg+1,c
  2416  0003CC  0E00               	movlw	0
  2417  0003CE  6E3C               	movwf	drawtext@bg,c
  2418  0003D0  0E01               	movlw	1
  2419  0003D2  6E3E               	movwf	drawtext@size,c
  2420  0003D4  0E1E               	movlw	30
  2421  0003D6  ECD4  F009         	call	_drawtext
  2422                           
  2423                           ;Lab9.c: 216: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2424  0003DA  0E00               	movlw	0
  2425  0003DC  6E22               	movwf	drawRect@x+1,c
  2426  0003DE  0E1E               	movlw	30
  2427  0003E0  6E21               	movwf	drawRect@x,c
  2428  0003E2  0E00               	movlw	0
  2429  0003E4  6E24               	movwf	drawRect@y+1,c
  2430  0003E6  0E57               	movlw	87
  2431  0003E8  6E23               	movwf	drawRect@y,c
  2432  0003EA  0E00               	movlw	0
  2433  0003EC  6E26               	movwf	drawRect@w+1,c
  2434  0003EE  0E3C               	movlw	60
  2435  0003F0  6E25               	movwf	drawRect@w,c
  2436  0003F2  0E00               	movlw	0
  2437  0003F4  6E28               	movwf	drawRect@h+1,c
  2438  0003F6  0E12               	movlw	18
  2439  0003F8  6E27               	movwf	drawRect@h,c
  2440  0003FA  0E00               	movlw	0
  2441  0003FC  6E2A               	movwf	drawRect@color+1,c
  2442  0003FE  0E1F               	movlw	31
  2443  000400  6E29               	movwf	drawRect@color,c
  2444  000402  ECB0  F00F         	call	_drawRect	;wreg free
  2445                           
  2446                           ;Lab9.c: 217: drawCircle(40, 80 + 15 , 7, 0xF800);
  2447  000406  0E00               	movlw	0
  2448  000408  6E1B               	movwf	drawCircle@x0+1,c
  2449  00040A  0E28               	movlw	40
  2450  00040C  6E1A               	movwf	drawCircle@x0,c
  2451  00040E  0E00               	movlw	0
  2452  000410  6E1D               	movwf	drawCircle@y0+1,c
  2453  000412  0E5F               	movlw	95
  2454  000414  6E1C               	movwf	drawCircle@y0,c
  2455  000416  0E00               	movlw	0
  2456  000418  6E1F               	movwf	drawCircle@r+1,c
  2457  00041A  0E07               	movlw	7
  2458  00041C  6E1E               	movwf	drawCircle@r,c
  2459  00041E  0EF8               	movlw	248
  2460  000420  6E21               	movwf	drawCircle@color+1,c
  2461  000422  0E00               	movlw	0
  2462  000424  6E20               	movwf	drawCircle@color,c
  2463  000426  EC6B  F006         	call	_drawCircle	;wreg free
  2464                           
  2465                           ;Lab9.c: 218: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2466  00042A  0E00               	movlw	0
  2467  00042C  6E1B               	movwf	drawCircle@x0+1,c
  2468  00042E  0E3C               	movlw	60
  2469  000430  6E1A               	movwf	drawCircle@x0,c
  2470  000432  0E00               	movlw	0
  2471  000434  6E1D               	movwf	drawCircle@y0+1,c
  2472  000436  0E5F               	movlw	95
  2473  000438  6E1C               	movwf	drawCircle@y0,c
  2474  00043A  0E00               	movlw	0
  2475  00043C  6E1F               	movwf	drawCircle@r+1,c
  2476  00043E  0E07               	movlw	7
  2477  000440  6E1E               	movwf	drawCircle@r,c
  2478  000442  0EFF               	movlw	255
  2479  000444  6E21               	movwf	drawCircle@color+1,c
  2480  000446  0EE0               	movlw	224
  2481  000448  6E20               	movwf	drawCircle@color,c
  2482  00044A  EC6B  F006         	call	_drawCircle	;wreg free
  2483                           
  2484                           ;Lab9.c: 219: fillCircle(80, 80 + 15 , 7, 0x07E0);
  2485  00044E  0E00               	movlw	0
  2486  000450  6E3A               	movwf	fillCircle@x0+1,c
  2487  000452  0E50               	movlw	80
  2488  000454  6E39               	movwf	fillCircle@x0,c
  2489  000456  0E00               	movlw	0
  2490  000458  6E3C               	movwf	fillCircle@y0+1,c
  2491  00045A  0E5F               	movlw	95
  2492  00045C  6E3B               	movwf	fillCircle@y0,c
  2493  00045E  0E00               	movlw	0
  2494  000460  6E3E               	movwf	fillCircle@r+1,c
  2495  000462  0E07               	movlw	7
  2496  000464  6E3D               	movwf	fillCircle@r,c
  2497  000466  0E07               	movlw	7
  2498  000468  6E40               	movwf	fillCircle@color+1,c
  2499  00046A  0EE0               	movlw	224
  2500  00046C  6E3F               	movwf	fillCircle@color,c
  2501  00046E  EC6A  F010         	call	_fillCircle	;wreg free
  2502                           
  2503                           ;Lab9.c: 220: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2504  000472  0E5A               	movlw	90
  2505  000474  6E37               	movwf	drawtext@y,c
  2506  000476  0E48               	movlw	low _NS_Count
  2507  000478  6E38               	movwf	drawtext@_text,c
  2508  00047A  0E00               	movlw	high _NS_Count
  2509  00047C  6E39               	movwf	drawtext@_text+1,c
  2510  00047E  0E00               	movlw	0
  2511  000480  6E3B               	movwf	drawtext@color+1,c
  2512  000482  0E1F               	movlw	31
  2513  000484  6E3A               	movwf	drawtext@color,c
  2514  000486  0E00               	movlw	0
  2515  000488  6E3D               	movwf	drawtext@bg+1,c
  2516  00048A  0E00               	movlw	0
  2517  00048C  6E3C               	movwf	drawtext@bg,c
  2518  00048E  0E02               	movlw	2
  2519  000490  6E3E               	movwf	drawtext@size,c
  2520  000492  0E64               	movlw	100
  2521  000494  ECD4  F009         	call	_drawtext
  2522                           
  2523                           ;Lab9.c: 223: strcpy(txt, "N/S LT");
  2524  000498  C060  F00F         	movff	_txt,strcpy@to
  2525  00049C  C061  F010         	movff	_txt+1,strcpy@to+1
  2526  0004A0  0ED7               	movlw	low STR_9
  2527  0004A2  6E11               	movwf	strcpy@from,c
  2528  0004A4  0EFF               	movlw	high STR_9
  2529  0004A6  6E12               	movwf	strcpy@from+1,c
  2530  0004A8  EC09  F012         	call	_strcpy	;wreg free
  2531                           
  2532                           ;Lab9.c: 224: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2533  0004AC  0E6E               	movlw	110
  2534  0004AE  6E37               	movwf	drawtext@y,c
  2535  0004B0  C060  F038         	movff	_txt,drawtext@_text
  2536  0004B4  C061  F039         	movff	_txt+1,drawtext@_text+1
  2537  0004B8  0EF8               	movlw	248
  2538  0004BA  6E3B               	movwf	drawtext@color+1,c
  2539  0004BC  0E1F               	movlw	31
  2540  0004BE  6E3A               	movwf	drawtext@color,c
  2541  0004C0  0E00               	movlw	0
  2542  0004C2  6E3D               	movwf	drawtext@bg+1,c
  2543  0004C4  0E00               	movlw	0
  2544  0004C6  6E3C               	movwf	drawtext@bg,c
  2545  0004C8  0E01               	movlw	1
  2546  0004CA  6E3E               	movwf	drawtext@size,c
  2547  0004CC  0E1E               	movlw	30
  2548  0004CE  ECD4  F009         	call	_drawtext
  2549                           
  2550                           ;Lab9.c: 225: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2551  0004D2  0E00               	movlw	0
  2552  0004D4  6E22               	movwf	drawRect@x+1,c
  2553  0004D6  0E1E               	movlw	30
  2554  0004D8  6E21               	movwf	drawRect@x,c
  2555  0004DA  0E00               	movlw	0
  2556  0004DC  6E24               	movwf	drawRect@y+1,c
  2557  0004DE  0E75               	movlw	117
  2558  0004E0  6E23               	movwf	drawRect@y,c
  2559  0004E2  0E00               	movlw	0
  2560  0004E4  6E26               	movwf	drawRect@w+1,c
  2561  0004E6  0E3C               	movlw	60
  2562  0004E8  6E25               	movwf	drawRect@w,c
  2563  0004EA  0E00               	movlw	0
  2564  0004EC  6E28               	movwf	drawRect@h+1,c
  2565  0004EE  0E12               	movlw	18
  2566  0004F0  6E27               	movwf	drawRect@h,c
  2567  0004F2  0EF8               	movlw	248
  2568  0004F4  6E2A               	movwf	drawRect@color+1,c
  2569  0004F6  0E1F               	movlw	31
  2570  0004F8  6E29               	movwf	drawRect@color,c
  2571  0004FA  ECB0  F00F         	call	_drawRect	;wreg free
  2572                           
  2573                           ;Lab9.c: 226: fillCircle(40, 110 + 15, 7, 0xF800);
  2574  0004FE  0E00               	movlw	0
  2575  000500  6E3A               	movwf	fillCircle@x0+1,c
  2576  000502  0E28               	movlw	40
  2577  000504  6E39               	movwf	fillCircle@x0,c
  2578  000506  0E00               	movlw	0
  2579  000508  6E3C               	movwf	fillCircle@y0+1,c
  2580  00050A  0E7D               	movlw	125
  2581  00050C  6E3B               	movwf	fillCircle@y0,c
  2582  00050E  0E00               	movlw	0
  2583  000510  6E3E               	movwf	fillCircle@r+1,c
  2584  000512  0E07               	movlw	7
  2585  000514  6E3D               	movwf	fillCircle@r,c
  2586  000516  0EF8               	movlw	248
  2587  000518  6E40               	movwf	fillCircle@color+1,c
  2588  00051A  0E00               	movlw	0
  2589  00051C  6E3F               	movwf	fillCircle@color,c
  2590  00051E  EC6A  F010         	call	_fillCircle	;wreg free
  2591                           
  2592                           ;Lab9.c: 227: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2593  000522  0E00               	movlw	0
  2594  000524  6E1B               	movwf	drawCircle@x0+1,c
  2595  000526  0E3C               	movlw	60
  2596  000528  6E1A               	movwf	drawCircle@x0,c
  2597  00052A  0E00               	movlw	0
  2598  00052C  6E1D               	movwf	drawCircle@y0+1,c
  2599  00052E  0E7D               	movlw	125
  2600  000530  6E1C               	movwf	drawCircle@y0,c
  2601  000532  0E00               	movlw	0
  2602  000534  6E1F               	movwf	drawCircle@r+1,c
  2603  000536  0E07               	movlw	7
  2604  000538  6E1E               	movwf	drawCircle@r,c
  2605  00053A  0EFF               	movlw	255
  2606  00053C  6E21               	movwf	drawCircle@color+1,c
  2607  00053E  0EE0               	movlw	224
  2608  000540  6E20               	movwf	drawCircle@color,c
  2609  000542  EC6B  F006         	call	_drawCircle	;wreg free
  2610                           
  2611                           ;Lab9.c: 228: drawCircle(80, 110 + 15, 7, 0x07E0);
  2612  000546  0E00               	movlw	0
  2613  000548  6E1B               	movwf	drawCircle@x0+1,c
  2614  00054A  0E50               	movlw	80
  2615  00054C  6E1A               	movwf	drawCircle@x0,c
  2616  00054E  0E00               	movlw	0
  2617  000550  6E1D               	movwf	drawCircle@y0+1,c
  2618  000552  0E7D               	movlw	125
  2619  000554  6E1C               	movwf	drawCircle@y0,c
  2620  000556  0E00               	movlw	0
  2621  000558  6E1F               	movwf	drawCircle@r+1,c
  2622  00055A  0E07               	movlw	7
  2623  00055C  6E1E               	movwf	drawCircle@r,c
  2624  00055E  0E07               	movlw	7
  2625  000560  6E21               	movwf	drawCircle@color+1,c
  2626  000562  0EE0               	movlw	224
  2627  000564  6E20               	movwf	drawCircle@color,c
  2628  000566  EC6B  F006         	call	_drawCircle	;wreg free
  2629                           
  2630                           ;Lab9.c: 229: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2631  00056A  0E78               	movlw	120
  2632  00056C  6E37               	movwf	drawtext@y,c
  2633  00056E  0EAF               	movlw	low _NSLT_Count
  2634  000570  6E38               	movwf	drawtext@_text,c
  2635  000572  0E00               	movlw	high _NSLT_Count
  2636  000574  6E39               	movwf	drawtext@_text+1,c
  2637  000576  0EF8               	movlw	248
  2638  000578  6E3B               	movwf	drawtext@color+1,c
  2639  00057A  0E1F               	movlw	31
  2640  00057C  6E3A               	movwf	drawtext@color,c
  2641  00057E  0E00               	movlw	0
  2642  000580  6E3D               	movwf	drawtext@bg+1,c
  2643  000582  0E00               	movlw	0
  2644  000584  6E3C               	movwf	drawtext@bg,c
  2645  000586  0E02               	movlw	2
  2646  000588  6E3E               	movwf	drawtext@size,c
  2647  00058A  0E64               	movlw	100
  2648  00058C  ECD4  F009         	call	_drawtext
  2649                           
  2650                           ;Lab9.c: 233: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2651  000590  0E1E               	movlw	30
  2652  000592  6E37               	movwf	drawtext@y,c
  2653  000594  0EB2               	movlw	low _PED_EW_Count
  2654  000596  6E38               	movwf	drawtext@_text,c
  2655  000598  0E00               	movlw	high _PED_EW_Count
  2656  00059A  6E39               	movwf	drawtext@_text+1,c
  2657  00059C  0E07               	movlw	7
  2658  00059E  6E3B               	movwf	drawtext@color+1,c
  2659  0005A0  683A               	setf	drawtext@color,c
  2660  0005A2  0E00               	movlw	0
  2661  0005A4  6E3D               	movwf	drawtext@bg+1,c
  2662  0005A6  0E00               	movlw	0
  2663  0005A8  6E3C               	movwf	drawtext@bg,c
  2664  0005AA  0E02               	movlw	2
  2665  0005AC  6E3E               	movwf	drawtext@size,c
  2666  0005AE  0E02               	movlw	2
  2667  0005B0  ECD4  F009         	call	_drawtext
  2668                           
  2669                           ;Lab9.c: 234: strcpy(txt, "PEW");
  2670  0005B4  C060  F00F         	movff	_txt,strcpy@to
  2671  0005B8  C061  F010         	movff	_txt+1,strcpy@to+1
  2672  0005BC  0EF7               	movlw	low STR_10
  2673  0005BE  6E11               	movwf	strcpy@from,c
  2674  0005C0  0EFF               	movlw	high STR_10
  2675  0005C2  6E12               	movwf	strcpy@from+1,c
  2676  0005C4  EC09  F012         	call	_strcpy	;wreg free
  2677                           
  2678                           ;Lab9.c: 235: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2679  0005C8  0E14               	movlw	20
  2680  0005CA  6E37               	movwf	drawtext@y,c
  2681  0005CC  C060  F038         	movff	_txt,drawtext@_text
  2682  0005D0  C061  F039         	movff	_txt+1,drawtext@_text+1
  2683  0005D4  0E07               	movlw	7
  2684  0005D6  6E3B               	movwf	drawtext@color+1,c
  2685  0005D8  683A               	setf	drawtext@color,c
  2686  0005DA  0E00               	movlw	0
  2687  0005DC  6E3D               	movwf	drawtext@bg+1,c
  2688  0005DE  0E00               	movlw	0
  2689  0005E0  6E3C               	movwf	drawtext@bg,c
  2690  0005E2  0E01               	movlw	1
  2691  0005E4  6E3E               	movwf	drawtext@size,c
  2692  0005E6  0E03               	movlw	3
  2693  0005E8  ECD4  F009         	call	_drawtext
  2694                           
  2695                           ;Lab9.c: 238: strcpy(txt, "PNS");
  2696  0005EC  C060  F00F         	movff	_txt,strcpy@to
  2697  0005F0  C061  F010         	movff	_txt+1,strcpy@to+1
  2698  0005F4  0EF3               	movlw	low STR_11
  2699  0005F6  6E11               	movwf	strcpy@from,c
  2700  0005F8  0EFF               	movlw	high STR_11
  2701  0005FA  6E12               	movwf	strcpy@from+1,c
  2702  0005FC  EC09  F012         	call	_strcpy	;wreg free
  2703                           
  2704                           ;Lab9.c: 239: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  2705  000600  0E50               	movlw	80
  2706  000602  6E37               	movwf	drawtext@y,c
  2707  000604  C060  F038         	movff	_txt,drawtext@_text
  2708  000608  C061  F039         	movff	_txt+1,drawtext@_text+1
  2709  00060C  0E00               	movlw	0
  2710  00060E  6E3B               	movwf	drawtext@color+1,c
  2711  000610  0E1F               	movlw	31
  2712  000612  6E3A               	movwf	drawtext@color,c
  2713  000614  0E00               	movlw	0
  2714  000616  6E3D               	movwf	drawtext@bg+1,c
  2715  000618  0E00               	movlw	0
  2716  00061A  6E3C               	movwf	drawtext@bg,c
  2717  00061C  0E01               	movlw	1
  2718  00061E  6E3E               	movwf	drawtext@size,c
  2719  000620  0E03               	movlw	3
  2720  000622  ECD4  F009         	call	_drawtext
  2721                           
  2722                           ;Lab9.c: 240: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  2723  000626  0E5A               	movlw	90
  2724  000628  6E37               	movwf	drawtext@y,c
  2725  00062A  0EB5               	movlw	low _PED_NS_Count
  2726  00062C  6E38               	movwf	drawtext@_text,c
  2727  00062E  0E00               	movlw	high _PED_NS_Count
  2728  000630  6E39               	movwf	drawtext@_text+1,c
  2729  000632  0E00               	movlw	0
  2730  000634  6E3B               	movwf	drawtext@color+1,c
  2731  000636  0E1F               	movlw	31
  2732  000638  6E3A               	movwf	drawtext@color,c
  2733  00063A  0E00               	movlw	0
  2734  00063C  6E3D               	movwf	drawtext@bg+1,c
  2735  00063E  0E00               	movlw	0
  2736  000640  6E3C               	movwf	drawtext@bg,c
  2737  000642  0E02               	movlw	2
  2738  000644  6E3E               	movwf	drawtext@size,c
  2739  000646  0E02               	movlw	2
  2740  000648  ECD4  F009         	call	_drawtext
  2741                           
  2742                           ;Lab9.c: 243: strcpy(txt, "EWP EWLT NSP NSLT MD");
  2743  00064C  C060  F00F         	movff	_txt,strcpy@to
  2744  000650  C061  F010         	movff	_txt+1,strcpy@to+1
  2745  000654  0EAC               	movlw	low STR_12
  2746  000656  6E11               	movwf	strcpy@from,c
  2747  000658  0EFF               	movlw	high STR_12
  2748  00065A  6E12               	movwf	strcpy@from+1,c
  2749  00065C  EC09  F012         	call	_strcpy	;wreg free
  2750                           
  2751                           ;Lab9.c: 244: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2752  000660  0E8C               	movlw	140
  2753  000662  6E37               	movwf	drawtext@y,c
  2754  000664  C060  F038         	movff	_txt,drawtext@_text
  2755  000668  C061  F039         	movff	_txt+1,drawtext@_text+1
  2756  00066C  0EFF               	movlw	255
  2757  00066E  6E3B               	movwf	drawtext@color+1,c
  2758  000670  683A               	setf	drawtext@color,c
  2759  000672  0E00               	movlw	0
  2760  000674  6E3D               	movwf	drawtext@bg+1,c
  2761  000676  0E00               	movlw	0
  2762  000678  6E3C               	movwf	drawtext@bg,c
  2763  00067A  0E01               	movlw	1
  2764  00067C  6E3E               	movwf	drawtext@size,c
  2765  00067E  0E01               	movlw	1
  2766  000680  ECD4  F009         	call	_drawtext
  2767                           
  2768                           ;Lab9.c: 245: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2769  000684  0E95               	movlw	149
  2770  000686  6E37               	movwf	drawtext@y,c
  2771  000688  0E53               	movlw	low _SW_EWPED_Txt
  2772  00068A  6E38               	movwf	drawtext@_text,c
  2773  00068C  0E00               	movlw	high _SW_EWPED_Txt
  2774  00068E  6E39               	movwf	drawtext@_text+1,c
  2775  000690  0EFF               	movlw	255
  2776  000692  6E3B               	movwf	drawtext@color+1,c
  2777  000694  683A               	setf	drawtext@color,c
  2778  000696  0E00               	movlw	0
  2779  000698  6E3D               	movwf	drawtext@bg+1,c
  2780  00069A  0E00               	movlw	0
  2781  00069C  6E3C               	movwf	drawtext@bg,c
  2782  00069E  0E01               	movlw	1
  2783  0006A0  6E3E               	movwf	drawtext@size,c
  2784  0006A2  0E06               	movlw	6
  2785  0006A4  ECD4  F009         	call	_drawtext
  2786                           
  2787                           ;Lab9.c: 246: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2788  0006A8  0E95               	movlw	149
  2789  0006AA  6E37               	movwf	drawtext@y,c
  2790  0006AC  0E51               	movlw	low _SW_EWLT_Txt
  2791  0006AE  6E38               	movwf	drawtext@_text,c
  2792  0006B0  0E00               	movlw	high _SW_EWLT_Txt
  2793  0006B2  6E39               	movwf	drawtext@_text+1,c
  2794  0006B4  0EFF               	movlw	255
  2795  0006B6  6E3B               	movwf	drawtext@color+1,c
  2796  0006B8  683A               	setf	drawtext@color,c
  2797  0006BA  0E00               	movlw	0
  2798  0006BC  6E3D               	movwf	drawtext@bg+1,c
  2799  0006BE  0E00               	movlw	0
  2800  0006C0  6E3C               	movwf	drawtext@bg,c
  2801  0006C2  0E01               	movlw	1
  2802  0006C4  6E3E               	movwf	drawtext@size,c
  2803  0006C6  0E20               	movlw	32
  2804  0006C8  ECD4  F009         	call	_drawtext
  2805                           
  2806                           ;Lab9.c: 247: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2807  0006CC  0E95               	movlw	149
  2808  0006CE  6E37               	movwf	drawtext@y,c
  2809  0006D0  0E59               	movlw	low _SW_NSPED_Txt
  2810  0006D2  6E38               	movwf	drawtext@_text,c
  2811  0006D4  0E00               	movlw	high _SW_NSPED_Txt
  2812  0006D6  6E39               	movwf	drawtext@_text+1,c
  2813  0006D8  0EFF               	movlw	255
  2814  0006DA  6E3B               	movwf	drawtext@color+1,c
  2815  0006DC  683A               	setf	drawtext@color,c
  2816  0006DE  0E00               	movlw	0
  2817  0006E0  6E3D               	movwf	drawtext@bg+1,c
  2818  0006E2  0E00               	movlw	0
  2819  0006E4  6E3C               	movwf	drawtext@bg,c
  2820  0006E6  0E01               	movlw	1
  2821  0006E8  6E3E               	movwf	drawtext@size,c
  2822  0006EA  0E3A               	movlw	58
  2823  0006EC  ECD4  F009         	call	_drawtext
  2824                           
  2825                           ;Lab9.c: 248: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2826  0006F0  0E95               	movlw	149
  2827  0006F2  6E37               	movwf	drawtext@y,c
  2828  0006F4  0E57               	movlw	low _SW_NSLT_Txt
  2829  0006F6  6E38               	movwf	drawtext@_text,c
  2830  0006F8  0E00               	movlw	high _SW_NSLT_Txt
  2831  0006FA  6E39               	movwf	drawtext@_text+1,c
  2832  0006FC  0EFF               	movlw	255
  2833  0006FE  6E3B               	movwf	drawtext@color+1,c
  2834  000700  683A               	setf	drawtext@color,c
  2835  000702  0E00               	movlw	0
  2836  000704  6E3D               	movwf	drawtext@bg+1,c
  2837  000706  0E00               	movlw	0
  2838  000708  6E3C               	movwf	drawtext@bg,c
  2839  00070A  0E01               	movlw	1
  2840  00070C  6E3E               	movwf	drawtext@size,c
  2841  00070E  0E57               	movlw	87
  2842  000710  ECD4  F009         	call	_drawtext
  2843                           
  2844                           ;Lab9.c: 250: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  2845  000714  0E95               	movlw	149
  2846  000716  6E37               	movwf	drawtext@y,c
  2847  000718  0E55               	movlw	low _SW_MODE_Txt
  2848  00071A  6E38               	movwf	drawtext@_text,c
  2849  00071C  0E00               	movlw	high _SW_MODE_Txt
  2850  00071E  6E39               	movwf	drawtext@_text+1,c
  2851  000720  0EFF               	movlw	255
  2852  000722  6E3B               	movwf	drawtext@color+1,c
  2853  000724  683A               	setf	drawtext@color,c
  2854  000726  0E00               	movlw	0
  2855  000728  6E3D               	movwf	drawtext@bg+1,c
  2856  00072A  0E00               	movlw	0
  2857  00072C  6E3C               	movwf	drawtext@bg,c
  2858  00072E  0E01               	movlw	1
  2859  000730  6E3E               	movwf	drawtext@size,c
  2860  000732  0E70               	movlw	112
  2861  000734  ECD4  F009         	call	_drawtext
  2862  000738  0012               	return		;funcret
  2863  00073A                     __end_of_Initialize_Screen:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           intcon2	equ	0xFF1
  2870                           postinc0	equ	0xFEE
  2871                           wreg	equ	0xFE8
  2872                           postdec1	equ	0xFE5
  2873                           fsr1l	equ	0xFE1
  2874                           status	equ	0xFD8
  2875                           
  2876 ;; *************** function _fillScreen *****************
  2877 ;; Defined at:
  2878 ;;		line 652 in file "ST7735_TFT.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  color           2   33[COMRAM] unsigned int 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;		None
  2883 ;; Return value:  Size  Location     Type
  2884 ;;		None               void
  2885 ;; Registers used:
  2886 ;;		wreg, status,2, status,0, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2892 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;Total ram usage:        2 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    6
  2899 ;; This function calls:
  2900 ;;		_fillRectangle
  2901 ;; This function is called by:
  2902 ;;		_Initialize_Screen
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text3
  2907  002512                     __ptext3:
  2908                           	opt stack 0
  2909  002512                     _fillScreen:
  2910                           	opt stack 23
  2911                           
  2912                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  2913                           
  2914                           ;incstack = 0
  2915  002512  0E00               	movlw	0
  2916  002514  6E16               	movwf	fillRectangle@y,c
  2917  002516  0E80               	movlw	128
  2918  002518  6E17               	movwf	fillRectangle@w,c
  2919  00251A  0EA0               	movlw	160
  2920  00251C  6E18               	movwf	fillRectangle@h,c
  2921  00251E  C022  F019         	movff	fillScreen@color,fillRectangle@color
  2922  002522  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  2923  002526  0E00               	movlw	0
  2924  002528  EC43  F00B         	call	_fillRectangle
  2925  00252C  0012               	return		;funcret
  2926  00252E                     __end_of_fillScreen:
  2927                           	opt stack 0
  2928                           tblptru	equ	0xFF8
  2929                           tblptrh	equ	0xFF7
  2930                           tblptrl	equ	0xFF6
  2931                           tablat	equ	0xFF5
  2932                           intcon2	equ	0xFF1
  2933                           postinc0	equ	0xFEE
  2934                           wreg	equ	0xFE8
  2935                           postdec1	equ	0xFE5
  2936                           fsr1l	equ	0xFE1
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function _fillRectangle *****************
  2940 ;; Defined at:
  2941 ;;		line 536 in file "ST7735_TFT.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  x               1    wreg     unsigned char 
  2944 ;;  y               1   21[COMRAM] unsigned char 
  2945 ;;  w               1   22[COMRAM] unsigned char 
  2946 ;;  h               1   23[COMRAM] unsigned char 
  2947 ;;  color           2   24[COMRAM] unsigned int 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  x               1   32[COMRAM] unsigned char 
  2950 ;;  lo              1   31[COMRAM] unsigned char 
  2951 ;;  hi              1   30[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;		None               void
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2961 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;Total ram usage:       12 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    5
  2968 ;; This function calls:
  2969 ;;		_setAddrWindow
  2970 ;;		_spiwrite
  2971 ;; This function is called by:
  2972 ;;		_fillScreen
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text4
  2977  001686                     __ptext4:
  2978                           	opt stack 0
  2979  001686                     _fillRectangle:
  2980                           	opt stack 23
  2981                           
  2982                           ;incstack = 0
  2983                           ;fillRectangle@x stored from wreg
  2984  001686  6E21               	movwf	fillRectangle@x,c
  2985                           
  2986                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  2987                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  2988  001688  0E80               	movlw	128
  2989  00168A  6021               	cpfslt	fillRectangle@x,c
  2990  00168C  D069               	goto	l240
  2991  00168E  0E9F               	movlw	159
  2992  001690  6416               	cpfsgt	fillRectangle@y,c
  2993  001692  D001               	goto	l4806
  2994                           
  2995                           ;ST7735_TFT.c: 540: return;
  2996  001694  D065               	goto	l240
  2997  001696                     l4806:
  2998                           
  2999                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3000  001696  0EFF               	movlw	255
  3001  001698  6E1B               	movwf	??_fillRectangle& (0+255),c
  3002  00169A  0EFF               	movlw	255
  3003  00169C  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3004  00169E  5017               	movf	fillRectangle@w,w,c
  3005  0016A0  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3006  0016A4  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3007  0016A6  261D               	addwf	??_fillRectangle+2,f,c
  3008  0016A8  0E00               	movlw	0
  3009  0016AA  221E               	addwfc	??_fillRectangle+3,f,c
  3010  0016AC  501B               	movf	??_fillRectangle,w,c
  3011  0016AE  261D               	addwf	??_fillRectangle+2,f,c
  3012  0016B0  501C               	movf	??_fillRectangle+1,w,c
  3013  0016B2  221E               	addwfc	??_fillRectangle+3,f,c
  3014  0016B4  BE1E               	btfsc	??_fillRectangle+3,7,c
  3015  0016B6  D00A               	goto	l241
  3016  0016B8  501E               	movf	??_fillRectangle+3,w,c
  3017  0016BA  E104               	bnz	u3490
  3018  0016BC  0E80               	movlw	128
  3019  0016BE  5C1D               	subwf	??_fillRectangle+2,w,c
  3020  0016C0  A0D8               	btfss	status,0,c
  3021  0016C2  D004               	goto	l241
  3022  0016C4                     u3490:
  3023                           
  3024                           ;ST7735_TFT.c: 542: w = 128 - x;
  3025  0016C4  5021               	movf	fillRectangle@x,w,c
  3026  0016C6  0800               	sublw	0
  3027  0016C8  0F80               	addlw	128
  3028  0016CA  6E17               	movwf	fillRectangle@w,c
  3029  0016CC                     l241:
  3030                           
  3031                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3032  0016CC  0EFF               	movlw	255
  3033  0016CE  6E1B               	movwf	??_fillRectangle& (0+255),c
  3034  0016D0  0EFF               	movlw	255
  3035  0016D2  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3036  0016D4  5018               	movf	fillRectangle@h,w,c
  3037  0016D6  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3038  0016DA  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3039  0016DC  261D               	addwf	??_fillRectangle+2,f,c
  3040  0016DE  0E00               	movlw	0
  3041  0016E0  221E               	addwfc	??_fillRectangle+3,f,c
  3042  0016E2  501B               	movf	??_fillRectangle,w,c
  3043  0016E4  261D               	addwf	??_fillRectangle+2,f,c
  3044  0016E6  501C               	movf	??_fillRectangle+1,w,c
  3045  0016E8  221E               	addwfc	??_fillRectangle+3,f,c
  3046  0016EA  BE1E               	btfsc	??_fillRectangle+3,7,c
  3047  0016EC  D00B               	goto	l4812
  3048  0016EE  501E               	movf	??_fillRectangle+3,w,c
  3049  0016F0  E104               	bnz	u3500
  3050  0016F2  0EA0               	movlw	160
  3051  0016F4  5C1D               	subwf	??_fillRectangle+2,w,c
  3052  0016F6  A0D8               	btfss	status,0,c
  3053  0016F8  D005               	goto	l4812
  3054  0016FA                     u3500:
  3055                           
  3056                           ;ST7735_TFT.c: 544: h = 160 - y;
  3057  0016FA  5016               	movf	fillRectangle@y,w,c
  3058  0016FC  0800               	sublw	0
  3059  0016FE  0FA0               	addlw	160
  3060  001700  6E18               	movwf	fillRectangle@h,c
  3061  001702  D000               	goto	l4812
  3062  001704                     l4812:
  3063                           
  3064                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3065  001704  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3066  001708  5021               	movf	fillRectangle@x,w,c
  3067  00170A  2417               	addwf	fillRectangle@w,w,c
  3068  00170C  6E1B               	movwf	??_fillRectangle& (0+255),c
  3069  00170E  041B               	decf	??_fillRectangle,w,c
  3070  001710  6E13               	movwf	setAddrWindow@x1,c
  3071  001712  5016               	movf	fillRectangle@y,w,c
  3072  001714  2418               	addwf	fillRectangle@h,w,c
  3073  001716  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3074  001718  041C               	decf	??_fillRectangle+1,w,c
  3075  00171A  6E14               	movwf	setAddrWindow@y1,c
  3076  00171C  5021               	movf	fillRectangle@x,w,c
  3077  00171E  EC93  F010         	call	_setAddrWindow
  3078                           
  3079                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3080  001722  501A               	movf	fillRectangle@color+1,w,c
  3081  001724  6E1F               	movwf	fillRectangle@hi,c
  3082  001726  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3083                           
  3084                           ;ST7735_TFT.c: 547: PORTDbits.RD0 = 1;
  3085  00172A  8083               	bsf	3971,0,c	;volatile
  3086                           
  3087                           ;ST7735_TFT.c: 548: PORTDbits.RD1 = 0;
  3088  00172C  9283               	bcf	3971,1,c	;volatile
  3089                           
  3090                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3091  00172E  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3092  001732                     l4824:
  3093  001732  5016               	movf	fillRectangle@y,w,c
  3094  001734  B4D8               	btfsc	status,2,c
  3095  001736  D013               	goto	l244
  3096  001738  D001               	goto	l243
  3097  00173A  D011               	goto	l244
  3098  00173C                     l243:
  3099                           
  3100                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3101  00173C  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3102  001740                     l4828:
  3103  001740  5021               	movf	fillRectangle@x,w,c
  3104  001742  B4D8               	btfsc	status,2,c
  3105  001744  D00A               	goto	l4838
  3106  001746  D001               	goto	l4832
  3107  001748  D008               	goto	l4838
  3108  00174A                     l4832:
  3109                           
  3110                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3111  00174A  501F               	movf	fillRectangle@hi,w,c
  3112  00174C  ECD1  F012         	call	_spiwrite
  3113                           
  3114                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3115  001750  5020               	movf	fillRectangle@lo,w,c
  3116  001752  ECD1  F012         	call	_spiwrite
  3117  001756  0621               	decf	fillRectangle@x,f,c
  3118  001758  D7F3               	goto	l4828
  3119  00175A                     l4838:
  3120  00175A  0616               	decf	fillRectangle@y,f,c
  3121  00175C  D7EA               	goto	l4824
  3122  00175E                     l244:
  3123                           
  3124                           ;ST7735_TFT.c: 554: }
  3125                           ;ST7735_TFT.c: 555: }
  3126                           ;ST7735_TFT.c: 556: PORTDbits.RD1 = 1;
  3127  00175E  8283               	bsf	3971,1,c	;volatile
  3128  001760                     l240:
  3129  001760  0012               	return		;funcret
  3130  001762                     __end_of_fillRectangle:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           intcon2	equ	0xFF1
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           postdec1	equ	0xFE5
  3140                           fsr1l	equ	0xFE1
  3141                           status	equ	0xFD8
  3142                           
  3143 ;; *************** function _drawRect *****************
  3144 ;; Defined at:
  3145 ;;		line 718 in file "ST7735_TFT.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  x               2   32[COMRAM] unsigned int 
  3148 ;;  y               2   34[COMRAM] unsigned int 
  3149 ;;  w               2   36[COMRAM] unsigned int 
  3150 ;;  h               2   38[COMRAM] unsigned int 
  3151 ;;  color           2   40[COMRAM] unsigned int 
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;		None
  3154 ;; Return value:  Size  Location     Type
  3155 ;;		None               void
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3163 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;Total ram usage:       11 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    6
  3170 ;; This function calls:
  3171 ;;		_drawFastHLine
  3172 ;;		_drawFastVLine
  3173 ;; This function is called by:
  3174 ;;		_Initialize_Screen
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text5
  3179  001F60                     __ptext5:
  3180                           	opt stack 0
  3181  001F60                     _drawRect:
  3182                           	opt stack 23
  3183                           
  3184                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3185                           
  3186                           ;incstack = 0
  3187  001F60  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3188  001F64  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3189  001F68  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3190  001F6C  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3191  001F70  5021               	movf	drawRect@x,w,c
  3192  001F72  EC2B  F00E         	call	_drawFastHLine
  3193                           
  3194                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3195  001F76  5023               	movf	drawRect@y,w,c
  3196  001F78  2427               	addwf	drawRect@h,w,c
  3197  001F7A  6E2B               	movwf	??_drawRect& (0+255),c
  3198  001F7C  042B               	decf	??_drawRect,w,c
  3199  001F7E  6E16               	movwf	drawFastHLine@y,c
  3200  001F80  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3201  001F84  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3202  001F88  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3203  001F8C  5021               	movf	drawRect@x,w,c
  3204  001F8E  EC2B  F00E         	call	_drawFastHLine
  3205                           
  3206                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3207  001F92  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3208  001F96  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3209  001F9A  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3210  001F9E  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3211  001FA2  5021               	movf	drawRect@x,w,c
  3212  001FA4  EC6F  F00E         	call	_drawFastVLine
  3213                           
  3214                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3215  001FA8  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3216  001FAC  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3217  001FB0  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3218  001FB4  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3219  001FB8  5021               	movf	drawRect@x,w,c
  3220  001FBA  2425               	addwf	drawRect@w,w,c
  3221  001FBC  6E2B               	movwf	??_drawRect& (0+255),c
  3222  001FBE  042B               	decf	??_drawRect,w,c
  3223  001FC0  EC6F  F00E         	call	_drawFastVLine
  3224  001FC4  0012               	return		;funcret
  3225  001FC6                     __end_of_drawRect:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           intcon2	equ	0xFF1
  3232                           postinc0	equ	0xFEE
  3233                           wreg	equ	0xFE8
  3234                           postdec1	equ	0xFE5
  3235                           fsr1l	equ	0xFE1
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _drawFastHLine *****************
  3239 ;; Defined at:
  3240 ;;		line 657 in file "ST7735_TFT.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  x               1    wreg     unsigned char 
  3243 ;;  y               1   21[COMRAM] unsigned char 
  3244 ;;  w               1   22[COMRAM] unsigned char 
  3245 ;;  color           2   23[COMRAM] unsigned int 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  x               1   31[COMRAM] unsigned char 
  3248 ;;  lo              1   30[COMRAM] unsigned char 
  3249 ;;  hi              1   29[COMRAM] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:       11 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    5
  3266 ;; This function calls:
  3267 ;;		_setAddrWindow
  3268 ;;		_spiwrite
  3269 ;; This function is called by:
  3270 ;;		_drawRect
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text6
  3275  001C56                     __ptext6:
  3276                           	opt stack 0
  3277  001C56                     _drawFastHLine:
  3278                           	opt stack 23
  3279                           
  3280                           ;incstack = 0
  3281                           ;drawFastHLine@x stored from wreg
  3282  001C56  6E20               	movwf	drawFastHLine@x,c
  3283                           
  3284                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3285                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3286  001C58  0E80               	movlw	128
  3287  001C5A  6020               	cpfslt	drawFastHLine@x,c
  3288  001C5C  D03F               	goto	l285
  3289  001C5E  0E9F               	movlw	159
  3290  001C60  6416               	cpfsgt	drawFastHLine@y,c
  3291  001C62  D001               	goto	l4846
  3292                           
  3293                           ;ST7735_TFT.c: 661: return;
  3294  001C64  D03B               	goto	l285
  3295  001C66                     l4846:
  3296                           
  3297                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3298  001C66  0EFF               	movlw	255
  3299  001C68  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3300  001C6A  0EFF               	movlw	255
  3301  001C6C  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3302  001C6E  5017               	movf	drawFastHLine@w,w,c
  3303  001C70  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3304  001C74  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3305  001C76  261C               	addwf	??_drawFastHLine+2,f,c
  3306  001C78  0E00               	movlw	0
  3307  001C7A  221D               	addwfc	??_drawFastHLine+3,f,c
  3308  001C7C  501A               	movf	??_drawFastHLine,w,c
  3309  001C7E  261C               	addwf	??_drawFastHLine+2,f,c
  3310  001C80  501B               	movf	??_drawFastHLine+1,w,c
  3311  001C82  221D               	addwfc	??_drawFastHLine+3,f,c
  3312  001C84  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3313  001C86  D00B               	goto	l4850
  3314  001C88  501D               	movf	??_drawFastHLine+3,w,c
  3315  001C8A  E104               	bnz	u3570
  3316  001C8C  0E80               	movlw	128
  3317  001C8E  5C1C               	subwf	??_drawFastHLine+2,w,c
  3318  001C90  A0D8               	btfss	status,0,c
  3319  001C92  D005               	goto	l4850
  3320  001C94                     u3570:
  3321                           
  3322                           ;ST7735_TFT.c: 663: w = 128 - x;
  3323  001C94  5020               	movf	drawFastHLine@x,w,c
  3324  001C96  0800               	sublw	0
  3325  001C98  0F80               	addlw	128
  3326  001C9A  6E17               	movwf	drawFastHLine@w,c
  3327  001C9C  D000               	goto	l4850
  3328  001C9E                     l4850:
  3329                           
  3330                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3331  001C9E  5019               	movf	drawFastHLine@color+1,w,c
  3332  001CA0  6E1E               	movwf	drawFastHLine@hi,c
  3333  001CA2  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3334                           
  3335                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3336  001CA6  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3337  001CAA  5020               	movf	drawFastHLine@x,w,c
  3338  001CAC  2417               	addwf	drawFastHLine@w,w,c
  3339  001CAE  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3340  001CB0  041A               	decf	??_drawFastHLine,w,c
  3341  001CB2  6E13               	movwf	setAddrWindow@x1,c
  3342  001CB4  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3343  001CB8  5020               	movf	drawFastHLine@x,w,c
  3344  001CBA  EC93  F010         	call	_setAddrWindow
  3345                           
  3346                           ;ST7735_TFT.c: 666: PORTDbits.RD0 = 1;
  3347  001CBE  8083               	bsf	3971,0,c	;volatile
  3348                           
  3349                           ;ST7735_TFT.c: 667: PORTDbits.RD1 = 0;
  3350  001CC0  9283               	bcf	3971,1,c	;volatile
  3351                           
  3352                           ;ST7735_TFT.c: 669: while (w--) {
  3353  001CC2  D007               	goto	l4862
  3354  001CC4                     l4860:
  3355                           
  3356                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3357  001CC4  501E               	movf	drawFastHLine@hi,w,c
  3358  001CC6  ECD1  F012         	call	_spiwrite
  3359                           
  3360                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3361  001CCA  501F               	movf	drawFastHLine@lo,w,c
  3362  001CCC  ECD1  F012         	call	_spiwrite
  3363  001CD0  D000               	goto	l4862
  3364  001CD2                     l4862:
  3365  001CD2  0617               	decf	drawFastHLine@w,f,c
  3366  001CD4  2817               	incf	drawFastHLine@w,w,c
  3367  001CD6  A4D8               	btfss	status,2,c
  3368  001CD8  D7F5               	goto	l4860
  3369                           
  3370                           ;ST7735_TFT.c: 672: }
  3371                           ;ST7735_TFT.c: 673: PORTDbits.RD1 = 1;
  3372  001CDA  8283               	bsf	3971,1,c	;volatile
  3373  001CDC                     l285:
  3374  001CDC  0012               	return		;funcret
  3375  001CDE                     __end_of_drawFastHLine:
  3376                           	opt stack 0
  3377                           tblptru	equ	0xFF8
  3378                           tblptrh	equ	0xFF7
  3379                           tblptrl	equ	0xFF6
  3380                           tablat	equ	0xFF5
  3381                           intcon2	equ	0xFF1
  3382                           postinc0	equ	0xFEE
  3383                           wreg	equ	0xFE8
  3384                           postdec1	equ	0xFE5
  3385                           fsr1l	equ	0xFE1
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _TFT_GreenTab_Initialize *****************
  3389 ;; Defined at:
  3390 ;;		line 677 in file "ST7735_TFT.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;		None
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;		None               void
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:        0 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    5
  3411 ;; This function calls:
  3412 ;;		_Rcmd1
  3413 ;;		_Rcmd2red
  3414 ;;		_Rcmd3
  3415 ;;		_write_command
  3416 ;;		_write_data
  3417 ;; This function is called by:
  3418 ;;		_Initialize_Screen
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text7
  3423  002474                     __ptext7:
  3424                           	opt stack 0
  3425  002474                     _TFT_GreenTab_Initialize:
  3426                           	opt stack 24
  3427                           
  3428                           ;ST7735_TFT.c: 679: PORTDbits.RD1 = 1;
  3429                           
  3430                           ;incstack = 0
  3431  002474  8283               	bsf	3971,1,c	;volatile
  3432                           
  3433                           ;ST7735_TFT.c: 680: PORTDbits.RD0 = 0;
  3434  002476  9083               	bcf	3971,0,c	;volatile
  3435                           
  3436                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3437  002478  0E80               	movlw	128
  3438  00247A  6EC7               	movwf	4039,c	;volatile
  3439                           
  3440                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3441  00247C  0E30               	movlw	48
  3442  00247E  6EC6               	movwf	4038,c	;volatile
  3443                           
  3444                           ;ST7735_TFT.c: 686: Rcmd1();
  3445  002480  EC4C  F009         	call	_Rcmd1	;wreg free
  3446                           
  3447                           ;ST7735_TFT.c: 687: Rcmd2red();
  3448  002484  EC91  F011         	call	_Rcmd2red	;wreg free
  3449                           
  3450                           ;ST7735_TFT.c: 688: Rcmd3();
  3451  002488  EC59  F00A         	call	_Rcmd3	;wreg free
  3452                           
  3453                           ;ST7735_TFT.c: 689: write_command(0x36);
  3454  00248C  0E36               	movlw	54
  3455  00248E  EC07  F013         	call	_write_command
  3456                           
  3457                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3458  002492  0EC0               	movlw	192
  3459  002494  ECFF  F012         	call	_write_data
  3460                           
  3461                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3462  002498  0E01               	movlw	1
  3463  00249A  6E6D               	movwf	__tft_type,c
  3464  00249C  0012               	return		;funcret
  3465  00249E                     __end_of_TFT_GreenTab_Initialize:
  3466                           	opt stack 0
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           intcon2	equ	0xFF1
  3472                           postinc0	equ	0xFEE
  3473                           wreg	equ	0xFE8
  3474                           postdec1	equ	0xFE5
  3475                           fsr1l	equ	0xFE1
  3476                           status	equ	0xFD8
  3477                           
  3478 ;; *************** function _Rcmd3 *****************
  3479 ;; Defined at:
  3480 ;;		line 371 in file "ST7735_TFT.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;		None
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;		None               void
  3487 ;; Registers used:
  3488 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;Total ram usage:        0 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; Hardware stack levels required when called:    4
  3501 ;; This function calls:
  3502 ;;		_delay_ms
  3503 ;;		_write_command
  3504 ;;		_write_data
  3505 ;; This function is called by:
  3506 ;;		_TFT_GreenTab_Initialize
  3507 ;;		_TFT_BlackTab_Initialize
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text8
  3512  0014B2                     __ptext8:
  3513                           	opt stack 0
  3514  0014B2                     _Rcmd3:
  3515                           	opt stack 24
  3516                           
  3517                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3518                           
  3519                           ;incstack = 0
  3520  0014B2  0EE0               	movlw	224
  3521  0014B4  EC07  F013         	call	_write_command
  3522                           
  3523                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3524  0014B8  0E02               	movlw	2
  3525  0014BA  ECFF  F012         	call	_write_data
  3526  0014BE  0E1C               	movlw	28
  3527  0014C0  ECFF  F012         	call	_write_data
  3528  0014C4  0E07               	movlw	7
  3529  0014C6  ECFF  F012         	call	_write_data
  3530  0014CA  0E12               	movlw	18
  3531  0014CC  ECFF  F012         	call	_write_data
  3532                           
  3533                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3534  0014D0  0E37               	movlw	55
  3535  0014D2  ECFF  F012         	call	_write_data
  3536  0014D6  0E32               	movlw	50
  3537  0014D8  ECFF  F012         	call	_write_data
  3538  0014DC  0E29               	movlw	41
  3539  0014DE  ECFF  F012         	call	_write_data
  3540  0014E2  0E2D               	movlw	45
  3541  0014E4  ECFF  F012         	call	_write_data
  3542                           
  3543                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3544  0014E8  0E29               	movlw	41
  3545  0014EA  ECFF  F012         	call	_write_data
  3546  0014EE  0E25               	movlw	37
  3547  0014F0  ECFF  F012         	call	_write_data
  3548  0014F4  0E2B               	movlw	43
  3549  0014F6  ECFF  F012         	call	_write_data
  3550  0014FA  0E39               	movlw	57
  3551  0014FC  ECFF  F012         	call	_write_data
  3552                           
  3553                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3554  001500  0E00               	movlw	0
  3555  001502  ECFF  F012         	call	_write_data
  3556  001506  0E01               	movlw	1
  3557  001508  ECFF  F012         	call	_write_data
  3558  00150C  0E03               	movlw	3
  3559  00150E  ECFF  F012         	call	_write_data
  3560  001512  0E10               	movlw	16
  3561  001514  ECFF  F012         	call	_write_data
  3562                           
  3563                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3564  001518  0EE1               	movlw	225
  3565  00151A  EC07  F013         	call	_write_command
  3566                           
  3567                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3568  00151E  0E03               	movlw	3
  3569  001520  ECFF  F012         	call	_write_data
  3570  001524  0E1D               	movlw	29
  3571  001526  ECFF  F012         	call	_write_data
  3572  00152A  0E07               	movlw	7
  3573  00152C  ECFF  F012         	call	_write_data
  3574  001530  0E06               	movlw	6
  3575  001532  ECFF  F012         	call	_write_data
  3576                           
  3577                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3578  001536  0E2E               	movlw	46
  3579  001538  ECFF  F012         	call	_write_data
  3580  00153C  0E2C               	movlw	44
  3581  00153E  ECFF  F012         	call	_write_data
  3582  001542  0E29               	movlw	41
  3583  001544  ECFF  F012         	call	_write_data
  3584  001548  0E2D               	movlw	45
  3585  00154A  ECFF  F012         	call	_write_data
  3586                           
  3587                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3588  00154E  0E2E               	movlw	46
  3589  001550  ECFF  F012         	call	_write_data
  3590  001554  0E2E               	movlw	46
  3591  001556  ECFF  F012         	call	_write_data
  3592  00155A  0E37               	movlw	55
  3593  00155C  ECFF  F012         	call	_write_data
  3594  001560  0E3F               	movlw	63
  3595  001562  ECFF  F012         	call	_write_data
  3596                           
  3597                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3598  001566  0E00               	movlw	0
  3599  001568  ECFF  F012         	call	_write_data
  3600  00156C  0E00               	movlw	0
  3601  00156E  ECFF  F012         	call	_write_data
  3602  001572  0E02               	movlw	2
  3603  001574  ECFF  F012         	call	_write_data
  3604  001578  0E10               	movlw	16
  3605  00157A  ECFF  F012         	call	_write_data
  3606                           
  3607                           ;ST7735_TFT.c: 383: write_command(0x13);
  3608  00157E  0E13               	movlw	19
  3609  001580  EC07  F013         	call	_write_command
  3610                           
  3611                           ;ST7735_TFT.c: 384: delay_ms(10);
  3612  001584  0E00               	movlw	0
  3613  001586  6E16               	movwf	delay_ms@ms+1,c
  3614  001588  0E0A               	movlw	10
  3615  00158A  6E15               	movwf	delay_ms@ms,c
  3616  00158C  EC41  F010         	call	_delay_ms	;wreg free
  3617                           
  3618                           ;ST7735_TFT.c: 385: write_command(0x29);
  3619  001590  0E29               	movlw	41
  3620  001592  EC07  F013         	call	_write_command
  3621                           
  3622                           ;ST7735_TFT.c: 386: delay_ms(100);
  3623  001596  0E00               	movlw	0
  3624  001598  6E16               	movwf	delay_ms@ms+1,c
  3625  00159A  0E64               	movlw	100
  3626  00159C  6E15               	movwf	delay_ms@ms,c
  3627  00159E  EC41  F010         	call	_delay_ms	;wreg free
  3628  0015A2  0012               	return		;funcret
  3629  0015A4                     __end_of_Rcmd3:
  3630                           	opt stack 0
  3631                           tblptru	equ	0xFF8
  3632                           tblptrh	equ	0xFF7
  3633                           tblptrl	equ	0xFF6
  3634                           tablat	equ	0xFF5
  3635                           intcon2	equ	0xFF1
  3636                           postinc0	equ	0xFEE
  3637                           wreg	equ	0xFE8
  3638                           postdec1	equ	0xFE5
  3639                           fsr1l	equ	0xFE1
  3640                           status	equ	0xFD8
  3641                           
  3642 ;; *************** function _Rcmd2red *****************
  3643 ;; Defined at:
  3644 ;;		line 361 in file "ST7735_TFT.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;		None               void
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    4
  3665 ;; This function calls:
  3666 ;;		_write_command
  3667 ;;		_write_data
  3668 ;; This function is called by:
  3669 ;;		_TFT_GreenTab_Initialize
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text9
  3674  002322                     __ptext9:
  3675                           	opt stack 0
  3676  002322                     _Rcmd2red:
  3677                           	opt stack 24
  3678                           
  3679                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3680                           
  3681                           ;incstack = 0
  3682  002322  0E2A               	movlw	42
  3683  002324  EC07  F013         	call	_write_command
  3684                           
  3685                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3686  002328  0E00               	movlw	0
  3687  00232A  ECFF  F012         	call	_write_data
  3688  00232E  0E00               	movlw	0
  3689  002330  ECFF  F012         	call	_write_data
  3690                           
  3691                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3692  002334  0E00               	movlw	0
  3693  002336  ECFF  F012         	call	_write_data
  3694  00233A  0E7F               	movlw	127
  3695  00233C  ECFF  F012         	call	_write_data
  3696                           
  3697                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3698  002340  0E2B               	movlw	43
  3699  002342  EC07  F013         	call	_write_command
  3700                           
  3701                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3702  002346  0E00               	movlw	0
  3703  002348  ECFF  F012         	call	_write_data
  3704  00234C  0E00               	movlw	0
  3705  00234E  ECFF  F012         	call	_write_data
  3706                           
  3707                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3708  002352  0E00               	movlw	0
  3709  002354  ECFF  F012         	call	_write_data
  3710  002358  0E9F               	movlw	159
  3711  00235A  ECFF  F012         	call	_write_data
  3712  00235E  0012               	return		;funcret
  3713  002360                     __end_of_Rcmd2red:
  3714                           	opt stack 0
  3715                           tblptru	equ	0xFF8
  3716                           tblptrh	equ	0xFF7
  3717                           tblptrl	equ	0xFF6
  3718                           tablat	equ	0xFF5
  3719                           intcon2	equ	0xFF1
  3720                           postinc0	equ	0xFEE
  3721                           wreg	equ	0xFE8
  3722                           postdec1	equ	0xFE5
  3723                           fsr1l	equ	0xFE1
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _Rcmd1 *****************
  3727 ;; Defined at:
  3728 ;;		line 314 in file "ST7735_TFT.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;		None               void
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;Total ram usage:        0 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    4
  3749 ;; This function calls:
  3750 ;;		_delay_ms
  3751 ;;		_write_command
  3752 ;;		_write_data
  3753 ;; This function is called by:
  3754 ;;		_TFT_GreenTab_Initialize
  3755 ;;		_TFT_BlackTab_Initialize
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text10
  3760  001298                     __ptext10:
  3761                           	opt stack 0
  3762  001298                     _Rcmd1:
  3763                           	opt stack 24
  3764                           
  3765                           ;ST7735_TFT.c: 316: write_command(0x01);
  3766                           
  3767                           ;incstack = 0
  3768  001298  0E01               	movlw	1
  3769  00129A  EC07  F013         	call	_write_command
  3770                           
  3771                           ;ST7735_TFT.c: 317: delay_ms(150);
  3772  00129E  0E00               	movlw	0
  3773  0012A0  6E16               	movwf	delay_ms@ms+1,c
  3774  0012A2  0E96               	movlw	150
  3775  0012A4  6E15               	movwf	delay_ms@ms,c
  3776  0012A6  EC41  F010         	call	_delay_ms	;wreg free
  3777                           
  3778                           ;ST7735_TFT.c: 318: write_command(0x11);
  3779  0012AA  0E11               	movlw	17
  3780  0012AC  EC07  F013         	call	_write_command
  3781                           
  3782                           ;ST7735_TFT.c: 319: delay_ms(500);
  3783  0012B0  0E01               	movlw	1
  3784  0012B2  6E16               	movwf	delay_ms@ms+1,c
  3785  0012B4  0EF4               	movlw	244
  3786  0012B6  6E15               	movwf	delay_ms@ms,c
  3787  0012B8  EC41  F010         	call	_delay_ms	;wreg free
  3788                           
  3789                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3790  0012BC  0EB1               	movlw	177
  3791  0012BE  EC07  F013         	call	_write_command
  3792                           
  3793                           ;ST7735_TFT.c: 321: write_data(0x01);
  3794  0012C2  0E01               	movlw	1
  3795  0012C4  ECFF  F012         	call	_write_data
  3796                           
  3797                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3798  0012C8  0E2C               	movlw	44
  3799  0012CA  ECFF  F012         	call	_write_data
  3800                           
  3801                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3802  0012CE  0E2D               	movlw	45
  3803  0012D0  ECFF  F012         	call	_write_data
  3804                           
  3805                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3806  0012D4  0EB2               	movlw	178
  3807  0012D6  EC07  F013         	call	_write_command
  3808                           
  3809                           ;ST7735_TFT.c: 325: write_data(0x01);
  3810  0012DA  0E01               	movlw	1
  3811  0012DC  ECFF  F012         	call	_write_data
  3812                           
  3813                           ;ST7735_TFT.c: 326: write_data(0x2C);
  3814  0012E0  0E2C               	movlw	44
  3815  0012E2  ECFF  F012         	call	_write_data
  3816                           
  3817                           ;ST7735_TFT.c: 327: write_data(0x2D);
  3818  0012E6  0E2D               	movlw	45
  3819  0012E8  ECFF  F012         	call	_write_data
  3820                           
  3821                           ;ST7735_TFT.c: 328: write_command(0xB3);
  3822  0012EC  0EB3               	movlw	179
  3823  0012EE  EC07  F013         	call	_write_command
  3824                           
  3825                           ;ST7735_TFT.c: 329: write_data(0x01);
  3826  0012F2  0E01               	movlw	1
  3827  0012F4  ECFF  F012         	call	_write_data
  3828                           
  3829                           ;ST7735_TFT.c: 330: write_data(0x2C);
  3830  0012F8  0E2C               	movlw	44
  3831  0012FA  ECFF  F012         	call	_write_data
  3832                           
  3833                           ;ST7735_TFT.c: 331: write_data(0x2D);
  3834  0012FE  0E2D               	movlw	45
  3835  001300  ECFF  F012         	call	_write_data
  3836                           
  3837                           ;ST7735_TFT.c: 332: write_data(0x01);
  3838  001304  0E01               	movlw	1
  3839  001306  ECFF  F012         	call	_write_data
  3840                           
  3841                           ;ST7735_TFT.c: 333: write_data(0x2C);
  3842  00130A  0E2C               	movlw	44
  3843  00130C  ECFF  F012         	call	_write_data
  3844                           
  3845                           ;ST7735_TFT.c: 334: write_data(0x2D);
  3846  001310  0E2D               	movlw	45
  3847  001312  ECFF  F012         	call	_write_data
  3848                           
  3849                           ;ST7735_TFT.c: 335: write_command(0xB4);
  3850  001316  0EB4               	movlw	180
  3851  001318  EC07  F013         	call	_write_command
  3852                           
  3853                           ;ST7735_TFT.c: 336: write_data(0x07);
  3854  00131C  0E07               	movlw	7
  3855  00131E  ECFF  F012         	call	_write_data
  3856                           
  3857                           ;ST7735_TFT.c: 337: write_command(0xC0);
  3858  001322  0EC0               	movlw	192
  3859  001324  EC07  F013         	call	_write_command
  3860                           
  3861                           ;ST7735_TFT.c: 338: write_data(0xA2);
  3862  001328  0EA2               	movlw	162
  3863  00132A  ECFF  F012         	call	_write_data
  3864                           
  3865                           ;ST7735_TFT.c: 339: write_data(0x02);
  3866  00132E  0E02               	movlw	2
  3867  001330  ECFF  F012         	call	_write_data
  3868                           
  3869                           ;ST7735_TFT.c: 340: write_data(0x84);
  3870  001334  0E84               	movlw	132
  3871  001336  ECFF  F012         	call	_write_data
  3872                           
  3873                           ;ST7735_TFT.c: 341: write_command(0xC1);
  3874  00133A  0EC1               	movlw	193
  3875  00133C  EC07  F013         	call	_write_command
  3876                           
  3877                           ;ST7735_TFT.c: 342: write_data(0xC5);
  3878  001340  0EC5               	movlw	197
  3879  001342  ECFF  F012         	call	_write_data
  3880                           
  3881                           ;ST7735_TFT.c: 343: write_command(0xC2);
  3882  001346  0EC2               	movlw	194
  3883  001348  EC07  F013         	call	_write_command
  3884                           
  3885                           ;ST7735_TFT.c: 344: write_data(0x0A);
  3886  00134C  0E0A               	movlw	10
  3887  00134E  ECFF  F012         	call	_write_data
  3888                           
  3889                           ;ST7735_TFT.c: 345: write_data(0x00);
  3890  001352  0E00               	movlw	0
  3891  001354  ECFF  F012         	call	_write_data
  3892                           
  3893                           ;ST7735_TFT.c: 346: write_command(0xC3);
  3894  001358  0EC3               	movlw	195
  3895  00135A  EC07  F013         	call	_write_command
  3896                           
  3897                           ;ST7735_TFT.c: 347: write_data(0x8A);
  3898  00135E  0E8A               	movlw	138
  3899  001360  ECFF  F012         	call	_write_data
  3900                           
  3901                           ;ST7735_TFT.c: 348: write_data(0x2A);
  3902  001364  0E2A               	movlw	42
  3903  001366  ECFF  F012         	call	_write_data
  3904                           
  3905                           ;ST7735_TFT.c: 349: write_command(0xC4);
  3906  00136A  0EC4               	movlw	196
  3907  00136C  EC07  F013         	call	_write_command
  3908                           
  3909                           ;ST7735_TFT.c: 350: write_data(0x8A);
  3910  001370  0E8A               	movlw	138
  3911  001372  ECFF  F012         	call	_write_data
  3912                           
  3913                           ;ST7735_TFT.c: 351: write_data(0xEE);
  3914  001376  0EEE               	movlw	238
  3915  001378  ECFF  F012         	call	_write_data
  3916                           
  3917                           ;ST7735_TFT.c: 352: write_command(0xC5);
  3918  00137C  0EC5               	movlw	197
  3919  00137E  EC07  F013         	call	_write_command
  3920                           
  3921                           ;ST7735_TFT.c: 353: write_data(0x0E);
  3922  001382  0E0E               	movlw	14
  3923  001384  ECFF  F012         	call	_write_data
  3924                           
  3925                           ;ST7735_TFT.c: 354: write_command(0x20);
  3926  001388  0E20               	movlw	32
  3927  00138A  EC07  F013         	call	_write_command
  3928                           
  3929                           ;ST7735_TFT.c: 355: write_command(0x36);
  3930  00138E  0E36               	movlw	54
  3931  001390  EC07  F013         	call	_write_command
  3932                           
  3933                           ;ST7735_TFT.c: 356: write_data(0xC8);
  3934  001394  0EC8               	movlw	200
  3935  001396  ECFF  F012         	call	_write_data
  3936                           
  3937                           ;ST7735_TFT.c: 357: write_command(0x3A);
  3938  00139A  0E3A               	movlw	58
  3939  00139C  EC07  F013         	call	_write_command
  3940                           
  3941                           ;ST7735_TFT.c: 358: write_data(0x05);
  3942  0013A0  0E05               	movlw	5
  3943  0013A2  ECFF  F012         	call	_write_data
  3944  0013A6  0012               	return		;funcret
  3945  0013A8                     __end_of_Rcmd1:
  3946                           	opt stack 0
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           intcon2	equ	0xFF1
  3952                           postinc0	equ	0xFEE
  3953                           wreg	equ	0xFE8
  3954                           postdec1	equ	0xFE5
  3955                           fsr1l	equ	0xFE1
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function _LCD_Reset *****************
  3959 ;; Defined at:
  3960 ;;		line 250 in file "ST7735_TFT.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;		None
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;		None
  3965 ;; Return value:  Size  Location     Type
  3966 ;;		None               void
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;Total ram usage:        0 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    4
  3981 ;; This function calls:
  3982 ;;		_delay_ms
  3983 ;; This function is called by:
  3984 ;;		_Initialize_Screen
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text11
  3989  0025B6                     __ptext11:
  3990                           	opt stack 0
  3991  0025B6                     _LCD_Reset:
  3992                           	opt stack 25
  3993                           
  3994                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  3995                           
  3996                           ;incstack = 0
  3997  0025B6  9483               	bcf	3971,2,c	;volatile
  3998                           
  3999                           ;ST7735_TFT.c: 253: delay_ms(100);
  4000  0025B8  0E00               	movlw	0
  4001  0025BA  6E16               	movwf	delay_ms@ms+1,c
  4002  0025BC  0E64               	movlw	100
  4003  0025BE  6E15               	movwf	delay_ms@ms,c
  4004  0025C0  EC41  F010         	call	_delay_ms	;wreg free
  4005                           
  4006                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4007  0025C4  8483               	bsf	3971,2,c	;volatile
  4008  0025C6  0012               	return		;funcret
  4009  0025C8                     __end_of_LCD_Reset:
  4010                           	opt stack 0
  4011                           tblptru	equ	0xFF8
  4012                           tblptrh	equ	0xFF7
  4013                           tblptrl	equ	0xFF6
  4014                           tablat	equ	0xFF5
  4015                           intcon2	equ	0xFF1
  4016                           postinc0	equ	0xFEE
  4017                           wreg	equ	0xFE8
  4018                           postdec1	equ	0xFE5
  4019                           fsr1l	equ	0xFE1
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function _delay_ms *****************
  4023 ;; Defined at:
  4024 ;;		line 97 in file "ST7735_TFT.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  ms              2   20[COMRAM] int 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  count           2   24[COMRAM] int 
  4029 ;; Return value:  Size  Location     Type
  4030 ;;		None               void
  4031 ;; Registers used:
  4032 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4038 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;Total ram usage:        6 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:    3
  4045 ;; This function calls:
  4046 ;;		___wmul
  4047 ;; This function is called by:
  4048 ;;		_LCD_Reset
  4049 ;;		_Rcmd1
  4050 ;;		_Rcmd3
  4051 ;;		_Bcmd
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text12
  4056  002082                     __ptext12:
  4057                           	opt stack 0
  4058  002082                     _delay_ms:
  4059                           	opt stack 24
  4060                           
  4061                           ;ST7735_TFT.c: 103: int count;
  4062                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4063                           
  4064                           ;incstack = 0
  4065  002082  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4066  002086  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4067  00208A  0E00               	movlw	0
  4068  00208C  6E12               	movwf	___wmul@multiplicand+1,c
  4069  00208E  0EFA               	movlw	250
  4070  002090  6E11               	movwf	___wmul@multiplicand,c
  4071  002092  EC4F  F012         	call	___wmul	;wreg free
  4072  002096  C00F  F019         	movff	?___wmul,delay_ms@count
  4073  00209A  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4074                           
  4075                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4076  00209E  C019  F017         	movff	delay_ms@count,??_delay_ms
  4077  0020A2  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4078  0020A6  1E17               	comf	??_delay_ms,f,c
  4079  0020A8  1E18               	comf	??_delay_ms+1,f,c
  4080  0020AA  4A17               	infsnz	??_delay_ms,f,c
  4081  0020AC  2A18               	incf	??_delay_ms+1,f,c
  4082  0020AE  0EFF               	movlw	255
  4083  0020B0  2417               	addwf	??_delay_ms,w,c
  4084  0020B2  6E19               	movwf	delay_ms@count,c
  4085  0020B4  0EFF               	movlw	255
  4086  0020B6  2018               	addwfc	??_delay_ms+1,w,c
  4087  0020B8  6E1A               	movwf	delay_ms@count+1,c
  4088                           
  4089                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4090  0020BA  0EB8               	movlw	184
  4091  0020BC  6EB1               	movwf	4017,c	;volatile
  4092                           
  4093                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4094  0020BE  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4095                           
  4096                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4097  0020C2  501A               	movf	delay_ms@count+1,w,c
  4098  0020C4  6ED7               	movwf	4055,c	;volatile
  4099                           
  4100                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4101  0020C6  92A1               	bcf	4001,1,c	;volatile
  4102                           
  4103                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4104  0020C8  80B1               	bsf	4017,0,c	;volatile
  4105                           
  4106                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4107  0020CA  D000               	goto	l127
  4108  0020CC                     l127:
  4109  0020CC  A2A1               	btfss	4001,1,c	;volatile
  4110  0020CE  D7FE               	goto	l127
  4111                           
  4112                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4113  0020D0  90B1               	bcf	4017,0,c	;volatile
  4114  0020D2  0012               	return		;funcret
  4115  0020D4                     __end_of_delay_ms:
  4116                           	opt stack 0
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           intcon2	equ	0xFF1
  4122                           postinc0	equ	0xFEE
  4123                           wreg	equ	0xFE8
  4124                           postdec1	equ	0xFE5
  4125                           fsr1l	equ	0xFE1
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _Do_Init *****************
  4129 ;; Defined at:
  4130 ;;		line 372 in file "Lab9.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;		None               void
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    4
  4151 ;; This function calls:
  4152 ;;		_Init_ADC
  4153 ;;		_init_IO
  4154 ;;		_init_UART
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text13
  4161  0024C6                     __ptext13:
  4162                           	opt stack 0
  4163  0024C6                     _Do_Init:
  4164                           	opt stack 26
  4165                           
  4166                           ;Lab9.c: 374: init_UART();
  4167                           
  4168                           ;incstack = 0
  4169  0024C6  ECC7  F012         	call	_init_UART	;wreg free
  4170                           
  4171                           ;Lab9.c: 375: Init_ADC();
  4172  0024CA  EC0F  F013         	call	_Init_ADC	;wreg free
  4173                           
  4174                           ;Lab9.c: 377: init_IO();
  4175  0024CE  ECB1  F012         	call	_init_IO	;wreg free
  4176                           
  4177                           ;Lab9.c: 378: OSCCON=0x70;
  4178  0024D2  0E70               	movlw	112
  4179  0024D4  6ED3               	movwf	4051,c	;volatile
  4180                           
  4181                           ;Lab9.c: 381: INTCONbits.INT0IF = 0;
  4182  0024D6  92F2               	bcf	intcon,1,c	;volatile
  4183                           
  4184                           ;Lab9.c: 382: INTCON3bits.INT1IF = 0;
  4185  0024D8  90F0               	bcf	intcon3,0,c	;volatile
  4186                           
  4187                           ;Lab9.c: 383: INTCON3bits.INT2IF = 0;
  4188  0024DA  92F0               	bcf	intcon3,1,c	;volatile
  4189                           
  4190                           ;Lab9.c: 385: INTCONbits.INT0IE = 1;
  4191  0024DC  88F2               	bsf	intcon,4,c	;volatile
  4192                           
  4193                           ;Lab9.c: 386: INTCON3bits.INT1IE = 1;
  4194  0024DE  86F0               	bsf	intcon3,3,c	;volatile
  4195                           
  4196                           ;Lab9.c: 387: INTCON3bits.INT2IE = 1;
  4197  0024E0  88F0               	bsf	intcon3,4,c	;volatile
  4198                           
  4199                           ;Lab9.c: 389: INTCON2bits.INTEDG0 = 0;
  4200  0024E2  9CF1               	bcf	intcon2,6,c	;volatile
  4201                           
  4202                           ;Lab9.c: 390: INTCON2bits.INTEDG1 = 0;
  4203  0024E4  9AF1               	bcf	intcon2,5,c	;volatile
  4204                           
  4205                           ;Lab9.c: 391: INTCON2bits.INTEDG2 = 0;
  4206  0024E6  98F1               	bcf	intcon2,4,c	;volatile
  4207                           
  4208                           ;Lab9.c: 393: INTCONbits.GIE = 1;
  4209  0024E8  8EF2               	bsf	intcon,7,c	;volatile
  4210  0024EA  0012               	return		;funcret
  4211  0024EC                     __end_of_Do_Init:
  4212                           	opt stack 0
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           intcon	equ	0xFF2
  4218                           intcon2	equ	0xFF1
  4219                           intcon3	equ	0xFF0
  4220                           postinc0	equ	0xFEE
  4221                           wreg	equ	0xFE8
  4222                           postdec1	equ	0xFE5
  4223                           fsr1l	equ	0xFE1
  4224                           status	equ	0xFD8
  4225                           
  4226 ;; *************** function _init_UART *****************
  4227 ;; Defined at:
  4228 ;;		line 253 in file "Lab9.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;		None               void
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;Total ram usage:        0 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    3
  4249 ;; This function calls:
  4250 ;;		_OpenUSART
  4251 ;; This function is called by:
  4252 ;;		_Do_Init
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text14
  4257  00258E                     __ptext14:
  4258                           	opt stack 0
  4259  00258E                     _init_UART:
  4260                           	opt stack 26
  4261                           
  4262                           ;Lab9.c: 255: OpenUSART (0b01111111 & 0b10111111 &
  4263                           ;Lab9.c: 256: 0b11111110 & 0b11111101 & 0b11111111 &
  4264                           ;Lab9.c: 257: 0b11111111, 25);
  4265                           
  4266                           ;incstack = 0
  4267  00258E  0E00               	movlw	0
  4268  002590  6E10               	movwf	OpenUSART@spbrg+1,c
  4269  002592  0E19               	movlw	25
  4270  002594  6E0F               	movwf	OpenUSART@spbrg,c
  4271  002596  0E3C               	movlw	60
  4272  002598  EC78  F00F         	call	_OpenUSART
  4273                           
  4274                           ;Lab9.c: 258: OSCCON = 0x60;
  4275  00259C  0E60               	movlw	96
  4276  00259E  6ED3               	movwf	4051,c	;volatile
  4277  0025A0  0012               	return		;funcret
  4278  0025A2                     __end_of_init_UART:
  4279                           	opt stack 0
  4280                           tblptru	equ	0xFF8
  4281                           tblptrh	equ	0xFF7
  4282                           tblptrl	equ	0xFF6
  4283                           tablat	equ	0xFF5
  4284                           intcon	equ	0xFF2
  4285                           intcon2	equ	0xFF1
  4286                           intcon3	equ	0xFF0
  4287                           postinc0	equ	0xFEE
  4288                           wreg	equ	0xFE8
  4289                           postdec1	equ	0xFE5
  4290                           fsr1l	equ	0xFE1
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function _OpenUSART *****************
  4294 ;; Defined at:
  4295 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  config          1    wreg     unsigned char 
  4298 ;;  spbrg           2   14[COMRAM] unsigned int 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  config          1   16[COMRAM] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;		None               void
  4303 ;; Registers used:
  4304 ;;		wreg, status,2
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;Total ram usage:        3 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    2
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_init_UART
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text15
  4325  001EF0                     __ptext15:
  4326                           	opt stack 0
  4327  001EF0                     _OpenUSART:
  4328                           	opt stack 26
  4329                           
  4330                           ;incstack = 0
  4331                           ;OpenUSART@config stored from wreg
  4332  001EF0  6E11               	movwf	OpenUSART@config,c
  4333  001EF2  0E00               	movlw	0
  4334  001EF4  6EAC               	movwf	4012,c	;volatile
  4335  001EF6  0E00               	movlw	0
  4336  001EF8  6EAB               	movwf	4011,c	;volatile
  4337  001EFA  A011               	btfss	OpenUSART@config,0,c
  4338  001EFC  D002               	goto	l4870
  4339  001EFE  88AC               	bsf	4012,4,c	;volatile
  4340  001F00  D000               	goto	l4870
  4341  001F02                     l4870:
  4342  001F02  A211               	btfss	OpenUSART@config,1,c
  4343  001F04  D003               	goto	l4874
  4344  001F06  8CAC               	bsf	4012,6,c	;volatile
  4345  001F08  8CAB               	bsf	4011,6,c	;volatile
  4346  001F0A  D000               	goto	l4874
  4347  001F0C                     l4874:
  4348  001F0C  A411               	btfss	OpenUSART@config,2,c
  4349  001F0E  D002               	goto	l4878
  4350  001F10  8EAC               	bsf	4012,7,c	;volatile
  4351  001F12  D000               	goto	l4878
  4352  001F14                     l4878:
  4353  001F14  A611               	btfss	OpenUSART@config,3,c
  4354  001F16  D002               	goto	l569
  4355  001F18  88AB               	bsf	4011,4,c	;volatile
  4356  001F1A  D002               	goto	l4882
  4357  001F1C                     l569:
  4358  001F1C  8AAB               	bsf	4011,5,c	;volatile
  4359  001F1E  D000               	goto	l4882
  4360  001F20                     l4882:
  4361  001F20  B811               	btfsc	OpenUSART@config,4,c
  4362  001F22  84AC               	bsf	4012,2,c	;volatile
  4363  001F24  989E               	bcf	3998,4,c	;volatile
  4364  001F26  AA11               	btfss	OpenUSART@config,5,c
  4365  001F28  D002               	goto	l4890
  4366  001F2A  86AB               	bsf	4011,3,c	;volatile
  4367  001F2C  D000               	goto	l4890
  4368  001F2E                     l4890:
  4369  001F2E  AC11               	btfss	OpenUSART@config,6,c
  4370  001F30  D002               	goto	l573
  4371  001F32  8A9D               	bsf	3997,5,c	;volatile
  4372  001F34  D001               	goto	l574
  4373  001F36                     l573:
  4374  001F36  9A9D               	bcf	3997,5,c	;volatile
  4375  001F38                     l574:
  4376  001F38  9A9E               	bcf	3998,5,c	;volatile
  4377  001F3A  AE11               	btfss	OpenUSART@config,7,c
  4378  001F3C  D002               	goto	l575
  4379  001F3E  889D               	bsf	3997,4,c	;volatile
  4380  001F40  D001               	goto	l576
  4381  001F42                     l575:
  4382  001F42  989D               	bcf	3997,4,c	;volatile
  4383  001F44                     l576:
  4384  001F44  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4385  001F48  5010               	movf	OpenUSART@spbrg+1,w,c
  4386  001F4A  6EB0               	movwf	4016,c	;volatile
  4387  001F4C  8AAC               	bsf	4012,5,c	;volatile
  4388  001F4E  8EAB               	bsf	4011,7,c	;volatile
  4389  001F50  9C94               	bcf	3988,6,c	;volatile
  4390  001F52  8E94               	bsf	3988,7,c	;volatile
  4391  001F54  B8AC               	btfsc	4012,4,c	;volatile
  4392  001F56  BEAC               	btfsc	4012,7,c	;volatile
  4393  001F58  D002               	goto	l578
  4394  001F5A  8C94               	bsf	3988,6,c	;volatile
  4395  001F5C  D000               	goto	l578
  4396  001F5E                     l578:
  4397  001F5E  0012               	return		;funcret
  4398  001F60                     __end_of_OpenUSART:
  4399                           	opt stack 0
  4400                           tblptru	equ	0xFF8
  4401                           tblptrh	equ	0xFF7
  4402                           tblptrl	equ	0xFF6
  4403                           tablat	equ	0xFF5
  4404                           intcon	equ	0xFF2
  4405                           intcon2	equ	0xFF1
  4406                           intcon3	equ	0xFF0
  4407                           postinc0	equ	0xFEE
  4408                           wreg	equ	0xFE8
  4409                           postdec1	equ	0xFE5
  4410                           fsr1l	equ	0xFE1
  4411                           status	equ	0xFD8
  4412                           
  4413 ;; *************** function _init_IO *****************
  4414 ;; Defined at:
  4415 ;;		line 357 in file "Lab9.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;		None               void
  4422 ;; Registers used:
  4423 ;;		wreg, status,2
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    2
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_Do_Init
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text16
  4444  002562                     __ptext16:
  4445                           	opt stack 0
  4446  002562                     _init_IO:
  4447                           	opt stack 27
  4448                           
  4449                           ;Lab9.c: 358: TRISA = 0x21;
  4450                           
  4451                           ;incstack = 0
  4452  002562  0E21               	movlw	33
  4453  002564  6E92               	movwf	3986,c	;volatile
  4454                           
  4455                           ;Lab9.c: 359: TRISB = 0x07;
  4456  002566  0E07               	movlw	7
  4457  002568  6E93               	movwf	3987,c	;volatile
  4458                           
  4459                           ;Lab9.c: 360: TRISC = 0x07;
  4460  00256A  0E07               	movlw	7
  4461  00256C  6E94               	movwf	3988,c	;volatile
  4462                           
  4463                           ;Lab9.c: 361: TRISD = 0x00;
  4464  00256E  0E00               	movlw	0
  4465  002570  6E95               	movwf	3989,c	;volatile
  4466                           
  4467                           ;Lab9.c: 362: TRISE = 0x00;
  4468  002572  0E00               	movlw	0
  4469  002574  6E96               	movwf	3990,c	;volatile
  4470  002576  0012               	return		;funcret
  4471  002578                     __end_of_init_IO:
  4472                           	opt stack 0
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           intcon	equ	0xFF2
  4478                           intcon2	equ	0xFF1
  4479                           intcon3	equ	0xFF0
  4480                           postinc0	equ	0xFEE
  4481                           wreg	equ	0xFE8
  4482                           postdec1	equ	0xFE5
  4483                           fsr1l	equ	0xFE1
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _Init_ADC *****************
  4487 ;; Defined at:
  4488 ;;		line 365 in file "Lab9.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;		None               void
  4495 ;; Registers used:
  4496 ;;		wreg, status,2
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;Total ram usage:        0 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    2
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_Do_Init
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text17
  4517  00261E                     __ptext17:
  4518                           	opt stack 0
  4519  00261E                     _Init_ADC:
  4520                           	opt stack 27
  4521                           
  4522                           ;Lab9.c: 367: ADCON0 = 0 * 4 + 1;
  4523                           
  4524                           ;incstack = 0
  4525  00261E  0E01               	movlw	1
  4526  002620  6EC2               	movwf	4034,c	;volatile
  4527                           
  4528                           ;Lab9.c: 368: ADCON1=0x0E ;
  4529  002622  0E0E               	movlw	14
  4530  002624  6EC1               	movwf	4033,c	;volatile
  4531                           
  4532                           ;Lab9.c: 369: ADCON2=0xA9;
  4533  002626  0EA9               	movlw	169
  4534  002628  6EC0               	movwf	4032,c	;volatile
  4535  00262A  0012               	return		;funcret
  4536  00262C                     __end_of_Init_ADC:
  4537                           	opt stack 0
  4538                           tblptru	equ	0xFF8
  4539                           tblptrh	equ	0xFF7
  4540                           tblptrl	equ	0xFF6
  4541                           tablat	equ	0xFF5
  4542                           intcon	equ	0xFF2
  4543                           intcon2	equ	0xFF1
  4544                           intcon3	equ	0xFF0
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           postdec1	equ	0xFE5
  4548                           fsr1l	equ	0xFE1
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function _Do_Flashing *****************
  4552 ;; Defined at:
  4553 ;;		line 298 in file "Lab9.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;		None
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;		None
  4558 ;; Return value:  Size  Location     Type
  4559 ;;		None               void
  4560 ;; Registers used:
  4561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;Total ram usage:        0 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:   11
  4574 ;; This function calls:
  4575 ;;		_Set_EW
  4576 ;;		_Set_EWLT
  4577 ;;		_Set_NS
  4578 ;;		_Set_NSLT
  4579 ;;		_Wait_One_Second
  4580 ;; This function is called by:
  4581 ;;		_main
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text18
  4586  002028                     __ptext18:
  4587                           	opt stack 0
  4588  002028                     _Do_Flashing:
  4589                           	opt stack 19
  4590                           
  4591                           ;Lab9.c: 299: FLASHING = 1;
  4592                           
  4593                           ;incstack = 0
  4594  002028  0E01               	movlw	1
  4595  00202A  D006               	goto	L1
  4596  00202C                     l5206:
  4597                           
  4598                           ;Lab9.c: 301: {
  4599                           ;Lab9.c: 302: if(FLASHING_REQUEST == 1)
  4600  00202C  0465               	decf	_FLASHING_REQUEST,w,c
  4601  00202E  A4D8               	btfss	status,2,c
  4602  002030  D005               	goto	l5210
  4603                           
  4604                           ;Lab9.c: 303: {
  4605                           ;Lab9.c: 304: FLASHING_REQUEST = 0;
  4606  002032  0E00               	movlw	0
  4607  002034  6E65               	movwf	_FLASHING_REQUEST,c
  4608                           
  4609                           ;Lab9.c: 305: FLASHING = 0;
  4610  002036  0E00               	movlw	0
  4611  002038                     L1:
  4612  002038  6E64               	movwf	_FLASHING,c
  4613                           
  4614                           ;Lab9.c: 306: }
  4615  00203A  D01F               	goto	l5232
  4616  00203C                     l5210:
  4617                           
  4618                           ;Lab9.c: 307: else
  4619                           ;Lab9.c: 308: {
  4620                           ;Lab9.c: 309: FLASHING = 1;
  4621  00203C  0E01               	movlw	1
  4622  00203E  6E64               	movwf	_FLASHING,c
  4623                           
  4624                           ;Lab9.c: 310: Set_EW(1);
  4625  002040  0E01               	movlw	1
  4626  002042  EC4B  F011         	call	_Set_EW
  4627                           
  4628                           ;Lab9.c: 311: Set_NS(1);
  4629  002046  0E01               	movlw	1
  4630  002048  EC03  F011         	call	_Set_NS
  4631                           
  4632                           ;Lab9.c: 312: Set_NSLT(1);
  4633  00204C  0E01               	movlw	1
  4634  00204E  ECDF  F010         	call	_Set_NSLT
  4635                           
  4636                           ;Lab9.c: 313: Set_EWLT(1);
  4637  002052  0E01               	movlw	1
  4638  002054  EC27  F011         	call	_Set_EWLT
  4639                           
  4640                           ;Lab9.c: 314: Wait_One_Second();
  4641  002058  ECF6  F00E         	call	_Wait_One_Second	;wreg free
  4642                           
  4643                           ;Lab9.c: 315: Set_EW(0);
  4644  00205C  0E00               	movlw	0
  4645  00205E  EC4B  F011         	call	_Set_EW
  4646                           
  4647                           ;Lab9.c: 316: Set_NS(0);
  4648  002062  0E00               	movlw	0
  4649  002064  EC03  F011         	call	_Set_NS
  4650                           
  4651                           ;Lab9.c: 317: Set_NSLT(0);
  4652  002068  0E00               	movlw	0
  4653  00206A  ECDF  F010         	call	_Set_NSLT
  4654                           
  4655                           ;Lab9.c: 318: Set_EWLT(0);
  4656  00206E  0E00               	movlw	0
  4657  002070  EC27  F011         	call	_Set_EWLT
  4658                           
  4659                           ;Lab9.c: 319: Wait_One_Second();
  4660  002074  ECF6  F00E         	call	_Wait_One_Second	;wreg free
  4661  002078  D000               	goto	l5232
  4662  00207A                     l5232:
  4663  00207A  0464               	decf	_FLASHING,w,c
  4664  00207C  B4D8               	btfsc	status,2,c
  4665  00207E  D7D6               	goto	l5206
  4666  002080  0012               	return		;funcret
  4667  002082                     __end_of_Do_Flashing:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           intcon	equ	0xFF2
  4674                           intcon2	equ	0xFF1
  4675                           intcon3	equ	0xFF0
  4676                           postinc0	equ	0xFEE
  4677                           wreg	equ	0xFE8
  4678                           postdec1	equ	0xFE5
  4679                           fsr1l	equ	0xFE1
  4680                           status	equ	0xFD8
  4681                           
  4682 ;; *************** function _Day_Mode *****************
  4683 ;; Defined at:
  4684 ;;		line 489 in file "Lab9.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;		None
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;		None
  4689 ;; Return value:  Size  Location     Type
  4690 ;;		None               void
  4691 ;; Registers used:
  4692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;Total ram usage:        0 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:   12
  4705 ;; This function calls:
  4706 ;;		_PED_Control
  4707 ;;		_Set_EW
  4708 ;;		_Set_EWLT
  4709 ;;		_Set_NS
  4710 ;;		_Set_NSLT
  4711 ;;		_Wait_N_Seconds
  4712 ;; This function is called by:
  4713 ;;		_main
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text19
  4718  001762                     __ptext19:
  4719                           	opt stack 0
  4720  001762                     _Day_Mode:
  4721                           	opt stack 18
  4722                           
  4723                           ;Lab9.c: 491: MODE = 1;
  4724                           
  4725                           ;incstack = 0
  4726  001762  0E00               	movlw	0
  4727  001764  6E5F               	movwf	_MODE+1,c
  4728  001766  0E01               	movlw	1
  4729  001768  6E5E               	movwf	_MODE,c
  4730                           
  4731                           ;Lab9.c: 492: PORTEbits.RE2 = 1;
  4732  00176A  8484               	bsf	3972,2,c	;volatile
  4733                           
  4734                           ;Lab9.c: 493: Act_Mode_Txt[0] = 'D';
  4735  00176C  0E44               	movlw	68
  4736  00176E  6E4B               	movwf	_Act_Mode_Txt,c
  4737                           
  4738                           ;Lab9.c: 495: Set_NSLT(1);
  4739  001770  0E01               	movlw	1
  4740  001772  ECDF  F010         	call	_Set_NSLT
  4741                           
  4742                           ;Lab9.c: 496: Set_EW(1);
  4743  001776  0E01               	movlw	1
  4744  001778  EC4B  F011         	call	_Set_EW
  4745                           
  4746                           ;Lab9.c: 497: Set_EWLT(1);
  4747  00177C  0E01               	movlw	1
  4748  00177E  EC27  F011         	call	_Set_EWLT
  4749                           
  4750                           ;Lab9.c: 498: Set_NS(2);
  4751  001782  0E02               	movlw	2
  4752  001784  EC03  F011         	call	_Set_NS
  4753                           
  4754                           ;Lab9.c: 500: if(NS_PED_SW == 1)
  4755  001788  0466               	decf	_NS_PED_SW,w,c
  4756  00178A  A4D8               	btfss	status,2,c
  4757  00178C  D009               	goto	l5276
  4758                           
  4759                           ;Lab9.c: 501: {
  4760                           ;Lab9.c: 502: PED_Control(2,6);
  4761  00178E  0E06               	movlw	6
  4762  001790  0100               	movlb	0	; () banked
  4763  001792  6FAA               	movwf	PED_Control@Num_Sec& (0+255),b
  4764  001794  0E02               	movlw	2
  4765  001796  EC6F  F011         	call	_PED_Control
  4766                           
  4767                           ;Lab9.c: 503: NS_PED_SW = 0;
  4768  00179A  0E00               	movlw	0
  4769  00179C  6E66               	movwf	_NS_PED_SW,c
  4770  00179E  D000               	goto	l5276
  4771  0017A0                     l5276:
  4772                           
  4773                           ;Lab9.c: 504: }
  4774                           ;Lab9.c: 505: Wait_N_Seconds(9);
  4775  0017A0  0E09               	movlw	9
  4776  0017A2  ECED  F011         	call	_Wait_N_Seconds
  4777                           
  4778                           ;Lab9.c: 506: Set_NS(3);
  4779  0017A6  0E03               	movlw	3
  4780  0017A8  EC03  F011         	call	_Set_NS
  4781                           
  4782                           ;Lab9.c: 507: Wait_N_Seconds(3);
  4783  0017AC  0E03               	movlw	3
  4784  0017AE  ECED  F011         	call	_Wait_N_Seconds
  4785                           
  4786                           ;Lab9.c: 508: Set_NS(1);
  4787  0017B2  0E01               	movlw	1
  4788  0017B4  EC03  F011         	call	_Set_NS
  4789                           
  4790                           ;Lab9.c: 511: if(PORTCbits.RC2 == 1)
  4791  0017B8  A482               	btfss	3970,2,c	;volatile
  4792  0017BA  D010               	goto	l5294
  4793                           
  4794                           ;Lab9.c: 512: {
  4795                           ;Lab9.c: 513: Set_EWLT(2);
  4796  0017BC  0E02               	movlw	2
  4797  0017BE  EC27  F011         	call	_Set_EWLT
  4798                           
  4799                           ;Lab9.c: 514: Wait_N_Seconds(6);
  4800  0017C2  0E06               	movlw	6
  4801  0017C4  ECED  F011         	call	_Wait_N_Seconds
  4802                           
  4803                           ;Lab9.c: 515: Set_EWLT(3);
  4804  0017C8  0E03               	movlw	3
  4805  0017CA  EC27  F011         	call	_Set_EWLT
  4806                           
  4807                           ;Lab9.c: 516: Wait_N_Seconds(3);
  4808  0017CE  0E03               	movlw	3
  4809  0017D0  ECED  F011         	call	_Wait_N_Seconds
  4810                           
  4811                           ;Lab9.c: 517: Set_EWLT(1);
  4812  0017D4  0E01               	movlw	1
  4813  0017D6  EC27  F011         	call	_Set_EWLT
  4814  0017DA  D000               	goto	l5294
  4815  0017DC                     l5294:
  4816                           
  4817                           ;Lab9.c: 518: }
  4818                           ;Lab9.c: 519: Set_EW(2);
  4819  0017DC  0E02               	movlw	2
  4820  0017DE  EC4B  F011         	call	_Set_EW
  4821                           
  4822                           ;Lab9.c: 520: if(EW_PED_SW == 1)
  4823  0017E2  0463               	decf	_EW_PED_SW,w,c
  4824  0017E4  A4D8               	btfss	status,2,c
  4825  0017E6  D009               	goto	l5302
  4826                           
  4827                           ;Lab9.c: 521: {
  4828                           ;Lab9.c: 522: PED_Control(0,9);
  4829  0017E8  0E09               	movlw	9
  4830  0017EA  0100               	movlb	0	; () banked
  4831  0017EC  6FAA               	movwf	PED_Control@Num_Sec& (0+255),b
  4832  0017EE  0E00               	movlw	0
  4833  0017F0  EC6F  F011         	call	_PED_Control
  4834                           
  4835                           ;Lab9.c: 523: EW_PED_SW = 0;
  4836  0017F4  0E00               	movlw	0
  4837  0017F6  6E63               	movwf	_EW_PED_SW,c
  4838  0017F8  D000               	goto	l5302
  4839  0017FA                     l5302:
  4840                           
  4841                           ;Lab9.c: 524: }
  4842                           ;Lab9.c: 525: Wait_N_Seconds(7);
  4843  0017FA  0E07               	movlw	7
  4844  0017FC  ECED  F011         	call	_Wait_N_Seconds
  4845                           
  4846                           ;Lab9.c: 526: Set_EW(3);
  4847  001800  0E03               	movlw	3
  4848  001802  EC4B  F011         	call	_Set_EW
  4849                           
  4850                           ;Lab9.c: 527: Wait_N_Seconds(3);
  4851  001806  0E03               	movlw	3
  4852  001808  ECED  F011         	call	_Wait_N_Seconds
  4853                           
  4854                           ;Lab9.c: 528: Set_EW(1);
  4855  00180C  0E01               	movlw	1
  4856  00180E  EC4B  F011         	call	_Set_EW
  4857                           
  4858                           ;Lab9.c: 530: if(PORTCbits.RC1 == 1)
  4859  001812  A282               	btfss	3970,1,c	;volatile
  4860  001814  D010               	goto	l480
  4861                           
  4862                           ;Lab9.c: 531: {
  4863                           ;Lab9.c: 532: Set_NSLT(2);
  4864  001816  0E02               	movlw	2
  4865  001818  ECDF  F010         	call	_Set_NSLT
  4866                           
  4867                           ;Lab9.c: 533: Wait_N_Seconds(6);
  4868  00181C  0E06               	movlw	6
  4869  00181E  ECED  F011         	call	_Wait_N_Seconds
  4870                           
  4871                           ;Lab9.c: 534: Set_NSLT(3);
  4872  001822  0E03               	movlw	3
  4873  001824  ECDF  F010         	call	_Set_NSLT
  4874                           
  4875                           ;Lab9.c: 535: Wait_N_Seconds(3);
  4876  001828  0E03               	movlw	3
  4877  00182A  ECED  F011         	call	_Wait_N_Seconds
  4878                           
  4879                           ;Lab9.c: 536: Set_NSLT(1);
  4880  00182E  0E01               	movlw	1
  4881  001830  ECDF  F010         	call	_Set_NSLT
  4882  001834  D000               	goto	l480
  4883  001836                     l480:
  4884  001836  0012               	return		;funcret
  4885  001838                     __end_of_Day_Mode:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           intcon3	equ	0xFF0
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           postdec1	equ	0xFE5
  4897                           fsr1l	equ	0xFE1
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function _Wait_N_Seconds *****************
  4901 ;; Defined at:
  4902 ;;		line 626 in file "Lab9.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  seconds         1    wreg     unsigned char 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  seconds         1   10[BANK0 ] unsigned char 
  4907 ;;  I               1   11[BANK0 ] unsigned char 
  4908 ;; Return value:  Size  Location     Type
  4909 ;;		None               void
  4910 ;; Registers used:
  4911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;Total ram usage:        2 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:   11
  4924 ;; This function calls:
  4925 ;;		_Wait_One_Second
  4926 ;;		_update_LCD_count
  4927 ;; This function is called by:
  4928 ;;		_Day_Mode
  4929 ;;		_Night_Mode
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text20
  4934  0023DA                     __ptext20:
  4935                           	opt stack 0
  4936  0023DA                     _Wait_N_Seconds:
  4937                           	opt stack 18
  4938                           
  4939                           ;incstack = 0
  4940                           ;Wait_N_Seconds@seconds stored from wreg
  4941  0023DA  0100               	movlb	0	; () banked
  4942  0023DC  6FAB               	movwf	Wait_N_Seconds@seconds& (0+255),b
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;Lab9.c: 628: char I;
  4946                           ;Lab9.c: 629: for (I = seconds; I> 0; I--)
  4947  0023DE  C0AB  F0AC         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4948  0023E2                     l5076:
  4949                           
  4950                           ; BSR set to: 0
  4951  0023E2  0100               	movlb	0	; () banked
  4952  0023E4  51AC               	movf	Wait_N_Seconds@I& (0+255),w,b
  4953  0023E6  0100               	movlb	0	; () banked
  4954  0023E8  B4D8               	btfsc	status,2,c
  4955  0023EA  D00C               	goto	l5086
  4956  0023EC  D001               	goto	l5080
  4957                           
  4958                           ; BSR set to: 0
  4959  0023EE  D00A               	goto	l5086
  4960  0023F0                     l5080:
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;Lab9.c: 630: {
  4964                           ;Lab9.c: 632: update_LCD_count(direction, I);
  4965  0023F0  C0AC  F0A8         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4966  0023F4  5070               	movf	_direction,w,c
  4967  0023F6  EC42  F007         	call	_update_LCD_count
  4968                           
  4969                           ;Lab9.c: 633: Wait_One_Second();
  4970  0023FA  ECF6  F00E         	call	_Wait_One_Second	;wreg free
  4971  0023FE  0100               	movlb	0	; () banked
  4972  002400  07AC               	decf	Wait_N_Seconds@I& (0+255),f,b
  4973  002402  D7EF               	goto	l5076
  4974  002404                     l5086:
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;Lab9.c: 634: }
  4978                           ;Lab9.c: 635: update_LCD_count(direction, 0);
  4979  002404  0E00               	movlw	0
  4980  002406  0100               	movlb	0	; () banked
  4981  002408  6FA8               	movwf	update_LCD_count@count& (0+255),b
  4982  00240A  5070               	movf	_direction,w,c
  4983  00240C  EC42  F007         	call	_update_LCD_count
  4984  002410  0012               	return		;funcret
  4985  002412                     __end_of_Wait_N_Seconds:
  4986                           	opt stack 0
  4987                           tblptru	equ	0xFF8
  4988                           tblptrh	equ	0xFF7
  4989                           tblptrl	equ	0xFF6
  4990                           tablat	equ	0xFF5
  4991                           intcon	equ	0xFF2
  4992                           intcon2	equ	0xFF1
  4993                           intcon3	equ	0xFF0
  4994                           postinc0	equ	0xFEE
  4995                           wreg	equ	0xFE8
  4996                           postdec1	equ	0xFE5
  4997                           fsr1l	equ	0xFE1
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function _update_LCD_count *****************
  5001 ;; Defined at:
  5002 ;;		line 684 in file "Lab9.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  direction       1    wreg     unsigned char 
  5005 ;;  count           1    7[BANK0 ] unsigned char 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  direction       1    8[BANK0 ] unsigned char 
  5008 ;; Return value:  Size  Location     Type
  5009 ;;		None               void
  5010 ;; Registers used:
  5011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5017 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;Total ram usage:        2 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:    9
  5024 ;; This function calls:
  5025 ;;		___awdiv
  5026 ;;		___awmod
  5027 ;;		_drawtext
  5028 ;; This function is called by:
  5029 ;;		_Wait_N_Seconds
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text21
  5034  000E84                     __ptext21:
  5035                           	opt stack 0
  5036  000E84                     _update_LCD_count:
  5037                           	opt stack 19
  5038                           
  5039                           ;incstack = 0
  5040                           ;update_LCD_count@direction stored from wreg
  5041  000E84  0100               	movlb	0	; () banked
  5042  000E86  6FA9               	movwf	update_LCD_count@direction& (0+255),b
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;Lab9.c: 686: switch (direction)
  5046  000E88  D0B0               	goto	l4988
  5047  000E8A                     l4970:
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;Lab9.c: 689: EW_Count[0] = count/10 + '0';
  5051  000E8A  C0A8  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5052  000E8E  6A10               	clrf	___awdiv@dividend+1,c
  5053  000E90  0E00               	movlw	0
  5054  000E92  6E12               	movwf	___awdiv@divisor+1,c
  5055  000E94  0E0A               	movlw	10
  5056  000E96  6E11               	movwf	___awdiv@divisor,c
  5057  000E98  ECE0  F00D         	call	___awdiv	;wreg free
  5058  000E9C  500F               	movf	?___awdiv,w,c
  5059  000E9E  0F30               	addlw	48
  5060  000EA0  6E45               	movwf	_EW_Count,c
  5061                           
  5062                           ;Lab9.c: 690: EW_Count[1] = count%10 + '0';
  5063  000EA2  C0A8  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5064  000EA6  6A10               	clrf	___awmod@dividend+1,c
  5065  000EA8  0E00               	movlw	0
  5066  000EAA  6E12               	movwf	___awmod@divisor+1,c
  5067  000EAC  0E0A               	movlw	10
  5068  000EAE  6E11               	movwf	___awmod@divisor,c
  5069  000EB0  EC37  F00F         	call	___awmod	;wreg free
  5070  000EB4  500F               	movf	?___awmod,w,c
  5071  000EB6  0F30               	addlw	48
  5072  000EB8  6E46               	movwf	_EW_Count+1,c
  5073                           
  5074                           ;Lab9.c: 691: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5075  000EBA  0E1E               	movlw	30
  5076  000EBC  6E37               	movwf	drawtext@y,c
  5077  000EBE  0E45               	movlw	low _EW_Count
  5078  000EC0  6E38               	movwf	drawtext@_text,c
  5079  000EC2  0E00               	movlw	high _EW_Count
  5080  000EC4  6E39               	movwf	drawtext@_text+1,c
  5081  000EC6  0E07               	movlw	7
  5082  000EC8  6E3B               	movwf	drawtext@color+1,c
  5083  000ECA  683A               	setf	drawtext@color,c
  5084  000ECC  0E00               	movlw	0
  5085  000ECE  6E3D               	movwf	drawtext@bg+1,c
  5086  000ED0  0E00               	movlw	0
  5087  000ED2  6E3C               	movwf	drawtext@bg,c
  5088  000ED4  0E02               	movlw	2
  5089  000ED6  6E3E               	movwf	drawtext@size,c
  5090  000ED8  0E64               	movlw	100
  5091  000EDA  ECD4  F009         	call	_drawtext
  5092                           
  5093                           ;Lab9.c: 692: break;
  5094  000EDE  D094               	goto	l521
  5095  000EE0                     l4974:
  5096                           
  5097                           ;Lab9.c: 695: EWLT_Count[0] = count/10 + '0';
  5098  000EE0  C0A8  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5099  000EE4  6A10               	clrf	___awdiv@dividend+1,c
  5100  000EE6  0E00               	movlw	0
  5101  000EE8  6E12               	movwf	___awdiv@divisor+1,c
  5102  000EEA  0E0A               	movlw	10
  5103  000EEC  6E11               	movwf	___awdiv@divisor,c
  5104  000EEE  ECE0  F00D         	call	___awdiv	;wreg free
  5105  000EF2  500F               	movf	?___awdiv,w,c
  5106  000EF4  0F30               	addlw	48
  5107  000EF6  6E42               	movwf	_EWLT_Count,c
  5108                           
  5109                           ;Lab9.c: 696: EWLT_Count[1] = count%10 + '0';
  5110  000EF8  C0A8  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5111  000EFC  6A10               	clrf	___awmod@dividend+1,c
  5112  000EFE  0E00               	movlw	0
  5113  000F00  6E12               	movwf	___awmod@divisor+1,c
  5114  000F02  0E0A               	movlw	10
  5115  000F04  6E11               	movwf	___awmod@divisor,c
  5116  000F06  EC37  F00F         	call	___awmod	;wreg free
  5117  000F0A  500F               	movf	?___awmod,w,c
  5118  000F0C  0F30               	addlw	48
  5119  000F0E  6E43               	movwf	_EWLT_Count+1,c
  5120                           
  5121                           ;Lab9.c: 697: drawtext(100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5122  000F10  0E3C               	movlw	60
  5123  000F12  6E37               	movwf	drawtext@y,c
  5124  000F14  0E42               	movlw	low _EWLT_Count
  5125  000F16  6E38               	movwf	drawtext@_text,c
  5126  000F18  0E00               	movlw	high _EWLT_Count
  5127  000F1A  6E39               	movwf	drawtext@_text+1,c
  5128  000F1C  0EFF               	movlw	255
  5129  000F1E  6E3B               	movwf	drawtext@color+1,c
  5130  000F20  683A               	setf	drawtext@color,c
  5131  000F22  0E00               	movlw	0
  5132  000F24  6E3D               	movwf	drawtext@bg+1,c
  5133  000F26  0E00               	movlw	0
  5134  000F28  6E3C               	movwf	drawtext@bg,c
  5135  000F2A  0E02               	movlw	2
  5136  000F2C  6E3E               	movwf	drawtext@size,c
  5137  000F2E  0E64               	movlw	100
  5138  000F30  ECD4  F009         	call	_drawtext
  5139                           
  5140                           ;Lab9.c: 698: break;
  5141  000F34  D069               	goto	l521
  5142  000F36                     l4978:
  5143                           
  5144                           ;Lab9.c: 701: NS_Count[0] = count/10 + '0';
  5145  000F36  C0A8  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5146  000F3A  6A10               	clrf	___awdiv@dividend+1,c
  5147  000F3C  0E00               	movlw	0
  5148  000F3E  6E12               	movwf	___awdiv@divisor+1,c
  5149  000F40  0E0A               	movlw	10
  5150  000F42  6E11               	movwf	___awdiv@divisor,c
  5151  000F44  ECE0  F00D         	call	___awdiv	;wreg free
  5152  000F48  500F               	movf	?___awdiv,w,c
  5153  000F4A  0F30               	addlw	48
  5154  000F4C  6E48               	movwf	_NS_Count,c
  5155                           
  5156                           ;Lab9.c: 702: NS_Count[1] = count%10 + '0';
  5157  000F4E  C0A8  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5158  000F52  6A10               	clrf	___awmod@dividend+1,c
  5159  000F54  0E00               	movlw	0
  5160  000F56  6E12               	movwf	___awmod@divisor+1,c
  5161  000F58  0E0A               	movlw	10
  5162  000F5A  6E11               	movwf	___awmod@divisor,c
  5163  000F5C  EC37  F00F         	call	___awmod	;wreg free
  5164  000F60  500F               	movf	?___awmod,w,c
  5165  000F62  0F30               	addlw	48
  5166  000F64  6E49               	movwf	_NS_Count+1,c
  5167                           
  5168                           ;Lab9.c: 703: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  5169  000F66  0E5A               	movlw	90
  5170  000F68  6E37               	movwf	drawtext@y,c
  5171  000F6A  0E48               	movlw	low _NS_Count
  5172  000F6C  6E38               	movwf	drawtext@_text,c
  5173  000F6E  0E00               	movlw	high _NS_Count
  5174  000F70  6E39               	movwf	drawtext@_text+1,c
  5175  000F72  0E00               	movlw	0
  5176  000F74  6E3B               	movwf	drawtext@color+1,c
  5177  000F76  0E1F               	movlw	31
  5178  000F78  6E3A               	movwf	drawtext@color,c
  5179  000F7A  0E00               	movlw	0
  5180  000F7C  6E3D               	movwf	drawtext@bg+1,c
  5181  000F7E  0E00               	movlw	0
  5182  000F80  6E3C               	movwf	drawtext@bg,c
  5183  000F82  0E02               	movlw	2
  5184  000F84  6E3E               	movwf	drawtext@size,c
  5185  000F86  0E64               	movlw	100
  5186  000F88  ECD4  F009         	call	_drawtext
  5187                           
  5188                           ;Lab9.c: 704: break;
  5189  000F8C  D03D               	goto	l521
  5190  000F8E                     l4982:
  5191                           
  5192                           ;Lab9.c: 707: NSLT_Count[0] = count/10 + '0';
  5193  000F8E  C0A8  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5194  000F92  6A10               	clrf	___awdiv@dividend+1,c
  5195  000F94  0E00               	movlw	0
  5196  000F96  6E12               	movwf	___awdiv@divisor+1,c
  5197  000F98  0E0A               	movlw	10
  5198  000F9A  6E11               	movwf	___awdiv@divisor,c
  5199  000F9C  ECE0  F00D         	call	___awdiv	;wreg free
  5200  000FA0  500F               	movf	?___awdiv,w,c
  5201  000FA2  0F30               	addlw	48
  5202  000FA4  0100               	movlb	0	; () banked
  5203  000FA6  6FAF               	movwf	_NSLT_Count& (0+255),b
  5204                           
  5205                           ;Lab9.c: 708: NSLT_Count[1] = count%10 + '0';
  5206  000FA8  C0A8  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5207  000FAC  6A10               	clrf	___awmod@dividend+1,c
  5208  000FAE  0E00               	movlw	0
  5209  000FB0  6E12               	movwf	___awmod@divisor+1,c
  5210  000FB2  0E0A               	movlw	10
  5211  000FB4  6E11               	movwf	___awmod@divisor,c
  5212  000FB6  EC37  F00F         	call	___awmod	;wreg free
  5213  000FBA  500F               	movf	?___awmod,w,c
  5214  000FBC  0F30               	addlw	48
  5215  000FBE  0100               	movlb	0	; () banked
  5216  000FC0  6FB0               	movwf	(_NSLT_Count+1)& (0+255),b
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;Lab9.c: 709: drawtext(100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5220  000FC2  0E78               	movlw	120
  5221  000FC4  6E37               	movwf	drawtext@y,c
  5222  000FC6  0EAF               	movlw	low _NSLT_Count
  5223  000FC8  6E38               	movwf	drawtext@_text,c
  5224  000FCA  0E00               	movlw	high _NSLT_Count
  5225  000FCC  6E39               	movwf	drawtext@_text+1,c
  5226  000FCE  0EF8               	movlw	248
  5227  000FD0  6E3B               	movwf	drawtext@color+1,c
  5228  000FD2  0E1F               	movlw	31
  5229  000FD4  6E3A               	movwf	drawtext@color,c
  5230  000FD6  0E00               	movlw	0
  5231  000FD8  6E3D               	movwf	drawtext@bg+1,c
  5232  000FDA  0E00               	movlw	0
  5233  000FDC  6E3C               	movwf	drawtext@bg,c
  5234  000FDE  0E02               	movlw	2
  5235  000FE0  6E3E               	movwf	drawtext@size,c
  5236  000FE2  0E64               	movlw	100
  5237  000FE4  ECD4  F009         	call	_drawtext
  5238                           
  5239                           ;Lab9.c: 711: }
  5240                           
  5241                           ;Lab9.c: 710: break;
  5242  000FE8  D00F               	goto	l521
  5243  000FEA                     l4988:
  5244  000FEA  0100               	movlb	0	; () banked
  5245  000FEC  51A9               	movf	update_LCD_count@direction& (0+255),w,b
  5246                           
  5247                           ; Switch size 1, requested type "space"
  5248                           ; Number of cases is 4, Range of values is 0 to 3
  5249                           ; switch strategies available:
  5250                           ; Name         Instructions Cycles
  5251                           ; simple_byte           13     7 (average)
  5252                           ;	Chosen strategy is simple_byte
  5253  000FEE  0A00               	xorlw	0	; case 0
  5254  000FF0  B4D8               	btfsc	status,2,c
  5255  000FF2  D74B               	goto	l4970
  5256  000FF4  0A01               	xorlw	1	; case 1
  5257  000FF6  B4D8               	btfsc	status,2,c
  5258  000FF8  D773               	goto	l4974
  5259  000FFA  0A03               	xorlw	3	; case 2
  5260  000FFC  B4D8               	btfsc	status,2,c
  5261  000FFE  D79B               	goto	l4978
  5262  001000  0A01               	xorlw	1	; case 3
  5263  001002  B4D8               	btfsc	status,2,c
  5264  001004  D7C4               	goto	l4982
  5265  001006  D000               	goto	l521
  5266  001008                     l521:
  5267  001008  0012               	return		;funcret
  5268  00100A                     __end_of_update_LCD_count:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           intcon3	equ	0xFF0
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           postdec1	equ	0xFE5
  5280                           fsr1l	equ	0xFE1
  5281                           status	equ	0xFD8
  5282                           
  5283 ;; *************** function _Wait_One_Second *****************
  5284 ;; Defined at:
  5285 ;;		line 591 in file "Lab9.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;		None
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;		None               void
  5292 ;; Registers used:
  5293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;Total ram usage:        0 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:   10
  5306 ;; This function calls:
  5307 ;;		_Wait_Half_Second
  5308 ;;		_drawtext
  5309 ;;		_strcpy
  5310 ;;		_update_LCD_misc
  5311 ;; This function is called by:
  5312 ;;		_Do_Flashing
  5313 ;;		_Wait_N_Seconds
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text22
  5318  001DEC                     __ptext22:
  5319                           	opt stack 0
  5320  001DEC                     _Wait_One_Second:
  5321                           	opt stack 18
  5322                           
  5323                           ;Lab9.c: 593: PORTDbits.RD7 = 1;
  5324                           
  5325                           ;incstack = 0
  5326  001DEC  8E83               	bsf	3971,7,c	;volatile
  5327                           
  5328                           ;Lab9.c: 594: strcpy(txt,"*");
  5329  001DEE  C060  F00F         	movff	_txt,strcpy@to
  5330  001DF2  C061  F010         	movff	_txt+1,strcpy@to+1
  5331  001DF6  0EFD               	movlw	low STR_5
  5332  001DF8  6E11               	movwf	strcpy@from,c
  5333  001DFA  0EFF               	movlw	high STR_5
  5334  001DFC  6E12               	movwf	strcpy@from+1,c
  5335  001DFE  EC09  F012         	call	_strcpy	;wreg free
  5336                           
  5337                           ;Lab9.c: 595: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5338  001E02  0E0A               	movlw	10
  5339  001E04  6E37               	movwf	drawtext@y,c
  5340  001E06  C060  F038         	movff	_txt,drawtext@_text
  5341  001E0A  C061  F039         	movff	_txt+1,drawtext@_text+1
  5342  001E0E  0EFF               	movlw	255
  5343  001E10  6E3B               	movwf	drawtext@color+1,c
  5344  001E12  683A               	setf	drawtext@color,c
  5345  001E14  0E00               	movlw	0
  5346  001E16  6E3D               	movwf	drawtext@bg+1,c
  5347  001E18  0E00               	movlw	0
  5348  001E1A  6E3C               	movwf	drawtext@bg,c
  5349  001E1C  0E01               	movlw	1
  5350  001E1E  6E3E               	movwf	drawtext@size,c
  5351  001E20  0E78               	movlw	120
  5352  001E22  ECD4  F009         	call	_drawtext
  5353                           
  5354                           ;Lab9.c: 596: Wait_Half_Second();
  5355  001E26  ECA4  F012         	call	_Wait_Half_Second	;wreg free
  5356                           
  5357                           ;Lab9.c: 598: PORTDbits.RD7 = 0;
  5358  001E2A  9E83               	bcf	3971,7,c	;volatile
  5359                           
  5360                           ;Lab9.c: 599: strcpy(txt," ");
  5361  001E2C  C060  F00F         	movff	_txt,strcpy@to
  5362  001E30  C061  F010         	movff	_txt+1,strcpy@to+1
  5363  001E34  0EFB               	movlw	low STR_14
  5364  001E36  6E11               	movwf	strcpy@from,c
  5365  001E38  0EFF               	movlw	high STR_14
  5366  001E3A  6E12               	movwf	strcpy@from+1,c
  5367  001E3C  EC09  F012         	call	_strcpy	;wreg free
  5368                           
  5369                           ;Lab9.c: 600: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5370  001E40  0E0A               	movlw	10
  5371  001E42  6E37               	movwf	drawtext@y,c
  5372  001E44  C060  F038         	movff	_txt,drawtext@_text
  5373  001E48  C061  F039         	movff	_txt+1,drawtext@_text+1
  5374  001E4C  0EFF               	movlw	255
  5375  001E4E  6E3B               	movwf	drawtext@color+1,c
  5376  001E50  683A               	setf	drawtext@color,c
  5377  001E52  0E00               	movlw	0
  5378  001E54  6E3D               	movwf	drawtext@bg+1,c
  5379  001E56  0E00               	movlw	0
  5380  001E58  6E3C               	movwf	drawtext@bg,c
  5381  001E5A  0E01               	movlw	1
  5382  001E5C  6E3E               	movwf	drawtext@size,c
  5383  001E5E  0E78               	movlw	120
  5384  001E60  ECD4  F009         	call	_drawtext
  5385                           
  5386                           ;Lab9.c: 601: Wait_Half_Second();
  5387  001E64  ECA4  F012         	call	_Wait_Half_Second	;wreg free
  5388                           
  5389                           ;Lab9.c: 602: update_LCD_misc();
  5390  001E68  EC56  F005         	call	_update_LCD_misc	;wreg free
  5391  001E6C  0012               	return		;funcret
  5392  001E6E                     __end_of_Wait_One_Second:
  5393                           	opt stack 0
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           intcon	equ	0xFF2
  5399                           intcon2	equ	0xFF1
  5400                           intcon3	equ	0xFF0
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           postdec1	equ	0xFE5
  5404                           fsr1l	equ	0xFE1
  5405                           status	equ	0xFD8
  5406                           
  5407 ;; *************** function _update_LCD_misc *****************
  5408 ;; Defined at:
  5409 ;;		line 732 in file "Lab9.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;  nStep           2    7[BANK0 ] int 
  5414 ;;  ch              1    9[BANK0 ] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;		None               void
  5417 ;; Registers used:
  5418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;Total ram usage:        3 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    9
  5431 ;; This function calls:
  5432 ;;		___awtoft
  5433 ;;		___ftdiv
  5434 ;;		___ftge
  5435 ;;		___wmul
  5436 ;;		_drawtext
  5437 ;;		_get_full_ADC
  5438 ;; This function is called by:
  5439 ;;		_Wait_One_Second
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text23
  5444  000AAC                     __ptext23:
  5445                           	opt stack 0
  5446  000AAC                     _update_LCD_misc:
  5447                           	opt stack 18
  5448                           
  5449                           ;Lab9.c: 734: char ch = 0;
  5450                           
  5451                           ;incstack = 0
  5452  000AAC  0E00               	movlw	0
  5453  000AAE  0100               	movlb	0	; () banked
  5454  000AB0  6FAA               	movwf	update_LCD_misc@ch& (0+255),b
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;Lab9.c: 735: ADCON0 = ch*4 + 1;
  5458  000AB2  0100               	movlb	0	; () banked
  5459  000AB4  51AA               	movf	update_LCD_misc@ch& (0+255),w,b
  5460  000AB6  0D04               	mullw	4
  5461  000AB8  28F3               	incf	prodl,w,c
  5462  000ABA  6EC2               	movwf	4034,c	;volatile
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;Lab9.c: 736: int nStep = get_full_ADC();
  5466  000ABC  EC76  F012         	call	_get_full_ADC	;wreg free
  5467  000AC0  C00F  F0A8         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5468  000AC4  C010  F0A9         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5469                           
  5470                           ;Lab9.c: 737: volt = nStep * 5 /1024.0;
  5471  000AC8  C0A8  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5472  000ACC  C0A9  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5473  000AD0  0E00               	movlw	0
  5474  000AD2  6E12               	movwf	___wmul@multiplicand+1,c
  5475  000AD4  0E05               	movlw	5
  5476  000AD6  6E11               	movwf	___wmul@multiplicand,c
  5477  000AD8  EC4F  F012         	call	___wmul	;wreg free
  5478  000ADC  C00F  F017         	movff	?___wmul,___awtoft@c
  5479  000AE0  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  5480  000AE4  ECCF  F011         	call	___awtoft	;wreg free
  5481  000AE8  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  5482  000AEC  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  5483  000AF0  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  5484  000AF4  0E00               	movlw	0
  5485  000AF6  6E1E               	movwf	___ftdiv@f2,c
  5486  000AF8  0E80               	movlw	128
  5487  000AFA  6E1F               	movwf	___ftdiv@f2+1,c
  5488  000AFC  0E44               	movlw	68
  5489  000AFE  6E20               	movwf	___ftdiv@f2+2,c
  5490  000B00  ECD2  F00A         	call	___ftdiv	;wreg free
  5491  000B04  C01B  F05B         	movff	?___ftdiv,_volt
  5492  000B08  C01C  F05C         	movff	?___ftdiv+1,_volt+1
  5493  000B0C  C01D  F05D         	movff	?___ftdiv+2,_volt+2
  5494                           
  5495                           ;Lab9.c: 738: SW_MODE = volt < 2.5 ? 1:0;
  5496  000B10  C05B  F00F         	movff	_volt,___ftge@ff1
  5497  000B14  C05C  F010         	movff	_volt+1,___ftge@ff1+1
  5498  000B18  C05D  F011         	movff	_volt+2,___ftge@ff1+2
  5499  000B1C  0E00               	movlw	0
  5500  000B1E  6E12               	movwf	___ftge@ff2,c
  5501  000B20  0E20               	movlw	32
  5502  000B22  6E13               	movwf	___ftge@ff2+1,c
  5503  000B24  0E40               	movlw	64
  5504  000B26  6E14               	movwf	___ftge@ff2+2,c
  5505  000B28  EC95  F00D         	call	___ftge	;wreg free
  5506  000B2C  B0D8               	btfsc	status,0,c
  5507  000B2E  D002               	goto	u3260
  5508  000B30  0E01               	movlw	1
  5509  000B32  D001               	goto	u3270
  5510  000B34                     u3260:
  5511  000B34  0E00               	movlw	0
  5512  000B36                     u3270:
  5513  000B36  6E6A               	movwf	_SW_MODE,c
  5514                           
  5515                           ;Lab9.c: 740: SW_EWPED = EW_PED_SW;
  5516  000B38  C063  F069         	movff	_EW_PED_SW,_SW_EWPED
  5517                           
  5518                           ;Lab9.c: 741: SW_EWLT = PORTCbits.RC2;
  5519  000B3C  0E00               	movlw	0
  5520  000B3E  B482               	btfsc	3970,2,c	;volatile
  5521  000B40  0E01               	movlw	1
  5522  000B42  6E68               	movwf	_SW_EWLT,c
  5523                           
  5524                           ;Lab9.c: 742: SW_NSPED = NS_PED_SW;
  5525  000B44  C066  F06C         	movff	_NS_PED_SW,_SW_NSPED
  5526                           
  5527                           ;Lab9.c: 743: SW_NSLT = PORTCbits.RC1;
  5528  000B48  0E00               	movlw	0
  5529  000B4A  B282               	btfsc	3970,1,c	;volatile
  5530  000B4C  0E01               	movlw	1
  5531  000B4E  6E6B               	movwf	_SW_NSLT,c
  5532                           
  5533                           ;Lab9.c: 745: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5534  000B50  506A               	movf	_SW_MODE,w,c
  5535  000B52  A4D8               	btfss	status,2,c
  5536  000B54  D002               	goto	l4588
  5537  000B56  0E4E               	movlw	78
  5538  000B58  D001               	goto	L2
  5539  000B5A                     l4588:
  5540  000B5A  0E44               	movlw	68
  5541  000B5C                     L2:
  5542  000B5C  6E55               	movwf	_SW_MODE_Txt,c
  5543                           
  5544                           ;Lab9.c: 746: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5545  000B5E  5069               	movf	_SW_EWPED,w,c
  5546  000B60  A4D8               	btfss	status,2,c
  5547  000B62  D002               	goto	l4592
  5548  000B64  0E30               	movlw	48
  5549  000B66  D001               	goto	L3
  5550  000B68                     l4592:
  5551  000B68  0E31               	movlw	49
  5552  000B6A                     L3:
  5553  000B6A  6E53               	movwf	_SW_EWPED_Txt,c
  5554                           
  5555                           ;Lab9.c: 747: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5556  000B6C  5068               	movf	_SW_EWLT,w,c
  5557  000B6E  A4D8               	btfss	status,2,c
  5558  000B70  D002               	goto	l4596
  5559  000B72  0E30               	movlw	48
  5560  000B74  D001               	goto	L4
  5561  000B76                     l4596:
  5562  000B76  0E31               	movlw	49
  5563  000B78                     L4:
  5564  000B78  6E51               	movwf	_SW_EWLT_Txt,c
  5565                           
  5566                           ;Lab9.c: 748: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5567  000B7A  506C               	movf	_SW_NSPED,w,c
  5568  000B7C  A4D8               	btfss	status,2,c
  5569  000B7E  D002               	goto	l4600
  5570  000B80  0E30               	movlw	48
  5571  000B82  D001               	goto	L5
  5572  000B84                     l4600:
  5573  000B84  0E31               	movlw	49
  5574  000B86                     L5:
  5575  000B86  6E59               	movwf	_SW_NSPED_Txt,c
  5576                           
  5577                           ;Lab9.c: 749: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5578  000B88  506B               	movf	_SW_NSLT,w,c
  5579  000B8A  A4D8               	btfss	status,2,c
  5580  000B8C  D002               	goto	l4604
  5581  000B8E  0E30               	movlw	48
  5582  000B90  D001               	goto	L6
  5583  000B92                     l4604:
  5584  000B92  0E31               	movlw	49
  5585  000B94                     L6:
  5586  000B94  6E57               	movwf	_SW_NSLT_Txt,c
  5587                           
  5588                           ;Lab9.c: 751: if (FLASHING_REQUEST == 0) FlashingR_Txt[0] = '0'; else FlashingR_Txt[0] =
      +                           '1';
  5589  000B96  5065               	movf	_FLASHING_REQUEST,w,c
  5590  000B98  A4D8               	btfss	status,2,c
  5591  000B9A  D002               	goto	l4608
  5592  000B9C  0E30               	movlw	48
  5593  000B9E  D001               	goto	L7
  5594  000BA0                     l4608:
  5595  000BA0  0E31               	movlw	49
  5596  000BA2                     L7:
  5597  000BA2  6E4D               	movwf	_FlashingR_Txt,c
  5598                           
  5599                           ;Lab9.c: 752: if (FLASHING == 0) FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1';
  5600  000BA4  5064               	movf	_FLASHING,w,c
  5601  000BA6  A4D8               	btfss	status,2,c
  5602  000BA8  D002               	goto	l4612
  5603  000BAA  0E30               	movlw	48
  5604  000BAC  D001               	goto	L8
  5605  000BAE                     l4612:
  5606  000BAE  0E31               	movlw	49
  5607  000BB0                     L8:
  5608  000BB0  6E4F               	movwf	_FlashingS_Txt,c
  5609  000BB2  D000               	goto	l4614
  5610  000BB4                     l4614:
  5611                           
  5612                           ;Lab9.c: 754: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5613  000BB4  0E0A               	movlw	10
  5614  000BB6  6E37               	movwf	drawtext@y,c
  5615  000BB8  0E4B               	movlw	low _Act_Mode_Txt
  5616  000BBA  6E38               	movwf	drawtext@_text,c
  5617  000BBC  0E00               	movlw	high _Act_Mode_Txt
  5618  000BBE  6E39               	movwf	drawtext@_text+1,c
  5619  000BC0  0EFF               	movlw	255
  5620  000BC2  6E3B               	movwf	drawtext@color+1,c
  5621  000BC4  683A               	setf	drawtext@color,c
  5622  000BC6  0E00               	movlw	0
  5623  000BC8  6E3D               	movwf	drawtext@bg+1,c
  5624  000BCA  0E00               	movlw	0
  5625  000BCC  6E3C               	movwf	drawtext@bg,c
  5626  000BCE  0E01               	movlw	1
  5627  000BD0  6E3E               	movwf	drawtext@size,c
  5628  000BD2  0E23               	movlw	35
  5629  000BD4  ECD4  F009         	call	_drawtext
  5630                           
  5631                           ;Lab9.c: 755: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5632  000BD8  0E95               	movlw	149
  5633  000BDA  6E37               	movwf	drawtext@y,c
  5634  000BDC  0E53               	movlw	low _SW_EWPED_Txt
  5635  000BDE  6E38               	movwf	drawtext@_text,c
  5636  000BE0  0E00               	movlw	high _SW_EWPED_Txt
  5637  000BE2  6E39               	movwf	drawtext@_text+1,c
  5638  000BE4  0EFF               	movlw	255
  5639  000BE6  6E3B               	movwf	drawtext@color+1,c
  5640  000BE8  683A               	setf	drawtext@color,c
  5641  000BEA  0E00               	movlw	0
  5642  000BEC  6E3D               	movwf	drawtext@bg+1,c
  5643  000BEE  0E00               	movlw	0
  5644  000BF0  6E3C               	movwf	drawtext@bg,c
  5645  000BF2  0E01               	movlw	1
  5646  000BF4  6E3E               	movwf	drawtext@size,c
  5647  000BF6  0E06               	movlw	6
  5648  000BF8  ECD4  F009         	call	_drawtext
  5649                           
  5650                           ;Lab9.c: 756: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5651  000BFC  0E95               	movlw	149
  5652  000BFE  6E37               	movwf	drawtext@y,c
  5653  000C00  0E51               	movlw	low _SW_EWLT_Txt
  5654  000C02  6E38               	movwf	drawtext@_text,c
  5655  000C04  0E00               	movlw	high _SW_EWLT_Txt
  5656  000C06  6E39               	movwf	drawtext@_text+1,c
  5657  000C08  0EFF               	movlw	255
  5658  000C0A  6E3B               	movwf	drawtext@color+1,c
  5659  000C0C  683A               	setf	drawtext@color,c
  5660  000C0E  0E00               	movlw	0
  5661  000C10  6E3D               	movwf	drawtext@bg+1,c
  5662  000C12  0E00               	movlw	0
  5663  000C14  6E3C               	movwf	drawtext@bg,c
  5664  000C16  0E01               	movlw	1
  5665  000C18  6E3E               	movwf	drawtext@size,c
  5666  000C1A  0E20               	movlw	32
  5667  000C1C  ECD4  F009         	call	_drawtext
  5668                           
  5669                           ;Lab9.c: 757: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5670  000C20  0E95               	movlw	149
  5671  000C22  6E37               	movwf	drawtext@y,c
  5672  000C24  0E59               	movlw	low _SW_NSPED_Txt
  5673  000C26  6E38               	movwf	drawtext@_text,c
  5674  000C28  0E00               	movlw	high _SW_NSPED_Txt
  5675  000C2A  6E39               	movwf	drawtext@_text+1,c
  5676  000C2C  0EFF               	movlw	255
  5677  000C2E  6E3B               	movwf	drawtext@color+1,c
  5678  000C30  683A               	setf	drawtext@color,c
  5679  000C32  0E00               	movlw	0
  5680  000C34  6E3D               	movwf	drawtext@bg+1,c
  5681  000C36  0E00               	movlw	0
  5682  000C38  6E3C               	movwf	drawtext@bg,c
  5683  000C3A  0E01               	movlw	1
  5684  000C3C  6E3E               	movwf	drawtext@size,c
  5685  000C3E  0E3A               	movlw	58
  5686  000C40  ECD4  F009         	call	_drawtext
  5687                           
  5688                           ;Lab9.c: 758: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5689  000C44  0E95               	movlw	149
  5690  000C46  6E37               	movwf	drawtext@y,c
  5691  000C48  0E57               	movlw	low _SW_NSLT_Txt
  5692  000C4A  6E38               	movwf	drawtext@_text,c
  5693  000C4C  0E00               	movlw	high _SW_NSLT_Txt
  5694  000C4E  6E39               	movwf	drawtext@_text+1,c
  5695  000C50  0EFF               	movlw	255
  5696  000C52  6E3B               	movwf	drawtext@color+1,c
  5697  000C54  683A               	setf	drawtext@color,c
  5698  000C56  0E00               	movlw	0
  5699  000C58  6E3D               	movwf	drawtext@bg+1,c
  5700  000C5A  0E00               	movlw	0
  5701  000C5C  6E3C               	movwf	drawtext@bg,c
  5702  000C5E  0E01               	movlw	1
  5703  000C60  6E3E               	movwf	drawtext@size,c
  5704  000C62  0E57               	movlw	87
  5705  000C64  ECD4  F009         	call	_drawtext
  5706                           
  5707                           ;Lab9.c: 759: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5708  000C68  0E95               	movlw	149
  5709  000C6A  6E37               	movwf	drawtext@y,c
  5710  000C6C  0E55               	movlw	low _SW_MODE_Txt
  5711  000C6E  6E38               	movwf	drawtext@_text,c
  5712  000C70  0E00               	movlw	high _SW_MODE_Txt
  5713  000C72  6E39               	movwf	drawtext@_text+1,c
  5714  000C74  0EFF               	movlw	255
  5715  000C76  6E3B               	movwf	drawtext@color+1,c
  5716  000C78  683A               	setf	drawtext@color,c
  5717  000C7A  0E00               	movlw	0
  5718  000C7C  6E3D               	movwf	drawtext@bg+1,c
  5719  000C7E  0E00               	movlw	0
  5720  000C80  6E3C               	movwf	drawtext@bg,c
  5721  000C82  0E01               	movlw	1
  5722  000C84  6E3E               	movwf	drawtext@size,c
  5723  000C86  0E70               	movlw	112
  5724  000C88  ECD4  F009         	call	_drawtext
  5725                           
  5726                           ;Lab9.c: 761: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  5727  000C8C  0E0A               	movlw	10
  5728  000C8E  6E37               	movwf	drawtext@y,c
  5729  000C90  0E4D               	movlw	low _FlashingR_Txt
  5730  000C92  6E38               	movwf	drawtext@_text,c
  5731  000C94  0E00               	movlw	high _FlashingR_Txt
  5732  000C96  6E39               	movwf	drawtext@_text+1,c
  5733  000C98  0EFF               	movlw	255
  5734  000C9A  6E3B               	movwf	drawtext@color+1,c
  5735  000C9C  683A               	setf	drawtext@color,c
  5736  000C9E  0E00               	movlw	0
  5737  000CA0  6E3D               	movwf	drawtext@bg+1,c
  5738  000CA2  0E00               	movlw	0
  5739  000CA4  6E3C               	movwf	drawtext@bg,c
  5740  000CA6  0E01               	movlw	1
  5741  000CA8  6E3E               	movwf	drawtext@size,c
  5742  000CAA  0E46               	movlw	70
  5743  000CAC  ECD4  F009         	call	_drawtext
  5744                           
  5745                           ;Lab9.c: 762: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  5746  000CB0  0E0A               	movlw	10
  5747  000CB2  6E37               	movwf	drawtext@y,c
  5748  000CB4  0E4F               	movlw	low _FlashingS_Txt
  5749  000CB6  6E38               	movwf	drawtext@_text,c
  5750  000CB8  0E00               	movlw	high _FlashingS_Txt
  5751  000CBA  6E39               	movwf	drawtext@_text+1,c
  5752  000CBC  0EFF               	movlw	255
  5753  000CBE  6E3B               	movwf	drawtext@color+1,c
  5754  000CC0  683A               	setf	drawtext@color,c
  5755  000CC2  0E00               	movlw	0
  5756  000CC4  6E3D               	movwf	drawtext@bg+1,c
  5757  000CC6  0E00               	movlw	0
  5758  000CC8  6E3C               	movwf	drawtext@bg,c
  5759  000CCA  0E01               	movlw	1
  5760  000CCC  6E3E               	movwf	drawtext@size,c
  5761  000CCE  0E64               	movlw	100
  5762  000CD0  ECD4  F009         	call	_drawtext
  5763  000CD4  0012               	return		;funcret
  5764  000CD6                     __end_of_update_LCD_misc:
  5765                           	opt stack 0
  5766                           tblptru	equ	0xFF8
  5767                           tblptrh	equ	0xFF7
  5768                           tblptrl	equ	0xFF6
  5769                           tablat	equ	0xFF5
  5770                           prodl	equ	0xFF3
  5771                           intcon	equ	0xFF2
  5772                           intcon2	equ	0xFF1
  5773                           intcon3	equ	0xFF0
  5774                           postinc0	equ	0xFEE
  5775                           wreg	equ	0xFE8
  5776                           postdec1	equ	0xFE5
  5777                           fsr1l	equ	0xFE1
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function _get_full_ADC *****************
  5781 ;; Defined at:
  5782 ;;		line 397 in file "Lab9.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  result          2   18[COMRAM] unsigned int 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  2   14[COMRAM] unsigned int 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;Total ram usage:        6 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    2
  5803 ;; This function calls:
  5804 ;;		Nothing
  5805 ;; This function is called by:
  5806 ;;		_main
  5807 ;;		_update_LCD_misc
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text24
  5812  0024EC                     __ptext24:
  5813                           	opt stack 0
  5814  0024EC                     _get_full_ADC:
  5815                           	opt stack 28
  5816                           
  5817                           ;Lab9.c: 399: unsigned int result;
  5818                           ;Lab9.c: 400: ADCON0bits.GO=1;
  5819                           
  5820                           ;incstack = 0
  5821  0024EC  82C2               	bsf	4034,1,c	;volatile
  5822                           
  5823                           ;Lab9.c: 401: while(ADCON0bits.DONE==1);
  5824  0024EE  D000               	goto	l423
  5825  0024F0                     l423:
  5826  0024F0  B2C2               	btfsc	4034,1,c	;volatile
  5827  0024F2  D7FE               	goto	l423
  5828                           
  5829                           ;Lab9.c: 402: result = (ADRESH * 0x100) + ADRESL;
  5830  0024F4  50C4               	movf	4036,w,c	;volatile
  5831  0024F6  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  5832  0024F8  6A11               	clrf	??_get_full_ADC& (0+255),c
  5833  0024FA  50C3               	movf	4035,w,c	;volatile
  5834  0024FC  2411               	addwf	??_get_full_ADC,w,c
  5835  0024FE  6E13               	movwf	get_full_ADC@result,c
  5836  002500  0E00               	movlw	0
  5837  002502  2012               	addwfc	??_get_full_ADC+1,w,c
  5838  002504  6E14               	movwf	get_full_ADC@result+1,c
  5839                           
  5840                           ;Lab9.c: 404: return result;
  5841  002506  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  5842  00250A  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5843  00250E  D000               	goto	l426
  5844  002510                     l426:
  5845  002510  0012               	return		;funcret
  5846  002512                     __end_of_get_full_ADC:
  5847                           	opt stack 0
  5848                           tblptru	equ	0xFF8
  5849                           tblptrh	equ	0xFF7
  5850                           tblptrl	equ	0xFF6
  5851                           tablat	equ	0xFF5
  5852                           prodl	equ	0xFF3
  5853                           intcon	equ	0xFF2
  5854                           intcon2	equ	0xFF1
  5855                           intcon3	equ	0xFF0
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           postdec1	equ	0xFE5
  5859                           fsr1l	equ	0xFE1
  5860                           status	equ	0xFD8
  5861                           
  5862 ;; *************** function ___ftge *****************
  5863 ;; Defined at:
  5864 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;  ff1             3   14[COMRAM] float 
  5867 ;;  ff2             3   17[COMRAM] float 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;		None
  5870 ;; Return value:  Size  Location     Type
  5871 ;;		None               void
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5879 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;Total ram usage:        9 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    2
  5886 ;; This function calls:
  5887 ;;		Nothing
  5888 ;; This function is called by:
  5889 ;;		_main
  5890 ;;		_update_LCD_misc
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text25
  5895  001B2A                     __ptext25:
  5896                           	opt stack 0
  5897  001B2A                     ___ftge:
  5898                           	opt stack 28
  5899                           
  5900                           ;incstack = 0
  5901  001B2A  AE11               	btfss	___ftge@ff1+2,7,c
  5902  001B2C  D017               	goto	l4470
  5903  001B2E  C00F  F015         	movff	___ftge@ff1,??___ftge
  5904  001B32  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  5905  001B36  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  5906  001B3A  1E15               	comf	??___ftge,f,c
  5907  001B3C  1E16               	comf	??___ftge+1,f,c
  5908  001B3E  1E17               	comf	??___ftge+2,f,c
  5909  001B40  2A15               	incf	??___ftge,f,c
  5910  001B42  0E00               	movlw	0
  5911  001B44  2216               	addwfc	??___ftge+1,f,c
  5912  001B46  2217               	addwfc	??___ftge+2,f,c
  5913  001B48  0E00               	movlw	0
  5914  001B4A  2415               	addwf	??___ftge,w,c
  5915  001B4C  6E0F               	movwf	___ftge@ff1,c
  5916  001B4E  0E00               	movlw	0
  5917  001B50  2016               	addwfc	??___ftge+1,w,c
  5918  001B52  6E10               	movwf	___ftge@ff1+1,c
  5919  001B54  0E80               	movlw	128
  5920  001B56  2017               	addwfc	??___ftge+2,w,c
  5921  001B58  6E11               	movwf	___ftge@ff1+2,c
  5922  001B5A  D000               	goto	l4470
  5923  001B5C                     l4470:
  5924  001B5C  AE14               	btfss	___ftge@ff2+2,7,c
  5925  001B5E  D017               	goto	l4474
  5926  001B60  C012  F015         	movff	___ftge@ff2,??___ftge
  5927  001B64  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  5928  001B68  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  5929  001B6C  1E15               	comf	??___ftge,f,c
  5930  001B6E  1E16               	comf	??___ftge+1,f,c
  5931  001B70  1E17               	comf	??___ftge+2,f,c
  5932  001B72  2A15               	incf	??___ftge,f,c
  5933  001B74  0E00               	movlw	0
  5934  001B76  2216               	addwfc	??___ftge+1,f,c
  5935  001B78  2217               	addwfc	??___ftge+2,f,c
  5936  001B7A  0E00               	movlw	0
  5937  001B7C  2415               	addwf	??___ftge,w,c
  5938  001B7E  6E12               	movwf	___ftge@ff2,c
  5939  001B80  0E00               	movlw	0
  5940  001B82  2016               	addwfc	??___ftge+1,w,c
  5941  001B84  6E13               	movwf	___ftge@ff2+1,c
  5942  001B86  0E80               	movlw	128
  5943  001B88  2017               	addwfc	??___ftge+2,w,c
  5944  001B8A  6E14               	movwf	___ftge@ff2+2,c
  5945  001B8C  D000               	goto	l4474
  5946  001B8E                     l4474:
  5947  001B8E  0E00               	movlw	0
  5948  001B90  1A0F               	xorwf	___ftge@ff1,f,c
  5949  001B92  0E00               	movlw	0
  5950  001B94  1A10               	xorwf	___ftge@ff1+1,f,c
  5951  001B96  0E80               	movlw	128
  5952  001B98  1A11               	xorwf	___ftge@ff1+2,f,c
  5953  001B9A  0E00               	movlw	0
  5954  001B9C  1A12               	xorwf	___ftge@ff2,f,c
  5955  001B9E  0E00               	movlw	0
  5956  001BA0  1A13               	xorwf	___ftge@ff2+1,f,c
  5957  001BA2  0E80               	movlw	128
  5958  001BA4  1A14               	xorwf	___ftge@ff2+2,f,c
  5959  001BA6  5012               	movf	___ftge@ff2,w,c
  5960  001BA8  5C0F               	subwf	___ftge@ff1,w,c
  5961  001BAA  5013               	movf	___ftge@ff2+1,w,c
  5962  001BAC  5810               	subwfb	___ftge@ff1+1,w,c
  5963  001BAE  5014               	movf	___ftge@ff2+2,w,c
  5964  001BB0  5811               	subwfb	___ftge@ff1+2,w,c
  5965  001BB2  B0D8               	btfsc	status,0,c
  5966  001BB4  D002               	goto	l4480
  5967  001BB6  90D8               	bcf	status,0,c
  5968  001BB8  D002               	goto	l970
  5969  001BBA                     l4480:
  5970  001BBA  80D8               	bsf	status,0,c
  5971  001BBC  D000               	goto	l970
  5972  001BBE                     l970:
  5973  001BBE  0012               	return		;funcret
  5974  001BC0                     __end_of___ftge:
  5975                           	opt stack 0
  5976                           tblptru	equ	0xFF8
  5977                           tblptrh	equ	0xFF7
  5978                           tblptrl	equ	0xFF6
  5979                           tablat	equ	0xFF5
  5980                           prodl	equ	0xFF3
  5981                           intcon	equ	0xFF2
  5982                           intcon2	equ	0xFF1
  5983                           intcon3	equ	0xFF0
  5984                           postinc0	equ	0xFEE
  5985                           wreg	equ	0xFE8
  5986                           postdec1	equ	0xFE5
  5987                           fsr1l	equ	0xFE1
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function ___ftdiv *****************
  5991 ;; Defined at:
  5992 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  f1              3   26[COMRAM] float 
  5995 ;;  f2              3   29[COMRAM] float 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  f3              3   36[COMRAM] float 
  5998 ;;  sign            1   40[COMRAM] unsigned char 
  5999 ;;  exp             1   39[COMRAM] unsigned char 
  6000 ;;  cntr            1   35[COMRAM] unsigned char 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  3   26[COMRAM] float 
  6003 ;; Registers used:
  6004 ;;		wreg, status,2, status,0, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6010 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;Total ram usage:       15 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    3
  6017 ;; This function calls:
  6018 ;;		___ftpack
  6019 ;; This function is called by:
  6020 ;;		_main
  6021 ;;		_update_LCD_misc
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           	psect	text26
  6026  0015A4                     __ptext26:
  6027                           	opt stack 0
  6028  0015A4                     ___ftdiv:
  6029                           	opt stack 27
  6030                           
  6031                           ;incstack = 0
  6032  0015A4  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  6033  0015A8  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  6034  0015AA  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  6035  0015AC  341C               	rlcf	___ftdiv@f1+1,w,c
  6036  0015AE  3621               	rlcf	??___ftdiv& (0+255),f,c
  6037  0015B0  E301               	bnc	u3121
  6038  0015B2  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  6039  0015B4                     u3121:
  6040  0015B4  5021               	movf	??___ftdiv,w,c
  6041  0015B6  6E28               	movwf	___ftdiv@exp,c
  6042  0015B8  5028               	movf	___ftdiv@exp,w,c
  6043  0015BA  A4D8               	btfss	status,2,c
  6044  0015BC  D002               	goto	l4414
  6045  0015BE  D00E               	goto	l4416
  6046  0015C0  D061               	goto	l961
  6047  0015C2                     l4414:
  6048  0015C2  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  6049  0015C6  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  6050  0015C8  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  6051  0015CA  341F               	rlcf	___ftdiv@f2+1,w,c
  6052  0015CC  3621               	rlcf	??___ftdiv& (0+255),f,c
  6053  0015CE  E301               	bnc	u3141
  6054  0015D0  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  6055  0015D2                     u3141:
  6056  0015D2  5021               	movf	??___ftdiv,w,c
  6057  0015D4  6E29               	movwf	___ftdiv@sign,c
  6058  0015D6  5029               	movf	___ftdiv@sign,w,c
  6059  0015D8  A4D8               	btfss	status,2,c
  6060  0015DA  D007               	goto	l4420
  6061  0015DC                     l4416:
  6062  0015DC  0E00               	movlw	0
  6063  0015DE  6E1B               	movwf	?___ftdiv,c
  6064  0015E0  0E00               	movlw	0
  6065  0015E2  6E1C               	movwf	?___ftdiv+1,c
  6066  0015E4  0E00               	movlw	0
  6067  0015E6  6E1D               	movwf	?___ftdiv+2,c
  6068  0015E8  D04D               	goto	l961
  6069  0015EA                     l4420:
  6070  0015EA  0E00               	movlw	0
  6071  0015EC  6E25               	movwf	___ftdiv@f3,c
  6072  0015EE  0E00               	movlw	0
  6073  0015F0  6E26               	movwf	___ftdiv@f3+1,c
  6074  0015F2  0E00               	movlw	0
  6075  0015F4  6E27               	movwf	___ftdiv@f3+2,c
  6076  0015F6  5029               	movf	___ftdiv@sign,w,c
  6077  0015F8  0F89               	addlw	137
  6078  0015FA  5E28               	subwf	___ftdiv@exp,f,c
  6079  0015FC  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  6080  001600  5020               	movf	___ftdiv@f2+2,w,c
  6081  001602  1A29               	xorwf	___ftdiv@sign,f,c
  6082  001604  0E80               	movlw	128
  6083  001606  1629               	andwf	___ftdiv@sign,f,c
  6084  001608  8E1C               	bsf	___ftdiv@f1+1,7,c
  6085  00160A  0EFF               	movlw	255
  6086  00160C  161B               	andwf	___ftdiv@f1,f,c
  6087  00160E  0EFF               	movlw	255
  6088  001610  161C               	andwf	___ftdiv@f1+1,f,c
  6089  001612  0E00               	movlw	0
  6090  001614  161D               	andwf	___ftdiv@f1+2,f,c
  6091  001616  8E1F               	bsf	___ftdiv@f2+1,7,c
  6092  001618  0EFF               	movlw	255
  6093  00161A  161E               	andwf	___ftdiv@f2,f,c
  6094  00161C  0EFF               	movlw	255
  6095  00161E  161F               	andwf	___ftdiv@f2+1,f,c
  6096  001620  0E00               	movlw	0
  6097  001622  1620               	andwf	___ftdiv@f2+2,f,c
  6098  001624  0E18               	movlw	24
  6099  001626  6E24               	movwf	___ftdiv@cntr,c
  6100  001628  D000               	goto	l4440
  6101  00162A                     l4440:
  6102  00162A  90D8               	bcf	status,0,c
  6103  00162C  3625               	rlcf	___ftdiv@f3,f,c
  6104  00162E  3626               	rlcf	___ftdiv@f3+1,f,c
  6105  001630  3627               	rlcf	___ftdiv@f3+2,f,c
  6106  001632  501E               	movf	___ftdiv@f2,w,c
  6107  001634  5C1B               	subwf	___ftdiv@f1,w,c
  6108  001636  501F               	movf	___ftdiv@f2+1,w,c
  6109  001638  581C               	subwfb	___ftdiv@f1+1,w,c
  6110  00163A  5020               	movf	___ftdiv@f2+2,w,c
  6111  00163C  581D               	subwfb	___ftdiv@f1+2,w,c
  6112  00163E  A0D8               	btfss	status,0,c
  6113  001640  D007               	goto	l964
  6114  001642  501E               	movf	___ftdiv@f2,w,c
  6115  001644  5E1B               	subwf	___ftdiv@f1,f,c
  6116  001646  501F               	movf	___ftdiv@f2+1,w,c
  6117  001648  5A1C               	subwfb	___ftdiv@f1+1,f,c
  6118  00164A  5020               	movf	___ftdiv@f2+2,w,c
  6119  00164C  5A1D               	subwfb	___ftdiv@f1+2,f,c
  6120  00164E  8025               	bsf	___ftdiv@f3,0,c
  6121  001650                     l964:
  6122  001650  90D8               	bcf	status,0,c
  6123  001652  361B               	rlcf	___ftdiv@f1,f,c
  6124  001654  361C               	rlcf	___ftdiv@f1+1,f,c
  6125  001656  361D               	rlcf	___ftdiv@f1+2,f,c
  6126  001658  2E24               	decfsz	___ftdiv@cntr,f,c
  6127  00165A  D7E7               	goto	l4440
  6128  00165C  D000               	goto	l4450
  6129  00165E                     l4450:
  6130  00165E  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  6131  001662  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6132  001666  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6133  00166A  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  6134  00166E  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  6135  001672  EC84  F00C         	call	___ftpack	;wreg free
  6136  001676  C00F  F01B         	movff	?___ftpack,?___ftdiv
  6137  00167A  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  6138  00167E  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  6139  001682  D000               	goto	l961
  6140  001684                     l961:
  6141  001684  0012               	return		;funcret
  6142  001686                     __end_of___ftdiv:
  6143                           	opt stack 0
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           prodl	equ	0xFF3
  6149                           intcon	equ	0xFF2
  6150                           intcon2	equ	0xFF1
  6151                           intcon3	equ	0xFF0
  6152                           postinc0	equ	0xFEE
  6153                           wreg	equ	0xFE8
  6154                           postdec1	equ	0xFE5
  6155                           fsr1l	equ	0xFE1
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function ___awtoft *****************
  6159 ;; Defined at:
  6160 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  c               2   22[COMRAM] int 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  sign            1   25[COMRAM] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  3   22[COMRAM] float 
  6167 ;; Registers used:
  6168 ;;		wreg, status,2, status,0, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6174 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;Total ram usage:        4 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    3
  6181 ;; This function calls:
  6182 ;;		___ftpack
  6183 ;; This function is called by:
  6184 ;;		_main
  6185 ;;		_update_LCD_misc
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text27
  6190  00239E                     __ptext27:
  6191                           	opt stack 0
  6192  00239E                     ___awtoft:
  6193                           	opt stack 27
  6194                           
  6195                           ;incstack = 0
  6196  00239E  0E00               	movlw	0
  6197  0023A0  6E1A               	movwf	___awtoft@sign,c
  6198  0023A2  AE18               	btfss	___awtoft@c+1,7,c
  6199  0023A4  D007               	goto	l4462
  6200  0023A6  6C17               	negf	___awtoft@c,c
  6201  0023A8  1E18               	comf	___awtoft@c+1,f,c
  6202  0023AA  B0D8               	btfsc	status,0,c
  6203  0023AC  2A18               	incf	___awtoft@c+1,f,c
  6204  0023AE  0E01               	movlw	1
  6205  0023B0  6E1A               	movwf	___awtoft@sign,c
  6206  0023B2  D000               	goto	l4462
  6207  0023B4                     l4462:
  6208  0023B4  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  6209  0023B8  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  6210  0023BC  6A11               	clrf	___ftpack@arg+2,c
  6211  0023BE  0E8E               	movlw	142
  6212  0023C0  6E12               	movwf	___ftpack@exp,c
  6213  0023C2  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  6214  0023C6  EC84  F00C         	call	___ftpack	;wreg free
  6215  0023CA  C00F  F017         	movff	?___ftpack,?___awtoft
  6216  0023CE  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  6217  0023D2  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  6218  0023D6  D000               	goto	l799
  6219  0023D8                     l799:
  6220  0023D8  0012               	return		;funcret
  6221  0023DA                     __end_of___awtoft:
  6222                           	opt stack 0
  6223                           tblptru	equ	0xFF8
  6224                           tblptrh	equ	0xFF7
  6225                           tblptrl	equ	0xFF6
  6226                           tablat	equ	0xFF5
  6227                           prodl	equ	0xFF3
  6228                           intcon	equ	0xFF2
  6229                           intcon2	equ	0xFF1
  6230                           intcon3	equ	0xFF0
  6231                           postinc0	equ	0xFEE
  6232                           wreg	equ	0xFE8
  6233                           postdec1	equ	0xFE5
  6234                           fsr1l	equ	0xFE1
  6235                           status	equ	0xFD8
  6236                           
  6237 ;; *************** function ___ftpack *****************
  6238 ;; Defined at:
  6239 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;  arg             3   14[COMRAM] unsigned um
  6242 ;;  exp             1   17[COMRAM] unsigned char 
  6243 ;;  sign            1   18[COMRAM] unsigned char 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;		None
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  3   14[COMRAM] float 
  6248 ;; Registers used:
  6249 ;;		wreg, status,2, status,0
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6255 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6257 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6258 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6259 ;;Total ram usage:        8 bytes
  6260 ;; Hardware stack levels used:    1
  6261 ;; Hardware stack levels required when called:    2
  6262 ;; This function calls:
  6263 ;;		Nothing
  6264 ;; This function is called by:
  6265 ;;		___awtoft
  6266 ;;		___ftdiv
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           	psect	text28
  6271  001908                     __ptext28:
  6272                           	opt stack 0
  6273  001908                     ___ftpack:
  6274                           	opt stack 27
  6275                           
  6276                           ;incstack = 0
  6277  001908  5012               	movf	___ftpack@exp,w,c
  6278  00190A  B4D8               	btfsc	status,2,c
  6279  00190C  D005               	goto	l4300
  6280  00190E  500F               	movf	___ftpack@arg,w,c
  6281  001910  1010               	iorwf	___ftpack@arg+1,w,c
  6282  001912  1011               	iorwf	___ftpack@arg+2,w,c
  6283  001914  A4D8               	btfss	status,2,c
  6284  001916  D00E               	goto	l4306
  6285  001918                     l4300:
  6286  001918  0E00               	movlw	0
  6287  00191A  6E0F               	movwf	?___ftpack,c
  6288  00191C  0E00               	movlw	0
  6289  00191E  6E10               	movwf	?___ftpack+1,c
  6290  001920  0E00               	movlw	0
  6291  001922  6E11               	movwf	?___ftpack+2,c
  6292  001924  D053               	goto	l889
  6293  001926  D006               	goto	l4306
  6294  001928                     l4304:
  6295  001928  2A12               	incf	___ftpack@exp,f,c
  6296  00192A  90D8               	bcf	status,0,c
  6297  00192C  3211               	rrcf	___ftpack@arg+2,f,c
  6298  00192E  3210               	rrcf	___ftpack@arg+1,f,c
  6299  001930  320F               	rrcf	___ftpack@arg,f,c
  6300  001932  D000               	goto	l4306
  6301  001934                     l4306:
  6302  001934  0E00               	movlw	0
  6303  001936  140F               	andwf	___ftpack@arg,w,c
  6304  001938  6E14               	movwf	??___ftpack& (0+255),c
  6305  00193A  0E00               	movlw	0
  6306  00193C  1410               	andwf	___ftpack@arg+1,w,c
  6307  00193E  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6308  001940  0EFE               	movlw	254
  6309  001942  1411               	andwf	___ftpack@arg+2,w,c
  6310  001944  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6311  001946  5014               	movf	??___ftpack,w,c
  6312  001948  1015               	iorwf	??___ftpack+1,w,c
  6313  00194A  1016               	iorwf	??___ftpack+2,w,c
  6314  00194C  B4D8               	btfsc	status,2,c
  6315  00194E  D00E               	goto	l4312
  6316  001950  D7EB               	goto	l4304
  6317  001952  D00C               	goto	l4312
  6318  001954                     l4308:
  6319  001954  2A12               	incf	___ftpack@exp,f,c
  6320  001956  0E01               	movlw	1
  6321  001958  260F               	addwf	___ftpack@arg,f,c
  6322  00195A  0E00               	movlw	0
  6323  00195C  2210               	addwfc	___ftpack@arg+1,f,c
  6324  00195E  0E00               	movlw	0
  6325  001960  2211               	addwfc	___ftpack@arg+2,f,c
  6326  001962  90D8               	bcf	status,0,c
  6327  001964  3211               	rrcf	___ftpack@arg+2,f,c
  6328  001966  3210               	rrcf	___ftpack@arg+1,f,c
  6329  001968  320F               	rrcf	___ftpack@arg,f,c
  6330  00196A  D000               	goto	l4312
  6331  00196C                     l4312:
  6332  00196C  0E00               	movlw	0
  6333  00196E  140F               	andwf	___ftpack@arg,w,c
  6334  001970  6E14               	movwf	??___ftpack& (0+255),c
  6335  001972  0E00               	movlw	0
  6336  001974  1410               	andwf	___ftpack@arg+1,w,c
  6337  001976  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6338  001978  0EFF               	movlw	255
  6339  00197A  1411               	andwf	___ftpack@arg+2,w,c
  6340  00197C  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6341  00197E  5014               	movf	??___ftpack,w,c
  6342  001980  1015               	iorwf	??___ftpack+1,w,c
  6343  001982  1016               	iorwf	??___ftpack+2,w,c
  6344  001984  B4D8               	btfsc	status,2,c
  6345  001986  D008               	goto	l4316
  6346  001988  D7E5               	goto	l4308
  6347  00198A  D006               	goto	l4316
  6348  00198C                     l4314:
  6349  00198C  0612               	decf	___ftpack@exp,f,c
  6350  00198E  90D8               	bcf	status,0,c
  6351  001990  360F               	rlcf	___ftpack@arg,f,c
  6352  001992  3610               	rlcf	___ftpack@arg+1,f,c
  6353  001994  3611               	rlcf	___ftpack@arg+2,f,c
  6354  001996  D000               	goto	l4316
  6355  001998                     l4316:
  6356  001998  BE10               	btfsc	___ftpack@arg+1,7,c
  6357  00199A  D004               	goto	l900
  6358  00199C  0E02               	movlw	2
  6359  00199E  6012               	cpfslt	___ftpack@exp,c
  6360  0019A0  D7F5               	goto	l4314
  6361  0019A2  D000               	goto	l900
  6362  0019A4                     l900:
  6363  0019A4  B012               	btfsc	___ftpack@exp,0,c
  6364  0019A6  D002               	goto	l4322
  6365  0019A8  9E10               	bcf	___ftpack@arg+1,7,c
  6366  0019AA  D000               	goto	l4322
  6367  0019AC                     l4322:
  6368  0019AC  90D8               	bcf	status,0,c
  6369  0019AE  3212               	rrcf	___ftpack@exp,f,c
  6370  0019B0  5012               	movf	___ftpack@exp,w,c
  6371  0019B2  1211               	iorwf	___ftpack@arg+2,f,c
  6372  0019B4  5013               	movf	___ftpack@sign,w,c
  6373  0019B6  B4D8               	btfsc	status,2,c
  6374  0019B8  D002               	goto	l4328
  6375  0019BA  8E11               	bsf	___ftpack@arg+2,7,c
  6376  0019BC  D000               	goto	l4328
  6377  0019BE                     l4328:
  6378  0019BE  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  6379  0019C2  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  6380  0019C6  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  6381  0019CA  D000               	goto	l889
  6382  0019CC                     l889:
  6383  0019CC  0012               	return		;funcret
  6384  0019CE                     __end_of___ftpack:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodl	equ	0xFF3
  6391                           intcon	equ	0xFF2
  6392                           intcon2	equ	0xFF1
  6393                           intcon3	equ	0xFF0
  6394                           postinc0	equ	0xFEE
  6395                           wreg	equ	0xFE8
  6396                           postdec1	equ	0xFE5
  6397                           fsr1l	equ	0xFE1
  6398                           status	equ	0xFD8
  6399                           
  6400 ;; *************** function _strcpy *****************
  6401 ;; Defined at:
  6402 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;  to              2   14[COMRAM] PTR unsigned char 
  6405 ;;		 -> NULL(0), buffer(31), 
  6406 ;;  from            2   16[COMRAM] PTR const unsigned char 
  6407 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  6408 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
  6409 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
  6410 ;;		 -> STR_2(6), STR_1(22), 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  cp              2   18[COMRAM] PTR unsigned char 
  6413 ;;		 -> NULL(0), buffer(31), 
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  2   14[COMRAM] PTR unsigned char 
  6416 ;; Registers used:
  6417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6423 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;Total ram usage:        6 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    2
  6430 ;; This function calls:
  6431 ;;		Nothing
  6432 ;; This function is called by:
  6433 ;;		_Initialize_Screen
  6434 ;;		_Wait_One_Second
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text29
  6439  002412                     __ptext29:
  6440                           	opt stack 0
  6441  002412                     _strcpy:
  6442                           	opt stack 25
  6443                           
  6444                           ;incstack = 0
  6445  002412  C00F  F013         	movff	strcpy@to,strcpy@cp
  6446  002416  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  6447  00241A  D005               	goto	l4552
  6448  00241C                     l4550:
  6449  00241C  4A13               	infsnz	strcpy@cp,f,c
  6450  00241E  2A14               	incf	strcpy@cp+1,f,c
  6451  002420  4A11               	infsnz	strcpy@from,f,c
  6452  002422  2A12               	incf	strcpy@from+1,f,c
  6453  002424  D000               	goto	l4552
  6454  002426                     l4552:
  6455  002426  C011  FFF6         	movff	strcpy@from,tblptrl
  6456  00242A  C012  FFF7         	movff	strcpy@from+1,tblptrh
  6457  00242E                     	if	0	;tblptru may be non-zero
  6458  00242E                     	endif
  6459  00242E                     	if	0	;tblptru may be non-zero
  6460  00242E                     	endif
  6461  00242E  C013  FFD9         	movff	strcpy@cp,fsr2l
  6462  002432  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  6463  002436  0008               	tblrd		*
  6464  002438  CFF5 FFDF          	movff	tablat,indf2
  6465  00243C  50DF               	movf	indf2,w,c
  6466  00243E  A4D8               	btfss	status,2,c
  6467  002440  D7ED               	goto	l4550
  6468                           
  6469                           ;	Return value of _strcpy is never used
  6470  002442  0012               	return		;funcret
  6471  002444                     __end_of_strcpy:
  6472                           	opt stack 0
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodl	equ	0xFF3
  6478                           intcon	equ	0xFF2
  6479                           intcon2	equ	0xFF1
  6480                           intcon3	equ	0xFF0
  6481                           postinc0	equ	0xFEE
  6482                           wreg	equ	0xFE8
  6483                           postdec1	equ	0xFE5
  6484                           fsr1l	equ	0xFE1
  6485                           indf2	equ	0xFDF
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _Set_NSLT *****************
  6491 ;; Defined at:
  6492 ;;		line 421 in file "Lab9.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  color           1    wreg     unsigned char 
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  color           1    3[BANK0 ] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;		None               void
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;Total ram usage:        1 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    9
  6513 ;; This function calls:
  6514 ;;		_update_LCD_color
  6515 ;; This function is called by:
  6516 ;;		_Do_Flashing
  6517 ;;		_Day_Mode
  6518 ;;		_Night_Mode
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           	psect	text30
  6523  0021BE                     __ptext30:
  6524                           	opt stack 0
  6525  0021BE                     _Set_NSLT:
  6526                           	opt stack 20
  6527                           
  6528                           ;incstack = 0
  6529                           ;Set_NSLT@color stored from wreg
  6530  0021BE  0100               	movlb	0	; () banked
  6531  0021C0  6FA4               	movwf	Set_NSLT@color& (0+255),b
  6532                           
  6533                           ; BSR set to: 0
  6534                           ;Lab9.c: 423: direction = 3;
  6535  0021C2  0E03               	movlw	3
  6536  0021C4  6E70               	movwf	_direction,c
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;Lab9.c: 424: update_LCD_color(direction,color);
  6540  0021C6  C0A4  F0A1         	movff	Set_NSLT@color,update_LCD_color@color
  6541  0021CA  5070               	movf	_direction,w,c
  6542  0021CC  EC9D  F003         	call	_update_LCD_color
  6543                           
  6544                           ;Lab9.c: 426: switch(color)
  6545  0021D0  D00A               	goto	l5042
  6546  0021D2                     l439:
  6547                           
  6548                           ; BSR set to: 0
  6549  0021D2  9683               	bcf	3971,3,c	;volatile
  6550  0021D4  D001               	goto	L9
  6551  0021D6                     l441:
  6552                           
  6553                           ; BSR set to: 0
  6554  0021D6  8683               	bsf	3971,3,c	;volatile
  6555  0021D8                     L9:
  6556  0021D8  9883               	bcf	3971,4,c	;volatile
  6557  0021DA  D014               	goto	l444
  6558  0021DC                     l442:
  6559                           
  6560                           ; BSR set to: 0
  6561  0021DC  9683               	bcf	3971,3,c	;volatile
  6562  0021DE  D001               	goto	L10
  6563  0021E0                     l443:
  6564                           
  6565                           ; BSR set to: 0
  6566  0021E0  8683               	bsf	3971,3,c	;volatile
  6567  0021E2                     L10:
  6568  0021E2  8883               	bsf	3971,4,c	;volatile
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;Lab9.c: 432: }
  6572  0021E4  D00F               	goto	l444
  6573  0021E6                     l5042:
  6574  0021E6  0100               	movlb	0	; () banked
  6575  0021E8  51A4               	movf	Set_NSLT@color& (0+255),w,b
  6576                           
  6577                           ; Switch size 1, requested type "space"
  6578                           ; Number of cases is 4, Range of values is 0 to 3
  6579                           ; switch strategies available:
  6580                           ; Name         Instructions Cycles
  6581                           ; simple_byte           13     7 (average)
  6582                           ;	Chosen strategy is simple_byte
  6583  0021EA  0A00               	xorlw	0	; case 0
  6584  0021EC  B4D8               	btfsc	status,2,c
  6585  0021EE  D7F1               	goto	l439
  6586  0021F0  0A01               	xorlw	1	; case 1
  6587  0021F2  B4D8               	btfsc	status,2,c
  6588  0021F4  D7F0               	goto	l441
  6589  0021F6  0A03               	xorlw	3	; case 2
  6590  0021F8  B4D8               	btfsc	status,2,c
  6591  0021FA  D7F0               	goto	l442
  6592  0021FC  0A01               	xorlw	1	; case 3
  6593  0021FE  B4D8               	btfsc	status,2,c
  6594  002200  D7EF               	goto	l443
  6595  002202  D000               	goto	l444
  6596  002204                     l444:
  6597                           
  6598                           ; BSR set to: 0
  6599  002204  0012               	return		;funcret
  6600  002206                     __end_of_Set_NSLT:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodl	equ	0xFF3
  6607                           intcon	equ	0xFF2
  6608                           intcon2	equ	0xFF1
  6609                           intcon3	equ	0xFF0
  6610                           postinc0	equ	0xFEE
  6611                           wreg	equ	0xFE8
  6612                           postdec1	equ	0xFE5
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           fsr2h	equ	0xFDA
  6616                           fsr2l	equ	0xFD9
  6617                           status	equ	0xFD8
  6618                           
  6619 ;; *************** function _Set_NS *****************
  6620 ;; Defined at:
  6621 ;;		line 407 in file "Lab9.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;  color           1    wreg     unsigned char 
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;  color           1    3[BANK0 ] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;		None               void
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;Total ram usage:        1 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    9
  6642 ;; This function calls:
  6643 ;;		_update_LCD_color
  6644 ;; This function is called by:
  6645 ;;		_Do_Flashing
  6646 ;;		_Day_Mode
  6647 ;;		_Night_Mode
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           	psect	text31
  6652  002206                     __ptext31:
  6653                           	opt stack 0
  6654  002206                     _Set_NS:
  6655                           	opt stack 20
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;incstack = 0
  6659                           ;Set_NS@color stored from wreg
  6660  002206  0100               	movlb	0	; () banked
  6661  002208  6FA4               	movwf	Set_NS@color& (0+255),b
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;Lab9.c: 409: direction = 2;
  6665  00220A  0E02               	movlw	2
  6666  00220C  6E70               	movwf	_direction,c
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;Lab9.c: 410: update_LCD_color(direction, color);
  6670  00220E  C0A4  F0A1         	movff	Set_NS@color,update_LCD_color@color
  6671  002212  5070               	movf	_direction,w,c
  6672  002214  EC9D  F003         	call	_update_LCD_color
  6673                           
  6674                           ;Lab9.c: 412: switch (color)
  6675  002218  D00A               	goto	l5034
  6676  00221A                     l430:
  6677                           
  6678                           ; BSR set to: 0
  6679  00221A  9280               	bcf	3968,1,c	;volatile
  6680  00221C  D001               	goto	L11
  6681  00221E                     l432:
  6682                           
  6683                           ; BSR set to: 0
  6684  00221E  8280               	bsf	3968,1,c	;volatile
  6685  002220                     L11:
  6686  002220  9480               	bcf	3968,2,c	;volatile
  6687  002222  D014               	goto	l435
  6688  002224                     l433:
  6689                           
  6690                           ; BSR set to: 0
  6691  002224  9280               	bcf	3968,1,c	;volatile
  6692  002226  D001               	goto	L12
  6693  002228                     l434:
  6694                           
  6695                           ; BSR set to: 0
  6696  002228  8280               	bsf	3968,1,c	;volatile
  6697  00222A                     L12:
  6698  00222A  8480               	bsf	3968,2,c	;volatile
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;Lab9.c: 418: }
  6702  00222C  D00F               	goto	l435
  6703  00222E                     l5034:
  6704  00222E  0100               	movlb	0	; () banked
  6705  002230  51A4               	movf	Set_NS@color& (0+255),w,b
  6706                           
  6707                           ; Switch size 1, requested type "space"
  6708                           ; Number of cases is 4, Range of values is 0 to 3
  6709                           ; switch strategies available:
  6710                           ; Name         Instructions Cycles
  6711                           ; simple_byte           13     7 (average)
  6712                           ;	Chosen strategy is simple_byte
  6713  002232  0A00               	xorlw	0	; case 0
  6714  002234  B4D8               	btfsc	status,2,c
  6715  002236  D7F1               	goto	l430
  6716  002238  0A01               	xorlw	1	; case 1
  6717  00223A  B4D8               	btfsc	status,2,c
  6718  00223C  D7F0               	goto	l432
  6719  00223E  0A03               	xorlw	3	; case 2
  6720  002240  B4D8               	btfsc	status,2,c
  6721  002242  D7F0               	goto	l433
  6722  002244  0A01               	xorlw	1	; case 3
  6723  002246  B4D8               	btfsc	status,2,c
  6724  002248  D7EF               	goto	l434
  6725  00224A  D000               	goto	l435
  6726  00224C                     l435:
  6727                           
  6728                           ; BSR set to: 0
  6729  00224C  0012               	return		;funcret
  6730  00224E                     __end_of_Set_NS:
  6731                           	opt stack 0
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodl	equ	0xFF3
  6737                           intcon	equ	0xFF2
  6738                           intcon2	equ	0xFF1
  6739                           intcon3	equ	0xFF0
  6740                           postinc0	equ	0xFEE
  6741                           wreg	equ	0xFE8
  6742                           postdec1	equ	0xFE5
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _Set_EWLT *****************
  6750 ;; Defined at:
  6751 ;;		line 448 in file "Lab9.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  color           1    wreg     unsigned char 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  color           1    3[BANK0 ] unsigned char 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;		None               void
  6758 ;; Registers used:
  6759 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;Total ram usage:        1 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    9
  6772 ;; This function calls:
  6773 ;;		_update_LCD_color
  6774 ;; This function is called by:
  6775 ;;		_Do_Flashing
  6776 ;;		_Day_Mode
  6777 ;;		_Night_Mode
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text32
  6782  00224E                     __ptext32:
  6783                           	opt stack 0
  6784  00224E                     _Set_EWLT:
  6785                           	opt stack 20
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;incstack = 0
  6789                           ;Set_EWLT@color stored from wreg
  6790  00224E  0100               	movlb	0	; () banked
  6791  002250  6FA4               	movwf	Set_EWLT@color& (0+255),b
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;Lab9.c: 450: direction = 1;
  6795  002252  0E01               	movlw	1
  6796  002254  6E70               	movwf	_direction,c
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;Lab9.c: 451: update_LCD_color(direction,color);
  6800  002256  C0A4  F0A1         	movff	Set_EWLT@color,update_LCD_color@color
  6801  00225A  5070               	movf	_direction,w,c
  6802  00225C  EC9D  F003         	call	_update_LCD_color
  6803                           
  6804                           ;Lab9.c: 452: switch(color)
  6805  002260  D00A               	goto	l5050
  6806  002262                     l457:
  6807                           
  6808                           ; BSR set to: 0
  6809  002262  9084               	bcf	3972,0,c	;volatile
  6810  002264  D001               	goto	L13
  6811  002266                     l459:
  6812                           
  6813                           ; BSR set to: 0
  6814  002266  8084               	bsf	3972,0,c	;volatile
  6815  002268                     L13:
  6816  002268  9284               	bcf	3972,1,c	;volatile
  6817  00226A  D014               	goto	l462
  6818  00226C                     l460:
  6819                           
  6820                           ; BSR set to: 0
  6821  00226C  9084               	bcf	3972,0,c	;volatile
  6822  00226E  D001               	goto	L14
  6823  002270                     l461:
  6824                           
  6825                           ; BSR set to: 0
  6826  002270  8084               	bsf	3972,0,c	;volatile
  6827  002272                     L14:
  6828  002272  8284               	bsf	3972,1,c	;volatile
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;Lab9.c: 458: }
  6832  002274  D00F               	goto	l462
  6833  002276                     l5050:
  6834  002276  0100               	movlb	0	; () banked
  6835  002278  51A4               	movf	Set_EWLT@color& (0+255),w,b
  6836                           
  6837                           ; Switch size 1, requested type "space"
  6838                           ; Number of cases is 4, Range of values is 0 to 3
  6839                           ; switch strategies available:
  6840                           ; Name         Instructions Cycles
  6841                           ; simple_byte           13     7 (average)
  6842                           ;	Chosen strategy is simple_byte
  6843  00227A  0A00               	xorlw	0	; case 0
  6844  00227C  B4D8               	btfsc	status,2,c
  6845  00227E  D7F1               	goto	l457
  6846  002280  0A01               	xorlw	1	; case 1
  6847  002282  B4D8               	btfsc	status,2,c
  6848  002284  D7F0               	goto	l459
  6849  002286  0A03               	xorlw	3	; case 2
  6850  002288  B4D8               	btfsc	status,2,c
  6851  00228A  D7F0               	goto	l460
  6852  00228C  0A01               	xorlw	1	; case 3
  6853  00228E  B4D8               	btfsc	status,2,c
  6854  002290  D7EF               	goto	l461
  6855  002292  D000               	goto	l462
  6856  002294                     l462:
  6857                           
  6858                           ; BSR set to: 0
  6859  002294  0012               	return		;funcret
  6860  002296                     __end_of_Set_EWLT:
  6861                           	opt stack 0
  6862                           tblptru	equ	0xFF8
  6863                           tblptrh	equ	0xFF7
  6864                           tblptrl	equ	0xFF6
  6865                           tablat	equ	0xFF5
  6866                           prodl	equ	0xFF3
  6867                           intcon	equ	0xFF2
  6868                           intcon2	equ	0xFF1
  6869                           intcon3	equ	0xFF0
  6870                           postinc0	equ	0xFEE
  6871                           wreg	equ	0xFE8
  6872                           postdec1	equ	0xFE5
  6873                           fsr1l	equ	0xFE1
  6874                           indf2	equ	0xFDF
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _Set_EW *****************
  6880 ;; Defined at:
  6881 ;;		line 435 in file "Lab9.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  color           1    wreg     unsigned char 
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  color           1    3[BANK0 ] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;		None               void
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;Total ram usage:        1 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    9
  6902 ;; This function calls:
  6903 ;;		_update_LCD_color
  6904 ;; This function is called by:
  6905 ;;		_Do_Flashing
  6906 ;;		_Day_Mode
  6907 ;;		_Night_Mode
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           	psect	text33
  6912  002296                     __ptext33:
  6913                           	opt stack 0
  6914  002296                     _Set_EW:
  6915                           	opt stack 20
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;incstack = 0
  6919                           ;Set_EW@color stored from wreg
  6920  002296  0100               	movlb	0	; () banked
  6921  002298  6FA4               	movwf	Set_EW@color& (0+255),b
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;Lab9.c: 437: direction = 0;
  6925  00229A  0E00               	movlw	0
  6926  00229C  6E70               	movwf	_direction,c
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;Lab9.c: 438: update_LCD_color(direction,color);
  6930  00229E  C0A4  F0A1         	movff	Set_EW@color,update_LCD_color@color
  6931  0022A2  5070               	movf	_direction,w,c
  6932  0022A4  EC9D  F003         	call	_update_LCD_color
  6933                           
  6934                           ;Lab9.c: 439: switch(color)
  6935  0022A8  D00A               	goto	l5026
  6936  0022AA                     l448:
  6937                           
  6938                           ; BSR set to: 0
  6939  0022AA  9A83               	bcf	3971,5,c	;volatile
  6940  0022AC  D001               	goto	L15
  6941  0022AE                     l450:
  6942                           
  6943                           ; BSR set to: 0
  6944  0022AE  8A83               	bsf	3971,5,c	;volatile
  6945  0022B0                     L15:
  6946  0022B0  9C83               	bcf	3971,6,c	;volatile
  6947  0022B2  D014               	goto	l453
  6948  0022B4                     l451:
  6949                           
  6950                           ; BSR set to: 0
  6951  0022B4  9A83               	bcf	3971,5,c	;volatile
  6952  0022B6  D001               	goto	L16
  6953  0022B8                     l452:
  6954                           
  6955                           ; BSR set to: 0
  6956  0022B8  8A83               	bsf	3971,5,c	;volatile
  6957  0022BA                     L16:
  6958  0022BA  8C83               	bsf	3971,6,c	;volatile
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;Lab9.c: 445: }
  6962  0022BC  D00F               	goto	l453
  6963  0022BE                     l5026:
  6964  0022BE  0100               	movlb	0	; () banked
  6965  0022C0  51A4               	movf	Set_EW@color& (0+255),w,b
  6966                           
  6967                           ; Switch size 1, requested type "space"
  6968                           ; Number of cases is 4, Range of values is 0 to 3
  6969                           ; switch strategies available:
  6970                           ; Name         Instructions Cycles
  6971                           ; simple_byte           13     7 (average)
  6972                           ;	Chosen strategy is simple_byte
  6973  0022C2  0A00               	xorlw	0	; case 0
  6974  0022C4  B4D8               	btfsc	status,2,c
  6975  0022C6  D7F1               	goto	l448
  6976  0022C8  0A01               	xorlw	1	; case 1
  6977  0022CA  B4D8               	btfsc	status,2,c
  6978  0022CC  D7F0               	goto	l450
  6979  0022CE  0A03               	xorlw	3	; case 2
  6980  0022D0  B4D8               	btfsc	status,2,c
  6981  0022D2  D7F0               	goto	l451
  6982  0022D4  0A01               	xorlw	1	; case 3
  6983  0022D6  B4D8               	btfsc	status,2,c
  6984  0022D8  D7EF               	goto	l452
  6985  0022DA  D000               	goto	l453
  6986  0022DC                     l453:
  6987                           
  6988                           ; BSR set to: 0
  6989  0022DC  0012               	return		;funcret
  6990  0022DE                     __end_of_Set_EW:
  6991                           	opt stack 0
  6992                           tblptru	equ	0xFF8
  6993                           tblptrh	equ	0xFF7
  6994                           tblptrl	equ	0xFF6
  6995                           tablat	equ	0xFF5
  6996                           prodl	equ	0xFF3
  6997                           intcon	equ	0xFF2
  6998                           intcon2	equ	0xFF1
  6999                           intcon3	equ	0xFF0
  7000                           postinc0	equ	0xFEE
  7001                           wreg	equ	0xFE8
  7002                           postdec1	equ	0xFE5
  7003                           fsr1l	equ	0xFE1
  7004                           indf2	equ	0xFDF
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function _update_LCD_color *****************
  7010 ;; Defined at:
  7011 ;;		line 639 in file "Lab9.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;  direction       1    wreg     unsigned char 
  7014 ;;  color           1    0[BANK0 ] unsigned char 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  direction       1    1[BANK0 ] unsigned char 
  7017 ;;  Circle_Y        1    2[BANK0 ] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;		None               void
  7020 ;; Registers used:
  7021 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7027 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;Total ram usage:        3 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    8
  7034 ;; This function calls:
  7035 ;;		_drawCircle
  7036 ;;		_fillCircle
  7037 ;; This function is called by:
  7038 ;;		_Set_NS
  7039 ;;		_Set_NSLT
  7040 ;;		_Set_EW
  7041 ;;		_Set_EWLT
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           	psect	text34
  7046  00073A                     __ptext34:
  7047                           	opt stack 0
  7048  00073A                     _update_LCD_color:
  7049                           	opt stack 20
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;incstack = 0
  7053                           ;update_LCD_color@direction stored from wreg
  7054  00073A  0100               	movlb	0	; () banked
  7055  00073C  6FA2               	movwf	update_LCD_color@direction& (0+255),b
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;Lab9.c: 641: char Circle_Y;
  7059                           ;Lab9.c: 642: Circle_Y = 20 + 15 + direction * 30;
  7060  00073E  0100               	movlb	0	; () banked
  7061  000740  51A2               	movf	update_LCD_color@direction& (0+255),w,b
  7062  000742  0D1E               	mullw	30
  7063  000744  50F3               	movf	prodl,w,c
  7064  000746  0F23               	addlw	35
  7065  000748  0100               	movlb	0	; () banked
  7066  00074A  6FA3               	movwf	update_LCD_color@Circle_Y& (0+255),b
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;Lab9.c: 644: if (color == 0)
  7070  00074C  0100               	movlb	0	; () banked
  7071  00074E  51A1               	movf	update_LCD_color@color& (0+255),w,b
  7072  000750  0100               	movlb	0	; () banked
  7073  000752  A4D8               	btfss	status,2,c
  7074  000754  D067               	goto	l4936
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;Lab9.c: 645: {
  7078                           ;Lab9.c: 646: fillCircle(40, Circle_Y, 7, 0x0000);
  7079  000756  0E00               	movlw	0
  7080  000758  6E3A               	movwf	fillCircle@x0+1,c
  7081  00075A  0E28               	movlw	40
  7082  00075C  6E39               	movwf	fillCircle@x0,c
  7083  00075E  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7084  000762  6A3C               	clrf	fillCircle@y0+1,c
  7085  000764  0E00               	movlw	0
  7086  000766  6E3E               	movwf	fillCircle@r+1,c
  7087  000768  0E07               	movlw	7
  7088  00076A  6E3D               	movwf	fillCircle@r,c
  7089  00076C  0E00               	movlw	0
  7090  00076E  6E40               	movwf	fillCircle@color+1,c
  7091  000770  0E00               	movlw	0
  7092  000772  6E3F               	movwf	fillCircle@color,c
  7093  000774  EC6A  F010         	call	_fillCircle	;wreg free
  7094                           
  7095                           ;Lab9.c: 647: fillCircle(60, Circle_Y, 7, 0x0000);
  7096  000778  0E00               	movlw	0
  7097  00077A  6E3A               	movwf	fillCircle@x0+1,c
  7098  00077C  0E3C               	movlw	60
  7099  00077E  6E39               	movwf	fillCircle@x0,c
  7100  000780  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7101  000784  6A3C               	clrf	fillCircle@y0+1,c
  7102  000786  0E00               	movlw	0
  7103  000788  6E3E               	movwf	fillCircle@r+1,c
  7104  00078A  0E07               	movlw	7
  7105  00078C  6E3D               	movwf	fillCircle@r,c
  7106  00078E  0E00               	movlw	0
  7107  000790  6E40               	movwf	fillCircle@color+1,c
  7108  000792  0E00               	movlw	0
  7109  000794  6E3F               	movwf	fillCircle@color,c
  7110  000796  EC6A  F010         	call	_fillCircle	;wreg free
  7111                           
  7112                           ;Lab9.c: 648: fillCircle(80, Circle_Y, 7, 0x0000);
  7113  00079A  0E00               	movlw	0
  7114  00079C  6E3A               	movwf	fillCircle@x0+1,c
  7115  00079E  0E50               	movlw	80
  7116  0007A0  6E39               	movwf	fillCircle@x0,c
  7117  0007A2  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7118  0007A6  6A3C               	clrf	fillCircle@y0+1,c
  7119  0007A8  0E00               	movlw	0
  7120  0007AA  6E3E               	movwf	fillCircle@r+1,c
  7121  0007AC  0E07               	movlw	7
  7122  0007AE  6E3D               	movwf	fillCircle@r,c
  7123  0007B0  0E00               	movlw	0
  7124  0007B2  6E40               	movwf	fillCircle@color+1,c
  7125  0007B4  0E00               	movlw	0
  7126  0007B6  6E3F               	movwf	fillCircle@color,c
  7127  0007B8  EC6A  F010         	call	_fillCircle	;wreg free
  7128                           
  7129                           ;Lab9.c: 649: drawCircle(40, Circle_Y, 7, 0xF800);
  7130  0007BC  0E00               	movlw	0
  7131  0007BE  6E1B               	movwf	drawCircle@x0+1,c
  7132  0007C0  0E28               	movlw	40
  7133  0007C2  6E1A               	movwf	drawCircle@x0,c
  7134  0007C4  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7135  0007C8  6A1D               	clrf	drawCircle@y0+1,c
  7136  0007CA  0E00               	movlw	0
  7137  0007CC  6E1F               	movwf	drawCircle@r+1,c
  7138  0007CE  0E07               	movlw	7
  7139  0007D0  6E1E               	movwf	drawCircle@r,c
  7140  0007D2  0EF8               	movlw	248
  7141  0007D4  6E21               	movwf	drawCircle@color+1,c
  7142  0007D6  0E00               	movlw	0
  7143  0007D8  6E20               	movwf	drawCircle@color,c
  7144  0007DA  EC6B  F006         	call	_drawCircle	;wreg free
  7145                           
  7146                           ;Lab9.c: 650: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7147  0007DE  0E00               	movlw	0
  7148  0007E0  6E1B               	movwf	drawCircle@x0+1,c
  7149  0007E2  0E3C               	movlw	60
  7150  0007E4  6E1A               	movwf	drawCircle@x0,c
  7151  0007E6  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7152  0007EA  6A1D               	clrf	drawCircle@y0+1,c
  7153  0007EC  0E00               	movlw	0
  7154  0007EE  6E1F               	movwf	drawCircle@r+1,c
  7155  0007F0  0E07               	movlw	7
  7156  0007F2  6E1E               	movwf	drawCircle@r,c
  7157  0007F4  0EFF               	movlw	255
  7158  0007F6  6E21               	movwf	drawCircle@color+1,c
  7159  0007F8  0EE0               	movlw	224
  7160  0007FA  6E20               	movwf	drawCircle@color,c
  7161  0007FC  EC6B  F006         	call	_drawCircle	;wreg free
  7162                           
  7163                           ;Lab9.c: 651: drawCircle(80, Circle_Y, 7, 0x07E0);
  7164  000800  0E00               	movlw	0
  7165  000802  6E1B               	movwf	drawCircle@x0+1,c
  7166  000804  0E50               	movlw	80
  7167  000806  6E1A               	movwf	drawCircle@x0,c
  7168  000808  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7169  00080C  6A1D               	clrf	drawCircle@y0+1,c
  7170  00080E  0E00               	movlw	0
  7171  000810  6E1F               	movwf	drawCircle@r+1,c
  7172  000812  0E07               	movlw	7
  7173  000814  6E1E               	movwf	drawCircle@r,c
  7174  000816  0E07               	movlw	7
  7175  000818  6E21               	movwf	drawCircle@color+1,c
  7176  00081A  0EE0               	movlw	224
  7177  00081C  6E20               	movwf	drawCircle@color,c
  7178  00081E  EC6B  F006         	call	_drawCircle	;wreg free
  7179  000822  D000               	goto	l4936
  7180  000824                     l4936:
  7181                           
  7182                           ;Lab9.c: 652: }
  7183                           ;Lab9.c: 654: if (color == 1)
  7184  000824  0100               	movlb	0	; () banked
  7185  000826  05A1               	decf	update_LCD_color@color& (0+255),w,b
  7186  000828  A4D8               	btfss	status,2,c
  7187  00082A  D067               	goto	l4940
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;Lab9.c: 655: {
  7191                           ;Lab9.c: 656: fillCircle(40, Circle_Y, 7, 0xF800);
  7192  00082C  0E00               	movlw	0
  7193  00082E  6E3A               	movwf	fillCircle@x0+1,c
  7194  000830  0E28               	movlw	40
  7195  000832  6E39               	movwf	fillCircle@x0,c
  7196  000834  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7197  000838  6A3C               	clrf	fillCircle@y0+1,c
  7198  00083A  0E00               	movlw	0
  7199  00083C  6E3E               	movwf	fillCircle@r+1,c
  7200  00083E  0E07               	movlw	7
  7201  000840  6E3D               	movwf	fillCircle@r,c
  7202  000842  0EF8               	movlw	248
  7203  000844  6E40               	movwf	fillCircle@color+1,c
  7204  000846  0E00               	movlw	0
  7205  000848  6E3F               	movwf	fillCircle@color,c
  7206  00084A  EC6A  F010         	call	_fillCircle	;wreg free
  7207                           
  7208                           ;Lab9.c: 657: fillCircle(60, Circle_Y, 7, 0x0000);
  7209  00084E  0E00               	movlw	0
  7210  000850  6E3A               	movwf	fillCircle@x0+1,c
  7211  000852  0E3C               	movlw	60
  7212  000854  6E39               	movwf	fillCircle@x0,c
  7213  000856  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7214  00085A  6A3C               	clrf	fillCircle@y0+1,c
  7215  00085C  0E00               	movlw	0
  7216  00085E  6E3E               	movwf	fillCircle@r+1,c
  7217  000860  0E07               	movlw	7
  7218  000862  6E3D               	movwf	fillCircle@r,c
  7219  000864  0E00               	movlw	0
  7220  000866  6E40               	movwf	fillCircle@color+1,c
  7221  000868  0E00               	movlw	0
  7222  00086A  6E3F               	movwf	fillCircle@color,c
  7223  00086C  EC6A  F010         	call	_fillCircle	;wreg free
  7224                           
  7225                           ;Lab9.c: 658: fillCircle(80, Circle_Y, 7, 0x0000);
  7226  000870  0E00               	movlw	0
  7227  000872  6E3A               	movwf	fillCircle@x0+1,c
  7228  000874  0E50               	movlw	80
  7229  000876  6E39               	movwf	fillCircle@x0,c
  7230  000878  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7231  00087C  6A3C               	clrf	fillCircle@y0+1,c
  7232  00087E  0E00               	movlw	0
  7233  000880  6E3E               	movwf	fillCircle@r+1,c
  7234  000882  0E07               	movlw	7
  7235  000884  6E3D               	movwf	fillCircle@r,c
  7236  000886  0E00               	movlw	0
  7237  000888  6E40               	movwf	fillCircle@color+1,c
  7238  00088A  0E00               	movlw	0
  7239  00088C  6E3F               	movwf	fillCircle@color,c
  7240  00088E  EC6A  F010         	call	_fillCircle	;wreg free
  7241                           
  7242                           ;Lab9.c: 659: drawCircle(40, Circle_Y, 7, 0xF800);
  7243  000892  0E00               	movlw	0
  7244  000894  6E1B               	movwf	drawCircle@x0+1,c
  7245  000896  0E28               	movlw	40
  7246  000898  6E1A               	movwf	drawCircle@x0,c
  7247  00089A  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7248  00089E  6A1D               	clrf	drawCircle@y0+1,c
  7249  0008A0  0E00               	movlw	0
  7250  0008A2  6E1F               	movwf	drawCircle@r+1,c
  7251  0008A4  0E07               	movlw	7
  7252  0008A6  6E1E               	movwf	drawCircle@r,c
  7253  0008A8  0EF8               	movlw	248
  7254  0008AA  6E21               	movwf	drawCircle@color+1,c
  7255  0008AC  0E00               	movlw	0
  7256  0008AE  6E20               	movwf	drawCircle@color,c
  7257  0008B0  EC6B  F006         	call	_drawCircle	;wreg free
  7258                           
  7259                           ;Lab9.c: 660: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7260  0008B4  0E00               	movlw	0
  7261  0008B6  6E1B               	movwf	drawCircle@x0+1,c
  7262  0008B8  0E3C               	movlw	60
  7263  0008BA  6E1A               	movwf	drawCircle@x0,c
  7264  0008BC  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7265  0008C0  6A1D               	clrf	drawCircle@y0+1,c
  7266  0008C2  0E00               	movlw	0
  7267  0008C4  6E1F               	movwf	drawCircle@r+1,c
  7268  0008C6  0E07               	movlw	7
  7269  0008C8  6E1E               	movwf	drawCircle@r,c
  7270  0008CA  0EFF               	movlw	255
  7271  0008CC  6E21               	movwf	drawCircle@color+1,c
  7272  0008CE  0EE0               	movlw	224
  7273  0008D0  6E20               	movwf	drawCircle@color,c
  7274  0008D2  EC6B  F006         	call	_drawCircle	;wreg free
  7275                           
  7276                           ;Lab9.c: 661: drawCircle(80, Circle_Y, 7, 0x07E0);
  7277  0008D6  0E00               	movlw	0
  7278  0008D8  6E1B               	movwf	drawCircle@x0+1,c
  7279  0008DA  0E50               	movlw	80
  7280  0008DC  6E1A               	movwf	drawCircle@x0,c
  7281  0008DE  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7282  0008E2  6A1D               	clrf	drawCircle@y0+1,c
  7283  0008E4  0E00               	movlw	0
  7284  0008E6  6E1F               	movwf	drawCircle@r+1,c
  7285  0008E8  0E07               	movlw	7
  7286  0008EA  6E1E               	movwf	drawCircle@r,c
  7287  0008EC  0E07               	movlw	7
  7288  0008EE  6E21               	movwf	drawCircle@color+1,c
  7289  0008F0  0EE0               	movlw	224
  7290  0008F2  6E20               	movwf	drawCircle@color,c
  7291  0008F4  EC6B  F006         	call	_drawCircle	;wreg free
  7292  0008F8  D000               	goto	l4940
  7293  0008FA                     l4940:
  7294                           
  7295                           ;Lab9.c: 662: }
  7296                           ;Lab9.c: 664: if (color == 3)
  7297  0008FA  0E03               	movlw	3
  7298  0008FC  0100               	movlb	0	; () banked
  7299  0008FE  19A1               	xorwf	update_LCD_color@color& (0+255),w,b
  7300  000900  A4D8               	btfss	status,2,c
  7301  000902  D067               	goto	l4944
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;Lab9.c: 665: {
  7305                           ;Lab9.c: 666: fillCircle(40, Circle_Y, 7, 0x0000);
  7306  000904  0E00               	movlw	0
  7307  000906  6E3A               	movwf	fillCircle@x0+1,c
  7308  000908  0E28               	movlw	40
  7309  00090A  6E39               	movwf	fillCircle@x0,c
  7310  00090C  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7311  000910  6A3C               	clrf	fillCircle@y0+1,c
  7312  000912  0E00               	movlw	0
  7313  000914  6E3E               	movwf	fillCircle@r+1,c
  7314  000916  0E07               	movlw	7
  7315  000918  6E3D               	movwf	fillCircle@r,c
  7316  00091A  0E00               	movlw	0
  7317  00091C  6E40               	movwf	fillCircle@color+1,c
  7318  00091E  0E00               	movlw	0
  7319  000920  6E3F               	movwf	fillCircle@color,c
  7320  000922  EC6A  F010         	call	_fillCircle	;wreg free
  7321                           
  7322                           ;Lab9.c: 667: fillCircle(60, Circle_Y, 7, 0xFFE0);
  7323  000926  0E00               	movlw	0
  7324  000928  6E3A               	movwf	fillCircle@x0+1,c
  7325  00092A  0E3C               	movlw	60
  7326  00092C  6E39               	movwf	fillCircle@x0,c
  7327  00092E  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7328  000932  6A3C               	clrf	fillCircle@y0+1,c
  7329  000934  0E00               	movlw	0
  7330  000936  6E3E               	movwf	fillCircle@r+1,c
  7331  000938  0E07               	movlw	7
  7332  00093A  6E3D               	movwf	fillCircle@r,c
  7333  00093C  0EFF               	movlw	255
  7334  00093E  6E40               	movwf	fillCircle@color+1,c
  7335  000940  0EE0               	movlw	224
  7336  000942  6E3F               	movwf	fillCircle@color,c
  7337  000944  EC6A  F010         	call	_fillCircle	;wreg free
  7338                           
  7339                           ;Lab9.c: 668: fillCircle(80, Circle_Y, 7, 0x0000);
  7340  000948  0E00               	movlw	0
  7341  00094A  6E3A               	movwf	fillCircle@x0+1,c
  7342  00094C  0E50               	movlw	80
  7343  00094E  6E39               	movwf	fillCircle@x0,c
  7344  000950  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7345  000954  6A3C               	clrf	fillCircle@y0+1,c
  7346  000956  0E00               	movlw	0
  7347  000958  6E3E               	movwf	fillCircle@r+1,c
  7348  00095A  0E07               	movlw	7
  7349  00095C  6E3D               	movwf	fillCircle@r,c
  7350  00095E  0E00               	movlw	0
  7351  000960  6E40               	movwf	fillCircle@color+1,c
  7352  000962  0E00               	movlw	0
  7353  000964  6E3F               	movwf	fillCircle@color,c
  7354  000966  EC6A  F010         	call	_fillCircle	;wreg free
  7355                           
  7356                           ;Lab9.c: 669: drawCircle(40, Circle_Y, 7, 0xF800);
  7357  00096A  0E00               	movlw	0
  7358  00096C  6E1B               	movwf	drawCircle@x0+1,c
  7359  00096E  0E28               	movlw	40
  7360  000970  6E1A               	movwf	drawCircle@x0,c
  7361  000972  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7362  000976  6A1D               	clrf	drawCircle@y0+1,c
  7363  000978  0E00               	movlw	0
  7364  00097A  6E1F               	movwf	drawCircle@r+1,c
  7365  00097C  0E07               	movlw	7
  7366  00097E  6E1E               	movwf	drawCircle@r,c
  7367  000980  0EF8               	movlw	248
  7368  000982  6E21               	movwf	drawCircle@color+1,c
  7369  000984  0E00               	movlw	0
  7370  000986  6E20               	movwf	drawCircle@color,c
  7371  000988  EC6B  F006         	call	_drawCircle	;wreg free
  7372                           
  7373                           ;Lab9.c: 670: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7374  00098C  0E00               	movlw	0
  7375  00098E  6E1B               	movwf	drawCircle@x0+1,c
  7376  000990  0E3C               	movlw	60
  7377  000992  6E1A               	movwf	drawCircle@x0,c
  7378  000994  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7379  000998  6A1D               	clrf	drawCircle@y0+1,c
  7380  00099A  0E00               	movlw	0
  7381  00099C  6E1F               	movwf	drawCircle@r+1,c
  7382  00099E  0E07               	movlw	7
  7383  0009A0  6E1E               	movwf	drawCircle@r,c
  7384  0009A2  0EFF               	movlw	255
  7385  0009A4  6E21               	movwf	drawCircle@color+1,c
  7386  0009A6  0EE0               	movlw	224
  7387  0009A8  6E20               	movwf	drawCircle@color,c
  7388  0009AA  EC6B  F006         	call	_drawCircle	;wreg free
  7389                           
  7390                           ;Lab9.c: 671: drawCircle(80, Circle_Y, 7, 0x07E0);
  7391  0009AE  0E00               	movlw	0
  7392  0009B0  6E1B               	movwf	drawCircle@x0+1,c
  7393  0009B2  0E50               	movlw	80
  7394  0009B4  6E1A               	movwf	drawCircle@x0,c
  7395  0009B6  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7396  0009BA  6A1D               	clrf	drawCircle@y0+1,c
  7397  0009BC  0E00               	movlw	0
  7398  0009BE  6E1F               	movwf	drawCircle@r+1,c
  7399  0009C0  0E07               	movlw	7
  7400  0009C2  6E1E               	movwf	drawCircle@r,c
  7401  0009C4  0E07               	movlw	7
  7402  0009C6  6E21               	movwf	drawCircle@color+1,c
  7403  0009C8  0EE0               	movlw	224
  7404  0009CA  6E20               	movwf	drawCircle@color,c
  7405  0009CC  EC6B  F006         	call	_drawCircle	;wreg free
  7406  0009D0  D000               	goto	l4944
  7407  0009D2                     l4944:
  7408                           
  7409                           ;Lab9.c: 672: }
  7410                           ;Lab9.c: 673: if (color == 2)
  7411  0009D2  0E02               	movlw	2
  7412  0009D4  0100               	movlb	0	; () banked
  7413  0009D6  19A1               	xorwf	update_LCD_color@color& (0+255),w,b
  7414  0009D8  A4D8               	btfss	status,2,c
  7415  0009DA  D067               	goto	l512
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;Lab9.c: 674: {
  7419                           ;Lab9.c: 675: fillCircle(40, Circle_Y, 7, 0x0000);
  7420  0009DC  0E00               	movlw	0
  7421  0009DE  6E3A               	movwf	fillCircle@x0+1,c
  7422  0009E0  0E28               	movlw	40
  7423  0009E2  6E39               	movwf	fillCircle@x0,c
  7424  0009E4  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7425  0009E8  6A3C               	clrf	fillCircle@y0+1,c
  7426  0009EA  0E00               	movlw	0
  7427  0009EC  6E3E               	movwf	fillCircle@r+1,c
  7428  0009EE  0E07               	movlw	7
  7429  0009F0  6E3D               	movwf	fillCircle@r,c
  7430  0009F2  0E00               	movlw	0
  7431  0009F4  6E40               	movwf	fillCircle@color+1,c
  7432  0009F6  0E00               	movlw	0
  7433  0009F8  6E3F               	movwf	fillCircle@color,c
  7434  0009FA  EC6A  F010         	call	_fillCircle	;wreg free
  7435                           
  7436                           ;Lab9.c: 676: fillCircle(60, Circle_Y, 7, 0x0000);
  7437  0009FE  0E00               	movlw	0
  7438  000A00  6E3A               	movwf	fillCircle@x0+1,c
  7439  000A02  0E3C               	movlw	60
  7440  000A04  6E39               	movwf	fillCircle@x0,c
  7441  000A06  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7442  000A0A  6A3C               	clrf	fillCircle@y0+1,c
  7443  000A0C  0E00               	movlw	0
  7444  000A0E  6E3E               	movwf	fillCircle@r+1,c
  7445  000A10  0E07               	movlw	7
  7446  000A12  6E3D               	movwf	fillCircle@r,c
  7447  000A14  0E00               	movlw	0
  7448  000A16  6E40               	movwf	fillCircle@color+1,c
  7449  000A18  0E00               	movlw	0
  7450  000A1A  6E3F               	movwf	fillCircle@color,c
  7451  000A1C  EC6A  F010         	call	_fillCircle	;wreg free
  7452                           
  7453                           ;Lab9.c: 677: fillCircle(80, Circle_Y, 7, 0x07E0);
  7454  000A20  0E00               	movlw	0
  7455  000A22  6E3A               	movwf	fillCircle@x0+1,c
  7456  000A24  0E50               	movlw	80
  7457  000A26  6E39               	movwf	fillCircle@x0,c
  7458  000A28  C0A3  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7459  000A2C  6A3C               	clrf	fillCircle@y0+1,c
  7460  000A2E  0E00               	movlw	0
  7461  000A30  6E3E               	movwf	fillCircle@r+1,c
  7462  000A32  0E07               	movlw	7
  7463  000A34  6E3D               	movwf	fillCircle@r,c
  7464  000A36  0E07               	movlw	7
  7465  000A38  6E40               	movwf	fillCircle@color+1,c
  7466  000A3A  0EE0               	movlw	224
  7467  000A3C  6E3F               	movwf	fillCircle@color,c
  7468  000A3E  EC6A  F010         	call	_fillCircle	;wreg free
  7469                           
  7470                           ;Lab9.c: 678: drawCircle(40, Circle_Y, 7, 0xF800);
  7471  000A42  0E00               	movlw	0
  7472  000A44  6E1B               	movwf	drawCircle@x0+1,c
  7473  000A46  0E28               	movlw	40
  7474  000A48  6E1A               	movwf	drawCircle@x0,c
  7475  000A4A  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7476  000A4E  6A1D               	clrf	drawCircle@y0+1,c
  7477  000A50  0E00               	movlw	0
  7478  000A52  6E1F               	movwf	drawCircle@r+1,c
  7479  000A54  0E07               	movlw	7
  7480  000A56  6E1E               	movwf	drawCircle@r,c
  7481  000A58  0EF8               	movlw	248
  7482  000A5A  6E21               	movwf	drawCircle@color+1,c
  7483  000A5C  0E00               	movlw	0
  7484  000A5E  6E20               	movwf	drawCircle@color,c
  7485  000A60  EC6B  F006         	call	_drawCircle	;wreg free
  7486                           
  7487                           ;Lab9.c: 679: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7488  000A64  0E00               	movlw	0
  7489  000A66  6E1B               	movwf	drawCircle@x0+1,c
  7490  000A68  0E3C               	movlw	60
  7491  000A6A  6E1A               	movwf	drawCircle@x0,c
  7492  000A6C  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7493  000A70  6A1D               	clrf	drawCircle@y0+1,c
  7494  000A72  0E00               	movlw	0
  7495  000A74  6E1F               	movwf	drawCircle@r+1,c
  7496  000A76  0E07               	movlw	7
  7497  000A78  6E1E               	movwf	drawCircle@r,c
  7498  000A7A  0EFF               	movlw	255
  7499  000A7C  6E21               	movwf	drawCircle@color+1,c
  7500  000A7E  0EE0               	movlw	224
  7501  000A80  6E20               	movwf	drawCircle@color,c
  7502  000A82  EC6B  F006         	call	_drawCircle	;wreg free
  7503                           
  7504                           ;Lab9.c: 680: drawCircle(80, Circle_Y, 7, 0x07E0);
  7505  000A86  0E00               	movlw	0
  7506  000A88  6E1B               	movwf	drawCircle@x0+1,c
  7507  000A8A  0E50               	movlw	80
  7508  000A8C  6E1A               	movwf	drawCircle@x0,c
  7509  000A8E  C0A3  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7510  000A92  6A1D               	clrf	drawCircle@y0+1,c
  7511  000A94  0E00               	movlw	0
  7512  000A96  6E1F               	movwf	drawCircle@r+1,c
  7513  000A98  0E07               	movlw	7
  7514  000A9A  6E1E               	movwf	drawCircle@r,c
  7515  000A9C  0E07               	movlw	7
  7516  000A9E  6E21               	movwf	drawCircle@color+1,c
  7517  000AA0  0EE0               	movlw	224
  7518  000AA2  6E20               	movwf	drawCircle@color,c
  7519  000AA4  EC6B  F006         	call	_drawCircle	;wreg free
  7520  000AA8  D000               	goto	l512
  7521  000AAA                     l512:
  7522  000AAA  0012               	return		;funcret
  7523  000AAC                     __end_of_update_LCD_color:
  7524                           	opt stack 0
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodl	equ	0xFF3
  7530                           intcon	equ	0xFF2
  7531                           intcon2	equ	0xFF1
  7532                           intcon3	equ	0xFF0
  7533                           postinc0	equ	0xFEE
  7534                           wreg	equ	0xFE8
  7535                           postdec1	equ	0xFE5
  7536                           fsr1l	equ	0xFE1
  7537                           indf2	equ	0xFDF
  7538                           fsr2h	equ	0xFDA
  7539                           fsr2l	equ	0xFD9
  7540                           status	equ	0xFD8
  7541                           
  7542 ;; *************** function _fillCircle *****************
  7543 ;; Defined at:
  7544 ;;		line 647 in file "ST7735_TFT.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  x0              2   56[COMRAM] int 
  7547 ;;  y0              2   58[COMRAM] int 
  7548 ;;  r               2   60[COMRAM] int 
  7549 ;;  color           2   62[COMRAM] unsigned int 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;		None
  7552 ;; Return value:  Size  Location     Type
  7553 ;;		None               void
  7554 ;; Registers used:
  7555 ;;		wreg, status,2, status,0, cstack
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7561 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;Total ram usage:        8 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    7
  7568 ;; This function calls:
  7569 ;;		_drawFastVLine
  7570 ;;		_fillCircleHelper
  7571 ;; This function is called by:
  7572 ;;		_Initialize_Screen
  7573 ;;		_update_LCD_color
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           	psect	text35
  7578  0020D4                     __ptext35:
  7579                           	opt stack 0
  7580  0020D4                     _fillCircle:
  7581                           	opt stack 20
  7582                           
  7583                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7584                           
  7585                           ;incstack = 0
  7586  0020D4  503D               	movf	fillCircle@r,w,c
  7587  0020D6  0800               	sublw	0
  7588  0020D8  243B               	addwf	fillCircle@y0,w,c
  7589  0020DA  6E16               	movwf	drawFastVLine@y,c
  7590  0020DC  80D8               	bsf	status,0,c
  7591  0020DE  343D               	rlcf	fillCircle@r,w,c
  7592  0020E0  6E17               	movwf	drawFastVLine@h,c
  7593  0020E2  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  7594  0020E6  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  7595  0020EA  5039               	movf	fillCircle@x0,w,c
  7596  0020EC  EC6F  F00E         	call	_drawFastVLine
  7597                           
  7598                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  7599  0020F0  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  7600  0020F4  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7601  0020F8  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  7602  0020FC  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7603  002100  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  7604  002104  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7605  002108  0E00               	movlw	0
  7606  00210A  6E28               	movwf	fillCircleHelper@cornername+1,c
  7607  00210C  0E03               	movlw	3
  7608  00210E  6E27               	movwf	fillCircleHelper@cornername,c
  7609  002110  0E00               	movlw	0
  7610  002112  6E2A               	movwf	fillCircleHelper@delta+1,c
  7611  002114  0E00               	movlw	0
  7612  002116  6E29               	movwf	fillCircleHelper@delta,c
  7613  002118  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  7614  00211C  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7615  002120  ECB0  F008         	call	_fillCircleHelper	;wreg free
  7616  002124  0012               	return		;funcret
  7617  002126                     __end_of_fillCircle:
  7618                           	opt stack 0
  7619                           tblptru	equ	0xFF8
  7620                           tblptrh	equ	0xFF7
  7621                           tblptrl	equ	0xFF6
  7622                           tablat	equ	0xFF5
  7623                           prodl	equ	0xFF3
  7624                           intcon	equ	0xFF2
  7625                           intcon2	equ	0xFF1
  7626                           intcon3	equ	0xFF0
  7627                           postinc0	equ	0xFEE
  7628                           wreg	equ	0xFE8
  7629                           postdec1	equ	0xFE5
  7630                           fsr1l	equ	0xFE1
  7631                           indf2	equ	0xFDF
  7632                           fsr2h	equ	0xFDA
  7633                           fsr2l	equ	0xFD9
  7634                           status	equ	0xFD8
  7635                           
  7636 ;; *************** function _fillCircleHelper *****************
  7637 ;; Defined at:
  7638 ;;		line 622 in file "ST7735_TFT.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  x0              2   32[COMRAM] int 
  7641 ;;  y0              2   34[COMRAM] int 
  7642 ;;  r               2   36[COMRAM] int 
  7643 ;;  cornername      2   38[COMRAM] unsigned int 
  7644 ;;  delta           2   40[COMRAM] int 
  7645 ;;  color           2   42[COMRAM] unsigned int 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  y               2   54[COMRAM] int 
  7648 ;;  x               2   52[COMRAM] int 
  7649 ;;  f               2   50[COMRAM] int 
  7650 ;;  ddF_y           2   48[COMRAM] int 
  7651 ;;  ddF_x           2   46[COMRAM] int 
  7652 ;; Return value:  Size  Location     Type
  7653 ;;		None               void
  7654 ;; Registers used:
  7655 ;;		wreg, status,2, status,0, cstack
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7661 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;Total ram usage:       24 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    6
  7668 ;; This function calls:
  7669 ;;		_drawFastVLine
  7670 ;; This function is called by:
  7671 ;;		_fillCircle
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           	psect	text36
  7676  001160                     __ptext36:
  7677                           	opt stack 0
  7678  001160                     _fillCircleHelper:
  7679                           	opt stack 20
  7680                           
  7681                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  7682                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7683                           
  7684                           ;incstack = 0
  7685  001160  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7686  001164  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7687  001168  1E2D               	comf	??_fillCircleHelper,f,c
  7688  00116A  1E2E               	comf	??_fillCircleHelper+1,f,c
  7689  00116C  4A2D               	infsnz	??_fillCircleHelper,f,c
  7690  00116E  2A2E               	incf	??_fillCircleHelper+1,f,c
  7691  001170  0E01               	movlw	1
  7692  001172  242D               	addwf	??_fillCircleHelper,w,c
  7693  001174  6E33               	movwf	fillCircleHelper@f,c
  7694  001176  0E00               	movlw	0
  7695  001178  202E               	addwfc	??_fillCircleHelper+1,w,c
  7696  00117A  6E34               	movwf	fillCircleHelper@f+1,c
  7697  00117C  0E00               	movlw	0
  7698  00117E  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  7699  001180  0E01               	movlw	1
  7700  001182  6E2F               	movwf	fillCircleHelper@ddF_x,c
  7701  001184  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7702  001188  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7703  00118C  90D8               	bcf	status,0,c
  7704  00118E  362D               	rlcf	??_fillCircleHelper,f,c
  7705  001190  362E               	rlcf	??_fillCircleHelper+1,f,c
  7706  001192  1E2D               	comf	??_fillCircleHelper,f,c
  7707  001194  1E2E               	comf	??_fillCircleHelper+1,f,c
  7708  001196  4A2D               	infsnz	??_fillCircleHelper,f,c
  7709  001198  2A2E               	incf	??_fillCircleHelper+1,f,c
  7710  00119A  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7711  00119E  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7712  0011A2  0E00               	movlw	0
  7713  0011A4  6E36               	movwf	fillCircleHelper@x+1,c
  7714  0011A6  0E00               	movlw	0
  7715  0011A8  6E35               	movwf	fillCircleHelper@x,c
  7716  0011AA  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  7717  0011AE  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7718                           
  7719                           ;ST7735_TFT.c: 626: while (x<y) {
  7720  0011B2  D067               	goto	l4398
  7721  0011B4                     l4378:
  7722                           
  7723                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7724  0011B4  BE34               	btfsc	fillCircleHelper@f+1,7,c
  7725  0011B6  D00B               	goto	l269
  7726                           
  7727                           ;ST7735_TFT.c: 628: y--;
  7728  0011B8  0637               	decf	fillCircleHelper@y,f,c
  7729  0011BA  A0D8               	btfss	status,0,c
  7730  0011BC  0638               	decf	fillCircleHelper@y+1,f,c
  7731                           
  7732                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7733  0011BE  0E02               	movlw	2
  7734  0011C0  2631               	addwf	fillCircleHelper@ddF_y,f,c
  7735  0011C2  0E00               	movlw	0
  7736  0011C4  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7737                           
  7738                           ;ST7735_TFT.c: 630: f += ddF_y;
  7739  0011C6  5031               	movf	fillCircleHelper@ddF_y,w,c
  7740  0011C8  2633               	addwf	fillCircleHelper@f,f,c
  7741  0011CA  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  7742  0011CC  2234               	addwfc	fillCircleHelper@f+1,f,c
  7743  0011CE                     l269:
  7744                           
  7745                           ;ST7735_TFT.c: 631: }
  7746                           ;ST7735_TFT.c: 632: x++;
  7747  0011CE  4A35               	infsnz	fillCircleHelper@x,f,c
  7748  0011D0  2A36               	incf	fillCircleHelper@x+1,f,c
  7749                           
  7750                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7751  0011D2  0E02               	movlw	2
  7752  0011D4  262F               	addwf	fillCircleHelper@ddF_x,f,c
  7753  0011D6  0E00               	movlw	0
  7754  0011D8  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7755                           
  7756                           ;ST7735_TFT.c: 634: f += ddF_x;
  7757  0011DA  502F               	movf	fillCircleHelper@ddF_x,w,c
  7758  0011DC  2633               	addwf	fillCircleHelper@f,f,c
  7759  0011DE  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  7760  0011E0  2234               	addwfc	fillCircleHelper@f+1,f,c
  7761                           
  7762                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7763  0011E2  A027               	btfss	fillCircleHelper@cornername,0,c
  7764  0011E4  D025               	goto	l4394
  7765                           
  7766                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7767  0011E6  5037               	movf	fillCircleHelper@y,w,c
  7768  0011E8  0800               	sublw	0
  7769  0011EA  2423               	addwf	fillCircleHelper@y0,w,c
  7770  0011EC  6E16               	movwf	drawFastVLine@y,c
  7771  0011EE  5037               	movf	fillCircleHelper@y,w,c
  7772  0011F0  2437               	addwf	fillCircleHelper@y,w,c
  7773  0011F2  2429               	addwf	fillCircleHelper@delta,w,c
  7774  0011F4  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7775  0011F6  282D               	incf	??_fillCircleHelper,w,c
  7776  0011F8  6E17               	movwf	drawFastVLine@h,c
  7777  0011FA  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7778  0011FE  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7779  001202  5021               	movf	fillCircleHelper@x0,w,c
  7780  001204  2435               	addwf	fillCircleHelper@x,w,c
  7781  001206  EC6F  F00E         	call	_drawFastVLine
  7782                           
  7783                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7784  00120A  5035               	movf	fillCircleHelper@x,w,c
  7785  00120C  0800               	sublw	0
  7786  00120E  2423               	addwf	fillCircleHelper@y0,w,c
  7787  001210  6E16               	movwf	drawFastVLine@y,c
  7788  001212  5035               	movf	fillCircleHelper@x,w,c
  7789  001214  2435               	addwf	fillCircleHelper@x,w,c
  7790  001216  2429               	addwf	fillCircleHelper@delta,w,c
  7791  001218  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7792  00121A  282D               	incf	??_fillCircleHelper,w,c
  7793  00121C  6E17               	movwf	drawFastVLine@h,c
  7794  00121E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7795  001222  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7796  001226  5021               	movf	fillCircleHelper@x0,w,c
  7797  001228  2437               	addwf	fillCircleHelper@y,w,c
  7798  00122A  EC6F  F00E         	call	_drawFastVLine
  7799  00122E  D000               	goto	l4394
  7800  001230                     l4394:
  7801                           
  7802                           ;ST7735_TFT.c: 639: }
  7803                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7804  001230  A227               	btfss	fillCircleHelper@cornername,1,c
  7805  001232  D027               	goto	l4398
  7806                           
  7807                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7808  001234  5037               	movf	fillCircleHelper@y,w,c
  7809  001236  0800               	sublw	0
  7810  001238  2423               	addwf	fillCircleHelper@y0,w,c
  7811  00123A  6E16               	movwf	drawFastVLine@y,c
  7812  00123C  5037               	movf	fillCircleHelper@y,w,c
  7813  00123E  2437               	addwf	fillCircleHelper@y,w,c
  7814  001240  2429               	addwf	fillCircleHelper@delta,w,c
  7815  001242  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7816  001244  282D               	incf	??_fillCircleHelper,w,c
  7817  001246  6E17               	movwf	drawFastVLine@h,c
  7818  001248  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7819  00124C  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7820  001250  5035               	movf	fillCircleHelper@x,w,c
  7821  001252  0800               	sublw	0
  7822  001254  2421               	addwf	fillCircleHelper@x0,w,c
  7823  001256  EC6F  F00E         	call	_drawFastVLine
  7824                           
  7825                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7826  00125A  5035               	movf	fillCircleHelper@x,w,c
  7827  00125C  0800               	sublw	0
  7828  00125E  2423               	addwf	fillCircleHelper@y0,w,c
  7829  001260  6E16               	movwf	drawFastVLine@y,c
  7830  001262  5035               	movf	fillCircleHelper@x,w,c
  7831  001264  2435               	addwf	fillCircleHelper@x,w,c
  7832  001266  2429               	addwf	fillCircleHelper@delta,w,c
  7833  001268  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7834  00126A  282D               	incf	??_fillCircleHelper,w,c
  7835  00126C  6E17               	movwf	drawFastVLine@h,c
  7836  00126E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7837  001272  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7838  001276  5037               	movf	fillCircleHelper@y,w,c
  7839  001278  0800               	sublw	0
  7840  00127A  2421               	addwf	fillCircleHelper@x0,w,c
  7841  00127C  EC6F  F00E         	call	_drawFastVLine
  7842  001280  D000               	goto	l4398
  7843  001282                     l4398:
  7844  001282  5037               	movf	fillCircleHelper@y,w,c
  7845  001284  5C35               	subwf	fillCircleHelper@x,w,c
  7846  001286  5036               	movf	fillCircleHelper@x+1,w,c
  7847  001288  0A80               	xorlw	128
  7848  00128A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7849  00128C  5038               	movf	fillCircleHelper@y+1,w,c
  7850  00128E  0A80               	xorlw	128
  7851  001290  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  7852  001292  A0D8               	btfss	status,0,c
  7853  001294  D78F               	goto	l4378
  7854  001296  0012               	return		;funcret
  7855  001298                     __end_of_fillCircleHelper:
  7856                           	opt stack 0
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodl	equ	0xFF3
  7862                           intcon	equ	0xFF2
  7863                           intcon2	equ	0xFF1
  7864                           intcon3	equ	0xFF0
  7865                           postinc0	equ	0xFEE
  7866                           wreg	equ	0xFE8
  7867                           postdec1	equ	0xFE5
  7868                           fsr1l	equ	0xFE1
  7869                           indf2	equ	0xFDF
  7870                           fsr2h	equ	0xFDA
  7871                           fsr2l	equ	0xFD9
  7872                           status	equ	0xFD8
  7873                           
  7874 ;; *************** function _drawCircle *****************
  7875 ;; Defined at:
  7876 ;;		line 561 in file "ST7735_TFT.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  x0              2   25[COMRAM] int 
  7879 ;;  y0              2   27[COMRAM] int 
  7880 ;;  r               2   29[COMRAM] int 
  7881 ;;  color           2   31[COMRAM] unsigned int 
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;  y               2   43[COMRAM] int 
  7884 ;;  x               2   41[COMRAM] int 
  7885 ;;  f               2   39[COMRAM] int 
  7886 ;;  ddF_y           2   37[COMRAM] int 
  7887 ;;  ddF_x           2   35[COMRAM] int 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;		None               void
  7890 ;; Registers used:
  7891 ;;		wreg, status,2, status,0, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7897 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;Total ram usage:       20 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    6
  7904 ;; This function calls:
  7905 ;;		_drawPixel
  7906 ;; This function is called by:
  7907 ;;		_Initialize_Screen
  7908 ;;		_update_LCD_color
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text37
  7913  000CD6                     __ptext37:
  7914                           	opt stack 0
  7915  000CD6                     _drawCircle:
  7916                           	opt stack 21
  7917                           
  7918                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7919                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7920                           
  7921                           ;incstack = 0
  7922  000CD6  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7923  000CDA  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7924  000CDE  1E22               	comf	??_drawCircle,f,c
  7925  000CE0  1E23               	comf	??_drawCircle+1,f,c
  7926  000CE2  4A22               	infsnz	??_drawCircle,f,c
  7927  000CE4  2A23               	incf	??_drawCircle+1,f,c
  7928  000CE6  0E01               	movlw	1
  7929  000CE8  2422               	addwf	??_drawCircle,w,c
  7930  000CEA  6E28               	movwf	drawCircle@f,c
  7931  000CEC  0E00               	movlw	0
  7932  000CEE  2023               	addwfc	??_drawCircle+1,w,c
  7933  000CF0  6E29               	movwf	drawCircle@f+1,c
  7934  000CF2  0E00               	movlw	0
  7935  000CF4  6E25               	movwf	drawCircle@ddF_x+1,c
  7936  000CF6  0E01               	movlw	1
  7937  000CF8  6E24               	movwf	drawCircle@ddF_x,c
  7938  000CFA  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7939  000CFE  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7940  000D02  90D8               	bcf	status,0,c
  7941  000D04  3622               	rlcf	??_drawCircle,f,c
  7942  000D06  3623               	rlcf	??_drawCircle+1,f,c
  7943  000D08  1E22               	comf	??_drawCircle,f,c
  7944  000D0A  1E23               	comf	??_drawCircle+1,f,c
  7945  000D0C  4A22               	infsnz	??_drawCircle,f,c
  7946  000D0E  2A23               	incf	??_drawCircle+1,f,c
  7947  000D10  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  7948  000D14  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7949  000D18  0E00               	movlw	0
  7950  000D1A  6E2B               	movwf	drawCircle@x+1,c
  7951  000D1C  0E00               	movlw	0
  7952  000D1E  6E2A               	movwf	drawCircle@x,c
  7953  000D20  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  7954  000D24  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  7955                           
  7956                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7957  000D28  501C               	movf	drawCircle@y0,w,c
  7958  000D2A  241E               	addwf	drawCircle@r,w,c
  7959  000D2C  6E16               	movwf	drawPixel@y,c
  7960  000D2E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7961  000D32  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7962  000D36  501A               	movf	drawCircle@x0,w,c
  7963  000D38  EC22  F012         	call	_drawPixel
  7964                           
  7965                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7966  000D3C  501E               	movf	drawCircle@r,w,c
  7967  000D3E  0800               	sublw	0
  7968  000D40  241C               	addwf	drawCircle@y0,w,c
  7969  000D42  6E16               	movwf	drawPixel@y,c
  7970  000D44  C020  F017         	movff	drawCircle@color,drawPixel@color
  7971  000D48  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7972  000D4C  501A               	movf	drawCircle@x0,w,c
  7973  000D4E  EC22  F012         	call	_drawPixel
  7974                           
  7975                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7976  000D52  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7977  000D56  C020  F017         	movff	drawCircle@color,drawPixel@color
  7978  000D5A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7979  000D5E  501A               	movf	drawCircle@x0,w,c
  7980  000D60  241E               	addwf	drawCircle@r,w,c
  7981  000D62  EC22  F012         	call	_drawPixel
  7982                           
  7983                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7984  000D66  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7985  000D6A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7986  000D6E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7987  000D72  501E               	movf	drawCircle@r,w,c
  7988  000D74  0800               	sublw	0
  7989  000D76  241A               	addwf	drawCircle@x0,w,c
  7990  000D78  EC22  F012         	call	_drawPixel
  7991                           
  7992                           ;ST7735_TFT.c: 569: while (x < y) {
  7993  000D7C  D078               	goto	l4544
  7994  000D7E                     l4516:
  7995                           
  7996                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7997  000D7E  BE29               	btfsc	drawCircle@f+1,7,c
  7998  000D80  D00B               	goto	l251
  7999                           
  8000                           ;ST7735_TFT.c: 571: y--;
  8001  000D82  062C               	decf	drawCircle@y,f,c
  8002  000D84  A0D8               	btfss	status,0,c
  8003  000D86  062D               	decf	drawCircle@y+1,f,c
  8004                           
  8005                           ;ST7735_TFT.c: 572: ddF_y += 2;
  8006  000D88  0E02               	movlw	2
  8007  000D8A  2626               	addwf	drawCircle@ddF_y,f,c
  8008  000D8C  0E00               	movlw	0
  8009  000D8E  2227               	addwfc	drawCircle@ddF_y+1,f,c
  8010                           
  8011                           ;ST7735_TFT.c: 573: f += ddF_y;
  8012  000D90  5026               	movf	drawCircle@ddF_y,w,c
  8013  000D92  2628               	addwf	drawCircle@f,f,c
  8014  000D94  5027               	movf	drawCircle@ddF_y+1,w,c
  8015  000D96  2229               	addwfc	drawCircle@f+1,f,c
  8016  000D98                     l251:
  8017                           
  8018                           ;ST7735_TFT.c: 574: }
  8019                           ;ST7735_TFT.c: 575: x++;
  8020  000D98  4A2A               	infsnz	drawCircle@x,f,c
  8021  000D9A  2A2B               	incf	drawCircle@x+1,f,c
  8022                           
  8023                           ;ST7735_TFT.c: 576: ddF_x += 2;
  8024  000D9C  0E02               	movlw	2
  8025  000D9E  2624               	addwf	drawCircle@ddF_x,f,c
  8026  000DA0  0E00               	movlw	0
  8027  000DA2  2225               	addwfc	drawCircle@ddF_x+1,f,c
  8028                           
  8029                           ;ST7735_TFT.c: 577: f += ddF_x;
  8030  000DA4  5024               	movf	drawCircle@ddF_x,w,c
  8031  000DA6  2628               	addwf	drawCircle@f,f,c
  8032  000DA8  5025               	movf	drawCircle@ddF_x+1,w,c
  8033  000DAA  2229               	addwfc	drawCircle@f+1,f,c
  8034                           
  8035                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  8036  000DAC  501C               	movf	drawCircle@y0,w,c
  8037  000DAE  242C               	addwf	drawCircle@y,w,c
  8038  000DB0  6E16               	movwf	drawPixel@y,c
  8039  000DB2  C020  F017         	movff	drawCircle@color,drawPixel@color
  8040  000DB6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8041  000DBA  501A               	movf	drawCircle@x0,w,c
  8042  000DBC  242A               	addwf	drawCircle@x,w,c
  8043  000DBE  EC22  F012         	call	_drawPixel
  8044                           
  8045                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  8046  000DC2  501C               	movf	drawCircle@y0,w,c
  8047  000DC4  242C               	addwf	drawCircle@y,w,c
  8048  000DC6  6E16               	movwf	drawPixel@y,c
  8049  000DC8  C020  F017         	movff	drawCircle@color,drawPixel@color
  8050  000DCC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8051  000DD0  502A               	movf	drawCircle@x,w,c
  8052  000DD2  0800               	sublw	0
  8053  000DD4  241A               	addwf	drawCircle@x0,w,c
  8054  000DD6  EC22  F012         	call	_drawPixel
  8055                           
  8056                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  8057  000DDA  502C               	movf	drawCircle@y,w,c
  8058  000DDC  0800               	sublw	0
  8059  000DDE  241C               	addwf	drawCircle@y0,w,c
  8060  000DE0  6E16               	movwf	drawPixel@y,c
  8061  000DE2  C020  F017         	movff	drawCircle@color,drawPixel@color
  8062  000DE6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8063  000DEA  501A               	movf	drawCircle@x0,w,c
  8064  000DEC  242A               	addwf	drawCircle@x,w,c
  8065  000DEE  EC22  F012         	call	_drawPixel
  8066                           
  8067                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  8068  000DF2  502C               	movf	drawCircle@y,w,c
  8069  000DF4  0800               	sublw	0
  8070  000DF6  241C               	addwf	drawCircle@y0,w,c
  8071  000DF8  6E16               	movwf	drawPixel@y,c
  8072  000DFA  C020  F017         	movff	drawCircle@color,drawPixel@color
  8073  000DFE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8074  000E02  502A               	movf	drawCircle@x,w,c
  8075  000E04  0800               	sublw	0
  8076  000E06  241A               	addwf	drawCircle@x0,w,c
  8077  000E08  EC22  F012         	call	_drawPixel
  8078                           
  8079                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  8080  000E0C  501C               	movf	drawCircle@y0,w,c
  8081  000E0E  242A               	addwf	drawCircle@x,w,c
  8082  000E10  6E16               	movwf	drawPixel@y,c
  8083  000E12  C020  F017         	movff	drawCircle@color,drawPixel@color
  8084  000E16  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8085  000E1A  501A               	movf	drawCircle@x0,w,c
  8086  000E1C  242C               	addwf	drawCircle@y,w,c
  8087  000E1E  EC22  F012         	call	_drawPixel
  8088                           
  8089                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  8090  000E22  501C               	movf	drawCircle@y0,w,c
  8091  000E24  242A               	addwf	drawCircle@x,w,c
  8092  000E26  6E16               	movwf	drawPixel@y,c
  8093  000E28  C020  F017         	movff	drawCircle@color,drawPixel@color
  8094  000E2C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8095  000E30  502C               	movf	drawCircle@y,w,c
  8096  000E32  0800               	sublw	0
  8097  000E34  241A               	addwf	drawCircle@x0,w,c
  8098  000E36  EC22  F012         	call	_drawPixel
  8099                           
  8100                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  8101  000E3A  502A               	movf	drawCircle@x,w,c
  8102  000E3C  0800               	sublw	0
  8103  000E3E  241C               	addwf	drawCircle@y0,w,c
  8104  000E40  6E16               	movwf	drawPixel@y,c
  8105  000E42  C020  F017         	movff	drawCircle@color,drawPixel@color
  8106  000E46  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8107  000E4A  501A               	movf	drawCircle@x0,w,c
  8108  000E4C  242C               	addwf	drawCircle@y,w,c
  8109  000E4E  EC22  F012         	call	_drawPixel
  8110                           
  8111                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  8112  000E52  502A               	movf	drawCircle@x,w,c
  8113  000E54  0800               	sublw	0
  8114  000E56  241C               	addwf	drawCircle@y0,w,c
  8115  000E58  6E16               	movwf	drawPixel@y,c
  8116  000E5A  C020  F017         	movff	drawCircle@color,drawPixel@color
  8117  000E5E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8118  000E62  502C               	movf	drawCircle@y,w,c
  8119  000E64  0800               	sublw	0
  8120  000E66  241A               	addwf	drawCircle@x0,w,c
  8121  000E68  EC22  F012         	call	_drawPixel
  8122  000E6C  D000               	goto	l4544
  8123  000E6E                     l4544:
  8124  000E6E  502C               	movf	drawCircle@y,w,c
  8125  000E70  5C2A               	subwf	drawCircle@x,w,c
  8126  000E72  502B               	movf	drawCircle@x+1,w,c
  8127  000E74  0A80               	xorlw	128
  8128  000E76  6E22               	movwf	??_drawCircle& (0+255),c
  8129  000E78  502D               	movf	drawCircle@y+1,w,c
  8130  000E7A  0A80               	xorlw	128
  8131  000E7C  5822               	subwfb	??_drawCircle& (0+255),w,c
  8132  000E7E  A0D8               	btfss	status,0,c
  8133  000E80  D77E               	goto	l4516
  8134  000E82  0012               	return		;funcret
  8135  000E84                     __end_of_drawCircle:
  8136                           	opt stack 0
  8137                           tblptru	equ	0xFF8
  8138                           tblptrh	equ	0xFF7
  8139                           tblptrl	equ	0xFF6
  8140                           tablat	equ	0xFF5
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           intcon2	equ	0xFF1
  8144                           intcon3	equ	0xFF0
  8145                           postinc0	equ	0xFEE
  8146                           wreg	equ	0xFE8
  8147                           postdec1	equ	0xFE5
  8148                           fsr1l	equ	0xFE1
  8149                           indf2	equ	0xFDF
  8150                           fsr2h	equ	0xFDA
  8151                           fsr2l	equ	0xFD9
  8152                           status	equ	0xFD8
  8153                           
  8154 ;; *************** function _PED_Control *****************
  8155 ;; Defined at:
  8156 ;;		line 475 in file "Lab9.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  direction       1    wreg     unsigned char 
  8159 ;;  Num_Sec         1    9[BANK0 ] unsigned char 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;  direction       1   10[BANK0 ] unsigned char 
  8162 ;;  i               1   11[BANK0 ] unsigned char 
  8163 ;; Return value:  Size  Location     Type
  8164 ;;		None               void
  8165 ;; Registers used:
  8166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8172 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;Total ram usage:        3 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:   10
  8179 ;; This function calls:
  8180 ;;		_Wait_One_Second_With_Beep
  8181 ;;		_update_LCD_PED_Count
  8182 ;; This function is called by:
  8183 ;;		_Day_Mode
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           	psect	text38
  8188  0022DE                     __ptext38:
  8189                           	opt stack 0
  8190  0022DE                     _PED_Control:
  8191                           	opt stack 19
  8192                           
  8193                           ;incstack = 0
  8194                           ;PED_Control@direction stored from wreg
  8195  0022DE  0100               	movlb	0	; () banked
  8196  0022E0  6FAB               	movwf	PED_Control@direction& (0+255),b
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;Lab9.c: 478: for(char i = Num_Sec-1;i>0; i--)
  8200  0022E2  0100               	movlb	0	; () banked
  8201  0022E4  05AA               	decf	PED_Control@Num_Sec& (0+255),w,b
  8202  0022E6  0100               	movlb	0	; () banked
  8203  0022E8  6FAC               	movwf	PED_Control@i& (0+255),b
  8204  0022EA                     l5058:
  8205                           
  8206                           ; BSR set to: 0
  8207  0022EA  0100               	movlb	0	; () banked
  8208  0022EC  51AC               	movf	PED_Control@i& (0+255),w,b
  8209  0022EE  0100               	movlb	0	; () banked
  8210  0022F0  B4D8               	btfsc	status,2,c
  8211  0022F2  D00D               	goto	l5070
  8212  0022F4  D001               	goto	l5062
  8213                           
  8214                           ; BSR set to: 0
  8215  0022F6  D00B               	goto	l5070
  8216  0022F8                     l5062:
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;Lab9.c: 479: {
  8220                           ;Lab9.c: 480: update_LCD_PED_Count(direction, i);
  8221  0022F8  C0AC  F0A8         	movff	PED_Control@i,update_LCD_PED_Count@count
  8222  0022FC  0100               	movlb	0	; () banked
  8223  0022FE  51AB               	movf	PED_Control@direction& (0+255),w,b
  8224  002300  EC1C  F00C         	call	_update_LCD_PED_Count
  8225                           
  8226                           ;Lab9.c: 481: Wait_One_Second_With_Beep();
  8227  002304  ECBC  F012         	call	_Wait_One_Second_With_Beep	;wreg free
  8228  002308  0100               	movlb	0	; () banked
  8229  00230A  07AC               	decf	PED_Control@i& (0+255),f,b
  8230  00230C  D7EE               	goto	l5058
  8231  00230E                     l5070:
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;Lab9.c: 482: }
  8235                           ;Lab9.c: 484: update_LCD_PED_Count(direction, 0);
  8236  00230E  0E00               	movlw	0
  8237  002310  0100               	movlb	0	; () banked
  8238  002312  6FA8               	movwf	update_LCD_PED_Count@count& (0+255),b
  8239  002314  0100               	movlb	0	; () banked
  8240  002316  51AB               	movf	PED_Control@direction& (0+255),w,b
  8241  002318  EC1C  F00C         	call	_update_LCD_PED_Count
  8242                           
  8243                           ;Lab9.c: 485: Wait_One_Second_With_Beep();
  8244  00231C  ECBC  F012         	call	_Wait_One_Second_With_Beep	;wreg free
  8245  002320  0012               	return		;funcret
  8246  002322                     __end_of_PED_Control:
  8247                           	opt stack 0
  8248                           tblptru	equ	0xFF8
  8249                           tblptrh	equ	0xFF7
  8250                           tblptrl	equ	0xFF6
  8251                           tablat	equ	0xFF5
  8252                           prodl	equ	0xFF3
  8253                           intcon	equ	0xFF2
  8254                           intcon2	equ	0xFF1
  8255                           intcon3	equ	0xFF0
  8256                           postinc0	equ	0xFEE
  8257                           wreg	equ	0xFE8
  8258                           postdec1	equ	0xFE5
  8259                           fsr1l	equ	0xFE1
  8260                           indf2	equ	0xFDF
  8261                           fsr2h	equ	0xFDA
  8262                           fsr2l	equ	0xFD9
  8263                           status	equ	0xFD8
  8264                           
  8265 ;; *************** function _update_LCD_PED_Count *****************
  8266 ;; Defined at:
  8267 ;;		line 714 in file "Lab9.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  direction       1    wreg     unsigned char 
  8270 ;;  count           1    7[BANK0 ] unsigned char 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  direction       1    8[BANK0 ] unsigned char 
  8273 ;; Return value:  Size  Location     Type
  8274 ;;		None               void
  8275 ;; Registers used:
  8276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8282 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;Total ram usage:        2 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    9
  8289 ;; This function calls:
  8290 ;;		___awdiv
  8291 ;;		___awmod
  8292 ;;		_drawtext
  8293 ;; This function is called by:
  8294 ;;		_PED_Control
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text39
  8299  001838                     __ptext39:
  8300                           	opt stack 0
  8301  001838                     _update_LCD_PED_Count:
  8302                           	opt stack 19
  8303                           
  8304                           ;incstack = 0
  8305                           ;update_LCD_PED_Count@direction stored from wreg
  8306  001838  0100               	movlb	0	; () banked
  8307  00183A  6FA9               	movwf	update_LCD_PED_Count@direction& (0+255),b
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;Lab9.c: 716: switch (direction)
  8311  00183C  D05B               	goto	l4960
  8312  00183E                     l4950:
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;Lab9.c: 719: PED_EW_Count[0] = count/10 + '0';
  8316  00183E  C0A8  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8317  001842  6A10               	clrf	___awdiv@dividend+1,c
  8318  001844  0E00               	movlw	0
  8319  001846  6E12               	movwf	___awdiv@divisor+1,c
  8320  001848  0E0A               	movlw	10
  8321  00184A  6E11               	movwf	___awdiv@divisor,c
  8322  00184C  ECE0  F00D         	call	___awdiv	;wreg free
  8323  001850  500F               	movf	?___awdiv,w,c
  8324  001852  0F30               	addlw	48
  8325  001854  0100               	movlb	0	; () banked
  8326  001856  6FB2               	movwf	_PED_EW_Count& (0+255),b
  8327                           
  8328                           ;Lab9.c: 720: PED_EW_Count[1] = count%10 + '0';
  8329  001858  C0A8  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8330  00185C  6A10               	clrf	___awmod@dividend+1,c
  8331  00185E  0E00               	movlw	0
  8332  001860  6E12               	movwf	___awmod@divisor+1,c
  8333  001862  0E0A               	movlw	10
  8334  001864  6E11               	movwf	___awmod@divisor,c
  8335  001866  EC37  F00F         	call	___awmod	;wreg free
  8336  00186A  500F               	movf	?___awmod,w,c
  8337  00186C  0F30               	addlw	48
  8338  00186E  0100               	movlb	0	; () banked
  8339  001870  6FB3               	movwf	(_PED_EW_Count+1)& (0+255),b
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;Lab9.c: 721: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  8343  001872  0E1E               	movlw	30
  8344  001874  6E37               	movwf	drawtext@y,c
  8345  001876  0EB2               	movlw	low _PED_EW_Count
  8346  001878  6E38               	movwf	drawtext@_text,c
  8347  00187A  0E00               	movlw	high _PED_EW_Count
  8348  00187C  6E39               	movwf	drawtext@_text+1,c
  8349  00187E  0E07               	movlw	7
  8350  001880  6E3B               	movwf	drawtext@color+1,c
  8351  001882  683A               	setf	drawtext@color,c
  8352  001884  0E00               	movlw	0
  8353  001886  6E3D               	movwf	drawtext@bg+1,c
  8354  001888  0E00               	movlw	0
  8355  00188A  6E3C               	movwf	drawtext@bg,c
  8356  00188C  0E02               	movlw	2
  8357  00188E  6E3E               	movwf	drawtext@size,c
  8358  001890  0E02               	movlw	2
  8359  001892  ECD4  F009         	call	_drawtext
  8360                           
  8361                           ;Lab9.c: 722: break;
  8362  001896  D037               	goto	l528
  8363  001898                     l4954:
  8364                           
  8365                           ;Lab9.c: 725: PED_NS_Count[0] = count/10 + '0';
  8366  001898  C0A8  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8367  00189C  6A10               	clrf	___awdiv@dividend+1,c
  8368  00189E  0E00               	movlw	0
  8369  0018A0  6E12               	movwf	___awdiv@divisor+1,c
  8370  0018A2  0E0A               	movlw	10
  8371  0018A4  6E11               	movwf	___awdiv@divisor,c
  8372  0018A6  ECE0  F00D         	call	___awdiv	;wreg free
  8373  0018AA  500F               	movf	?___awdiv,w,c
  8374  0018AC  0F30               	addlw	48
  8375  0018AE  0100               	movlb	0	; () banked
  8376  0018B0  6FB5               	movwf	_PED_NS_Count& (0+255),b
  8377                           
  8378                           ;Lab9.c: 726: PED_NS_Count[1] = count%10 + '0';
  8379  0018B2  C0A8  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8380  0018B6  6A10               	clrf	___awmod@dividend+1,c
  8381  0018B8  0E00               	movlw	0
  8382  0018BA  6E12               	movwf	___awmod@divisor+1,c
  8383  0018BC  0E0A               	movlw	10
  8384  0018BE  6E11               	movwf	___awmod@divisor,c
  8385  0018C0  EC37  F00F         	call	___awmod	;wreg free
  8386  0018C4  500F               	movf	?___awmod,w,c
  8387  0018C6  0F30               	addlw	48
  8388  0018C8  0100               	movlb	0	; () banked
  8389  0018CA  6FB6               	movwf	(_PED_NS_Count+1)& (0+255),b
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;Lab9.c: 727: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  8393  0018CC  0E5A               	movlw	90
  8394  0018CE  6E37               	movwf	drawtext@y,c
  8395  0018D0  0EB5               	movlw	low _PED_NS_Count
  8396  0018D2  6E38               	movwf	drawtext@_text,c
  8397  0018D4  0E00               	movlw	high _PED_NS_Count
  8398  0018D6  6E39               	movwf	drawtext@_text+1,c
  8399  0018D8  0E00               	movlw	0
  8400  0018DA  6E3B               	movwf	drawtext@color+1,c
  8401  0018DC  0E1F               	movlw	31
  8402  0018DE  6E3A               	movwf	drawtext@color,c
  8403  0018E0  0E00               	movlw	0
  8404  0018E2  6E3D               	movwf	drawtext@bg+1,c
  8405  0018E4  0E00               	movlw	0
  8406  0018E6  6E3C               	movwf	drawtext@bg,c
  8407  0018E8  0E02               	movlw	2
  8408  0018EA  6E3E               	movwf	drawtext@size,c
  8409  0018EC  0E02               	movlw	2
  8410  0018EE  ECD4  F009         	call	_drawtext
  8411                           
  8412                           ;Lab9.c: 729: }
  8413                           
  8414                           ;Lab9.c: 728: break;
  8415  0018F2  D009               	goto	l528
  8416  0018F4                     l4960:
  8417  0018F4  0100               	movlb	0	; () banked
  8418  0018F6  51A9               	movf	update_LCD_PED_Count@direction& (0+255),w,b
  8419                           
  8420                           ; Switch size 1, requested type "space"
  8421                           ; Number of cases is 2, Range of values is 0 to 2
  8422                           ; switch strategies available:
  8423                           ; Name         Instructions Cycles
  8424                           ; simple_byte            7     4 (average)
  8425                           ;	Chosen strategy is simple_byte
  8426  0018F8  0A00               	xorlw	0	; case 0
  8427  0018FA  B4D8               	btfsc	status,2,c
  8428  0018FC  D7A0               	goto	l4950
  8429  0018FE  0A02               	xorlw	2	; case 2
  8430  001900  B4D8               	btfsc	status,2,c
  8431  001902  D7CA               	goto	l4954
  8432  001904  D000               	goto	l528
  8433  001906                     l528:
  8434  001906  0012               	return		;funcret
  8435  001908                     __end_of_update_LCD_PED_Count:
  8436                           	opt stack 0
  8437                           tblptru	equ	0xFF8
  8438                           tblptrh	equ	0xFF7
  8439                           tblptrl	equ	0xFF6
  8440                           tablat	equ	0xFF5
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           intcon2	equ	0xFF1
  8444                           intcon3	equ	0xFF0
  8445                           postinc0	equ	0xFEE
  8446                           wreg	equ	0xFE8
  8447                           postdec1	equ	0xFE5
  8448                           fsr1l	equ	0xFE1
  8449                           indf2	equ	0xFDF
  8450                           fsr2h	equ	0xFDA
  8451                           fsr2l	equ	0xFD9
  8452                           status	equ	0xFD8
  8453                           
  8454 ;; *************** function _drawtext *****************
  8455 ;; Defined at:
  8456 ;;		line 507 in file "ST7735_TFT.c"
  8457 ;; Parameters:    Size  Location     Type
  8458 ;;  x               1    wreg     unsigned char 
  8459 ;;  y               1   54[COMRAM] unsigned char 
  8460 ;;  _text           2   55[COMRAM] PTR unsigned char 
  8461 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8462 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8463 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8464 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8465 ;;  color           2   57[COMRAM] unsigned int 
  8466 ;;  bg              2   59[COMRAM] unsigned int 
  8467 ;;  size            1   61[COMRAM] unsigned char 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  x               1    0[BANK0 ] unsigned char 
  8470 ;;  i               2    3[BANK0 ] unsigned int 
  8471 ;;  textsize        2    1[BANK0 ] unsigned int 
  8472 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  8473 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  8474 ;; Return value:  Size  Location     Type
  8475 ;;		None               void
  8476 ;; Registers used:
  8477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8483 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8486 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;Total ram usage:       17 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:    8
  8490 ;; This function calls:
  8491 ;;		_drawChar
  8492 ;;		_strlen
  8493 ;; This function is called by:
  8494 ;;		_Initialize_Screen
  8495 ;;		_Wait_One_Second
  8496 ;;		_update_LCD_count
  8497 ;;		_update_LCD_PED_Count
  8498 ;;		_update_LCD_misc
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           	psect	text40
  8503  0013A8                     __ptext40:
  8504                           	opt stack 0
  8505  0013A8                     _drawtext:
  8506                           	opt stack 19
  8507                           
  8508                           ;incstack = 0
  8509                           ;drawtext@x stored from wreg
  8510  0013A8  0100               	movlb	0	; () banked
  8511  0013AA  6FA1               	movwf	drawtext@x& (0+255),b
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  8515                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  8516                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  8517  0013AC  C0A1  F0A7         	movff	drawtext@x,drawtext@cursor_x
  8518                           
  8519                           ; BSR set to: 0
  8520  0013B0  C037  F0A6         	movff	drawtext@y,drawtext@cursor_y
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  8524  0013B4  C038  F00F         	movff	drawtext@_text,strlen@s
  8525  0013B8  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  8526  0013BC  ECB0  F011         	call	_strlen	;wreg free
  8527  0013C0  C00F  F0A2         	movff	?_strlen,drawtext@textsize
  8528  0013C4  C010  F0A3         	movff	?_strlen+1,drawtext@textsize+1
  8529                           
  8530                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  8531  0013C8  0E00               	movlw	0
  8532  0013CA  0100               	movlb	0	; () banked
  8533  0013CC  6FA5               	movwf	(drawtext@i+1)& (0+255),b
  8534  0013CE  0E00               	movlw	0
  8535  0013D0  6FA4               	movwf	drawtext@i& (0+255),b
  8536  0013D2  D064               	goto	l4366
  8537  0013D4                     l4340:
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  8541  0013D4  5041               	movf	_wrap,w,c
  8542  0013D6  B4D8               	btfsc	status,2,c
  8543  0013D8  D034               	goto	l4356
  8544                           
  8545                           ; BSR set to: 0
  8546  0013DA  503E               	movf	drawtext@size,w,c
  8547  0013DC  0D05               	mullw	5
  8548  0013DE  0100               	movlb	0	; () banked
  8549  0013E0  51A7               	movf	drawtext@cursor_x& (0+255),w,b
  8550  0013E2  6E3F               	movwf	??_drawtext& (0+255),c
  8551  0013E4  6A40               	clrf	(??_drawtext+1)& (0+255),c
  8552  0013E6  50F3               	movf	prodl,w,c
  8553  0013E8  263F               	addwf	??_drawtext,f,c
  8554  0013EA  50F4               	movf	prodh,w,c
  8555  0013EC  2240               	addwfc	??_drawtext+1,f,c
  8556  0013EE  BE40               	btfsc	??_drawtext+1,7,c
  8557  0013F0  D028               	goto	l4356
  8558  0013F2  5040               	movf	??_drawtext+1,w,c
  8559  0013F4  E104               	bnz	u3020
  8560  0013F6  0E81               	movlw	129
  8561  0013F8  5C3F               	subwf	??_drawtext,w,c
  8562  0013FA  A0D8               	btfss	status,0,c
  8563  0013FC  D022               	goto	l4356
  8564  0013FE                     u3020:
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;ST7735_TFT.c: 515: cursor_x = 0;
  8568  0013FE  0E00               	movlw	0
  8569  001400  0100               	movlb	0	; () banked
  8570  001402  6FA7               	movwf	drawtext@cursor_x& (0+255),b
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  8574  001404  503E               	movf	drawtext@size,w,c
  8575  001406  0D07               	mullw	7
  8576  001408  50F3               	movf	prodl,w,c
  8577  00140A  0100               	movlb	0	; () banked
  8578  00140C  25A6               	addwf	drawtext@cursor_y& (0+255),w,b
  8579  00140E  0F03               	addlw	3
  8580  001410  0100               	movlb	0	; () banked
  8581  001412  6FA6               	movwf	drawtext@cursor_y& (0+255),b
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  8585  001414  0EA0               	movlw	160
  8586  001416  0100               	movlb	0	; () banked
  8587  001418  65A6               	cpfsgt	drawtext@cursor_y& (0+255),b
  8588  00141A  D004               	goto	l4352
  8589                           
  8590                           ; BSR set to: 0
  8591  00141C  0EA0               	movlw	160
  8592  00141E  0100               	movlb	0	; () banked
  8593  001420  6FA6               	movwf	drawtext@cursor_y& (0+255),b
  8594  001422  D000               	goto	l4352
  8595  001424                     l4352:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  8599  001424  0100               	movlb	0	; () banked
  8600  001426  51A4               	movf	drawtext@i& (0+255),w,b
  8601  001428  2438               	addwf	drawtext@_text,w,c
  8602  00142A  6ED9               	movwf	fsr2l,c
  8603  00142C  0100               	movlb	0	; () banked
  8604  00142E  51A5               	movf	(drawtext@i+1)& (0+255),w,b
  8605  001430  2039               	addwfc	drawtext@_text+1,w,c
  8606  001432  6EDA               	movwf	fsr2h,c
  8607  001434  0E20               	movlw	32
  8608  001436  18DE               	xorwf	postinc2,w,c
  8609  001438  B4D8               	btfsc	status,2,c
  8610  00143A  D02C               	goto	l4364
  8611  00143C  D002               	goto	l4356
  8612                           
  8613                           ; BSR set to: 0
  8614  00143E  D02A               	goto	l4364
  8615                           
  8616                           ; BSR set to: 0
  8617  001440  D000               	goto	l4356
  8618  001442                     l4356:
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8622  001442  C0A6  F02C         	movff	drawtext@cursor_y,drawChar@y
  8623  001446  0100               	movlb	0	; () banked
  8624  001448  51A4               	movf	drawtext@i& (0+255),w,b
  8625  00144A  2438               	addwf	drawtext@_text,w,c
  8626  00144C  6ED9               	movwf	fsr2l,c
  8627  00144E  0100               	movlb	0	; () banked
  8628  001450  51A5               	movf	(drawtext@i+1)& (0+255),w,b
  8629  001452  2039               	addwfc	drawtext@_text+1,w,c
  8630  001454  6EDA               	movwf	fsr2h,c
  8631  001456  50DF               	movf	indf2,w,c
  8632  001458  6E2D               	movwf	drawChar@c,c
  8633  00145A  C03A  F02E         	movff	drawtext@color,drawChar@color
  8634  00145E  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  8635  001462  C03C  F030         	movff	drawtext@bg,drawChar@bg
  8636  001466  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  8637  00146A  C03E  F032         	movff	drawtext@size,drawChar@size
  8638  00146E  0100               	movlb	0	; () banked
  8639  001470  51A7               	movf	drawtext@cursor_x& (0+255),w,b
  8640  001472  EC05  F008         	call	_drawChar
  8641                           
  8642                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  8643  001476  503E               	movf	drawtext@size,w,c
  8644  001478  0D06               	mullw	6
  8645  00147A  50F3               	movf	prodl,w,c
  8646  00147C  0100               	movlb	0	; () banked
  8647  00147E  25A7               	addwf	drawtext@cursor_x& (0+255),w,b
  8648  001480  0100               	movlb	0	; () banked
  8649  001482  6FA7               	movwf	drawtext@cursor_x& (0+255),b
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  8653  001484  0E80               	movlw	128
  8654  001486  0100               	movlb	0	; () banked
  8655  001488  65A7               	cpfsgt	drawtext@cursor_x& (0+255),b
  8656  00148A  D004               	goto	l4364
  8657                           
  8658                           ; BSR set to: 0
  8659  00148C  0E80               	movlw	128
  8660  00148E  0100               	movlb	0	; () banked
  8661  001490  6FA7               	movwf	drawtext@cursor_x& (0+255),b
  8662                           
  8663                           ; BSR set to: 0
  8664  001492  D000               	goto	l4364
  8665  001494                     l4364:
  8666                           
  8667                           ; BSR set to: 0
  8668  001494  0100               	movlb	0	; () banked
  8669  001496  4BA4               	infsnz	drawtext@i& (0+255),f,b
  8670  001498  2BA5               	incf	(drawtext@i+1)& (0+255),f,b
  8671  00149A  D000               	goto	l4366
  8672  00149C                     l4366:
  8673                           
  8674                           ; BSR set to: 0
  8675  00149C  0100               	movlb	0	; () banked
  8676  00149E  51A2               	movf	drawtext@textsize& (0+255),w,b
  8677  0014A0  0100               	movlb	0	; () banked
  8678  0014A2  5DA4               	subwf	drawtext@i& (0+255),w,b
  8679  0014A4  0100               	movlb	0	; () banked
  8680  0014A6  51A3               	movf	(drawtext@textsize+1)& (0+255),w,b
  8681  0014A8  0100               	movlb	0	; () banked
  8682  0014AA  59A5               	subwfb	(drawtext@i+1)& (0+255),w,b
  8683  0014AC  A0D8               	btfss	status,0,c
  8684  0014AE  D792               	goto	l4340
  8685                           
  8686                           ; BSR set to: 0
  8687                           
  8688                           ; BSR set to: 0
  8689  0014B0  0012               	return		;funcret
  8690  0014B2                     __end_of_drawtext:
  8691                           	opt stack 0
  8692                           tblptru	equ	0xFF8
  8693                           tblptrh	equ	0xFF7
  8694                           tblptrl	equ	0xFF6
  8695                           tablat	equ	0xFF5
  8696                           prodh	equ	0xFF4
  8697                           prodl	equ	0xFF3
  8698                           intcon	equ	0xFF2
  8699                           intcon2	equ	0xFF1
  8700                           intcon3	equ	0xFF0
  8701                           postinc0	equ	0xFEE
  8702                           wreg	equ	0xFE8
  8703                           postdec1	equ	0xFE5
  8704                           fsr1l	equ	0xFE1
  8705                           indf2	equ	0xFDF
  8706                           postinc2	equ	0xFDE
  8707                           fsr2h	equ	0xFDA
  8708                           fsr2l	equ	0xFD9
  8709                           status	equ	0xFD8
  8710                           
  8711 ;; *************** function _strlen *****************
  8712 ;; Defined at:
  8713 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;  s               2   14[COMRAM] PTR const unsigned char 
  8716 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8717 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8718 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8719 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  8722 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8723 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8724 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8725 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  2   14[COMRAM] unsigned int 
  8728 ;; Registers used:
  8729 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8735 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8739 ;;Total ram usage:        6 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:    2
  8742 ;; This function calls:
  8743 ;;		Nothing
  8744 ;; This function is called by:
  8745 ;;		_drawtext
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text41
  8750  002360                     __ptext41:
  8751                           	opt stack 0
  8752  002360                     _strlen:
  8753                           	opt stack 24
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;incstack = 0
  8757  002360  C00F  F013         	movff	strlen@s,strlen@cp
  8758  002364  C010  F014         	movff	strlen@s+1,strlen@cp+1
  8759  002368  D003               	goto	l4290
  8760  00236A                     l4288:
  8761  00236A  4A13               	infsnz	strlen@cp,f,c
  8762  00236C  2A14               	incf	strlen@cp+1,f,c
  8763  00236E  D000               	goto	l4290
  8764  002370                     l4290:
  8765  002370  C013  FFD9         	movff	strlen@cp,fsr2l
  8766  002374  C014  FFDA         	movff	strlen@cp+1,fsr2h
  8767  002378  50DF               	movf	indf2,w,c
  8768  00237A  A4D8               	btfss	status,2,c
  8769  00237C  D7F6               	goto	l4288
  8770  00237E  C00F  F011         	movff	strlen@s,??_strlen
  8771  002382  C010  F012         	movff	strlen@s+1,??_strlen+1
  8772  002386  1E11               	comf	??_strlen,f,c
  8773  002388  1E12               	comf	??_strlen+1,f,c
  8774  00238A  4A11               	infsnz	??_strlen,f,c
  8775  00238C  2A12               	incf	??_strlen+1,f,c
  8776  00238E  5013               	movf	strlen@cp,w,c
  8777  002390  2411               	addwf	??_strlen,w,c
  8778  002392  6E0F               	movwf	?_strlen,c
  8779  002394  5014               	movf	strlen@cp+1,w,c
  8780  002396  2012               	addwfc	??_strlen+1,w,c
  8781  002398  6E10               	movwf	?_strlen+1,c
  8782  00239A  D000               	goto	l1138
  8783  00239C                     l1138:
  8784  00239C  0012               	return		;funcret
  8785  00239E                     __end_of_strlen:
  8786                           	opt stack 0
  8787                           tblptru	equ	0xFF8
  8788                           tblptrh	equ	0xFF7
  8789                           tblptrl	equ	0xFF6
  8790                           tablat	equ	0xFF5
  8791                           prodh	equ	0xFF4
  8792                           prodl	equ	0xFF3
  8793                           intcon	equ	0xFF2
  8794                           intcon2	equ	0xFF1
  8795                           intcon3	equ	0xFF0
  8796                           postinc0	equ	0xFEE
  8797                           wreg	equ	0xFE8
  8798                           postdec1	equ	0xFE5
  8799                           fsr1l	equ	0xFE1
  8800                           indf2	equ	0xFDF
  8801                           postinc2	equ	0xFDE
  8802                           fsr2h	equ	0xFDA
  8803                           fsr2l	equ	0xFD9
  8804                           status	equ	0xFD8
  8805                           
  8806 ;; *************** function _drawChar *****************
  8807 ;; Defined at:
  8808 ;;		line 480 in file "ST7735_TFT.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;  x               1    wreg     unsigned char 
  8811 ;;  y               1   43[COMRAM] unsigned char 
  8812 ;;  c               1   44[COMRAM] unsigned char 
  8813 ;;  color           2   45[COMRAM] unsigned int 
  8814 ;;  bg              2   47[COMRAM] unsigned int 
  8815 ;;  size            1   49[COMRAM] unsigned char 
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;  x               1   51[COMRAM] unsigned char 
  8818 ;;  line            1   50[COMRAM] unsigned char 
  8819 ;;  i               1   53[COMRAM] unsigned char 
  8820 ;;  j               1   52[COMRAM] unsigned char 
  8821 ;; Return value:  Size  Location     Type
  8822 ;;		None               void
  8823 ;; Registers used:
  8824 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8830 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8831 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8833 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;Total ram usage:       11 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    7
  8837 ;; This function calls:
  8838 ;;		___wmul
  8839 ;;		_drawPixel
  8840 ;;		_fillRect
  8841 ;; This function is called by:
  8842 ;;		_drawtext
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           	psect	text42
  8847  00100A                     __ptext42:
  8848                           	opt stack 0
  8849  00100A                     _drawChar:
  8850                           	opt stack 19
  8851                           
  8852                           ;incstack = 0
  8853                           ;drawChar@x stored from wreg
  8854  00100A  6E34               	movwf	drawChar@x,c
  8855                           
  8856                           ;ST7735_TFT.c: 482: char i, j;
  8857                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  8858  00100C  0E80               	movlw	128
  8859  00100E  6034               	cpfslt	drawChar@x,c
  8860  001010  D0A6               	goto	l203
  8861  001012  0E9F               	movlw	159
  8862  001014  642C               	cpfsgt	drawChar@y,c
  8863  001016  D001               	goto	l4236
  8864                           
  8865                           ;ST7735_TFT.c: 484: return;
  8866  001018  D0A2               	goto	l203
  8867  00101A                     l4236:
  8868                           
  8869                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  8870  00101A  5032               	movf	drawChar@size,w,c
  8871  00101C  A4D8               	btfss	status,2,c
  8872  00101E  D003               	goto	l4240
  8873  001020  0E01               	movlw	1
  8874  001022  6E32               	movwf	drawChar@size,c
  8875  001024  D000               	goto	l4240
  8876  001026                     l4240:
  8877                           
  8878                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8879  001026  0E1F               	movlw	31
  8880  001028  642D               	cpfsgt	drawChar@c,c
  8881  00102A  D004               	goto	l4244
  8882  00102C  0E7E               	movlw	126
  8883  00102E  642D               	cpfsgt	drawChar@c,c
  8884  001030  D003               	goto	l205
  8885  001032  D000               	goto	l4244
  8886  001034                     l4244:
  8887                           
  8888                           ;ST7735_TFT.c: 487: c = '?';
  8889  001034  0E3F               	movlw	63
  8890  001036  6E2D               	movwf	drawChar@c,c
  8891  001038                     l205:
  8892                           
  8893                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8894  001038  0E00               	movlw	0
  8895  00103A  6E36               	movwf	drawChar@i,c
  8896  00103C                     l4246:
  8897  00103C  0E04               	movlw	4
  8898  00103E  6436               	cpfsgt	drawChar@i,c
  8899  001040  D001               	goto	l4250
  8900  001042  D08D               	goto	l203
  8901  001044                     l4250:
  8902                           
  8903                           ;ST7735_TFT.c: 489: unsigned char line;
  8904                           ;ST7735_TFT.c: 490: if(c < 'S')
  8905  001044  0E53               	movlw	83
  8906  001046  602D               	cpfslt	drawChar@c,c
  8907  001048  D015               	goto	l4254
  8908                           
  8909                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8910  00104A  0EE0               	movlw	224
  8911  00104C  242D               	addwf	drawChar@c,w,c
  8912  00104E  6E0F               	movwf	___wmul@multiplier,c
  8913  001050  6A10               	clrf	___wmul@multiplier+1,c
  8914  001052  0EFF               	movlw	255
  8915  001054  2210               	addwfc	___wmul@multiplier+1,f,c
  8916  001056  0E00               	movlw	0
  8917  001058  6E12               	movwf	___wmul@multiplicand+1,c
  8918  00105A  0E05               	movlw	5
  8919  00105C  6E11               	movwf	___wmul@multiplicand,c
  8920  00105E  EC4F  F012         	call	___wmul	;wreg free
  8921  001062  5036               	movf	drawChar@i,w,c
  8922  001064  260F               	addwf	?___wmul,f,c
  8923  001066  0E00               	movlw	0
  8924  001068  2210               	addwfc	?___wmul+1,f,c
  8925  00106A  0EBB               	movlw	low _font
  8926  00106C  240F               	addwf	?___wmul,w,c
  8927  00106E  6EF6               	movwf	tblptrl,c
  8928  001070  0EFD               	movlw	high _font
  8929  001072  D014               	goto	L17
  8930  001074                     l4254:
  8931                           
  8932                           ;ST7735_TFT.c: 492: else
  8933                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8934  001074  0EAD               	movlw	173
  8935  001076  242D               	addwf	drawChar@c,w,c
  8936  001078  6E0F               	movwf	___wmul@multiplier,c
  8937  00107A  6A10               	clrf	___wmul@multiplier+1,c
  8938  00107C  0EFF               	movlw	255
  8939  00107E  2210               	addwfc	___wmul@multiplier+1,f,c
  8940  001080  0E00               	movlw	0
  8941  001082  6E12               	movwf	___wmul@multiplicand+1,c
  8942  001084  0E05               	movlw	5
  8943  001086  6E11               	movwf	___wmul@multiplicand,c
  8944  001088  EC4F  F012         	call	___wmul	;wreg free
  8945  00108C  5036               	movf	drawChar@i,w,c
  8946  00108E  260F               	addwf	?___wmul,f,c
  8947  001090  0E00               	movlw	0
  8948  001092  2210               	addwfc	?___wmul+1,f,c
  8949  001094  0EBA               	movlw	low _font2
  8950  001096  240F               	addwf	?___wmul,w,c
  8951  001098  6EF6               	movwf	tblptrl,c
  8952  00109A  0EFE               	movlw	high _font2
  8953  00109C                     L17:
  8954  00109C  2010               	addwfc	?___wmul+1,w,c
  8955  00109E  6EF7               	movwf	tblptrh,c
  8956  0010A0                     	if	0	;There are less than 3 active tblptr bytes
  8957  0010A0                     	endif
  8958  0010A0  0008               	tblrd		*
  8959  0010A2  CFF5 F033          	movff	tablat,drawChar@line
  8960  0010A6  D000               	goto	l4256
  8961  0010A8                     l4256:
  8962                           
  8963                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8964  0010A8  0E00               	movlw	0
  8965  0010AA  6E35               	movwf	drawChar@j,c
  8966  0010AC                     l4258:
  8967  0010AC  0E06               	movlw	6
  8968  0010AE  6435               	cpfsgt	drawChar@j,c
  8969  0010B0  D001               	goto	l212
  8970  0010B2  D053               	goto	l4282
  8971  0010B4                     l212:
  8972                           
  8973                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8974  0010B4  A033               	btfss	drawChar@line,0,c
  8975  0010B6  D023               	goto	l4268
  8976                           
  8977                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8978  0010B8  0432               	decf	drawChar@size,w,c
  8979  0010BA  A4D8               	btfss	status,2,c
  8980  0010BC  D00C               	goto	l4266
  8981  0010BE  502C               	movf	drawChar@y,w,c
  8982  0010C0  2435               	addwf	drawChar@j,w,c
  8983  0010C2  6E16               	movwf	drawPixel@y,c
  8984  0010C4  C02E  F017         	movff	drawChar@color,drawPixel@color
  8985  0010C8  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  8986  0010CC  5034               	movf	drawChar@x,w,c
  8987  0010CE  2436               	addwf	drawChar@i,w,c
  8988  0010D0  EC22  F012         	call	_drawPixel
  8989  0010D4  D03E               	goto	l4276
  8990  0010D6                     l4266:
  8991                           
  8992                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8993  0010D6  5035               	movf	drawChar@j,w,c
  8994  0010D8  0232               	mulwf	drawChar@size,c
  8995  0010DA  50F3               	movf	prodl,w,c
  8996  0010DC  242C               	addwf	drawChar@y,w,c
  8997  0010DE  6E21               	movwf	fillRect@y,c
  8998  0010E0  C032  F022         	movff	drawChar@size,fillRect@w
  8999  0010E4  C032  F023         	movff	drawChar@size,fillRect@h
  9000  0010E8  C02E  F024         	movff	drawChar@color,fillRect@color
  9001  0010EC  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  9002  0010F0  5036               	movf	drawChar@i,w,c
  9003  0010F2  0232               	mulwf	drawChar@size,c
  9004  0010F4  50F3               	movf	prodl,w,c
  9005  0010F6  2434               	addwf	drawChar@x,w,c
  9006  0010F8  ECBA  F010         	call	_fillRect
  9007                           
  9008                           ;ST7735_TFT.c: 498: }
  9009  0010FC  D02A               	goto	l4276
  9010  0010FE                     l4268:
  9011                           
  9012                           ;ST7735_TFT.c: 499: else if(bg != color) {
  9013  0010FE  502E               	movf	drawChar@color,w,c
  9014  001100  1830               	xorwf	drawChar@bg,w,c
  9015  001102  E104               	bnz	u2880
  9016  001104  502F               	movf	drawChar@color+1,w,c
  9017  001106  1831               	xorwf	drawChar@bg+1,w,c
  9018  001108  B4D8               	btfsc	status,2,c
  9019  00110A  D023               	goto	l4276
  9020  00110C                     u2880:
  9021                           
  9022                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  9023  00110C  0432               	decf	drawChar@size,w,c
  9024  00110E  A4D8               	btfss	status,2,c
  9025  001110  D00C               	goto	l4274
  9026  001112  502C               	movf	drawChar@y,w,c
  9027  001114  2435               	addwf	drawChar@j,w,c
  9028  001116  6E16               	movwf	drawPixel@y,c
  9029  001118  C030  F017         	movff	drawChar@bg,drawPixel@color
  9030  00111C  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  9031  001120  5034               	movf	drawChar@x,w,c
  9032  001122  2436               	addwf	drawChar@i,w,c
  9033  001124  EC22  F012         	call	_drawPixel
  9034  001128  D014               	goto	l4276
  9035  00112A                     l4274:
  9036                           
  9037                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  9038  00112A  5035               	movf	drawChar@j,w,c
  9039  00112C  0232               	mulwf	drawChar@size,c
  9040  00112E  50F3               	movf	prodl,w,c
  9041  001130  242C               	addwf	drawChar@y,w,c
  9042  001132  6E21               	movwf	fillRect@y,c
  9043  001134  C032  F022         	movff	drawChar@size,fillRect@w
  9044  001138  C032  F023         	movff	drawChar@size,fillRect@h
  9045  00113C  C030  F024         	movff	drawChar@bg,fillRect@color
  9046  001140  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  9047  001144  5036               	movf	drawChar@i,w,c
  9048  001146  0232               	mulwf	drawChar@size,c
  9049  001148  50F3               	movf	prodl,w,c
  9050  00114A  2434               	addwf	drawChar@x,w,c
  9051  00114C  ECBA  F010         	call	_fillRect
  9052  001150  D000               	goto	l4276
  9053  001152                     l4276:
  9054  001152  2A35               	incf	drawChar@j,f,c
  9055  001154  90D8               	bcf	status,0,c
  9056  001156  3233               	rrcf	drawChar@line,f,c
  9057  001158  D7A9               	goto	l4258
  9058  00115A                     l4282:
  9059  00115A  2A36               	incf	drawChar@i,f,c
  9060  00115C  D76F               	goto	l4246
  9061  00115E                     l203:
  9062  00115E  0012               	return		;funcret
  9063  001160                     __end_of_drawChar:
  9064                           	opt stack 0
  9065                           tblptru	equ	0xFF8
  9066                           tblptrh	equ	0xFF7
  9067                           tblptrl	equ	0xFF6
  9068                           tablat	equ	0xFF5
  9069                           prodh	equ	0xFF4
  9070                           prodl	equ	0xFF3
  9071                           intcon	equ	0xFF2
  9072                           intcon2	equ	0xFF1
  9073                           intcon3	equ	0xFF0
  9074                           postinc0	equ	0xFEE
  9075                           wreg	equ	0xFE8
  9076                           postdec1	equ	0xFE5
  9077                           fsr1l	equ	0xFE1
  9078                           indf2	equ	0xFDF
  9079                           postinc2	equ	0xFDE
  9080                           fsr2h	equ	0xFDA
  9081                           fsr2l	equ	0xFD9
  9082                           status	equ	0xFD8
  9083                           
  9084 ;; *************** function _fillRect *****************
  9085 ;; Defined at:
  9086 ;;		line 470 in file "ST7735_TFT.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  x               1    wreg     unsigned char 
  9089 ;;  y               1   32[COMRAM] unsigned char 
  9090 ;;  w               1   33[COMRAM] unsigned char 
  9091 ;;  h               1   34[COMRAM] unsigned char 
  9092 ;;  color           2   35[COMRAM] unsigned int 
  9093 ;; Auto vars:     Size  Location     Type
  9094 ;;  x               1   40[COMRAM] unsigned char 
  9095 ;;  i               2   41[COMRAM] int 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;		None               void
  9098 ;; Registers used:
  9099 ;;		wreg, status,2, status,0, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9105 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;Total ram usage:       11 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    6
  9112 ;; This function calls:
  9113 ;;		_drawFastVLine
  9114 ;; This function is called by:
  9115 ;;		_drawChar
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           	psect	text43
  9120  002174                     __ptext43:
  9121                           	opt stack 0
  9122  002174                     _fillRect:
  9123                           	opt stack 19
  9124                           
  9125                           ;incstack = 0
  9126                           ;fillRect@x stored from wreg
  9127  002174  6E29               	movwf	fillRect@x,c
  9128                           
  9129                           ;ST7735_TFT.c: 472: signed int i;
  9130                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  9131  002176  C029  F02A         	movff	fillRect@x,fillRect@i
  9132  00217A  6A2B               	clrf	fillRect@i+1,c
  9133  00217C  D00E               	goto	l4224
  9134  00217E                     l4220:
  9135                           
  9136                           ;ST7735_TFT.c: 475: {
  9137                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  9138  00217E  C021  F016         	movff	fillRect@y,drawFastVLine@y
  9139  002182  C023  F017         	movff	fillRect@h,drawFastVLine@h
  9140  002186  C024  F018         	movff	fillRect@color,drawFastVLine@color
  9141  00218A  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  9142  00218E  502A               	movf	fillRect@i,w,c
  9143  002190  EC6F  F00E         	call	_drawFastVLine
  9144  002194  4A2A               	infsnz	fillRect@i,f,c
  9145  002196  2A2B               	incf	fillRect@i+1,f,c
  9146  002198  D000               	goto	l4224
  9147  00219A                     l4224:
  9148  00219A  5022               	movf	fillRect@w,w,c
  9149  00219C  C029  F026         	movff	fillRect@x,??_fillRect
  9150  0021A0  6A27               	clrf	(??_fillRect+1)& (0+255),c
  9151  0021A2  2626               	addwf	??_fillRect,f,c
  9152  0021A4  0E00               	movlw	0
  9153  0021A6  2227               	addwfc	??_fillRect+1,f,c
  9154  0021A8  5026               	movf	??_fillRect,w,c
  9155  0021AA  5C2A               	subwf	fillRect@i,w,c
  9156  0021AC  502B               	movf	fillRect@i+1,w,c
  9157  0021AE  0A80               	xorlw	128
  9158  0021B0  6E28               	movwf	(??_fillRect+2)& (0+255),c
  9159  0021B2  5027               	movf	??_fillRect+1,w,c
  9160  0021B4  0A80               	xorlw	128
  9161  0021B6  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  9162  0021B8  A0D8               	btfss	status,0,c
  9163  0021BA  D7E1               	goto	l4220
  9164  0021BC  0012               	return		;funcret
  9165  0021BE                     __end_of_fillRect:
  9166                           	opt stack 0
  9167                           tblptru	equ	0xFF8
  9168                           tblptrh	equ	0xFF7
  9169                           tblptrl	equ	0xFF6
  9170                           tablat	equ	0xFF5
  9171                           prodh	equ	0xFF4
  9172                           prodl	equ	0xFF3
  9173                           intcon	equ	0xFF2
  9174                           intcon2	equ	0xFF1
  9175                           intcon3	equ	0xFF0
  9176                           postinc0	equ	0xFEE
  9177                           wreg	equ	0xFE8
  9178                           postdec1	equ	0xFE5
  9179                           fsr1l	equ	0xFE1
  9180                           indf2	equ	0xFDF
  9181                           postinc2	equ	0xFDE
  9182                           fsr2h	equ	0xFDA
  9183                           fsr2l	equ	0xFD9
  9184                           status	equ	0xFD8
  9185                           
  9186 ;; *************** function _drawFastVLine *****************
  9187 ;; Defined at:
  9188 ;;		line 449 in file "ST7735_TFT.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;  x               1    wreg     unsigned char 
  9191 ;;  y               1   21[COMRAM] unsigned char 
  9192 ;;  h               1   22[COMRAM] unsigned char 
  9193 ;;  color           2   23[COMRAM] unsigned int 
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;  x               1   31[COMRAM] unsigned char 
  9196 ;;  lo              1   30[COMRAM] unsigned char 
  9197 ;;  hi              1   29[COMRAM] unsigned char 
  9198 ;; Return value:  Size  Location     Type
  9199 ;;		None               void
  9200 ;; Registers used:
  9201 ;;		wreg, status,2, status,0, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9209 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;Total ram usage:       11 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    5
  9214 ;; This function calls:
  9215 ;;		_setAddrWindow
  9216 ;;		_spiwrite
  9217 ;; This function is called by:
  9218 ;;		_fillRect
  9219 ;;		_fillCircleHelper
  9220 ;;		_fillCircle
  9221 ;;		_drawRect
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           	psect	text44
  9226  001CDE                     __ptext44:
  9227                           	opt stack 0
  9228  001CDE                     _drawFastVLine:
  9229                           	opt stack 19
  9230                           
  9231                           ;incstack = 0
  9232                           ;drawFastVLine@x stored from wreg
  9233  001CDE  6E20               	movwf	drawFastVLine@x,c
  9234                           
  9235                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  9236                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  9237  001CE0  0E80               	movlw	128
  9238  001CE2  6020               	cpfslt	drawFastVLine@x,c
  9239  001CE4  D03F               	goto	l187
  9240  001CE6  0E9F               	movlw	159
  9241  001CE8  6416               	cpfsgt	drawFastVLine@y,c
  9242  001CEA  D001               	goto	l4190
  9243                           
  9244                           ;ST7735_TFT.c: 453: return;
  9245  001CEC  D03B               	goto	l187
  9246  001CEE                     l4190:
  9247                           
  9248                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  9249  001CEE  0EFF               	movlw	255
  9250  001CF0  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9251  001CF2  0EFF               	movlw	255
  9252  001CF4  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  9253  001CF6  5017               	movf	drawFastVLine@h,w,c
  9254  001CF8  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  9255  001CFC  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  9256  001CFE  261C               	addwf	??_drawFastVLine+2,f,c
  9257  001D00  0E00               	movlw	0
  9258  001D02  221D               	addwfc	??_drawFastVLine+3,f,c
  9259  001D04  501A               	movf	??_drawFastVLine,w,c
  9260  001D06  261C               	addwf	??_drawFastVLine+2,f,c
  9261  001D08  501B               	movf	??_drawFastVLine+1,w,c
  9262  001D0A  221D               	addwfc	??_drawFastVLine+3,f,c
  9263  001D0C  BE1D               	btfsc	??_drawFastVLine+3,7,c
  9264  001D0E  D00B               	goto	l4194
  9265  001D10  501D               	movf	??_drawFastVLine+3,w,c
  9266  001D12  E104               	bnz	u2730
  9267  001D14  0EA0               	movlw	160
  9268  001D16  5C1C               	subwf	??_drawFastVLine+2,w,c
  9269  001D18  A0D8               	btfss	status,0,c
  9270  001D1A  D005               	goto	l4194
  9271  001D1C                     u2730:
  9272                           
  9273                           ;ST7735_TFT.c: 455: h = 160 - y;
  9274  001D1C  5016               	movf	drawFastVLine@y,w,c
  9275  001D1E  0800               	sublw	0
  9276  001D20  0FA0               	addlw	160
  9277  001D22  6E17               	movwf	drawFastVLine@h,c
  9278  001D24  D000               	goto	l4194
  9279  001D26                     l4194:
  9280                           
  9281                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  9282  001D26  5019               	movf	drawFastVLine@color+1,w,c
  9283  001D28  6E1E               	movwf	drawFastVLine@hi,c
  9284  001D2A  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  9285                           
  9286                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  9287  001D2E  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  9288  001D32  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  9289  001D36  5016               	movf	drawFastVLine@y,w,c
  9290  001D38  2417               	addwf	drawFastVLine@h,w,c
  9291  001D3A  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9292  001D3C  041A               	decf	??_drawFastVLine,w,c
  9293  001D3E  6E14               	movwf	setAddrWindow@y1,c
  9294  001D40  5020               	movf	drawFastVLine@x,w,c
  9295  001D42  EC93  F010         	call	_setAddrWindow
  9296                           
  9297                           ;ST7735_TFT.c: 458: PORTDbits.RD0 = 1;
  9298  001D46  8083               	bsf	3971,0,c	;volatile
  9299                           
  9300                           ;ST7735_TFT.c: 459: PORTDbits.RD1 = 0;
  9301  001D48  9283               	bcf	3971,1,c	;volatile
  9302                           
  9303                           ;ST7735_TFT.c: 461: while (h--) {
  9304  001D4A  D007               	goto	l4206
  9305  001D4C                     l4204:
  9306                           
  9307                           ;ST7735_TFT.c: 462: spiwrite(hi);
  9308  001D4C  501E               	movf	drawFastVLine@hi,w,c
  9309  001D4E  ECD1  F012         	call	_spiwrite
  9310                           
  9311                           ;ST7735_TFT.c: 463: spiwrite(lo);
  9312  001D52  501F               	movf	drawFastVLine@lo,w,c
  9313  001D54  ECD1  F012         	call	_spiwrite
  9314  001D58  D000               	goto	l4206
  9315  001D5A                     l4206:
  9316  001D5A  0617               	decf	drawFastVLine@h,f,c
  9317  001D5C  2817               	incf	drawFastVLine@h,w,c
  9318  001D5E  A4D8               	btfss	status,2,c
  9319  001D60  D7F5               	goto	l4204
  9320                           
  9321                           ;ST7735_TFT.c: 464: }
  9322                           ;ST7735_TFT.c: 465: PORTDbits.RD1 = 1;
  9323  001D62  8283               	bsf	3971,1,c	;volatile
  9324  001D64                     l187:
  9325  001D64  0012               	return		;funcret
  9326  001D66                     __end_of_drawFastVLine:
  9327                           	opt stack 0
  9328                           tblptru	equ	0xFF8
  9329                           tblptrh	equ	0xFF7
  9330                           tblptrl	equ	0xFF6
  9331                           tablat	equ	0xFF5
  9332                           prodh	equ	0xFF4
  9333                           prodl	equ	0xFF3
  9334                           intcon	equ	0xFF2
  9335                           intcon2	equ	0xFF1
  9336                           intcon3	equ	0xFF0
  9337                           postinc0	equ	0xFEE
  9338                           wreg	equ	0xFE8
  9339                           postdec1	equ	0xFE5
  9340                           fsr1l	equ	0xFE1
  9341                           indf2	equ	0xFDF
  9342                           postinc2	equ	0xFDE
  9343                           fsr2h	equ	0xFDA
  9344                           fsr2l	equ	0xFD9
  9345                           status	equ	0xFD8
  9346                           
  9347 ;; *************** function _drawPixel *****************
  9348 ;; Defined at:
  9349 ;;		line 440 in file "ST7735_TFT.c"
  9350 ;; Parameters:    Size  Location     Type
  9351 ;;  x               1    wreg     unsigned char 
  9352 ;;  y               1   21[COMRAM] unsigned char 
  9353 ;;  color           2   22[COMRAM] unsigned int 
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;  x               1   24[COMRAM] unsigned char 
  9356 ;; Return value:  Size  Location     Type
  9357 ;;		None               void
  9358 ;; Registers used:
  9359 ;;		wreg, status,2, status,0, cstack
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9365 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;Total ram usage:        4 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    5
  9372 ;; This function calls:
  9373 ;;		_setAddrWindow
  9374 ;;		_write_data
  9375 ;; This function is called by:
  9376 ;;		_drawChar
  9377 ;;		_drawCircle
  9378 ;;		_drawCircleHelper
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           	psect	text45
  9383  002444                     __ptext45:
  9384                           	opt stack 0
  9385  002444                     _drawPixel:
  9386                           	opt stack 20
  9387                           
  9388                           ;incstack = 0
  9389                           ;drawPixel@x stored from wreg
  9390  002444  6E19               	movwf	drawPixel@x,c
  9391                           
  9392                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  9393  002446  0E80               	movlw	128
  9394  002448  6019               	cpfslt	drawPixel@x,c
  9395  00244A  D013               	goto	l181
  9396  00244C  0E9F               	movlw	159
  9397  00244E  6416               	cpfsgt	drawPixel@y,c
  9398  002450  D001               	goto	l4212
  9399                           
  9400                           ;ST7735_TFT.c: 443: return;
  9401  002452  D00F               	goto	l181
  9402  002454                     l4212:
  9403                           
  9404                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  9405  002454  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  9406  002458  2819               	incf	drawPixel@x,w,c
  9407  00245A  6E13               	movwf	setAddrWindow@x1,c
  9408  00245C  2816               	incf	drawPixel@y,w,c
  9409  00245E  6E14               	movwf	setAddrWindow@y1,c
  9410  002460  5019               	movf	drawPixel@x,w,c
  9411  002462  EC93  F010         	call	_setAddrWindow
  9412                           
  9413                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  9414  002466  5018               	movf	drawPixel@color+1,w,c
  9415  002468  ECFF  F012         	call	_write_data
  9416                           
  9417                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  9418  00246C  5017               	movf	drawPixel@color,w,c
  9419  00246E  ECFF  F012         	call	_write_data
  9420  002472                     l181:
  9421  002472  0012               	return		;funcret
  9422  002474                     __end_of_drawPixel:
  9423                           	opt stack 0
  9424                           tblptru	equ	0xFF8
  9425                           tblptrh	equ	0xFF7
  9426                           tblptrl	equ	0xFF6
  9427                           tablat	equ	0xFF5
  9428                           prodh	equ	0xFF4
  9429                           prodl	equ	0xFF3
  9430                           intcon	equ	0xFF2
  9431                           intcon2	equ	0xFF1
  9432                           intcon3	equ	0xFF0
  9433                           postinc0	equ	0xFEE
  9434                           wreg	equ	0xFE8
  9435                           postdec1	equ	0xFE5
  9436                           fsr1l	equ	0xFE1
  9437                           indf2	equ	0xFDF
  9438                           postinc2	equ	0xFDE
  9439                           fsr2h	equ	0xFDA
  9440                           fsr2l	equ	0xFD9
  9441                           status	equ	0xFD8
  9442                           
  9443 ;; *************** function _setAddrWindow *****************
  9444 ;; Defined at:
  9445 ;;		line 425 in file "ST7735_TFT.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;  x0              1    wreg     unsigned char 
  9448 ;;  y0              1   17[COMRAM] unsigned char 
  9449 ;;  x1              1   18[COMRAM] unsigned char 
  9450 ;;  y1              1   19[COMRAM] unsigned char 
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  x0              1   20[COMRAM] unsigned char 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;		None               void
  9455 ;; Registers used:
  9456 ;;		wreg, status,2, status,0, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9462 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;Total ram usage:        4 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    4
  9469 ;; This function calls:
  9470 ;;		_write_command
  9471 ;;		_write_data
  9472 ;; This function is called by:
  9473 ;;		_drawPixel
  9474 ;;		_drawFastVLine
  9475 ;;		_fillRectangle
  9476 ;;		_drawFastHLine
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           	psect	text46
  9481  002126                     __ptext46:
  9482                           	opt stack 0
  9483  002126                     _setAddrWindow:
  9484                           	opt stack 19
  9485                           
  9486                           ;incstack = 0
  9487                           ;setAddrWindow@x0 stored from wreg
  9488  002126  6E15               	movwf	setAddrWindow@x0,c
  9489                           
  9490                           ;ST7735_TFT.c: 427: write_command(0x2A);
  9491  002128  0E2A               	movlw	42
  9492  00212A  EC07  F013         	call	_write_command
  9493                           
  9494                           ;ST7735_TFT.c: 428: write_data(0);
  9495  00212E  0E00               	movlw	0
  9496  002130  ECFF  F012         	call	_write_data
  9497                           
  9498                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  9499  002134  5015               	movf	setAddrWindow@x0,w,c
  9500  002136  246E               	addwf	_colstart,w,c
  9501  002138  ECFF  F012         	call	_write_data
  9502                           
  9503                           ;ST7735_TFT.c: 430: write_data(0);
  9504  00213C  0E00               	movlw	0
  9505  00213E  ECFF  F012         	call	_write_data
  9506                           
  9507                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  9508  002142  5013               	movf	setAddrWindow@x1,w,c
  9509  002144  246E               	addwf	_colstart,w,c
  9510  002146  ECFF  F012         	call	_write_data
  9511                           
  9512                           ;ST7735_TFT.c: 432: write_command(0x2B);
  9513  00214A  0E2B               	movlw	43
  9514  00214C  EC07  F013         	call	_write_command
  9515                           
  9516                           ;ST7735_TFT.c: 433: write_data(0);
  9517  002150  0E00               	movlw	0
  9518  002152  ECFF  F012         	call	_write_data
  9519                           
  9520                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  9521  002156  5012               	movf	setAddrWindow@y0,w,c
  9522  002158  2471               	addwf	_rowstart,w,c
  9523  00215A  ECFF  F012         	call	_write_data
  9524                           
  9525                           ;ST7735_TFT.c: 435: write_data(0);
  9526  00215E  0E00               	movlw	0
  9527  002160  ECFF  F012         	call	_write_data
  9528                           
  9529                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  9530  002164  5014               	movf	setAddrWindow@y1,w,c
  9531  002166  2471               	addwf	_rowstart,w,c
  9532  002168  ECFF  F012         	call	_write_data
  9533                           
  9534                           ;ST7735_TFT.c: 437: write_command(0x2C);
  9535  00216C  0E2C               	movlw	44
  9536  00216E  EC07  F013         	call	_write_command
  9537  002172  0012               	return		;funcret
  9538  002174                     __end_of_setAddrWindow:
  9539                           	opt stack 0
  9540                           tblptru	equ	0xFF8
  9541                           tblptrh	equ	0xFF7
  9542                           tblptrl	equ	0xFF6
  9543                           tablat	equ	0xFF5
  9544                           prodh	equ	0xFF4
  9545                           prodl	equ	0xFF3
  9546                           intcon	equ	0xFF2
  9547                           intcon2	equ	0xFF1
  9548                           intcon3	equ	0xFF0
  9549                           postinc0	equ	0xFEE
  9550                           wreg	equ	0xFE8
  9551                           postdec1	equ	0xFE5
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           fsr2h	equ	0xFDA
  9556                           fsr2l	equ	0xFD9
  9557                           status	equ	0xFD8
  9558                           
  9559 ;; *************** function _write_data *****************
  9560 ;; Defined at:
  9561 ;;		line 242 in file "ST7735_TFT.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;  data_           1    wreg     unsigned char 
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;  data_           1   16[COMRAM] unsigned char 
  9566 ;; Return value:  Size  Location     Type
  9567 ;;		None               void
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, cstack
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;Total ram usage:        1 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    3
  9582 ;; This function calls:
  9583 ;;		_spiwrite
  9584 ;; This function is called by:
  9585 ;;		_Rcmd1
  9586 ;;		_Rcmd2red
  9587 ;;		_Rcmd3
  9588 ;;		_setAddrWindow
  9589 ;;		_drawPixel
  9590 ;;		_TFT_GreenTab_Initialize
  9591 ;;		_Bcmd
  9592 ;;		_setScrollDefinition
  9593 ;;		_Rcmd2green
  9594 ;;		_VerticalScroll
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text47
  9599  0025FE                     __ptext47:
  9600                           	opt stack 0
  9601  0025FE                     _write_data:
  9602                           	opt stack 19
  9603                           
  9604                           ;incstack = 0
  9605                           ;write_data@data_ stored from wreg
  9606  0025FE  6E11               	movwf	write_data@data_,c
  9607                           
  9608                           ;ST7735_TFT.c: 244: PORTDbits.RD1 = 0;
  9609  002600  9283               	bcf	3971,1,c	;volatile
  9610                           
  9611                           ;ST7735_TFT.c: 245: PORTDbits.RD0 = 1;
  9612  002602  8083               	bsf	3971,0,c	;volatile
  9613                           
  9614                           ;ST7735_TFT.c: 246: spiwrite(data_);
  9615  002604  5011               	movf	write_data@data_,w,c
  9616  002606  ECD1  F012         	call	_spiwrite
  9617                           
  9618                           ;ST7735_TFT.c: 247: PORTDbits.RD1 = 1;
  9619  00260A  8283               	bsf	3971,1,c	;volatile
  9620  00260C  0012               	return		;funcret
  9621  00260E                     __end_of_write_data:
  9622                           	opt stack 0
  9623                           tblptru	equ	0xFF8
  9624                           tblptrh	equ	0xFF7
  9625                           tblptrl	equ	0xFF6
  9626                           tablat	equ	0xFF5
  9627                           prodh	equ	0xFF4
  9628                           prodl	equ	0xFF3
  9629                           intcon	equ	0xFF2
  9630                           intcon2	equ	0xFF1
  9631                           intcon3	equ	0xFF0
  9632                           postinc0	equ	0xFEE
  9633                           wreg	equ	0xFE8
  9634                           postdec1	equ	0xFE5
  9635                           fsr1l	equ	0xFE1
  9636                           indf2	equ	0xFDF
  9637                           postinc2	equ	0xFDE
  9638                           fsr2h	equ	0xFDA
  9639                           fsr2l	equ	0xFD9
  9640                           status	equ	0xFD8
  9641                           
  9642 ;; *************** function _write_command *****************
  9643 ;; Defined at:
  9644 ;;		line 231 in file "ST7735_TFT.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;  cmd_            1    wreg     unsigned char 
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  cmd_            1   16[COMRAM] unsigned char 
  9649 ;; Return value:  Size  Location     Type
  9650 ;;		None               void
  9651 ;; Registers used:
  9652 ;;		wreg, status,2, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;Total ram usage:        1 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    3
  9665 ;; This function calls:
  9666 ;;		_spiwrite
  9667 ;; This function is called by:
  9668 ;;		_Rcmd1
  9669 ;;		_Rcmd2red
  9670 ;;		_Rcmd3
  9671 ;;		_setAddrWindow
  9672 ;;		_TFT_GreenTab_Initialize
  9673 ;;		_Bcmd
  9674 ;;		_setScrollDefinition
  9675 ;;		_Rcmd2green
  9676 ;;		_VerticalScroll
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text48
  9681  00260E                     __ptext48:
  9682                           	opt stack 0
  9683  00260E                     _write_command:
  9684                           	opt stack 19
  9685                           
  9686                           ;incstack = 0
  9687                           ;write_command@cmd_ stored from wreg
  9688  00260E  6E11               	movwf	write_command@cmd_,c
  9689                           
  9690                           ;ST7735_TFT.c: 233: PORTDbits.RD1 = 0;
  9691  002610  9283               	bcf	3971,1,c	;volatile
  9692                           
  9693                           ;ST7735_TFT.c: 235: PORTDbits.RD0 = 0;
  9694  002612  9083               	bcf	3971,0,c	;volatile
  9695                           
  9696                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  9697  002614  5011               	movf	write_command@cmd_,w,c
  9698  002616  ECD1  F012         	call	_spiwrite
  9699                           
  9700                           ;ST7735_TFT.c: 238: PORTDbits.RD1 = 1;
  9701  00261A  8283               	bsf	3971,1,c	;volatile
  9702  00261C  0012               	return		;funcret
  9703  00261E                     __end_of_write_command:
  9704                           	opt stack 0
  9705                           tblptru	equ	0xFF8
  9706                           tblptrh	equ	0xFF7
  9707                           tblptrl	equ	0xFF6
  9708                           tablat	equ	0xFF5
  9709                           prodh	equ	0xFF4
  9710                           prodl	equ	0xFF3
  9711                           intcon	equ	0xFF2
  9712                           intcon2	equ	0xFF1
  9713                           intcon3	equ	0xFF0
  9714                           postinc0	equ	0xFEE
  9715                           wreg	equ	0xFE8
  9716                           postdec1	equ	0xFE5
  9717                           fsr1l	equ	0xFE1
  9718                           indf2	equ	0xFDF
  9719                           postinc2	equ	0xFDE
  9720                           fsr2h	equ	0xFDA
  9721                           fsr2l	equ	0xFD9
  9722                           status	equ	0xFD8
  9723                           
  9724 ;; *************** function _spiwrite *****************
  9725 ;; Defined at:
  9726 ;;		line 222 in file "ST7735_TFT.c"
  9727 ;; Parameters:    Size  Location     Type
  9728 ;;  spidata         1    wreg     unsigned char 
  9729 ;; Auto vars:     Size  Location     Type
  9730 ;;  spidata         1   15[COMRAM] unsigned char 
  9731 ;;  x               1   14[COMRAM] unsigned char 
  9732 ;; Return value:  Size  Location     Type
  9733 ;;		None               void
  9734 ;; Registers used:
  9735 ;;		wreg
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9745 ;;Total ram usage:        2 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:    2
  9748 ;; This function calls:
  9749 ;;		Nothing
  9750 ;; This function is called by:
  9751 ;;		_write_command
  9752 ;;		_write_data
  9753 ;;		_drawFastVLine
  9754 ;;		_fillRectangle
  9755 ;;		_drawFastHLine
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           	psect	text49
  9760  0025A2                     __ptext49:
  9761                           	opt stack 0
  9762  0025A2                     _spiwrite:
  9763                           	opt stack 21
  9764                           
  9765                           ;incstack = 0
  9766                           ;spiwrite@spidata stored from wreg
  9767  0025A2  6E10               	movwf	spiwrite@spidata,c
  9768                           
  9769                           ;ST7735_TFT.c: 224: char x;
  9770                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  9771  0025A4  969E               	bcf	3998,3,c	;volatile
  9772                           
  9773                           ;ST7735_TFT.c: 226: x = SSPBUF;
  9774  0025A6  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  9775                           
  9776                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  9777  0025AA  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9778                           
  9779                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  9780  0025AE  D000               	goto	l137
  9781  0025B0                     l137:
  9782  0025B0  A0C7               	btfss	4039,0,c	;volatile
  9783  0025B2  D7FE               	goto	l137
  9784  0025B4  0012               	return		;funcret
  9785  0025B6                     __end_of_spiwrite:
  9786                           	opt stack 0
  9787                           tblptru	equ	0xFF8
  9788                           tblptrh	equ	0xFF7
  9789                           tblptrl	equ	0xFF6
  9790                           tablat	equ	0xFF5
  9791                           prodh	equ	0xFF4
  9792                           prodl	equ	0xFF3
  9793                           intcon	equ	0xFF2
  9794                           intcon2	equ	0xFF1
  9795                           intcon3	equ	0xFF0
  9796                           postinc0	equ	0xFEE
  9797                           wreg	equ	0xFE8
  9798                           postdec1	equ	0xFE5
  9799                           fsr1l	equ	0xFE1
  9800                           indf2	equ	0xFDF
  9801                           postinc2	equ	0xFDE
  9802                           fsr2h	equ	0xFDA
  9803                           fsr2l	equ	0xFD9
  9804                           status	equ	0xFD8
  9805                           
  9806 ;; *************** function ___wmul *****************
  9807 ;; Defined at:
  9808 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;  multiplier      2   14[COMRAM] unsigned int 
  9811 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;  product         2   18[COMRAM] unsigned int 
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  2   14[COMRAM] unsigned int 
  9816 ;; Registers used:
  9817 ;;		wreg, status,2, status,0, prodl, prodh
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9823 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9827 ;;Total ram usage:        6 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; Hardware stack levels required when called:    2
  9830 ;; This function calls:
  9831 ;;		Nothing
  9832 ;; This function is called by:
  9833 ;;		_delay_ms
  9834 ;;		_drawChar
  9835 ;;		_main
  9836 ;;		_update_LCD_misc
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           	psect	text50
  9841  00249E                     __ptext50:
  9842                           	opt stack 0
  9843  00249E                     ___wmul:
  9844                           	opt stack 28
  9845                           
  9846                           ;incstack = 0
  9847  00249E  500F               	movf	___wmul@multiplier,w,c
  9848  0024A0  0211               	mulwf	___wmul@multiplicand,c
  9849  0024A2  CFF3 F013          	movff	prodl,___wmul@product
  9850  0024A6  CFF4 F014          	movff	prodh,___wmul@product+1
  9851  0024AA  500F               	movf	___wmul@multiplier,w,c
  9852  0024AC  0212               	mulwf	___wmul@multiplicand+1,c
  9853  0024AE  50F3               	movf	prodl,w,c
  9854  0024B0  2614               	addwf	___wmul@product+1,f,c
  9855  0024B2  5010               	movf	___wmul@multiplier+1,w,c
  9856  0024B4  0211               	mulwf	___wmul@multiplicand,c
  9857  0024B6  50F3               	movf	prodl,w,c
  9858  0024B8  2614               	addwf	___wmul@product+1,f,c
  9859  0024BA  C013  F00F         	movff	___wmul@product,?___wmul
  9860  0024BE  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9861  0024C2  D000               	goto	l581
  9862  0024C4                     l581:
  9863  0024C4  0012               	return		;funcret
  9864  0024C6                     __end_of___wmul:
  9865                           	opt stack 0
  9866                           tblptru	equ	0xFF8
  9867                           tblptrh	equ	0xFF7
  9868                           tblptrl	equ	0xFF6
  9869                           tablat	equ	0xFF5
  9870                           prodh	equ	0xFF4
  9871                           prodl	equ	0xFF3
  9872                           intcon	equ	0xFF2
  9873                           intcon2	equ	0xFF1
  9874                           intcon3	equ	0xFF0
  9875                           postinc0	equ	0xFEE
  9876                           wreg	equ	0xFE8
  9877                           postdec1	equ	0xFE5
  9878                           fsr1l	equ	0xFE1
  9879                           indf2	equ	0xFDF
  9880                           postinc2	equ	0xFDE
  9881                           fsr2h	equ	0xFDA
  9882                           fsr2l	equ	0xFD9
  9883                           status	equ	0xFD8
  9884                           
  9885 ;; *************** function ___awmod *****************
  9886 ;; Defined at:
  9887 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  dividend        2   14[COMRAM] int 
  9890 ;;  divisor         2   16[COMRAM] int 
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;  sign            1   19[COMRAM] unsigned char 
  9893 ;;  counter         1   18[COMRAM] unsigned char 
  9894 ;; Return value:  Size  Location     Type
  9895 ;;                  2   14[COMRAM] int 
  9896 ;; Registers used:
  9897 ;;		wreg, status,2, status,0
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9903 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9906 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9907 ;;Total ram usage:        6 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    2
  9910 ;; This function calls:
  9911 ;;		Nothing
  9912 ;; This function is called by:
  9913 ;;		_update_LCD_count
  9914 ;;		_update_LCD_PED_Count
  9915 ;; This function uses a non-reentrant model
  9916 ;;
  9917                           
  9918                           	psect	text51
  9919  001E6E                     __ptext51:
  9920                           	opt stack 0
  9921  001E6E                     ___awmod:
  9922                           	opt stack 25
  9923                           
  9924                           ;incstack = 0
  9925  001E6E  0E00               	movlw	0
  9926  001E70  6E14               	movwf	___awmod@sign,c
  9927  001E72  AE10               	btfss	___awmod@dividend+1,7,c
  9928  001E74  D007               	goto	l4682
  9929  001E76  6C0F               	negf	___awmod@dividend,c
  9930  001E78  1E10               	comf	___awmod@dividend+1,f,c
  9931  001E7A  B0D8               	btfsc	status,0,c
  9932  001E7C  2A10               	incf	___awmod@dividend+1,f,c
  9933  001E7E  0E01               	movlw	1
  9934  001E80  6E14               	movwf	___awmod@sign,c
  9935  001E82  D000               	goto	l4682
  9936  001E84                     l4682:
  9937  001E84  AE12               	btfss	___awmod@divisor+1,7,c
  9938  001E86  D005               	goto	l4686
  9939  001E88  6C11               	negf	___awmod@divisor,c
  9940  001E8A  1E12               	comf	___awmod@divisor+1,f,c
  9941  001E8C  B0D8               	btfsc	status,0,c
  9942  001E8E  2A12               	incf	___awmod@divisor+1,f,c
  9943  001E90  D000               	goto	l4686
  9944  001E92                     l4686:
  9945  001E92  5011               	movf	___awmod@divisor,w,c
  9946  001E94  1012               	iorwf	___awmod@divisor+1,w,c
  9947  001E96  B4D8               	btfsc	status,2,c
  9948  001E98  D01D               	goto	l4702
  9949  001E9A  0E01               	movlw	1
  9950  001E9C  6E13               	movwf	___awmod@counter,c
  9951  001E9E  D005               	goto	l4692
  9952  001EA0                     l4690:
  9953  001EA0  90D8               	bcf	status,0,c
  9954  001EA2  3611               	rlcf	___awmod@divisor,f,c
  9955  001EA4  3612               	rlcf	___awmod@divisor+1,f,c
  9956  001EA6  2A13               	incf	___awmod@counter,f,c
  9957  001EA8  D000               	goto	l4692
  9958  001EAA                     l4692:
  9959  001EAA  BE12               	btfsc	___awmod@divisor+1,7,c
  9960  001EAC  D002               	goto	l4694
  9961  001EAE  D7F8               	goto	l4690
  9962  001EB0  D000               	goto	l4694
  9963  001EB2                     l4694:
  9964  001EB2  5011               	movf	___awmod@divisor,w,c
  9965  001EB4  5C0F               	subwf	___awmod@dividend,w,c
  9966  001EB6  5012               	movf	___awmod@divisor+1,w,c
  9967  001EB8  5810               	subwfb	___awmod@dividend+1,w,c
  9968  001EBA  A0D8               	btfss	status,0,c
  9969  001EBC  D005               	goto	l4698
  9970  001EBE  5011               	movf	___awmod@divisor,w,c
  9971  001EC0  5E0F               	subwf	___awmod@dividend,f,c
  9972  001EC2  5012               	movf	___awmod@divisor+1,w,c
  9973  001EC4  5A10               	subwfb	___awmod@dividend+1,f,c
  9974  001EC6  D000               	goto	l4698
  9975  001EC8                     l4698:
  9976  001EC8  90D8               	bcf	status,0,c
  9977  001ECA  3212               	rrcf	___awmod@divisor+1,f,c
  9978  001ECC  3211               	rrcf	___awmod@divisor,f,c
  9979  001ECE  2E13               	decfsz	___awmod@counter,f,c
  9980  001ED0  D7F0               	goto	l4694
  9981  001ED2  D000               	goto	l4702
  9982  001ED4                     l4702:
  9983  001ED4  5014               	movf	___awmod@sign,w,c
  9984  001ED6  B4D8               	btfsc	status,2,c
  9985  001ED8  D005               	goto	l4706
  9986  001EDA  6C0F               	negf	___awmod@dividend,c
  9987  001EDC  1E10               	comf	___awmod@dividend+1,f,c
  9988  001EDE  B0D8               	btfsc	status,0,c
  9989  001EE0  2A10               	incf	___awmod@dividend+1,f,c
  9990  001EE2  D000               	goto	l4706
  9991  001EE4                     l4706:
  9992  001EE4  C00F  F00F         	movff	___awmod@dividend,?___awmod
  9993  001EE8  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  9994  001EEC  D000               	goto	l787
  9995  001EEE                     l787:
  9996  001EEE  0012               	return		;funcret
  9997  001EF0                     __end_of___awmod:
  9998                           	opt stack 0
  9999                           tblptru	equ	0xFF8
 10000                           tblptrh	equ	0xFF7
 10001                           tblptrl	equ	0xFF6
 10002                           tablat	equ	0xFF5
 10003                           prodh	equ	0xFF4
 10004                           prodl	equ	0xFF3
 10005                           intcon	equ	0xFF2
 10006                           intcon2	equ	0xFF1
 10007                           intcon3	equ	0xFF0
 10008                           postinc0	equ	0xFEE
 10009                           wreg	equ	0xFE8
 10010                           postdec1	equ	0xFE5
 10011                           fsr1l	equ	0xFE1
 10012                           indf2	equ	0xFDF
 10013                           postinc2	equ	0xFDE
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function ___awdiv *****************
 10019 ;; Defined at:
 10020 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;  dividend        2   14[COMRAM] int 
 10023 ;;  divisor         2   16[COMRAM] int 
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  quotient        2   20[COMRAM] int 
 10026 ;;  sign            1   19[COMRAM] unsigned char 
 10027 ;;  counter         1   18[COMRAM] unsigned char 
 10028 ;; Return value:  Size  Location     Type
 10029 ;;                  2   14[COMRAM] int 
 10030 ;; Registers used:
 10031 ;;		wreg, status,2, status,0
 10032 ;; Tracked objects:
 10033 ;;		On entry : 0/0
 10034 ;;		On exit  : 0/0
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10041 ;;Total ram usage:        8 bytes
 10042 ;; Hardware stack levels used:    1
 10043 ;; Hardware stack levels required when called:    2
 10044 ;; This function calls:
 10045 ;;		Nothing
 10046 ;; This function is called by:
 10047 ;;		_update_LCD_count
 10048 ;;		_update_LCD_PED_Count
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text52
 10053  001BC0                     __ptext52:
 10054                           	opt stack 0
 10055  001BC0                     ___awdiv:
 10056                           	opt stack 25
 10057                           
 10058                           ;incstack = 0
 10059  001BC0  0E00               	movlw	0
 10060  001BC2  6E14               	movwf	___awdiv@sign,c
 10061  001BC4  AE12               	btfss	___awdiv@divisor+1,7,c
 10062  001BC6  D007               	goto	l4638
 10063  001BC8  6C11               	negf	___awdiv@divisor,c
 10064  001BCA  1E12               	comf	___awdiv@divisor+1,f,c
 10065  001BCC  B0D8               	btfsc	status,0,c
 10066  001BCE  2A12               	incf	___awdiv@divisor+1,f,c
 10067  001BD0  0E01               	movlw	1
 10068  001BD2  6E14               	movwf	___awdiv@sign,c
 10069  001BD4  D000               	goto	l4638
 10070  001BD6                     l4638:
 10071  001BD6  AE10               	btfss	___awdiv@dividend+1,7,c
 10072  001BD8  D007               	goto	l4644
 10073  001BDA  6C0F               	negf	___awdiv@dividend,c
 10074  001BDC  1E10               	comf	___awdiv@dividend+1,f,c
 10075  001BDE  B0D8               	btfsc	status,0,c
 10076  001BE0  2A10               	incf	___awdiv@dividend+1,f,c
 10077  001BE2  0E01               	movlw	1
 10078  001BE4  1A14               	xorwf	___awdiv@sign,f,c
 10079  001BE6  D000               	goto	l4644
 10080  001BE8                     l4644:
 10081  001BE8  0E00               	movlw	0
 10082  001BEA  6E16               	movwf	___awdiv@quotient+1,c
 10083  001BEC  0E00               	movlw	0
 10084  001BEE  6E15               	movwf	___awdiv@quotient,c
 10085  001BF0  5011               	movf	___awdiv@divisor,w,c
 10086  001BF2  1012               	iorwf	___awdiv@divisor+1,w,c
 10087  001BF4  B4D8               	btfsc	status,2,c
 10088  001BF6  D021               	goto	l4666
 10089  001BF8  0E01               	movlw	1
 10090  001BFA  6E13               	movwf	___awdiv@counter,c
 10091  001BFC  D005               	goto	l4652
 10092  001BFE                     l4650:
 10093  001BFE  90D8               	bcf	status,0,c
 10094  001C00  3611               	rlcf	___awdiv@divisor,f,c
 10095  001C02  3612               	rlcf	___awdiv@divisor+1,f,c
 10096  001C04  2A13               	incf	___awdiv@counter,f,c
 10097  001C06  D000               	goto	l4652
 10098  001C08                     l4652:
 10099  001C08  BE12               	btfsc	___awdiv@divisor+1,7,c
 10100  001C0A  D002               	goto	l4654
 10101  001C0C  D7F8               	goto	l4650
 10102  001C0E  D000               	goto	l4654
 10103  001C10                     l4654:
 10104  001C10  90D8               	bcf	status,0,c
 10105  001C12  3615               	rlcf	___awdiv@quotient,f,c
 10106  001C14  3616               	rlcf	___awdiv@quotient+1,f,c
 10107  001C16  5011               	movf	___awdiv@divisor,w,c
 10108  001C18  5C0F               	subwf	___awdiv@dividend,w,c
 10109  001C1A  5012               	movf	___awdiv@divisor+1,w,c
 10110  001C1C  5810               	subwfb	___awdiv@dividend+1,w,c
 10111  001C1E  A0D8               	btfss	status,0,c
 10112  001C20  D006               	goto	l4662
 10113  001C22  5011               	movf	___awdiv@divisor,w,c
 10114  001C24  5E0F               	subwf	___awdiv@dividend,f,c
 10115  001C26  5012               	movf	___awdiv@divisor+1,w,c
 10116  001C28  5A10               	subwfb	___awdiv@dividend+1,f,c
 10117  001C2A  8015               	bsf	___awdiv@quotient,0,c
 10118  001C2C  D000               	goto	l4662
 10119  001C2E                     l4662:
 10120  001C2E  90D8               	bcf	status,0,c
 10121  001C30  3212               	rrcf	___awdiv@divisor+1,f,c
 10122  001C32  3211               	rrcf	___awdiv@divisor,f,c
 10123  001C34  2E13               	decfsz	___awdiv@counter,f,c
 10124  001C36  D7EC               	goto	l4654
 10125  001C38  D000               	goto	l4666
 10126  001C3A                     l4666:
 10127  001C3A  5014               	movf	___awdiv@sign,w,c
 10128  001C3C  B4D8               	btfsc	status,2,c
 10129  001C3E  D005               	goto	l4670
 10130  001C40  6C15               	negf	___awdiv@quotient,c
 10131  001C42  1E16               	comf	___awdiv@quotient+1,f,c
 10132  001C44  B0D8               	btfsc	status,0,c
 10133  001C46  2A16               	incf	___awdiv@quotient+1,f,c
 10134  001C48  D000               	goto	l4670
 10135  001C4A                     l4670:
 10136  001C4A  C015  F00F         	movff	___awdiv@quotient,?___awdiv
 10137  001C4E  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
 10138  001C52  D000               	goto	l774
 10139  001C54                     l774:
 10140  001C54  0012               	return		;funcret
 10141  001C56                     __end_of___awdiv:
 10142                           	opt stack 0
 10143                           tblptru	equ	0xFF8
 10144                           tblptrh	equ	0xFF7
 10145                           tblptrl	equ	0xFF6
 10146                           tablat	equ	0xFF5
 10147                           prodh	equ	0xFF4
 10148                           prodl	equ	0xFF3
 10149                           intcon	equ	0xFF2
 10150                           intcon2	equ	0xFF1
 10151                           intcon3	equ	0xFF0
 10152                           postinc0	equ	0xFEE
 10153                           wreg	equ	0xFE8
 10154                           postdec1	equ	0xFE5
 10155                           fsr1l	equ	0xFE1
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           fsr2h	equ	0xFDA
 10159                           fsr2l	equ	0xFD9
 10160                           status	equ	0xFD8
 10161                           
 10162 ;; *************** function _Wait_One_Second_With_Beep *****************
 10163 ;; Defined at:
 10164 ;;		line 605 in file "Lab9.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;		None
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;		None
 10169 ;; Return value:  Size  Location     Type
 10170 ;;		None               void
 10171 ;; Registers used:
 10172 ;;		wreg, status,2, cstack
 10173 ;; Tracked objects:
 10174 ;;		On entry : 0/0
 10175 ;;		On exit  : 0/0
 10176 ;;		Unchanged: 0/0
 10177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10182 ;;Total ram usage:        0 bytes
 10183 ;; Hardware stack levels used:    1
 10184 ;; Hardware stack levels required when called:    3
 10185 ;; This function calls:
 10186 ;;		_Activate_Buzzer
 10187 ;;		_Deactivate_Buzzer
 10188 ;;		_Wait_Half_Second
 10189 ;; This function is called by:
 10190 ;;		_PED_Control
 10191 ;; This function uses a non-reentrant model
 10192 ;;
 10193                           
 10194                           	psect	text53
 10195  002578                     __ptext53:
 10196                           	opt stack 0
 10197  002578                     _Wait_One_Second_With_Beep:
 10198                           	opt stack 25
 10199                           
 10200                           ;Lab9.c: 607: PORTDbits.RD7 = 1;
 10201                           
 10202                           ;incstack = 0
 10203  002578  8E83               	bsf	3971,7,c	;volatile
 10204                           
 10205                           ;Lab9.c: 608: Activate_Buzzer();
 10206  00257A  ECE4  F012         	call	_Activate_Buzzer	;wreg free
 10207                           
 10208                           ;Lab9.c: 609: Wait_Half_Second();
 10209  00257E  ECA4  F012         	call	_Wait_Half_Second	;wreg free
 10210                           
 10211                           ;Lab9.c: 610: PORTDbits.RD7 = 0;
 10212  002582  9E83               	bcf	3971,7,c	;volatile
 10213                           
 10214                           ;Lab9.c: 611: Deactivate_Buzzer();
 10215  002584  EC1B  F013         	call	_Deactivate_Buzzer	;wreg free
 10216                           
 10217                           ;Lab9.c: 612: Wait_Half_Second();
 10218  002588  ECA4  F012         	call	_Wait_Half_Second	;wreg free
 10219  00258C  0012               	return		;funcret
 10220  00258E                     __end_of_Wait_One_Second_With_Beep:
 10221                           	opt stack 0
 10222                           tblptru	equ	0xFF8
 10223                           tblptrh	equ	0xFF7
 10224                           tblptrl	equ	0xFF6
 10225                           tablat	equ	0xFF5
 10226                           prodh	equ	0xFF4
 10227                           prodl	equ	0xFF3
 10228                           intcon	equ	0xFF2
 10229                           intcon2	equ	0xFF1
 10230                           intcon3	equ	0xFF0
 10231                           postinc0	equ	0xFEE
 10232                           wreg	equ	0xFE8
 10233                           postdec1	equ	0xFE5
 10234                           fsr1l	equ	0xFE1
 10235                           indf2	equ	0xFDF
 10236                           postinc2	equ	0xFDE
 10237                           fsr2h	equ	0xFDA
 10238                           fsr2l	equ	0xFD9
 10239                           status	equ	0xFD8
 10240                           
 10241 ;; *************** function _Wait_Half_Second *****************
 10242 ;; Defined at:
 10243 ;;		line 615 in file "Lab9.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;		None
 10246 ;; Auto vars:     Size  Location     Type
 10247 ;;		None
 10248 ;; Return value:  Size  Location     Type
 10249 ;;		None               void
 10250 ;; Registers used:
 10251 ;;		wreg, status,2
 10252 ;; Tracked objects:
 10253 ;;		On entry : 0/0
 10254 ;;		On exit  : 0/0
 10255 ;;		Unchanged: 0/0
 10256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;Total ram usage:        0 bytes
 10262 ;; Hardware stack levels used:    1
 10263 ;; Hardware stack levels required when called:    2
 10264 ;; This function calls:
 10265 ;;		Nothing
 10266 ;; This function is called by:
 10267 ;;		_Wait_One_Second
 10268 ;;		_Wait_One_Second_With_Beep
 10269 ;;		_Old_Wait_One_Second
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           	psect	text54
 10274  002548                     __ptext54:
 10275                           	opt stack 0
 10276  002548                     _Wait_Half_Second:
 10277                           	opt stack 25
 10278                           
 10279                           ;Lab9.c: 617: T0CON = 0x03;
 10280                           
 10281                           ;incstack = 0
 10282  002548  0E03               	movlw	3
 10283  00254A  6ED5               	movwf	4053,c	;volatile
 10284                           
 10285                           ;Lab9.c: 618: TMR0L = 0xDB;
 10286  00254C  0EDB               	movlw	219
 10287  00254E  6ED6               	movwf	4054,c	;volatile
 10288                           
 10289                           ;Lab9.c: 619: TMR0H = 0x0B;
 10290  002550  0E0B               	movlw	11
 10291  002552  6ED7               	movwf	4055,c	;volatile
 10292                           
 10293                           ;Lab9.c: 620: INTCONbits.TMR0IF = 0;
 10294  002554  94F2               	bcf	intcon,2,c	;volatile
 10295                           
 10296                           ;Lab9.c: 621: T0CONbits.TMR0ON = 1;
 10297  002556  8ED5               	bsf	4053,7,c	;volatile
 10298                           
 10299                           ;Lab9.c: 622: while (INTCONbits.TMR0IF == 0);
 10300  002558  D000               	goto	l497
 10301  00255A                     l497:
 10302  00255A  A4F2               	btfss	intcon,2,c	;volatile
 10303  00255C  D7FE               	goto	l497
 10304                           
 10305                           ;Lab9.c: 623: T0CONbits.TMR0ON = 0;
 10306  00255E  9ED5               	bcf	4053,7,c	;volatile
 10307  002560  0012               	return		;funcret
 10308  002562                     __end_of_Wait_Half_Second:
 10309                           	opt stack 0
 10310                           tblptru	equ	0xFF8
 10311                           tblptrh	equ	0xFF7
 10312                           tblptrl	equ	0xFF6
 10313                           tablat	equ	0xFF5
 10314                           prodh	equ	0xFF4
 10315                           prodl	equ	0xFF3
 10316                           intcon	equ	0xFF2
 10317                           intcon2	equ	0xFF1
 10318                           intcon3	equ	0xFF0
 10319                           postinc0	equ	0xFEE
 10320                           wreg	equ	0xFE8
 10321                           postdec1	equ	0xFE5
 10322                           fsr1l	equ	0xFE1
 10323                           indf2	equ	0xFDF
 10324                           postinc2	equ	0xFDE
 10325                           fsr2h	equ	0xFDA
 10326                           fsr2l	equ	0xFD9
 10327                           status	equ	0xFD8
 10328                           
 10329 ;; *************** function _Deactivate_Buzzer *****************
 10330 ;; Defined at:
 10331 ;;		line 469 in file "Lab9.c"
 10332 ;; Parameters:    Size  Location     Type
 10333 ;;		None
 10334 ;; Auto vars:     Size  Location     Type
 10335 ;;		None
 10336 ;; Return value:  Size  Location     Type
 10337 ;;		None               void
 10338 ;; Registers used:
 10339 ;;		wreg, status,2
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10349 ;;Total ram usage:        0 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    2
 10352 ;; This function calls:
 10353 ;;		Nothing
 10354 ;; This function is called by:
 10355 ;;		_Wait_One_Second_With_Beep
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           	psect	text55
 10360  002636                     __ptext55:
 10361                           	opt stack 0
 10362  002636                     _Deactivate_Buzzer:
 10363                           	opt stack 25
 10364                           
 10365                           ;Lab9.c: 471: CCP2CON = 0x0;
 10366                           
 10367                           ;incstack = 0
 10368  002636  0E00               	movlw	0
 10369  002638  6EBA               	movwf	4026,c	;volatile
 10370                           
 10371                           ;Lab9.c: 472: PORTBbits.RB3 = 0;
 10372  00263A  9681               	bcf	3969,3,c	;volatile
 10373  00263C  0012               	return		;funcret
 10374  00263E                     __end_of_Deactivate_Buzzer:
 10375                           	opt stack 0
 10376                           tblptru	equ	0xFF8
 10377                           tblptrh	equ	0xFF7
 10378                           tblptrl	equ	0xFF6
 10379                           tablat	equ	0xFF5
 10380                           prodh	equ	0xFF4
 10381                           prodl	equ	0xFF3
 10382                           intcon	equ	0xFF2
 10383                           intcon2	equ	0xFF1
 10384                           intcon3	equ	0xFF0
 10385                           postinc0	equ	0xFEE
 10386                           wreg	equ	0xFE8
 10387                           postdec1	equ	0xFE5
 10388                           fsr1l	equ	0xFE1
 10389                           indf2	equ	0xFDF
 10390                           postinc2	equ	0xFDE
 10391                           fsr2h	equ	0xFDA
 10392                           fsr2l	equ	0xFD9
 10393                           status	equ	0xFD8
 10394                           
 10395 ;; *************** function _Activate_Buzzer *****************
 10396 ;; Defined at:
 10397 ;;		line 461 in file "Lab9.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;		None
 10402 ;; Return value:  Size  Location     Type
 10403 ;;		None               void
 10404 ;; Registers used:
 10405 ;;		wreg, status,2
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;Total ram usage:        0 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    2
 10418 ;; This function calls:
 10419 ;;		Nothing
 10420 ;; This function is called by:
 10421 ;;		_Wait_One_Second_With_Beep
 10422 ;; This function uses a non-reentrant model
 10423 ;;
 10424                           
 10425                           	psect	text56
 10426  0025C8                     __ptext56:
 10427                           	opt stack 0
 10428  0025C8                     _Activate_Buzzer:
 10429                           	opt stack 25
 10430                           
 10431                           ;Lab9.c: 463: PR2 = 0b11111001;
 10432                           
 10433                           ;incstack = 0
 10434  0025C8  0EF9               	movlw	249
 10435  0025CA  6ECB               	movwf	4043,c	;volatile
 10436                           
 10437                           ;Lab9.c: 464: T2CON = 0b00000101;
 10438  0025CC  0E05               	movlw	5
 10439  0025CE  6ECA               	movwf	4042,c	;volatile
 10440                           
 10441                           ;Lab9.c: 465: CCPR2L = 0b01001010;
 10442  0025D0  0E4A               	movlw	74
 10443  0025D2  6EBB               	movwf	4027,c	;volatile
 10444                           
 10445                           ;Lab9.c: 466: CCP2CON = 0b00111100;
 10446  0025D4  0E3C               	movlw	60
 10447  0025D6  6EBA               	movwf	4026,c	;volatile
 10448  0025D8  0012               	return		;funcret
 10449  0025DA                     __end_of_Activate_Buzzer:
 10450                           	opt stack 0
 10451                           tblptru	equ	0xFF8
 10452                           tblptrh	equ	0xFF7
 10453                           tblptrl	equ	0xFF6
 10454                           tablat	equ	0xFF5
 10455                           prodh	equ	0xFF4
 10456                           prodl	equ	0xFF3
 10457                           intcon	equ	0xFF2
 10458                           intcon2	equ	0xFF1
 10459                           intcon3	equ	0xFF0
 10460                           postinc0	equ	0xFEE
 10461                           wreg	equ	0xFE8
 10462                           postdec1	equ	0xFE5
 10463                           fsr1l	equ	0xFE1
 10464                           indf2	equ	0xFDF
 10465                           postinc2	equ	0xFDE
 10466                           fsr2h	equ	0xFDA
 10467                           fsr2l	equ	0xFD9
 10468                           status	equ	0xFD8
 10469                           
 10470 ;; *************** function _chkisr *****************
 10471 ;; Defined at:
 10472 ;;		line 292 in file "Lab9.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;		None
 10475 ;; Auto vars:     Size  Location     Type
 10476 ;;		None
 10477 ;; Return value:  Size  Location     Type
 10478 ;;		None               void
 10479 ;; Registers used:
 10480 ;;		wreg, status,2, status,0, cstack
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;Total ram usage:       14 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    1
 10493 ;; This function calls:
 10494 ;;		_INT0_ISR
 10495 ;;		_INT1_ISR
 10496 ;;		_INT2_ISR
 10497 ;; This function is called by:
 10498 ;;		Interrupt level 2
 10499 ;; This function uses a non-reentrant model
 10500 ;;
 10501                           
 10502                           	psect	intcode
 10503  000008                     __pintcode:
 10504                           	opt stack 0
 10505  000008                     _chkisr:
 10506                           	opt stack 18
 10507                           
 10508                           ;incstack = 0
 10509  000008  CFFA F001          	movff	pclath,??_chkisr
 10510  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 10511  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 10512  000014  EDB3  F00E         	call	int_func,f	;refresh shadow registers
 10513                           pclatu	equ	0xFFB
 10514                           pclath	equ	0xFFA
 10515                           tblptru	equ	0xFF8
 10516                           tblptrh	equ	0xFF7
 10517                           tblptrl	equ	0xFF6
 10518                           tablat	equ	0xFF5
 10519                           prodh	equ	0xFF4
 10520                           prodl	equ	0xFF3
 10521                           intcon	equ	0xFF2
 10522                           intcon2	equ	0xFF1
 10523                           intcon3	equ	0xFF0
 10524                           postinc0	equ	0xFEE
 10525                           fsr0l	equ	0xFE9
 10526                           wreg	equ	0xFE8
 10527                           postdec1	equ	0xFE5
 10528                           fsr1l	equ	0xFE1
 10529                           indf2	equ	0xFDF
 10530                           postinc2	equ	0xFDE
 10531                           fsr2h	equ	0xFDA
 10532                           fsr2l	equ	0xFD9
 10533                           status	equ	0xFD8
 10534                           
 10535                           	psect	intcode_body
 10536  001D66                     __pintcode_body:
 10537                           	opt stack 18
 10538  001D66                     int_func:
 10539                           	opt stack 18
 10540  001D66  0006               	pop		; remove dummy address from shadow register refresh
 10541  001D68  CFEA F004          	movff	fsr0h,??_chkisr+3
 10542  001D6C  CFE1 F005          	movff	fsr1l,??_chkisr+4
 10543  001D70  CFE2 F006          	movff	fsr1h,??_chkisr+5
 10544  001D74  CFD9 F007          	movff	fsr2l,??_chkisr+6
 10545  001D78  CFDA F008          	movff	fsr2h,??_chkisr+7
 10546  001D7C  CFF3 F009          	movff	prodl,??_chkisr+8
 10547  001D80  CFF4 F00A          	movff	prodh,??_chkisr+9
 10548  001D84  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 10549  001D88  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 10550  001D8C  CFF8 F00D          	movff	tblptru,??_chkisr+12
 10551  001D90  CFF5 F00E          	movff	tablat,??_chkisr+13
 10552                           
 10553                           ;Lab9.c: 294: if (INTCONbits.INT0IF == 1) INT0_ISR();
 10554  001D94  A2F2               	btfss	intcon,1,c	;volatile
 10555  001D96  D003               	goto	i2l2662
 10556  001D98  ECF6  F012         	call	_INT0_ISR	;wreg free
 10557  001D9C  D000               	goto	i2l2662
 10558  001D9E                     i2l2662:
 10559                           
 10560                           ;Lab9.c: 295: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 10561  001D9E  A0F0               	btfss	intcon3,0,c	;volatile
 10562  001DA0  D003               	goto	i2l2666
 10563  001DA2  ECED  F012         	call	_INT1_ISR	;wreg free
 10564  001DA6  D000               	goto	i2l2666
 10565  001DA8                     i2l2666:
 10566                           
 10567                           ;Lab9.c: 296: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 10568  001DA8  A2F0               	btfss	intcon3,1,c	;volatile
 10569  001DAA  D003               	goto	i2l394
 10570  001DAC  EC1F  F013         	call	_INT2_ISR	;wreg free
 10571  001DB0  D000               	goto	i2l394
 10572  001DB2                     i2l394:
 10573  001DB2  C00E  FFF5         	movff	??_chkisr+13,tablat
 10574  001DB6  C00D  FFF8         	movff	??_chkisr+12,tblptru
 10575  001DBA  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 10576  001DBE  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 10577  001DC2  C00A  FFF4         	movff	??_chkisr+9,prodh
 10578  001DC6  C009  FFF3         	movff	??_chkisr+8,prodl
 10579  001DCA  C008  FFDA         	movff	??_chkisr+7,fsr2h
 10580  001DCE  C007  FFD9         	movff	??_chkisr+6,fsr2l
 10581  001DD2  C006  FFE2         	movff	??_chkisr+5,fsr1h
 10582  001DD6  C005  FFE1         	movff	??_chkisr+4,fsr1l
 10583  001DDA  C004  FFEA         	movff	??_chkisr+3,fsr0h
 10584  001DDE  C003  FFE9         	movff	??_chkisr+2,fsr0l
 10585  001DE2  C002  FFFB         	movff	??_chkisr+1,pclatu
 10586  001DE6  C001  FFFA         	movff	??_chkisr,pclath
 10587  001DEA  0011               	retfie		f
 10588  001DEC                     __end_of_chkisr:
 10589                           	opt stack 0
 10590                           pclatu	equ	0xFFB
 10591                           pclath	equ	0xFFA
 10592                           tblptru	equ	0xFF8
 10593                           tblptrh	equ	0xFF7
 10594                           tblptrl	equ	0xFF6
 10595                           tablat	equ	0xFF5
 10596                           prodh	equ	0xFF4
 10597                           prodl	equ	0xFF3
 10598                           intcon	equ	0xFF2
 10599                           intcon2	equ	0xFF1
 10600                           intcon3	equ	0xFF0
 10601                           postinc0	equ	0xFEE
 10602                           fsr0h	equ	0xFEA
 10603                           fsr0l	equ	0xFE9
 10604                           wreg	equ	0xFE8
 10605                           postdec1	equ	0xFE5
 10606                           fsr1h	equ	0xFE2
 10607                           fsr1l	equ	0xFE1
 10608                           indf2	equ	0xFDF
 10609                           postinc2	equ	0xFDE
 10610                           fsr2h	equ	0xFDA
 10611                           fsr2l	equ	0xFD9
 10612                           status	equ	0xFD8
 10613                           
 10614 ;; *************** function _INT2_ISR *****************
 10615 ;; Defined at:
 10616 ;;		line 286 in file "Lab9.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;		None
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;		None
 10621 ;; Return value:  Size  Location     Type
 10622 ;;		None               void
 10623 ;; Registers used:
 10624 ;;		wreg, status,2
 10625 ;; Tracked objects:
 10626 ;;		On entry : 0/0
 10627 ;;		On exit  : 0/0
 10628 ;;		Unchanged: 0/0
 10629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;Total ram usage:        0 bytes
 10635 ;; Hardware stack levels used:    1
 10636 ;; This function calls:
 10637 ;;		Nothing
 10638 ;; This function is called by:
 10639 ;;		_chkisr
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           	psect	text58
 10644  00263E                     __ptext58:
 10645                           	opt stack 0
 10646  00263E                     _INT2_ISR:
 10647                           	opt stack 18
 10648                           
 10649                           ;Lab9.c: 288: INTCON3bits.INT2IF=0;
 10650                           
 10651                           ;incstack = 0
 10652  00263E  92F0               	bcf	intcon3,1,c	;volatile
 10653                           
 10654                           ;Lab9.c: 289: FLASHING_REQUEST = 1;
 10655  002640  0E01               	movlw	1
 10656  002642  6E65               	movwf	_FLASHING_REQUEST,c
 10657  002644  0012               	return		;funcret
 10658  002646                     __end_of_INT2_ISR:
 10659                           	opt stack 0
 10660                           pclatu	equ	0xFFB
 10661                           pclath	equ	0xFFA
 10662                           tblptru	equ	0xFF8
 10663                           tblptrh	equ	0xFF7
 10664                           tblptrl	equ	0xFF6
 10665                           tablat	equ	0xFF5
 10666                           prodh	equ	0xFF4
 10667                           prodl	equ	0xFF3
 10668                           intcon	equ	0xFF2
 10669                           intcon2	equ	0xFF1
 10670                           intcon3	equ	0xFF0
 10671                           postinc0	equ	0xFEE
 10672                           fsr0h	equ	0xFEA
 10673                           fsr0l	equ	0xFE9
 10674                           wreg	equ	0xFE8
 10675                           postdec1	equ	0xFE5
 10676                           fsr1h	equ	0xFE2
 10677                           fsr1l	equ	0xFE1
 10678                           indf2	equ	0xFDF
 10679                           postinc2	equ	0xFDE
 10680                           fsr2h	equ	0xFDA
 10681                           fsr2l	equ	0xFD9
 10682                           status	equ	0xFD8
 10683                           
 10684 ;; *************** function _INT1_ISR *****************
 10685 ;; Defined at:
 10686 ;;		line 277 in file "Lab9.c"
 10687 ;; Parameters:    Size  Location     Type
 10688 ;;		None
 10689 ;; Auto vars:     Size  Location     Type
 10690 ;;		None
 10691 ;; Return value:  Size  Location     Type
 10692 ;;		None               void
 10693 ;; Registers used:
 10694 ;;		wreg, status,2, status,0
 10695 ;; Tracked objects:
 10696 ;;		On entry : 0/0
 10697 ;;		On exit  : 0/0
 10698 ;;		Unchanged: 0/0
 10699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10704 ;;Total ram usage:        0 bytes
 10705 ;; Hardware stack levels used:    1
 10706 ;; This function calls:
 10707 ;;		Nothing
 10708 ;; This function is called by:
 10709 ;;		_chkisr
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text59
 10714  0025DA                     __ptext59:
 10715                           	opt stack 0
 10716  0025DA                     _INT1_ISR:
 10717                           	opt stack 18
 10718                           
 10719                           ;Lab9.c: 279: INTCON3bits.INT1IF=0;
 10720                           
 10721                           ;incstack = 0
 10722  0025DA  90F0               	bcf	intcon3,0,c	;volatile
 10723                           
 10724                           ;Lab9.c: 281: if(MODE == 1){
 10725  0025DC  045E               	decf	_MODE,w,c
 10726  0025DE  105F               	iorwf	_MODE+1,w,c
 10727  0025E0  A4D8               	btfss	status,2,c
 10728  0025E2  D003               	goto	i2l385
 10729                           
 10730                           ;Lab9.c: 282: EW_PED_SW = 1;
 10731  0025E4  0E01               	movlw	1
 10732  0025E6  6E63               	movwf	_EW_PED_SW,c
 10733  0025E8  D000               	goto	i2l385
 10734  0025EA                     i2l385:
 10735  0025EA  0012               	return		;funcret
 10736  0025EC                     __end_of_INT1_ISR:
 10737                           	opt stack 0
 10738                           pclatu	equ	0xFFB
 10739                           pclath	equ	0xFFA
 10740                           tblptru	equ	0xFF8
 10741                           tblptrh	equ	0xFF7
 10742                           tblptrl	equ	0xFF6
 10743                           tablat	equ	0xFF5
 10744                           prodh	equ	0xFF4
 10745                           prodl	equ	0xFF3
 10746                           intcon	equ	0xFF2
 10747                           intcon2	equ	0xFF1
 10748                           intcon3	equ	0xFF0
 10749                           postinc0	equ	0xFEE
 10750                           fsr0h	equ	0xFEA
 10751                           fsr0l	equ	0xFE9
 10752                           wreg	equ	0xFE8
 10753                           postdec1	equ	0xFE5
 10754                           fsr1h	equ	0xFE2
 10755                           fsr1l	equ	0xFE1
 10756                           indf2	equ	0xFDF
 10757                           postinc2	equ	0xFDE
 10758                           fsr2h	equ	0xFDA
 10759                           fsr2l	equ	0xFD9
 10760                           status	equ	0xFD8
 10761                           
 10762 ;; *************** function _INT0_ISR *****************
 10763 ;; Defined at:
 10764 ;;		line 268 in file "Lab9.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;		None
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;		None
 10769 ;; Return value:  Size  Location     Type
 10770 ;;		None               void
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, status,0
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10782 ;;Total ram usage:        0 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		_chkisr
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text60
 10792  0025EC                     __ptext60:
 10793                           	opt stack 0
 10794  0025EC                     _INT0_ISR:
 10795                           	opt stack 18
 10796                           
 10797                           ;Lab9.c: 270: INTCONbits.INT0IF=0;
 10798                           
 10799                           ;incstack = 0
 10800  0025EC  92F2               	bcf	intcon,1,c	;volatile
 10801                           
 10802                           ;Lab9.c: 272: if(MODE == 1){
 10803  0025EE  045E               	decf	_MODE,w,c
 10804  0025F0  105F               	iorwf	_MODE+1,w,c
 10805  0025F2  A4D8               	btfss	status,2,c
 10806  0025F4  D003               	goto	i2l381
 10807                           
 10808                           ;Lab9.c: 273: NS_PED_SW = 1;
 10809  0025F6  0E01               	movlw	1
 10810  0025F8  6E66               	movwf	_NS_PED_SW,c
 10811  0025FA  D000               	goto	i2l381
 10812  0025FC                     i2l381:
 10813  0025FC  0012               	return		;funcret
 10814  0025FE                     __end_of_INT0_ISR:
 10815                           	opt stack 0
 10816                           pclatu	equ	0xFFB
 10817                           pclath	equ	0xFFA
 10818                           tblptru	equ	0xFF8
 10819                           tblptrh	equ	0xFF7
 10820                           tblptrl	equ	0xFF6
 10821                           tablat	equ	0xFF5
 10822                           prodh	equ	0xFF4
 10823                           prodl	equ	0xFF3
 10824                           intcon	equ	0xFF2
 10825                           intcon2	equ	0xFF1
 10826                           intcon3	equ	0xFF0
 10827                           postinc0	equ	0xFEE
 10828                           fsr0h	equ	0xFEA
 10829                           fsr0l	equ	0xFE9
 10830                           wreg	equ	0xFE8
 10831                           postdec1	equ	0xFE5
 10832                           fsr1h	equ	0xFE2
 10833                           fsr1l	equ	0xFE1
 10834                           indf2	equ	0xFDF
 10835                           postinc2	equ	0xFDE
 10836                           fsr2h	equ	0xFDA
 10837                           fsr2l	equ	0xFD9
 10838                           status	equ	0xFD8
 10839                           pclatu	equ	0xFFB
 10840                           pclath	equ	0xFFA
 10841                           tblptru	equ	0xFF8
 10842                           tblptrh	equ	0xFF7
 10843                           tblptrl	equ	0xFF6
 10844                           tablat	equ	0xFF5
 10845                           prodh	equ	0xFF4
 10846                           prodl	equ	0xFF3
 10847                           intcon	equ	0xFF2
 10848                           intcon2	equ	0xFF1
 10849                           intcon3	equ	0xFF0
 10850                           postinc0	equ	0xFEE
 10851                           fsr0h	equ	0xFEA
 10852                           fsr0l	equ	0xFE9
 10853                           wreg	equ	0xFE8
 10854                           postdec1	equ	0xFE5
 10855                           fsr1h	equ	0xFE2
 10856                           fsr1l	equ	0xFE1
 10857                           indf2	equ	0xFDF
 10858                           postinc2	equ	0xFDE
 10859                           fsr2h	equ	0xFDA
 10860                           fsr2l	equ	0xFD9
 10861                           status	equ	0xFD8
 10862                           
 10863                           	psect	rparam
 10864  0000                     pclatu	equ	0xFFB
 10865                           pclath	equ	0xFFA
 10866                           tblptru	equ	0xFF8
 10867                           tblptrh	equ	0xFF7
 10868                           tblptrl	equ	0xFF6
 10869                           tablat	equ	0xFF5
 10870                           prodh	equ	0xFF4
 10871                           prodl	equ	0xFF3
 10872                           intcon	equ	0xFF2
 10873                           intcon2	equ	0xFF1
 10874                           intcon3	equ	0xFF0
 10875                           postinc0	equ	0xFEE
 10876                           fsr0h	equ	0xFEA
 10877                           fsr0l	equ	0xFE9
 10878                           wreg	equ	0xFE8
 10879                           postdec1	equ	0xFE5
 10880                           fsr1h	equ	0xFE2
 10881                           fsr1l	equ	0xFE1
 10882                           indf2	equ	0xFDF
 10883                           postinc2	equ	0xFDE
 10884                           fsr2h	equ	0xFDA
 10885                           fsr2l	equ	0xFD9
 10886                           status	equ	0xFD8


Data Sizes:
    Strings     105
    Constant    475
    Data        35
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     113
    BANK0           128     14      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Initialize_Screen->_drawtext
    _Initialize_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _init_UART->_OpenUSART
    _update_LCD_count->_drawtext
    _Wait_One_Second->_drawtext
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _Day_Mode->_PED_Control
    _Day_Mode->_Wait_N_Seconds
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  633592
                                             12 BANK0      2     2      0
                           _Day_Mode
                        _Do_Flashing
                            _Do_Init
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  186838
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   66298
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     375
                           _Init_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  158530
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  215214
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   87270
                                             10 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28178
                                              7 BANK0      2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   58962
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   31702
                                              7 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2718
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1929
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                              0 BANK0      3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   28376
                                              9 BANK0      3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28054
                                              7 BANK0      2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25331
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10774
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     882
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1213
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1225
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Wait_Half_Second
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___wmul
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Do_Init
     _Init_ADC
     _init_IO
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      38       5       43.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      34        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 08 20:41:32 2021

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 2578                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 00A3                                 l203 115E  
                               l212 10B4                                 l205 1038  
                               l127 20CC                                 l240 1760  
                               l137 25B0                                 l241 16CC  
                               l251 0D98                                 l243 173C  
                               l244 175E                                 l181 2472  
                               l430 221A                                 l423 24F0  
                               l512 0AAA                                 l432 221E  
                               l433 2224                                 l441 21D6  
                               l521 1008                                 l450 22AE  
                               l434 2228                                 l442 21DC  
                               l426 2510                                 l187 1D64  
                               l451 22B4                                 l435 224C  
                               l443 21E0                                 l452 22B8  
                               l460 226C                                 l444 2204  
                               l269 11CE                                 l453 22DC  
                               l461 2270                                 l285 1CDC  
                               l462 2294                                 l439 21D2  
                               l528 1906                                 l448 22AA  
                               l480 1836                                 l457 2262  
                               l459 2266                                 l900 19A4  
                               l581 24C4                                 l573 1F36  
                               l485 1B28                                 l574 1F38  
                               l575 1F42                                 l576 1F44  
                               l497 255A                                 l569 1F1C  
                               l578 1F5E                                 l774 1C54  
                               l961 1684                                 l970 1BBE  
                               l787 1EEE                                 l964 1650  
                               l799 23D8                                 l889 19CC  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 00A9  
                               _PR2 000FCB                   _Deactivate_Buzzer 2636  
                               _dir 006F                                 _nbr 0080  
                               _txt 0060                      drawFastHLine@w 0017  
                    drawFastHLine@x 0020                      drawFastHLine@y 0016  
                      ___awmod@sign 0014             __end_of_update_LCD_misc 0CD6  
                               wreg 000FE8                  ??_Wait_Half_Second 000F  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 001B  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize 2474  
                      ___ftdiv@cntr 0024                        ___ftdiv@sign 0029  
                      __CFG_WDT$OFF 000000                      drawFastVLine@h 0017  
                              l1138 239C                      drawFastVLine@x 0020  
                    drawFastVLine@y 0016                                l4212 2454  
                              l4204 1D4C                                l4220 217E  
                              l4300 1918                                l4206 1D5A  
                              l4224 219A                                l4240 1026  
                              l4312 196C                                l4304 1928  
                              l4250 1044                                l5026 22BE  
                              l5050 2276                                l5034 222E  
                              l5042 21E6                                l4322 19AC  
                              l4314 198C                                l4306 1934  
                              l5210 203C                                l4244 1034  
                              l4236 101A                                l4340 13D4  
                              l4316 1998                                l4308 1954  
                              l4420 15EA                                l4190 1CEE  
                              l4254 1074                                l4246 103C  
                              l5070 230E                                l5062 22F8  
                              l4414 15C2                                l5302 17FA  
                              l5206 202C                                l4256 10A8  
                              l4352 1424                                l4328 19BE  
                              l4440 162A                                l4416 15DC  
                              l4600 0B84                                l5080 23F0  
                              l5232 207A                                l4194 1D26  
                              l4274 112A                                l4266 10D6  
                              l4282 115A                                l4258 10AC  
                              l4290 2370                                l5058 22EA  
                              l4450 165E                                l4276 1152  
                              l4268 10FE                                l4364 1494  
                              l4356 1442                                l4516 0D7E  
                              l4612 0BAE                                l4604 0B92  
                              l5076 23E2                                l4702 1ED4  
                              l4366 149C                                l4550 241C  
                              l4462 23B4                                l4470 1B5C  
                              l4614 0BB4                                l5086 2404  
                              l5350 1AE6                                l4288 236A  
                              l4544 0E6E                                l4552 2426  
                              l4480 1BBA                                l4608 0BA0  
                              l4650 1BFE                                l4706 1EE4  
                              l4394 1230                                l4378 11B4  
                              l4474 1B8E                                l4652 1C08  
                              l4644 1BE8                                l5276 17A0  
                              l4812 1704                                l5620 1A68  
                              l4670 1C4A                                l4662 1C2E  
                              l4654 1C10                                l4638 1BD6  
                              l4398 1282                                l5294 17DC  
                              l4806 1696                                l5614 1A56  
                              l4592 0B68                                l4832 174A  
                              l4824 1732                                l4666 1C3A  
                              l4690 1EA0                                l4682 1E84  
                              l4850 1C9E                                l5618 1A62  
                              l4692 1EAA                                l4940 08FA  
                              l4596 0B76                                l4588 0B5A  
                              l4860 1CC4                                l4828 1740  
                              l4694 1EB2                                l4686 1E92  
                              l4950 183E                                l4870 1F02  
                              l4862 1CD2                                l4846 1C66  
                              l4838 175A                                l4960 18F4  
                              l4944 09D2                                l4936 0824  
                              l4698 1EC8                                l4954 1898  
                              l4970 0E8A                                l4890 1F2E  
                              l4882 1F20                                l4874 1F0C  
                              l4982 0F8E                                l4974 0EE0  
                              l4878 1F14                                l4978 0F36  
                              l4988 0FEA                                STR_1 FF96  
                              STR_2 FFE5                                STR_3 FFEB  
                              STR_4 FFEF                                STR_5 FFFD  
                              STR_6 FFCD                                STR_7 FFDE  
                              STR_8 FFC1                                STR_9 FFD7  
                              u3020 13FE                                u3121 15B4  
                              u3141 15D2                                u3260 0B34  
                              u3500 16FA                                u3270 0B36  
                              u2730 1D1C                                u3570 1C94  
                              u3490 16C4                                u2880 110C  
                              _MODE 005E                                u3980 1A50  
                              u3990 1A52                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 19CE                                _font FDBB  
                      ___ftpack@arg 000F                        ___ftpack@exp 0012  
                              fsr0h 000FEA                                fsr1h 000FE2  
                    ??_get_full_ADC 0011                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 0041                                _volt 005B  
                   drawFastHLine@hi 001E                     drawFastHLine@lo 001F  
          __end_of_update_LCD_color 0AAC                                pclat 000FFA  
          __end_of_update_LCD_count 100A                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0018                     __end_of_Do_Init 24EC  
                   ??_drawFastHLine 001A                     ??_drawFastVLine 001A  
                      ___param_bank 000010                        _Act_Mode_Txt 004B  
                  __end_of_INT0_ISR 25FE                    __end_of_INT1_ISR 25EC  
                  __end_of_INT2_ISR 2646                         _Do_Flashing 2028  
         __end_of_Deactivate_Buzzer 263E                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                         _SW_EWLT_Txt 0051  
                       _SW_MODE_Txt 0055                               ?_main 0001  
                   __end_of___awdiv 1C56                     drawCircle@ddF_x 0024  
                             STR_10 FFF7                     drawCircle@ddF_y 0026  
                             STR_11 FFF3                               STR_12 FFAC  
                             STR_13 FFFD                               STR_14 FFFB  
                   __end_of___awmod 1EF0                     __end_of___ftdiv 1686  
                             _T0CON 000FD5                     ___awdiv@divisor 0011  
                             _T2CON 000FCA                               _T3CON 000FB1  
                             i2l381 25FC                               i2l385 25EA  
                             i2l394 1DB2                     ___awdiv@counter 0013  
                   drawCircle@color 0020                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _SPBRG 000FAF                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 0062                        ?_PED_Control 00AA  
                             _Rcmd1 1298                               _Rcmd3 14B2  
                       _SW_NSLT_Txt 0057                       drawRect@color 0029  
                     ___awtoft@sign 001A                     __end_of_init_IO 2578  
                             _font2 FEBA               fillCircleHelper@ddF_x 002F  
             fillCircleHelper@ddF_y 0031                   ??_Wait_One_Second 0041  
                     ___ftpack@sign 0013               fillCircleHelper@delta 0029  
             fillCircleHelper@color 002B                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 0041                    __end_of_Day_Mode 1838  
                    _Wait_N_Seconds 23DA                     write_data@data_ 0011  
                   __initialization 1FC6                        __end_of_main 1A7C  
                      __end_of_font FEBA                    __end_of_Init_ADC 262C  
                  __end_of_Rcmd2red 2360                          _Night_Mode 1A7C  
                  __end_of_Set_EWLT 2296                    __end_of_Set_NSLT 2206  
                            ??_main 0041                       __activetblptr 000002  
             Wait_N_Seconds@seconds 00AB                   __end_of_LCD_Reset 25C8  
                      _SW_EWPED_Txt 0053           ??_TFT_GreenTab_Initialize 001B  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 00AB  
                  ___awdiv@dividend 000F                    __end_of___awtoft 23DA  
                  __end_of___ftpack 19CE                              i2l2662 1D9E  
                         ??_Do_Init 0012                              i2l2666 1DA8  
                            _OSCCON 000FD3                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds 2412  
                      _SW_NSPED_Txt 0059                    __end_of_delay_ms 20D4  
                            _Set_EW 2296                              _Set_NS 2206  
                  __end_of_fillRect 21BE                    __end_of_drawChar 1160  
                  __end_of_drawRect 1FC6                  __size_of_OpenUSART 0070  
                            ___ftge 1B2A            __size_of_Activate_Buzzer 0012  
                            ___wmul 249E                           ??___awdiv 0013  
         __size_of_fillCircleHelper 0138                    __end_of_drawtext 14B2  
                         ??___awmod 0013                           ??___ftdiv 0021  
                            _chkisr 0008                              _buffer 0082  
                            clear_0 1FCC                              clear_1 1FD8  
                  ___awdiv@quotient 0015                     ___awmod@divisor 0011  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0013  
                      drawtext@size 003E                              _strcpy 2412  
                            _strlen 2360                __end_of_get_full_ADC 2512  
                         ??_init_IO 000F                        __pdataCOMRAM 0041  
__size_of_Wait_One_Second_With_Beep 0016                         Set_EW@color 00A4  
                      __mediumconst FDBA                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                  __end_of_spiwrite 25B6                         Set_NS@color 00A4  
                        __accesstop 0080             __end_of__initialization 201E  
                         ?_INT0_ISR 0001                           ?_INT1_ISR 0001  
                         ?_INT2_ISR 0001                          ___ftge@ff1 000F  
                        ___ftge@ff2 0012                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 001B  
                        ___ftdiv@f2 001E                          ___ftdiv@f3 0025  
                        ___awtoft@c 0017                       __end_of_Rcmd1 13A8  
                     __end_of_Rcmd3 15A4                      __pcstackCOMRAM 0001  
                      __pidataBANK0 262C                       __end_of_font2 FF96  
                       ?_Night_Mode 0001                      drawPixel@color 0017  
            __size_of_write_command 0010                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_OpenUSART 1F60                __size_of_PED_Control 0044  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
                        ??_INT0_ISR 0001                          ??_INT1_ISR 0001  
         __size_of_Wait_Half_Second 001A                          ??_INT2_ISR 0001  
                   spiwrite@spidata 0010                           ?_Set_EWLT 0001  
                         ?_Set_NSLT 0001                   ?_update_LCD_color 00A1  
                 ?_update_LCD_count 00A8                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0041                  ??_update_LCD_count 0041  
                           ?___ftge 000F                             ?___wmul 000F  
                           ?_chkisr 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA                        ?_Do_Flashing 0001  
         update_LCD_PED_Count@count 00A8                           ?___awtoft 0017  
                         ?___ftpack 000F                     _Wait_One_Second 1DEC  
                        _fillCircle 20D4                             ?_strcpy 000F  
                           ?_strlen 000F                   ??_Activate_Buzzer 000F  
                        _fillScreen 2512                          _drawCircle 0CD6  
                        ??_Day_Mode 0041                           ?_delay_ms 0015  
                         ?_fillRect 0021           update_LCD_count@direction 00A9  
                         ?_drawChar 002C                             _SSPCON1 000FC6  
                         ?_drawRect 0021                             _SSPSTAT 000FC7  
             __end_of_fillRectangle 1762                           ?_drawtext 0037  
                           _SW_EWLT 0068                             _SW_MODE 006A  
                        ??_Init_ADC 000F                             _Do_Init 24C6  
                           _SW_NSLT 006B                          ??_Rcmd2red 0012  
               __size_of_Night_Mode 00AE                       _write_command 260E  
                        ??_Set_EWLT 0041                          ??_Set_NSLT 0041  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0048                     __size_of_Set_NS 0048  
             __end_of_drawFastHLine 1CDE                   __end_of_drawPixel 2474  
             __end_of_drawFastVLine 1D66                    _fillCircleHelper 1160  
                   __size_of___ftge 0096                             ___awdiv 1BC0  
                           ___awmod 1E6E                             ___ftdiv 15A4  
                   __size_of___wmul 0028               __size_of_get_full_ADC 0026  
                   __size_of_chkisr 1DE4                           ?_spiwrite 0001  
                           __pcinit 1FC6                          ??___awtoft 001A  
                        ??___ftpack 0014                             __ramtop 1000  
                           __ptext0 19CE                             __ptext1 1A7C  
                           __ptext2 001C                             __ptext3 2512  
                           __ptext4 1686                             __ptext5 1F60  
                           __ptext6 1C56                             __ptext7 2474  
                           __ptext8 14B2                             __ptext9 2322  
                 __end_of_init_UART 25A2                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO 2562                           _T3CONbits 000FB1  
                  ___awmod@dividend 000F                          ??_delay_ms 0017  
                     drawtext@_text 0038                       drawtext@color 003A  
                        ??_fillRect 0026                          ??_drawChar 0033  
                         _LCD_Reset 25B6                          ??_drawRect 002B  
                     _setAddrWindow 2126                      __pintcode_body 1D66  
                drawFastHLine@color 0018                          delay_ms@ms 0015  
              end_of_initialization 201E                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FDBA  
                           int_func 1D66                           _PED_Count 0067  
                      _get_full_ADC 24EC                        PED_Control@i 00AC  
                         _EW_PED_SW 0063       __size_of_update_LCD_PED_Count 00D0  
           __end_of_Wait_One_Second 1E6E                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 000F  
                           strlen@s 000F                     fillCircle@color 003F  
                       ?_fillCircle 0039                           _PORTAbits 000F80  
                  drawtext@cursor_x 00A7                    drawtext@cursor_y 00A6  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0022                           _NS_PED_SW 0066  
                       ?_drawCircle 001A                          drawChar@bg 0030  
                         _TRISCbits 000F94                      ?_setAddrWindow 0012  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 0041  
                  drawtext@textsize 00A2            __size_of_update_LCD_misc 022A  
                        drawPixel@x 0019                          drawPixel@y 0016  
                  _Wait_Half_Second 2548                         ___ftdiv@exp 0028  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 00AA  
                get_full_ADC@result 0013                   __size_of_INT0_ISR 0012  
                 __size_of_INT1_ISR 0012                   __size_of_INT2_ISR 0008  
                    __end_of_Set_EW 22DE                      __end_of_Set_NS 224E  
                    __end_of___ftge 1BC0                      __end_of___wmul 24C6  
                     delay_ms@count 0019                          _write_data 25FE  
                     __pidataCOMRAM 252E                      __end_of_chkisr 1DEC  
                      ??_Night_Mode 0041            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 003C                __size_of_Do_Flashing 005A  
                    __end_of_strcpy 2444                      __end_of_strlen 239E  
               start_initialization 1FC6                   __size_of_Day_Mode 00D6  
                   ??_write_command 0011                           _OpenUSART 1EF0  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode 1B2A  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 00AC                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0041                            ??_Set_NS 0041  
                 __size_of_Set_EWLT 0048                     _Activate_Buzzer 25C8  
                 __size_of_Set_NSLT 0048                    ?_Wait_One_Second 0001  
                          ??___ftge 0015                            ??___wmul 0013  
                          ??_chkisr 0001                         __pdataBANK0 00AF  
                 update_LCD_misc@ch 00AA                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00B2  
         __size_of_update_LCD_color 0372           __size_of_update_LCD_count 0186  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 005B                       ??_PED_Control 0041  
                   ??_setAddrWindow 0015                       __pcstackBANK0 00A1  
                      _PED_NS_Count 00B5                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 1298                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                            ?_Do_Init 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_OpenUSART 000F                   __size_of_drawRect 0066  
                 __size_of_drawtext 010A                   ??_update_LCD_misc 0041  
                         __pintcode 0008     __end_of_TFT_GreenTab_Initialize 249E  
                     __pmediumconst FDBA                            ?___awdiv 000F  
                          ?___awmod 000F                            ?___ftdiv 001B  
                         __tft_type 006D                           _direction 0070  
                drawFastVLine@color 0018                         ?_write_data 0001  
                         _drawPixel 2444                   __size_of_spiwrite 0014  
                          ?_init_IO 0001                   _Initialize_Screen 001C  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
                         _init_UART 258E                  ?_Initialize_Screen 0001  
                          _FLASHING 0064   __end_of_Wait_One_Second_With_Beep 258E  
               __end_of_PED_Control 2322             __end_of_Activate_Buzzer 25DA  
                          _INT0_ISR 25EC                            _INT1_ISR 25DA  
                          _INT2_ISR 263E                      ___wmul@product 0013  
               ??_Initialize_Screen 0041                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 0045                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                         drawChar@c 002D                           drawChar@i 0036  
                         drawChar@j 0035                        ??_fillCircle 0041  
                         drawChar@x 0034                           drawChar@y 002C  
                        ?_drawPixel 0016              __size_of_fillRectangle 00DC  
                          _NS_Count 0048                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second 2562                   ___wmul@multiplier 000F  
         __end_of_Initialize_Screen 073A                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 004D                       _FlashingS_Txt 004F  
                      ??_drawCircle 0022        __end_of_update_LCD_PED_Count 1908  
                         main@nStep 00AD                            _SW_EWPED 0069  
             update_LCD_color@color 00A1                            _Day_Mode 1762  
                          _SW_NSPED 006C           update_LCD_color@direction 00A2  
                        ?_init_UART 0001              __size_of_drawFastHLine 0088  
                       _INTCON2bits 000FF1                         _INTCON3bits 000FF0  
                         copy_data0 1FF2                           copy_data1 2012  
                         drawtext@i 00A4              __size_of_drawFastVLine 0088  
                         drawtext@x 00A1                           drawtext@y 0037  
                          _Init_ADC 261E                   write_command@cmd_ 0011  
                       ??_OpenUSART 0011                            _Rcmd2red 2322  
                  __size_of_Do_Init 0026                 __size_of_write_data 0010  
                   OpenUSART@config 0011                            _Set_EWLT 224E  
                __end_of_fillCircle 2126                            _Set_NSLT 21BE  
                          __Hrparam 0000                  __end_of_fillScreen 252E  
             update_LCD_count@count 00A8                            __Lrparam 0000  
                __end_of_drawCircle 0E84                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                          ___awtoft 239E                            ___ftpack 1908  
                  _update_LCD_color 073A                    _update_LCD_count 0E84  
                  __size_of_init_IO 0016                         _PED_Control 22DE  
                          _delay_ms 2082                            __ptext10 1298  
                          __ptext11 25B6                            __ptext20 23DA  
                          __ptext12 2082                            __ptext21 0E84  
                          __ptext13 24C6                            __ptext30 21BE  
                          __ptext22 1DEC                            __ptext14 258E  
                          __ptext31 2206                            __ptext23 0AAC  
                          __ptext15 1EF0                            __ptext40 13A8  
                          __ptext32 224E                            __ptext24 24EC  
                          __ptext16 2562                            __ptext41 2360  
                          __ptext33 2296                            __ptext25 1B2A  
                          __ptext17 261E                            __ptext50 249E  
                          __ptext42 100A                            __ptext34 073A  
                          __ptext26 15A4                            __ptext18 2028  
                          __ptext51 1E6E                            __ptext43 2174  
                          __ptext35 20D4                            __ptext27 239E  
                          __ptext19 1762                            __ptext60 25EC  
                          __ptext52 1BC0                            __ptext44 1CDE  
                          __ptext36 1160                            __ptext28 1908  
                          __ptext53 2578                            __ptext45 2444  
                          __ptext37 0CD6                            __ptext29 2412  
                          __ptext54 2548                            __ptext46 2126  
                          __ptext38 22DE                            __ptext55 2636  
                          __ptext47 25FE                            __ptext39 1838  
                          __ptext56 25C8                            __ptext48 260E  
                          __ptext49 25A2                            __ptext58 263E  
                          __ptext59 25DA                            _fillRect 2174  
                          _drawChar 100A                            _drawRect 1F60  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 0065  
                          _colstart 006E                            _drawtext 13A8  
                        strcpy@from 0011                       _fillRectangle 1686  
                  ?_Activate_Buzzer 0001                       __size_of_main 00AE  
                   fillRectangle@hi 001F                     fillRectangle@lo 0020  
                     _drawFastHLine 1C56                       _drawFastVLine 1CDE  
                     ??_Do_Flashing 0041                            _spiwrite 25A2  
                       ??_drawPixel 0019                            _rowstart 0071  
                fillCircleHelper@x0 0021                  fillCircleHelper@y0 0023  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 000F                         ??_init_UART 0012  
                     Set_EWLT@color 00A4                          _EWLT_Count 0042  
                 ?_fillCircleHelper 0021                           spiwrite@x 000F  
       ??_Wait_One_Second_With_Beep 000F                            intlevel2 0000  
                   _update_LCD_misc 0AAC                      ?_fillRectangle 0016  
                ??_fillCircleHelper 002D               __end_of_write_command 261E  
                   fillScreen@color 0022                update_LCD_misc@nStep 00A8  
              _update_LCD_PED_Count 1838             __size_of_Wait_N_Seconds 0038  
                      fillCircle@x0 0039                        fillCircle@y0 003B  
                    ?_drawFastHLine 0016                      fillRectangle@h 0018  
                    fillRectangle@w 0017                      fillRectangle@x 0021  
                    fillRectangle@y 0016                      ?_drawFastVLine 0016  
                 fillCircleHelper@f 0033                   fillCircleHelper@r 0025  
                 fillCircleHelper@x 0035                   fillCircleHelper@y 0037  
                      ??_write_data 0011                       fillRect@color 0024  
          __size_of_Wait_One_Second 0082                            strcpy@cp 0013  
                          strlen@cp 0013                            strcpy@to 000F  
               __end_of_Do_Flashing 2082                       Set_NSLT@color 00A4  
                        _NSLT_Count 00AF                         fillCircle@r 003D  
             __end_of_setAddrWindow 2174                  fillRectangle@color 0019  
                     drawChar@color 002E                  __end_of_write_data 260E  
                      drawChar@line 0033                       ?_get_full_ADC 000F  
                      drawChar@size 0032               ?_update_LCD_PED_Count 00A8  
